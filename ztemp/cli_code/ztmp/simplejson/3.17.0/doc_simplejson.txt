#simplejson_3.17.0
simplejson.compat.BytesIO(self, /, *args, **kwargs)
simplejson.compat.StringIO(self, /, *args, **kwargs)
simplejson.compat.b(s)
simplejson.compat.binary_type(self, /, *args, **kwargs)
simplejson.compat.long_type(self, /, *args, **kwargs)
simplejson.compat.reload_module(module)
simplejson.compat.text_type(self, /, *args, **kwargs)
simplejson.decoder.JSONArray(state, scan_once, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _ws=' \t\n\r')
simplejson.decoder.JSONDecodeError(self, msg, doc, pos, end=None)
simplejson.decoder.JSONDecoder(self, encoding=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)
simplejson.decoder.JSONObject(state, encoding, strict, scan_once, object_hook, object_pairs_hook, memo=None, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _ws=' \t\n\r')
simplejson.decoder.make_scanner(context)
simplejson.decoder.py_scanstring(s, end, encoding=None, strict=True, _b={'"': '"', '\\': '\\', '/': '/', 'b': '\x08', 'f': '\x0c', 'n': '\n', 'r': '\r', 't': '\t'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)
simplejson.decoder.scanstring(s, end, encoding=None, strict=True, _b={'"': '"', '\\': '\\', '/': '/', 'b': '\x08', 'f': '\x0c', 'n': '\n', 'r': '\r', 't': '\t'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)
simplejson.encoder.JSONEncoder(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
simplejson.encoder.JSONEncoderForHTML(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
simplejson.encoder.RawJSON(self, encoded_json)
simplejson.encoder._make_iterencode(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)
simplejson.encoder.binary_type(self, /, *args, **kwargs)
simplejson.encoder.encode_basestring(s, _PY3=True, _q='"')
simplejson.encoder.encode_basestring_ascii(s, _PY3=True)
simplejson.encoder.itemgetter(self, /, *args, **kwargs)
simplejson.encoder.py_encode_basestring_ascii(s, _PY3=True)
simplejson.encoder.text_type(self, /, *args, **kwargs)
simplejson.errors.JSONDecodeError(self, msg, doc, pos, end=None)
simplejson.errors.errmsg(msg, doc, pos, end=None)
simplejson.errors.linecol(doc, pos)
simplejson.raw_json.RawJSON(self, encoded_json)
simplejson.scanner.JSONDecodeError(self, msg, doc, pos, end=None)
simplejson.scanner.make_scanner(context)
simplejson.scanner.py_make_scanner(context)
simplejson.tests.NoExtensionTestSuite(self, tests=())
simplejson.tests.TestMissingSpeedups(self, methodName='runTest')
simplejson.tests.TestMissingSpeedups.setUpClass()
simplejson.tests.TestMissingSpeedups.tearDownClass()
simplejson.tests.additional_tests(suite=None)
