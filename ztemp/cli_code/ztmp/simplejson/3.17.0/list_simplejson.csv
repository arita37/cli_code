module_name,module_version,full_name,prefix,obj_name,obj_doc,object_type,arg_full,0,1,2,3
simplejson,3.17.0,simplejson.compat.BytesIO,compat,BytesIO,"Python Library Documentation: class BytesIO in module io

class BytesIO(_BufferedIOBase)
 |  Buffered I/O implementation using an in-memory bytes buffer.
 |  
 |  Method resolution order:
 |      BytesIO
 |      _BufferedIOBase
 |      _IOBase
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getstate__(...)
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __next__(self, /)
 |      Implement next(self).
 |  
 |  __setstate__(...)
 |  
 |  __sizeof__(...)
 |      __sizeof__() -> int
 |      size of object in memory, in bytes
 |  
 |  close(self, /)
 |      Disable all I/O operations.
 |  
 |  flush(self, /)
 |      Does nothing.
 |  
 |  getbuffer(self, /)
 |      Get a read-write view over the contents of the BytesIO object.
 |  
 |  getvalue(self, /)
 |      Retrieve the entire contents of the BytesIO object.
 |  
 |  isatty(self, /)
 |      Always returns False.
 |      
 |      BytesIO objects are not connected to a TTY-like device.
 |  
 |  read(self, size=None, /)
 |      Read at most size bytes, returned as a bytes object.
 |      
 |      If the size argument is negative, read until EOF is reached.
 |      Return an empty bytes object at EOF.
 |  
 |  read1(self, size, /)
 |      Read at most size bytes, returned as a bytes object.
 |      
 |      If the size argument is negative or omitted, read until EOF is reached.
 |      Return an empty bytes object at EOF.
 |  
 |  readable(self, /)
 |      Returns True if the IO object can be read.
 |  
 |  readinto(self, buffer, /)
 |      Read bytes into buffer.
 |      
 |      Returns number of bytes read (0 for EOF), or None if the object
 |      is set not to block and has no data to read.
 |  
 |  readline(self, size=None, /)
 |      Next line from the file, as a bytes object.
 |      
 |      Retain newline.  A non-negative size argument limits the maximum
 |      number of bytes to return (an incomplete line may be returned then).
 |      Return an empty bytes object at EOF.
 |  
 |  readlines(self, size=None, /)
 |      List of bytes objects, each a line from the file.
 |      
 |      Call readline() repeatedly and return a list of the lines so read.
 |      The optional size argument, if given, is an approximate bound on the
 |      total number of bytes in the lines returned.
 |  
 |  seek(self, pos, whence=0, /)
 |      Change stream position.
 |      
 |      Seek to byte offset pos relative to position indicated by whence:
 |           0  Start of stream (the default).  pos should be >= 0;
 |           1  Current position - pos may be negative;
 |           2  End of stream - pos usually negative.
 |      Returns the new absolute position.
 |  
 |  seekable(self, /)
 |      Returns True if the IO object can be seeked.
 |  
 |  tell(self, /)
 |      Current file position, an integer.
 |  
 |  truncate(self, size=None, /)
 |      Truncate the file to at most size bytes.
 |      
 |      Size defaults to the current file position, as returned by tell().
 |      The current file position is unchanged.  Returns the new size.
 |  
 |  writable(self, /)
 |      Returns True if the IO object can be written.
 |  
 |  write(self, b, /)
 |      Write bytes to file.
 |      
 |      Return the number of bytes written.
 |  
 |  writelines(self, lines, /)
 |      Write lines to the file.
 |      
 |      Note that newlines are not added.  lines can be any iterable object
 |      producing bytes-like objects. This is equivalent to calling write() for
 |      each element.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  closed
 |      True if the file is closed.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from _BufferedIOBase:
 |  
 |  detach(self, /)
 |      Disconnect this buffer from its underlying raw stream and return it.
 |      
 |      After the raw stream has been detached, the buffer is in an unusable
 |      state.
 |  
 |  readinto1(self, buffer, /)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from _IOBase:
 |  
 |  __del__(...)
 |  
 |  __enter__(...)
 |  
 |  __exit__(...)
 |  
 |  fileno(self, /)
 |      Returns underlying file descriptor if one exists.
 |      
 |      OSError is raised if the IO object does not use a file descriptor.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from _IOBase:
 |  
 |  __dict__
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
simplejson,3.17.0,simplejson.compat.StringIO,compat,StringIO,"Python Library Documentation: class StringIO in module io

class StringIO(_TextIOBase)
 |  Text I/O implementation using an in-memory buffer.
 |  
 |  The initial_value argument sets the value of object.  The newline
 |  argument is like the one of TextIOWrapper's constructor.
 |  
 |  Method resolution order:
 |      StringIO
 |      _TextIOBase
 |      _IOBase
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getstate__(...)
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __next__(self, /)
 |      Implement next(self).
 |  
 |  __setstate__(...)
 |  
 |  close(self, /)
 |      Close the IO object.
 |      
 |      Attempting any further operation after the object is closed
 |      will raise a ValueError.
 |      
 |      This method has no effect if the file is already closed.
 |  
 |  getvalue(self, /)
 |      Retrieve the entire contents of the object.
 |  
 |  read(self, size=None, /)
 |      Read at most size characters, returned as a string.
 |      
 |      If the argument is negative or omitted, read until EOF
 |      is reached. Return an empty string at EOF.
 |  
 |  readable(self, /)
 |      Returns True if the IO object can be read.
 |  
 |  readline(self, size=None, /)
 |      Read until newline or EOF.
 |      
 |      Returns an empty string if EOF is hit immediately.
 |  
 |  seek(self, pos, whence=0, /)
 |      Change stream position.
 |      
 |      Seek to character offset pos relative to position indicated by whence:
 |          0  Start of stream (the default).  pos should be >= 0;
 |          1  Current position - pos must be 0;
 |          2  End of stream - pos must be 0.
 |      Returns the new absolute position.
 |  
 |  seekable(self, /)
 |      Returns True if the IO object can be seeked.
 |  
 |  tell(self, /)
 |      Tell the current file position.
 |  
 |  truncate(self, pos=None, /)
 |      Truncate size to pos.
 |      
 |      The pos argument defaults to the current file position, as
 |      returned by tell().  The current file position is unchanged.
 |      Returns the new absolute position.
 |  
 |  writable(self, /)
 |      Returns True if the IO object can be written.
 |  
 |  write(self, s, /)
 |      Write string to file.
 |      
 |      Returns the number of characters written, which is always equal to
 |      the length of the string.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  closed
 |  
 |  line_buffering
 |  
 |  newlines
 |      Line endings translated so far.
 |      
 |      Only line endings translated during reading are considered.
 |      
 |      Subclasses should override.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from _TextIOBase:
 |  
 |  detach(...)
 |      Separate the underlying buffer from the TextIOBase and return it.
 |      
 |      After the underlying buffer has been detached, the TextIO is in an
 |      unusable state.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from _TextIOBase:
 |  
 |  encoding
 |      Encoding of the text stream.
 |      
 |      Subclasses should override.
 |  
 |  errors
 |      The error setting of the decoder or encoder.
 |      
 |      Subclasses should override.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from _IOBase:
 |  
 |  __del__(...)
 |  
 |  __enter__(...)
 |  
 |  __exit__(...)
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  fileno(self, /)
 |      Returns underlying file descriptor if one exists.
 |      
 |      OSError is raised if the IO object does not use a file descriptor.
 |  
 |  flush(self, /)
 |      Flush write buffers, if applicable.
 |      
 |      This is not implemented for read-only and non-blocking streams.
 |  
 |  isatty(self, /)
 |      Return whether this is an 'interactive' stream.
 |      
 |      Return False if it can't be determined.
 |  
 |  readlines(self, hint=-1, /)
 |      Return a list of lines from the stream.
 |      
 |      hint can be specified to control the number of lines read: no more
 |      lines will be read if the total size (in bytes/characters) of all
 |      lines so far exceeds hint.
 |  
 |  writelines(self, lines, /)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from _IOBase:
 |  
 |  __dict__
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
simplejson,3.17.0,simplejson.compat.b,compat,b,"Python Library Documentation: function b in module simplejson.compat

b(s)
",function,"('(s)',)",s,,,arg_info
simplejson,3.17.0,simplejson.compat.binary_type,compat,bytes,"Python Library Documentation: class bytes in module builtins

class bytes(object)
 |  bytes(iterable_of_ints) -> bytes
 |  bytes(string, encoding[, errors]) -> bytes
 |  bytes(bytes_or_buffer) -> immutable copy of bytes_or_buffer
 |  bytes(int) -> bytes object of size given by the parameter initialized with null bytes
 |  bytes() -> empty bytes object
 |  
 |  Construct an immutable array of bytes from:
 |    - an iterable yielding integers in range(256)
 |    - a text string encoded using the specified encoding
 |    - any object implementing the buffer API.
 |    - an integer
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __getnewargs__(...)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  capitalize(...)
 |      B.capitalize() -> copy of B
 |      
 |      Return a copy of B with only its first character capitalized (ASCII)
 |      and the rest lower-cased.
 |  
 |  center(...)
 |      B.center(width[, fillchar]) -> copy of B
 |      
 |      Return B centered in a string of length width.  Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  count(...)
 |      B.count(sub[, start[, end]]) -> int
 |      
 |      Return the number of non-overlapping occurrences of subsection sub in
 |      bytes B[start:end].  Optional arguments start and end are interpreted
 |      as in slice notation.
 |  
 |  decode(self, /, encoding='utf-8', errors='strict')
 |      Decode the bytes using the codec registered for encoding.
 |      
 |      encoding
 |        The encoding with which to decode the bytes.
 |      errors
 |        The error handling scheme to use for the handling of decoding errors.
 |        The default is 'strict' meaning that decoding errors raise a
 |        UnicodeDecodeError. Other possible values are 'ignore' and 'replace'
 |        as well as any other name registered with codecs.register_error that
 |        can handle UnicodeDecodeErrors.
 |  
 |  endswith(...)
 |      B.endswith(suffix[, start[, end]]) -> bool
 |      
 |      Return True if B ends with the specified suffix, False otherwise.
 |      With optional start, test B beginning at that position.
 |      With optional end, stop comparing B at that position.
 |      suffix can also be a tuple of bytes to try.
 |  
 |  expandtabs(...)
 |      B.expandtabs(tabsize=8) -> copy of B
 |      
 |      Return a copy of B where all tab characters are expanded using spaces.
 |      If tabsize is not given, a tab size of 8 characters is assumed.
 |  
 |  find(...)
 |      B.find(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in B where subsection sub is found,
 |      such that sub is contained within B[start,end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  fromhex(string, /) from builtins.type
 |      Create a bytes object from a string of hexadecimal numbers.
 |      
 |      Spaces between two numbers are accepted.
 |      Example: bytes.fromhex('B9 01EF') -> b'\\xb9\\x01\\xef'.
 |  
 |  hex(...)
 |      B.hex() -> string
 |      
 |      Create a string of hexadecimal numbers from a bytes object.
 |      Example: b'\xb9\x01\xef'.hex() -> 'b901ef'.
 |  
 |  index(...)
 |      B.index(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in B where subsection sub is found,
 |      such that sub is contained within B[start,end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the subsection is not found.
 |  
 |  isalnum(...)
 |      B.isalnum() -> bool
 |      
 |      Return True if all characters in B are alphanumeric
 |      and there is at least one character in B, False otherwise.
 |  
 |  isalpha(...)
 |      B.isalpha() -> bool
 |      
 |      Return True if all characters in B are alphabetic
 |      and there is at least one character in B, False otherwise.
 |  
 |  isdigit(...)
 |      B.isdigit() -> bool
 |      
 |      Return True if all characters in B are digits
 |      and there is at least one character in B, False otherwise.
 |  
 |  islower(...)
 |      B.islower() -> bool
 |      
 |      Return True if all cased characters in B are lowercase and there is
 |      at least one cased character in B, False otherwise.
 |  
 |  isspace(...)
 |      B.isspace() -> bool
 |      
 |      Return True if all characters in B are whitespace
 |      and there is at least one character in B, False otherwise.
 |  
 |  istitle(...)
 |      B.istitle() -> bool
 |      
 |      Return True if B is a titlecased string and there is at least one
 |      character in B, i.e. uppercase characters may only follow uncased
 |      characters and lowercase characters only cased ones. Return False
 |      otherwise.
 |  
 |  isupper(...)
 |      B.isupper() -> bool
 |      
 |      Return True if all cased characters in B are uppercase and there is
 |      at least one cased character in B, False otherwise.
 |  
 |  join(self, iterable_of_bytes, /)
 |      Concatenate any number of bytes objects.
 |      
 |      The bytes whose method is called is inserted in between each pair.
 |      
 |      The result is returned as a new bytes object.
 |      
 |      Example: b'.'.join([b'ab', b'pq', b'rs']) -> b'ab.pq.rs'.
 |  
 |  ljust(...)
 |      B.ljust(width[, fillchar]) -> copy of B
 |      
 |      Return B left justified in a string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  lower(...)
 |      B.lower() -> copy of B
 |      
 |      Return a copy of B with all ASCII characters converted to lowercase.
 |  
 |  lstrip(self, bytes=None, /)
 |      Strip leading bytes contained in the argument.
 |      
 |      If the argument is omitted or None, strip leading  ASCII whitespace.
 |  
 |  partition(self, sep, /)
 |      Partition the bytes into three parts using the given separator.
 |      
 |      This will search for the separator sep in the bytes. If the separator is found,
 |      returns a 3-tuple containing the part before the separator, the separator
 |      itself, and the part after it.
 |      
 |      If the separator is not found, returns a 3-tuple containing the original bytes
 |      object and two empty bytes objects.
 |  
 |  replace(self, old, new, count=-1, /)
 |      Return a copy with all occurrences of substring old replaced by new.
 |      
 |        count
 |          Maximum number of occurrences to replace.
 |          -1 (the default value) means replace all occurrences.
 |      
 |      If the optional argument count is given, only the first count occurrences are
 |      replaced.
 |  
 |  rfind(...)
 |      B.rfind(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in B where subsection sub is found,
 |      such that sub is contained within B[start,end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  rindex(...)
 |      B.rindex(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in B where subsection sub is found,
 |      such that sub is contained within B[start,end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raise ValueError when the subsection is not found.
 |  
 |  rjust(...)
 |      B.rjust(width[, fillchar]) -> copy of B
 |      
 |      Return B right justified in a string of length width. Padding is
 |      done using the specified fill character (default is a space)
 |  
 |  rpartition(self, sep, /)
 |      Partition the bytes into three parts using the given separator.
 |      
 |      This will search for the separator sep in the bytes, starting at the end. If
 |      the separator is found, returns a 3-tuple containing the part before the
 |      separator, the separator itself, and the part after it.
 |      
 |      If the separator is not found, returns a 3-tuple containing two empty bytes
 |      objects and the original bytes object.
 |  
 |  rsplit(self, /, sep=None, maxsplit=-1)
 |      Return a list of the sections in the bytes, using sep as the delimiter.
 |      
 |        sep
 |          The delimiter according which to split the bytes.
 |          None (the default value) means split on ASCII whitespace characters
 |          (space, tab, return, newline, formfeed, vertical tab).
 |        maxsplit
 |          Maximum number of splits to do.
 |          -1 (the default value) means no limit.
 |      
 |      Splitting is done starting at the end of the bytes and working to the front.
 |  
 |  rstrip(self, bytes=None, /)
 |      Strip trailing bytes contained in the argument.
 |      
 |      If the argument is omitted or None, strip trailing ASCII whitespace.
 |  
 |  split(self, /, sep=None, maxsplit=-1)
 |      Return a list of the sections in the bytes, using sep as the delimiter.
 |      
 |      sep
 |        The delimiter according which to split the bytes.
 |        None (the default value) means split on ASCII whitespace characters
 |        (space, tab, return, newline, formfeed, vertical tab).
 |      maxsplit
 |        Maximum number of splits to do.
 |        -1 (the default value) means no limit.
 |  
 |  splitlines(self, /, keepends=False)
 |      Return a list of the lines in the bytes, breaking at line boundaries.
 |      
 |      Line breaks are not included in the resulting list unless keepends is given and
 |      true.
 |  
 |  startswith(...)
 |      B.startswith(prefix[, start[, end]]) -> bool
 |      
 |      Return True if B starts with the specified prefix, False otherwise.
 |      With optional start, test B beginning at that position.
 |      With optional end, stop comparing B at that position.
 |      prefix can also be a tuple of bytes to try.
 |  
 |  strip(self, bytes=None, /)
 |      Strip leading and trailing bytes contained in the argument.
 |      
 |      If the argument is omitted or None, strip leading and trailing ASCII whitespace.
 |  
 |  swapcase(...)
 |      B.swapcase() -> copy of B
 |      
 |      Return a copy of B with uppercase ASCII characters converted
 |      to lowercase ASCII and vice versa.
 |  
 |  title(...)
 |      B.title() -> copy of B
 |      
 |      Return a titlecased version of B, i.e. ASCII words start with uppercase
 |      characters, all remaining cased characters have lowercase.
 |  
 |  translate(self, table, /, delete=b'')
 |      Return a copy with each character mapped by the given translation table.
 |      
 |        table
 |          Translation table, which must be a bytes object of length 256.
 |      
 |      All characters occurring in the optional argument delete are removed.
 |      The remaining characters are mapped through the given translation table.
 |  
 |  upper(...)
 |      B.upper() -> copy of B
 |      
 |      Return a copy of B with all ASCII characters converted to uppercase.
 |  
 |  zfill(...)
 |      B.zfill(width) -> copy of B
 |      
 |      Pad a numeric string B with zeros on the left, to fill a field
 |      of the specified width.  B is never truncated.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  maketrans(frm, to, /)
 |      Return a translation table useable for the bytes or bytearray translate method.
 |      
 |      The returned table will be one where each byte in frm is mapped to the byte at
 |      the same position in to.
 |      
 |      The bytes objects frm and to must be of the same length.
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
simplejson,3.17.0,simplejson.compat.long_type,compat,int,"Python Library Documentation: class int in module builtins

class int(object)
 |  int(x=0) -> integer
 |  int(x, base=10) -> integer
 |  
 |  Convert a number or string to an integer, or return 0 if no arguments
 |  are given.  If x is a number, return x.__int__().  For floating point
 |  numbers, this truncates towards zero.
 |  
 |  If x is not a number or if base is given, then x must be a string,
 |  bytes, or bytearray instance representing an integer literal in the
 |  given base.  The literal can be preceded by '+' or '-' and be surrounded
 |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
 |  Base 0 means to interpret the base from the string as an integer literal.
 |  >>> int('0b100', base=0)
 |  4
 |  
 |  Methods defined here:
 |  
 |  __abs__(self, /)
 |      abs(self)
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __and__(self, value, /)
 |      Return self&value.
 |  
 |  __bool__(self, /)
 |      self != 0
 |  
 |  __ceil__(...)
 |      Ceiling of an Integral returns itself.
 |  
 |  __divmod__(self, value, /)
 |      Return divmod(self, value).
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __float__(self, /)
 |      float(self)
 |  
 |  __floor__(...)
 |      Flooring an Integral returns itself.
 |  
 |  __floordiv__(self, value, /)
 |      Return self//value.
 |  
 |  __format__(...)
 |      default object formatter
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getnewargs__(...)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __index__(self, /)
 |      Return self converted to an integer, if self is suitable for use as an index into a list.
 |  
 |  __int__(self, /)
 |      int(self)
 |  
 |  __invert__(self, /)
 |      ~self
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __lshift__(self, value, /)
 |      Return self<<value.
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __neg__(self, /)
 |      -self
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __or__(self, value, /)
 |      Return self|value.
 |  
 |  __pos__(self, /)
 |      +self
 |  
 |  __pow__(self, value, mod=None, /)
 |      Return pow(self, value, mod).
 |  
 |  __radd__(self, value, /)
 |      Return value+self.
 |  
 |  __rand__(self, value, /)
 |      Return value&self.
 |  
 |  __rdivmod__(self, value, /)
 |      Return divmod(value, self).
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rfloordiv__(self, value, /)
 |      Return value//self.
 |  
 |  __rlshift__(self, value, /)
 |      Return value<<self.
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return value*self.
 |  
 |  __ror__(self, value, /)
 |      Return value|self.
 |  
 |  __round__(...)
 |      Rounding an Integral returns itself.
 |      Rounding with an ndigits argument also returns an integer.
 |  
 |  __rpow__(self, value, mod=None, /)
 |      Return pow(value, self, mod).
 |  
 |  __rrshift__(self, value, /)
 |      Return value>>self.
 |  
 |  __rshift__(self, value, /)
 |      Return self>>value.
 |  
 |  __rsub__(self, value, /)
 |      Return value-self.
 |  
 |  __rtruediv__(self, value, /)
 |      Return value/self.
 |  
 |  __rxor__(self, value, /)
 |      Return value^self.
 |  
 |  __sizeof__(...)
 |      Returns size in memory, in bytes
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  __sub__(self, value, /)
 |      Return self-value.
 |  
 |  __truediv__(self, value, /)
 |      Return self/value.
 |  
 |  __trunc__(...)
 |      Truncating an Integral returns itself.
 |  
 |  __xor__(self, value, /)
 |      Return self^value.
 |  
 |  bit_length(...)
 |      int.bit_length() -> int
 |      
 |      Number of bits necessary to represent self in binary.
 |      >>> bin(37)
 |      '0b100101'
 |      >>> (37).bit_length()
 |      6
 |  
 |  conjugate(...)
 |      Returns self, the complex conjugate of any int.
 |  
 |  from_bytes(...) from builtins.type
 |      int.from_bytes(bytes, byteorder, *, signed=False) -> int
 |      
 |      Return the integer represented by the given array of bytes.
 |      
 |      The bytes argument must be a bytes-like object (e.g. bytes or bytearray).
 |      
 |      The byteorder argument determines the byte order used to represent the
 |      integer.  If byteorder is 'big', the most significant byte is at the
 |      beginning of the byte array.  If byteorder is 'little', the most
 |      significant byte is at the end of the byte array.  To request the native
 |      byte order of the host system, use `sys.byteorder' as the byte order value.
 |      
 |      The signed keyword-only argument indicates whether two's complement is
 |      used to represent the integer.
 |  
 |  to_bytes(...)
 |      int.to_bytes(length, byteorder, *, signed=False) -> bytes
 |      
 |      Return an array of bytes representing an integer.
 |      
 |      The integer is represented using length bytes.  An OverflowError is
 |      raised if the integer is not representable with the given number of
 |      bytes.
 |      
 |      The byteorder argument determines the byte order used to represent the
 |      integer.  If byteorder is 'big', the most significant byte is at the
 |      beginning of the byte array.  If byteorder is 'little', the most
 |      significant byte is at the end of the byte array.  To request the native
 |      byte order of the host system, use `sys.byteorder' as the byte order value.
 |      
 |      The signed keyword-only argument determines whether two's complement is
 |      used to represent the integer.  If signed is False and a negative integer
 |      is given, an OverflowError is raised.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  denominator
 |      the denominator of a rational number in lowest terms
 |  
 |  imag
 |      the imaginary part of a complex number
 |  
 |  numerator
 |      the numerator of a rational number in lowest terms
 |  
 |  real
 |      the real part of a complex number
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
simplejson,3.17.0,simplejson.compat.reload_module,compat,reload,"Python Library Documentation: function reload in module importlib

reload(module)
    Reload the module and return it.
    
    The module must have been successfully imported before.
",function,"('(module)',)",module,,,arg_info
simplejson,3.17.0,simplejson.compat.text_type,compat,str,"Python Library Documentation: class str in module builtins

class str(object)
 |  str(object='') -> str
 |  str(bytes_or_buffer[, encoding[, errors]]) -> str
 |  
 |  Create a new string object from the given object. If encoding or
 |  errors is specified, then the object must expose a data buffer
 |  that will be decoded using the given encoding and error handler.
 |  Otherwise, returns the result of object.__str__() (if defined)
 |  or repr(object).
 |  encoding defaults to sys.getdefaultencoding().
 |  errors defaults to 'strict'.
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __format__(...)
 |      S.__format__(format_spec) -> str
 |      
 |      Return a formatted version of S as described by format_spec.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __getnewargs__(...)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  __sizeof__(...)
 |      S.__sizeof__() -> size of S in memory, in bytes
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  capitalize(...)
 |      S.capitalize() -> str
 |      
 |      Return a capitalized version of S, i.e. make the first character
 |      have upper case and the rest lower case.
 |  
 |  casefold(...)
 |      S.casefold() -> str
 |      
 |      Return a version of S suitable for caseless comparisons.
 |  
 |  center(...)
 |      S.center(width[, fillchar]) -> str
 |      
 |      Return S centered in a string of length width. Padding is
 |      done using the specified fill character (default is a space)
 |  
 |  count(...)
 |      S.count(sub[, start[, end]]) -> int
 |      
 |      Return the number of non-overlapping occurrences of substring sub in
 |      string S[start:end].  Optional arguments start and end are
 |      interpreted as in slice notation.
 |  
 |  encode(...)
 |      S.encode(encoding='utf-8', errors='strict') -> bytes
 |      
 |      Encode S using the codec registered for encoding. Default encoding
 |      is 'utf-8'. errors may be given to set a different error
 |      handling scheme. Default is 'strict' meaning that encoding errors raise
 |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
 |      'xmlcharrefreplace' as well as any other name registered with
 |      codecs.register_error that can handle UnicodeEncodeErrors.
 |  
 |  endswith(...)
 |      S.endswith(suffix[, start[, end]]) -> bool
 |      
 |      Return True if S ends with the specified suffix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      suffix can also be a tuple of strings to try.
 |  
 |  expandtabs(...)
 |      S.expandtabs(tabsize=8) -> str
 |      
 |      Return a copy of S where all tab characters are expanded using spaces.
 |      If tabsize is not given, a tab size of 8 characters is assumed.
 |  
 |  find(...)
 |      S.find(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  format(...)
 |      S.format(*args, **kwargs) -> str
 |      
 |      Return a formatted version of S, using substitutions from args and kwargs.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  format_map(...)
 |      S.format_map(mapping) -> str
 |      
 |      Return a formatted version of S, using substitutions from mapping.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  index(...)
 |      S.index(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found, 
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  isalnum(...)
 |      S.isalnum() -> bool
 |      
 |      Return True if all characters in S are alphanumeric
 |      and there is at least one character in S, False otherwise.
 |  
 |  isalpha(...)
 |      S.isalpha() -> bool
 |      
 |      Return True if all characters in S are alphabetic
 |      and there is at least one character in S, False otherwise.
 |  
 |  isdecimal(...)
 |      S.isdecimal() -> bool
 |      
 |      Return True if there are only decimal characters in S,
 |      False otherwise.
 |  
 |  isdigit(...)
 |      S.isdigit() -> bool
 |      
 |      Return True if all characters in S are digits
 |      and there is at least one character in S, False otherwise.
 |  
 |  isidentifier(...)
 |      S.isidentifier() -> bool
 |      
 |      Return True if S is a valid identifier according
 |      to the language definition.
 |      
 |      Use keyword.iskeyword() to test for reserved identifiers
 |      such as ""def"" and ""class"".
 |  
 |  islower(...)
 |      S.islower() -> bool
 |      
 |      Return True if all cased characters in S are lowercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  isnumeric(...)
 |      S.isnumeric() -> bool
 |      
 |      Return True if there are only numeric characters in S,
 |      False otherwise.
 |  
 |  isprintable(...)
 |      S.isprintable() -> bool
 |      
 |      Return True if all characters in S are considered
 |      printable in repr() or S is empty, False otherwise.
 |  
 |  isspace(...)
 |      S.isspace() -> bool
 |      
 |      Return True if all characters in S are whitespace
 |      and there is at least one character in S, False otherwise.
 |  
 |  istitle(...)
 |      S.istitle() -> bool
 |      
 |      Return True if S is a titlecased string and there is at least one
 |      character in S, i.e. upper- and titlecase characters may only
 |      follow uncased characters and lowercase characters only cased ones.
 |      Return False otherwise.
 |  
 |  isupper(...)
 |      S.isupper() -> bool
 |      
 |      Return True if all cased characters in S are uppercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  join(...)
 |      S.join(iterable) -> str
 |      
 |      Return a string which is the concatenation of the strings in the
 |      iterable.  The separator between elements is S.
 |  
 |  ljust(...)
 |      S.ljust(width[, fillchar]) -> str
 |      
 |      Return S left-justified in a Unicode string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  lower(...)
 |      S.lower() -> str
 |      
 |      Return a copy of the string S converted to lowercase.
 |  
 |  lstrip(...)
 |      S.lstrip([chars]) -> str
 |      
 |      Return a copy of the string S with leading whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  partition(...)
 |      S.partition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, and return the part before it,
 |      the separator itself, and the part after it.  If the separator is not
 |      found, return S and two empty strings.
 |  
 |  replace(...)
 |      S.replace(old, new[, count]) -> str
 |      
 |      Return a copy of S with all occurrences of substring
 |      old replaced by new.  If the optional argument count is
 |      given, only the first count occurrences are replaced.
 |  
 |  rfind(...)
 |      S.rfind(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  rindex(...)
 |      S.rindex(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  rjust(...)
 |      S.rjust(width[, fillchar]) -> str
 |      
 |      Return S right-justified in a string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  rpartition(...)
 |      S.rpartition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, starting at the end of S, and return
 |      the part before it, the separator itself, and the part after it.  If the
 |      separator is not found, return two empty strings and S.
 |  
 |  rsplit(...)
 |      S.rsplit(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string, starting at the end of the string and
 |      working to the front.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified, any whitespace string
 |      is a separator.
 |  
 |  rstrip(...)
 |      S.rstrip([chars]) -> str
 |      
 |      Return a copy of the string S with trailing whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  split(...)
 |      S.split(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified or is None, any
 |      whitespace string is a separator and empty strings are
 |      removed from the result.
 |  
 |  splitlines(...)
 |      S.splitlines([keepends]) -> list of strings
 |      
 |      Return a list of the lines in S, breaking at line boundaries.
 |      Line breaks are not included in the resulting list unless keepends
 |      is given and true.
 |  
 |  startswith(...)
 |      S.startswith(prefix[, start[, end]]) -> bool
 |      
 |      Return True if S starts with the specified prefix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      prefix can also be a tuple of strings to try.
 |  
 |  strip(...)
 |      S.strip([chars]) -> str
 |      
 |      Return a copy of the string S with leading and trailing
 |      whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  swapcase(...)
 |      S.swapcase() -> str
 |      
 |      Return a copy of S with uppercase characters converted to lowercase
 |      and vice versa.
 |  
 |  title(...)
 |      S.title() -> str
 |      
 |      Return a titlecased version of S, i.e. words start with title case
 |      characters, all remaining cased characters have lower case.
 |  
 |  translate(...)
 |      S.translate(table) -> str
 |      
 |      Return a copy of the string S in which each character has been mapped
 |      through the given translation table. The table must implement
 |      lookup/indexing via __getitem__, for instance a dictionary or list,
 |      mapping Unicode ordinals to Unicode ordinals, strings, or None. If
 |      this operation raises LookupError, the character is left untouched.
 |      Characters mapped to None are deleted.
 |  
 |  upper(...)
 |      S.upper() -> str
 |      
 |      Return a copy of S converted to uppercase.
 |  
 |  zfill(...)
 |      S.zfill(width) -> str
 |      
 |      Pad a numeric string S with zeros on the left, to fill a field
 |      of the specified width. The string S is never truncated.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  maketrans(x, y=None, z=None, /)
 |      Return a translation table usable for str.translate().
 |      
 |      If there is only one argument, it must be a dictionary mapping Unicode
 |      ordinals (integers) or characters to Unicode ordinals, strings or None.
 |      Character keys will be then converted to ordinals.
 |      If there are two arguments, they must be strings of equal length, and
 |      in the resulting dictionary, each character in x will be mapped to the
 |      character at the same position in y. If there is a third argument, it
 |      must be a string, whose characters will be mapped to None in the result.
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
simplejson,3.17.0,simplejson.decoder.JSONArray,decoder,JSONArray,"Python Library Documentation: function JSONArray in module simplejson.decoder

JSONArray(state, scan_once, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _ws=' \t\n\r')
",function,"(""(state, scan_once, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _ws=' \\t\\n\\r')"",)",state,,,arg_info
simplejson,3.17.0,simplejson.decoder.JSONArray,decoder,JSONArray,"Python Library Documentation: function JSONArray in module simplejson.decoder

JSONArray(state, scan_once, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _ws=' \t\n\r')
",function,"(""(state, scan_once, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _ws=' \\t\\n\\r')"",)",scan_once,,,arg_info
simplejson,3.17.0,simplejson.decoder.JSONArray,decoder,JSONArray,"Python Library Documentation: function JSONArray in module simplejson.decoder

JSONArray(state, scan_once, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _ws=' \t\n\r')
",function,"(""(state, scan_once, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _ws=' \\t\\n\\r')"",)",_w,<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>,builtin_function_or_method,arg_info
simplejson,3.17.0,simplejson.decoder.JSONArray,decoder,JSONArray,"Python Library Documentation: function JSONArray in module simplejson.decoder

JSONArray(state, scan_once, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _ws=' \t\n\r')
",function,"(""(state, scan_once, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _ws=' \\t\\n\\r')"",)",_ws," 	
",,arg_info
simplejson,3.17.0,simplejson.decoder.JSONDecodeError,decoder,JSONDecodeError,"Python Library Documentation: class JSONDecodeError in module simplejson.errors

class JSONDecodeError(builtins.ValueError)
 |  Subclass of ValueError with the following additional properties:
 |  
 |  msg: The unformatted error message
 |  doc: The JSON document being parsed
 |  pos: The start index of doc where parsing failed
 |  end: The end index of doc where parsing failed (may be None)
 |  lineno: The line corresponding to pos
 |  colno: The column corresponding to pos
 |  endlineno: The line corresponding to end (may be None)
 |  endcolno: The column corresponding to end (may be None)
 |  
 |  Method resolution order:
 |      JSONDecodeError
 |      builtins.ValueError
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, msg, doc, pos, end=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __reduce__(self)
 |      helper for pickle
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.ValueError:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, msg, doc, pos, end=None)',)",msg,,,arg_info
simplejson,3.17.0,simplejson.decoder.JSONDecodeError,decoder,JSONDecodeError,"Python Library Documentation: class JSONDecodeError in module simplejson.errors

class JSONDecodeError(builtins.ValueError)
 |  Subclass of ValueError with the following additional properties:
 |  
 |  msg: The unformatted error message
 |  doc: The JSON document being parsed
 |  pos: The start index of doc where parsing failed
 |  end: The end index of doc where parsing failed (may be None)
 |  lineno: The line corresponding to pos
 |  colno: The column corresponding to pos
 |  endlineno: The line corresponding to end (may be None)
 |  endcolno: The column corresponding to end (may be None)
 |  
 |  Method resolution order:
 |      JSONDecodeError
 |      builtins.ValueError
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, msg, doc, pos, end=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __reduce__(self)
 |      helper for pickle
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.ValueError:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, msg, doc, pos, end=None)',)",self,,,arg_info
simplejson,3.17.0,simplejson.decoder.JSONDecodeError,decoder,JSONDecodeError,"Python Library Documentation: class JSONDecodeError in module simplejson.errors

class JSONDecodeError(builtins.ValueError)
 |  Subclass of ValueError with the following additional properties:
 |  
 |  msg: The unformatted error message
 |  doc: The JSON document being parsed
 |  pos: The start index of doc where parsing failed
 |  end: The end index of doc where parsing failed (may be None)
 |  lineno: The line corresponding to pos
 |  colno: The column corresponding to pos
 |  endlineno: The line corresponding to end (may be None)
 |  endcolno: The column corresponding to end (may be None)
 |  
 |  Method resolution order:
 |      JSONDecodeError
 |      builtins.ValueError
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, msg, doc, pos, end=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __reduce__(self)
 |      helper for pickle
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.ValueError:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, msg, doc, pos, end=None)',)",end,,NoneType,arg_info
simplejson,3.17.0,simplejson.decoder.JSONDecodeError,decoder,JSONDecodeError,"Python Library Documentation: class JSONDecodeError in module simplejson.errors

class JSONDecodeError(builtins.ValueError)
 |  Subclass of ValueError with the following additional properties:
 |  
 |  msg: The unformatted error message
 |  doc: The JSON document being parsed
 |  pos: The start index of doc where parsing failed
 |  end: The end index of doc where parsing failed (may be None)
 |  lineno: The line corresponding to pos
 |  colno: The column corresponding to pos
 |  endlineno: The line corresponding to end (may be None)
 |  endcolno: The column corresponding to end (may be None)
 |  
 |  Method resolution order:
 |      JSONDecodeError
 |      builtins.ValueError
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, msg, doc, pos, end=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __reduce__(self)
 |      helper for pickle
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.ValueError:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, msg, doc, pos, end=None)',)",doc,,,arg_info
simplejson,3.17.0,simplejson.decoder.JSONDecodeError,decoder,JSONDecodeError,"Python Library Documentation: class JSONDecodeError in module simplejson.errors

class JSONDecodeError(builtins.ValueError)
 |  Subclass of ValueError with the following additional properties:
 |  
 |  msg: The unformatted error message
 |  doc: The JSON document being parsed
 |  pos: The start index of doc where parsing failed
 |  end: The end index of doc where parsing failed (may be None)
 |  lineno: The line corresponding to pos
 |  colno: The column corresponding to pos
 |  endlineno: The line corresponding to end (may be None)
 |  endcolno: The column corresponding to end (may be None)
 |  
 |  Method resolution order:
 |      JSONDecodeError
 |      builtins.ValueError
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, msg, doc, pos, end=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __reduce__(self)
 |      helper for pickle
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.ValueError:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, msg, doc, pos, end=None)',)",pos,,,arg_info
simplejson,3.17.0,simplejson.decoder.JSONDecoder,decoder,JSONDecoder,"Python Library Documentation: class JSONDecoder in module simplejson.decoder

class JSONDecoder(builtins.object)
 |  Simple JSON <http://json.org> decoder
 |  
 |  Performs the following translations in decoding by default:
 |  
 |  +---------------+-------------------+
 |  | JSON          | Python            |
 |  +===============+===================+
 |  | object        | dict              |
 |  +---------------+-------------------+
 |  | array         | list              |
 |  +---------------+-------------------+
 |  | string        | str, unicode      |
 |  +---------------+-------------------+
 |  | number (int)  | int, long         |
 |  +---------------+-------------------+
 |  | number (real) | float             |
 |  +---------------+-------------------+
 |  | true          | True              |
 |  +---------------+-------------------+
 |  | false         | False             |
 |  +---------------+-------------------+
 |  | null          | None              |
 |  +---------------+-------------------+
 |  
 |  It also understands ``NaN``, ``Infinity``, and ``-Infinity`` as
 |  their corresponding ``float`` values, which is outside the JSON spec.
 |  
 |  Methods defined here:
 |  
 |  __init__(self, encoding=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)
 |      *encoding* determines the encoding used to interpret any
 |      :class:`str` objects decoded by this instance (``'utf-8'`` by
 |      default).  It has no effect when decoding :class:`unicode` objects.
 |      
 |      Note that currently only encodings that are a superset of ASCII work,
 |      strings of other encodings should be passed in as :class:`unicode`.
 |      
 |      *object_hook*, if specified, will be called with the result of every
 |      JSON object decoded and its return value will be used in place of the
 |      given :class:`dict`.  This can be used to provide custom
 |      deserializations (e.g. to support JSON-RPC class hinting).
 |      
 |      *object_pairs_hook* is an optional function that will be called with
 |      the result of any object literal decode with an ordered list of pairs.
 |      The return value of *object_pairs_hook* will be used instead of the
 |      :class:`dict`.  This feature can be used to implement custom decoders
 |      that rely on the order that the key and value pairs are decoded (for
 |      example, :func:`collections.OrderedDict` will remember the order of
 |      insertion). If *object_hook* is also defined, the *object_pairs_hook*
 |      takes priority.
 |      
 |      *parse_float*, if specified, will be called with the string of every
 |      JSON float to be decoded.  By default, this is equivalent to
 |      ``float(num_str)``. This can be used to use another datatype or parser
 |      for JSON floats (e.g. :class:`decimal.Decimal`).
 |      
 |      *parse_int*, if specified, will be called with the string of every
 |      JSON int to be decoded.  By default, this is equivalent to
 |      ``int(num_str)``.  This can be used to use another datatype or parser
 |      for JSON integers (e.g. :class:`float`).
 |      
 |      *parse_constant*, if specified, will be called with one of the
 |      following strings: ``'-Infinity'``, ``'Infinity'``, ``'NaN'``.  This
 |      can be used to raise an exception if invalid JSON numbers are
 |      encountered.
 |      
 |      *strict* controls the parser's behavior when it encounters an
 |      invalid control character in a string. The default setting of
 |      ``True`` means that unescaped control characters are parse errors, if
 |      ``False`` then control characters will be allowed in strings.
 |  
 |  decode(self, s, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _PY3=True)
 |      Return the Python representation of ``s`` (a ``str`` or ``unicode``
 |      instance containing a JSON document)
 |  
 |  raw_decode(self, s, idx=0, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _PY3=True)
 |      Decode a JSON document from ``s`` (a ``str`` or ``unicode``
 |      beginning with a JSON document) and return a 2-tuple of the Python
 |      representation and the index in ``s`` where the document ended.
 |      Optionally, ``idx`` can be used to specify an offset in ``s`` where
 |      the JSON document begins.
 |      
 |      This can be used to decode a JSON document from a string that may
 |      have extraneous data at the end.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, encoding=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)',)",object_pairs_hook,,NoneType,arg_info
simplejson,3.17.0,simplejson.decoder.JSONDecoder,decoder,JSONDecoder,"Python Library Documentation: class JSONDecoder in module simplejson.decoder

class JSONDecoder(builtins.object)
 |  Simple JSON <http://json.org> decoder
 |  
 |  Performs the following translations in decoding by default:
 |  
 |  +---------------+-------------------+
 |  | JSON          | Python            |
 |  +===============+===================+
 |  | object        | dict              |
 |  +---------------+-------------------+
 |  | array         | list              |
 |  +---------------+-------------------+
 |  | string        | str, unicode      |
 |  +---------------+-------------------+
 |  | number (int)  | int, long         |
 |  +---------------+-------------------+
 |  | number (real) | float             |
 |  +---------------+-------------------+
 |  | true          | True              |
 |  +---------------+-------------------+
 |  | false         | False             |
 |  +---------------+-------------------+
 |  | null          | None              |
 |  +---------------+-------------------+
 |  
 |  It also understands ``NaN``, ``Infinity``, and ``-Infinity`` as
 |  their corresponding ``float`` values, which is outside the JSON spec.
 |  
 |  Methods defined here:
 |  
 |  __init__(self, encoding=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)
 |      *encoding* determines the encoding used to interpret any
 |      :class:`str` objects decoded by this instance (``'utf-8'`` by
 |      default).  It has no effect when decoding :class:`unicode` objects.
 |      
 |      Note that currently only encodings that are a superset of ASCII work,
 |      strings of other encodings should be passed in as :class:`unicode`.
 |      
 |      *object_hook*, if specified, will be called with the result of every
 |      JSON object decoded and its return value will be used in place of the
 |      given :class:`dict`.  This can be used to provide custom
 |      deserializations (e.g. to support JSON-RPC class hinting).
 |      
 |      *object_pairs_hook* is an optional function that will be called with
 |      the result of any object literal decode with an ordered list of pairs.
 |      The return value of *object_pairs_hook* will be used instead of the
 |      :class:`dict`.  This feature can be used to implement custom decoders
 |      that rely on the order that the key and value pairs are decoded (for
 |      example, :func:`collections.OrderedDict` will remember the order of
 |      insertion). If *object_hook* is also defined, the *object_pairs_hook*
 |      takes priority.
 |      
 |      *parse_float*, if specified, will be called with the string of every
 |      JSON float to be decoded.  By default, this is equivalent to
 |      ``float(num_str)``. This can be used to use another datatype or parser
 |      for JSON floats (e.g. :class:`decimal.Decimal`).
 |      
 |      *parse_int*, if specified, will be called with the string of every
 |      JSON int to be decoded.  By default, this is equivalent to
 |      ``int(num_str)``.  This can be used to use another datatype or parser
 |      for JSON integers (e.g. :class:`float`).
 |      
 |      *parse_constant*, if specified, will be called with one of the
 |      following strings: ``'-Infinity'``, ``'Infinity'``, ``'NaN'``.  This
 |      can be used to raise an exception if invalid JSON numbers are
 |      encountered.
 |      
 |      *strict* controls the parser's behavior when it encounters an
 |      invalid control character in a string. The default setting of
 |      ``True`` means that unescaped control characters are parse errors, if
 |      ``False`` then control characters will be allowed in strings.
 |  
 |  decode(self, s, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _PY3=True)
 |      Return the Python representation of ``s`` (a ``str`` or ``unicode``
 |      instance containing a JSON document)
 |  
 |  raw_decode(self, s, idx=0, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _PY3=True)
 |      Decode a JSON document from ``s`` (a ``str`` or ``unicode``
 |      beginning with a JSON document) and return a 2-tuple of the Python
 |      representation and the index in ``s`` where the document ended.
 |      Optionally, ``idx`` can be used to specify an offset in ``s`` where
 |      the JSON document begins.
 |      
 |      This can be used to decode a JSON document from a string that may
 |      have extraneous data at the end.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, encoding=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)',)",strict,True,bool,arg_info
simplejson,3.17.0,simplejson.decoder.JSONDecoder,decoder,JSONDecoder,"Python Library Documentation: class JSONDecoder in module simplejson.decoder

class JSONDecoder(builtins.object)
 |  Simple JSON <http://json.org> decoder
 |  
 |  Performs the following translations in decoding by default:
 |  
 |  +---------------+-------------------+
 |  | JSON          | Python            |
 |  +===============+===================+
 |  | object        | dict              |
 |  +---------------+-------------------+
 |  | array         | list              |
 |  +---------------+-------------------+
 |  | string        | str, unicode      |
 |  +---------------+-------------------+
 |  | number (int)  | int, long         |
 |  +---------------+-------------------+
 |  | number (real) | float             |
 |  +---------------+-------------------+
 |  | true          | True              |
 |  +---------------+-------------------+
 |  | false         | False             |
 |  +---------------+-------------------+
 |  | null          | None              |
 |  +---------------+-------------------+
 |  
 |  It also understands ``NaN``, ``Infinity``, and ``-Infinity`` as
 |  their corresponding ``float`` values, which is outside the JSON spec.
 |  
 |  Methods defined here:
 |  
 |  __init__(self, encoding=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)
 |      *encoding* determines the encoding used to interpret any
 |      :class:`str` objects decoded by this instance (``'utf-8'`` by
 |      default).  It has no effect when decoding :class:`unicode` objects.
 |      
 |      Note that currently only encodings that are a superset of ASCII work,
 |      strings of other encodings should be passed in as :class:`unicode`.
 |      
 |      *object_hook*, if specified, will be called with the result of every
 |      JSON object decoded and its return value will be used in place of the
 |      given :class:`dict`.  This can be used to provide custom
 |      deserializations (e.g. to support JSON-RPC class hinting).
 |      
 |      *object_pairs_hook* is an optional function that will be called with
 |      the result of any object literal decode with an ordered list of pairs.
 |      The return value of *object_pairs_hook* will be used instead of the
 |      :class:`dict`.  This feature can be used to implement custom decoders
 |      that rely on the order that the key and value pairs are decoded (for
 |      example, :func:`collections.OrderedDict` will remember the order of
 |      insertion). If *object_hook* is also defined, the *object_pairs_hook*
 |      takes priority.
 |      
 |      *parse_float*, if specified, will be called with the string of every
 |      JSON float to be decoded.  By default, this is equivalent to
 |      ``float(num_str)``. This can be used to use another datatype or parser
 |      for JSON floats (e.g. :class:`decimal.Decimal`).
 |      
 |      *parse_int*, if specified, will be called with the string of every
 |      JSON int to be decoded.  By default, this is equivalent to
 |      ``int(num_str)``.  This can be used to use another datatype or parser
 |      for JSON integers (e.g. :class:`float`).
 |      
 |      *parse_constant*, if specified, will be called with one of the
 |      following strings: ``'-Infinity'``, ``'Infinity'``, ``'NaN'``.  This
 |      can be used to raise an exception if invalid JSON numbers are
 |      encountered.
 |      
 |      *strict* controls the parser's behavior when it encounters an
 |      invalid control character in a string. The default setting of
 |      ``True`` means that unescaped control characters are parse errors, if
 |      ``False`` then control characters will be allowed in strings.
 |  
 |  decode(self, s, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _PY3=True)
 |      Return the Python representation of ``s`` (a ``str`` or ``unicode``
 |      instance containing a JSON document)
 |  
 |  raw_decode(self, s, idx=0, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _PY3=True)
 |      Decode a JSON document from ``s`` (a ``str`` or ``unicode``
 |      beginning with a JSON document) and return a 2-tuple of the Python
 |      representation and the index in ``s`` where the document ended.
 |      Optionally, ``idx`` can be used to specify an offset in ``s`` where
 |      the JSON document begins.
 |      
 |      This can be used to decode a JSON document from a string that may
 |      have extraneous data at the end.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, encoding=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)',)",parse_constant,,NoneType,arg_info
simplejson,3.17.0,simplejson.decoder.JSONDecoder,decoder,JSONDecoder,"Python Library Documentation: class JSONDecoder in module simplejson.decoder

class JSONDecoder(builtins.object)
 |  Simple JSON <http://json.org> decoder
 |  
 |  Performs the following translations in decoding by default:
 |  
 |  +---------------+-------------------+
 |  | JSON          | Python            |
 |  +===============+===================+
 |  | object        | dict              |
 |  +---------------+-------------------+
 |  | array         | list              |
 |  +---------------+-------------------+
 |  | string        | str, unicode      |
 |  +---------------+-------------------+
 |  | number (int)  | int, long         |
 |  +---------------+-------------------+
 |  | number (real) | float             |
 |  +---------------+-------------------+
 |  | true          | True              |
 |  +---------------+-------------------+
 |  | false         | False             |
 |  +---------------+-------------------+
 |  | null          | None              |
 |  +---------------+-------------------+
 |  
 |  It also understands ``NaN``, ``Infinity``, and ``-Infinity`` as
 |  their corresponding ``float`` values, which is outside the JSON spec.
 |  
 |  Methods defined here:
 |  
 |  __init__(self, encoding=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)
 |      *encoding* determines the encoding used to interpret any
 |      :class:`str` objects decoded by this instance (``'utf-8'`` by
 |      default).  It has no effect when decoding :class:`unicode` objects.
 |      
 |      Note that currently only encodings that are a superset of ASCII work,
 |      strings of other encodings should be passed in as :class:`unicode`.
 |      
 |      *object_hook*, if specified, will be called with the result of every
 |      JSON object decoded and its return value will be used in place of the
 |      given :class:`dict`.  This can be used to provide custom
 |      deserializations (e.g. to support JSON-RPC class hinting).
 |      
 |      *object_pairs_hook* is an optional function that will be called with
 |      the result of any object literal decode with an ordered list of pairs.
 |      The return value of *object_pairs_hook* will be used instead of the
 |      :class:`dict`.  This feature can be used to implement custom decoders
 |      that rely on the order that the key and value pairs are decoded (for
 |      example, :func:`collections.OrderedDict` will remember the order of
 |      insertion). If *object_hook* is also defined, the *object_pairs_hook*
 |      takes priority.
 |      
 |      *parse_float*, if specified, will be called with the string of every
 |      JSON float to be decoded.  By default, this is equivalent to
 |      ``float(num_str)``. This can be used to use another datatype or parser
 |      for JSON floats (e.g. :class:`decimal.Decimal`).
 |      
 |      *parse_int*, if specified, will be called with the string of every
 |      JSON int to be decoded.  By default, this is equivalent to
 |      ``int(num_str)``.  This can be used to use another datatype or parser
 |      for JSON integers (e.g. :class:`float`).
 |      
 |      *parse_constant*, if specified, will be called with one of the
 |      following strings: ``'-Infinity'``, ``'Infinity'``, ``'NaN'``.  This
 |      can be used to raise an exception if invalid JSON numbers are
 |      encountered.
 |      
 |      *strict* controls the parser's behavior when it encounters an
 |      invalid control character in a string. The default setting of
 |      ``True`` means that unescaped control characters are parse errors, if
 |      ``False`` then control characters will be allowed in strings.
 |  
 |  decode(self, s, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _PY3=True)
 |      Return the Python representation of ``s`` (a ``str`` or ``unicode``
 |      instance containing a JSON document)
 |  
 |  raw_decode(self, s, idx=0, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _PY3=True)
 |      Decode a JSON document from ``s`` (a ``str`` or ``unicode``
 |      beginning with a JSON document) and return a 2-tuple of the Python
 |      representation and the index in ``s`` where the document ended.
 |      Optionally, ``idx`` can be used to specify an offset in ``s`` where
 |      the JSON document begins.
 |      
 |      This can be used to decode a JSON document from a string that may
 |      have extraneous data at the end.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, encoding=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)',)",parse_int,,NoneType,arg_info
simplejson,3.17.0,simplejson.decoder.JSONDecoder,decoder,JSONDecoder,"Python Library Documentation: class JSONDecoder in module simplejson.decoder

class JSONDecoder(builtins.object)
 |  Simple JSON <http://json.org> decoder
 |  
 |  Performs the following translations in decoding by default:
 |  
 |  +---------------+-------------------+
 |  | JSON          | Python            |
 |  +===============+===================+
 |  | object        | dict              |
 |  +---------------+-------------------+
 |  | array         | list              |
 |  +---------------+-------------------+
 |  | string        | str, unicode      |
 |  +---------------+-------------------+
 |  | number (int)  | int, long         |
 |  +---------------+-------------------+
 |  | number (real) | float             |
 |  +---------------+-------------------+
 |  | true          | True              |
 |  +---------------+-------------------+
 |  | false         | False             |
 |  +---------------+-------------------+
 |  | null          | None              |
 |  +---------------+-------------------+
 |  
 |  It also understands ``NaN``, ``Infinity``, and ``-Infinity`` as
 |  their corresponding ``float`` values, which is outside the JSON spec.
 |  
 |  Methods defined here:
 |  
 |  __init__(self, encoding=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)
 |      *encoding* determines the encoding used to interpret any
 |      :class:`str` objects decoded by this instance (``'utf-8'`` by
 |      default).  It has no effect when decoding :class:`unicode` objects.
 |      
 |      Note that currently only encodings that are a superset of ASCII work,
 |      strings of other encodings should be passed in as :class:`unicode`.
 |      
 |      *object_hook*, if specified, will be called with the result of every
 |      JSON object decoded and its return value will be used in place of the
 |      given :class:`dict`.  This can be used to provide custom
 |      deserializations (e.g. to support JSON-RPC class hinting).
 |      
 |      *object_pairs_hook* is an optional function that will be called with
 |      the result of any object literal decode with an ordered list of pairs.
 |      The return value of *object_pairs_hook* will be used instead of the
 |      :class:`dict`.  This feature can be used to implement custom decoders
 |      that rely on the order that the key and value pairs are decoded (for
 |      example, :func:`collections.OrderedDict` will remember the order of
 |      insertion). If *object_hook* is also defined, the *object_pairs_hook*
 |      takes priority.
 |      
 |      *parse_float*, if specified, will be called with the string of every
 |      JSON float to be decoded.  By default, this is equivalent to
 |      ``float(num_str)``. This can be used to use another datatype or parser
 |      for JSON floats (e.g. :class:`decimal.Decimal`).
 |      
 |      *parse_int*, if specified, will be called with the string of every
 |      JSON int to be decoded.  By default, this is equivalent to
 |      ``int(num_str)``.  This can be used to use another datatype or parser
 |      for JSON integers (e.g. :class:`float`).
 |      
 |      *parse_constant*, if specified, will be called with one of the
 |      following strings: ``'-Infinity'``, ``'Infinity'``, ``'NaN'``.  This
 |      can be used to raise an exception if invalid JSON numbers are
 |      encountered.
 |      
 |      *strict* controls the parser's behavior when it encounters an
 |      invalid control character in a string. The default setting of
 |      ``True`` means that unescaped control characters are parse errors, if
 |      ``False`` then control characters will be allowed in strings.
 |  
 |  decode(self, s, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _PY3=True)
 |      Return the Python representation of ``s`` (a ``str`` or ``unicode``
 |      instance containing a JSON document)
 |  
 |  raw_decode(self, s, idx=0, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _PY3=True)
 |      Decode a JSON document from ``s`` (a ``str`` or ``unicode``
 |      beginning with a JSON document) and return a 2-tuple of the Python
 |      representation and the index in ``s`` where the document ended.
 |      Optionally, ``idx`` can be used to specify an offset in ``s`` where
 |      the JSON document begins.
 |      
 |      This can be used to decode a JSON document from a string that may
 |      have extraneous data at the end.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, encoding=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)',)",parse_float,,NoneType,arg_info
simplejson,3.17.0,simplejson.decoder.JSONDecoder,decoder,JSONDecoder,"Python Library Documentation: class JSONDecoder in module simplejson.decoder

class JSONDecoder(builtins.object)
 |  Simple JSON <http://json.org> decoder
 |  
 |  Performs the following translations in decoding by default:
 |  
 |  +---------------+-------------------+
 |  | JSON          | Python            |
 |  +===============+===================+
 |  | object        | dict              |
 |  +---------------+-------------------+
 |  | array         | list              |
 |  +---------------+-------------------+
 |  | string        | str, unicode      |
 |  +---------------+-------------------+
 |  | number (int)  | int, long         |
 |  +---------------+-------------------+
 |  | number (real) | float             |
 |  +---------------+-------------------+
 |  | true          | True              |
 |  +---------------+-------------------+
 |  | false         | False             |
 |  +---------------+-------------------+
 |  | null          | None              |
 |  +---------------+-------------------+
 |  
 |  It also understands ``NaN``, ``Infinity``, and ``-Infinity`` as
 |  their corresponding ``float`` values, which is outside the JSON spec.
 |  
 |  Methods defined here:
 |  
 |  __init__(self, encoding=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)
 |      *encoding* determines the encoding used to interpret any
 |      :class:`str` objects decoded by this instance (``'utf-8'`` by
 |      default).  It has no effect when decoding :class:`unicode` objects.
 |      
 |      Note that currently only encodings that are a superset of ASCII work,
 |      strings of other encodings should be passed in as :class:`unicode`.
 |      
 |      *object_hook*, if specified, will be called with the result of every
 |      JSON object decoded and its return value will be used in place of the
 |      given :class:`dict`.  This can be used to provide custom
 |      deserializations (e.g. to support JSON-RPC class hinting).
 |      
 |      *object_pairs_hook* is an optional function that will be called with
 |      the result of any object literal decode with an ordered list of pairs.
 |      The return value of *object_pairs_hook* will be used instead of the
 |      :class:`dict`.  This feature can be used to implement custom decoders
 |      that rely on the order that the key and value pairs are decoded (for
 |      example, :func:`collections.OrderedDict` will remember the order of
 |      insertion). If *object_hook* is also defined, the *object_pairs_hook*
 |      takes priority.
 |      
 |      *parse_float*, if specified, will be called with the string of every
 |      JSON float to be decoded.  By default, this is equivalent to
 |      ``float(num_str)``. This can be used to use another datatype or parser
 |      for JSON floats (e.g. :class:`decimal.Decimal`).
 |      
 |      *parse_int*, if specified, will be called with the string of every
 |      JSON int to be decoded.  By default, this is equivalent to
 |      ``int(num_str)``.  This can be used to use another datatype or parser
 |      for JSON integers (e.g. :class:`float`).
 |      
 |      *parse_constant*, if specified, will be called with one of the
 |      following strings: ``'-Infinity'``, ``'Infinity'``, ``'NaN'``.  This
 |      can be used to raise an exception if invalid JSON numbers are
 |      encountered.
 |      
 |      *strict* controls the parser's behavior when it encounters an
 |      invalid control character in a string. The default setting of
 |      ``True`` means that unescaped control characters are parse errors, if
 |      ``False`` then control characters will be allowed in strings.
 |  
 |  decode(self, s, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _PY3=True)
 |      Return the Python representation of ``s`` (a ``str`` or ``unicode``
 |      instance containing a JSON document)
 |  
 |  raw_decode(self, s, idx=0, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _PY3=True)
 |      Decode a JSON document from ``s`` (a ``str`` or ``unicode``
 |      beginning with a JSON document) and return a 2-tuple of the Python
 |      representation and the index in ``s`` where the document ended.
 |      Optionally, ``idx`` can be used to specify an offset in ``s`` where
 |      the JSON document begins.
 |      
 |      This can be used to decode a JSON document from a string that may
 |      have extraneous data at the end.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, encoding=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)',)",object_hook,,NoneType,arg_info
simplejson,3.17.0,simplejson.decoder.JSONDecoder,decoder,JSONDecoder,"Python Library Documentation: class JSONDecoder in module simplejson.decoder

class JSONDecoder(builtins.object)
 |  Simple JSON <http://json.org> decoder
 |  
 |  Performs the following translations in decoding by default:
 |  
 |  +---------------+-------------------+
 |  | JSON          | Python            |
 |  +===============+===================+
 |  | object        | dict              |
 |  +---------------+-------------------+
 |  | array         | list              |
 |  +---------------+-------------------+
 |  | string        | str, unicode      |
 |  +---------------+-------------------+
 |  | number (int)  | int, long         |
 |  +---------------+-------------------+
 |  | number (real) | float             |
 |  +---------------+-------------------+
 |  | true          | True              |
 |  +---------------+-------------------+
 |  | false         | False             |
 |  +---------------+-------------------+
 |  | null          | None              |
 |  +---------------+-------------------+
 |  
 |  It also understands ``NaN``, ``Infinity``, and ``-Infinity`` as
 |  their corresponding ``float`` values, which is outside the JSON spec.
 |  
 |  Methods defined here:
 |  
 |  __init__(self, encoding=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)
 |      *encoding* determines the encoding used to interpret any
 |      :class:`str` objects decoded by this instance (``'utf-8'`` by
 |      default).  It has no effect when decoding :class:`unicode` objects.
 |      
 |      Note that currently only encodings that are a superset of ASCII work,
 |      strings of other encodings should be passed in as :class:`unicode`.
 |      
 |      *object_hook*, if specified, will be called with the result of every
 |      JSON object decoded and its return value will be used in place of the
 |      given :class:`dict`.  This can be used to provide custom
 |      deserializations (e.g. to support JSON-RPC class hinting).
 |      
 |      *object_pairs_hook* is an optional function that will be called with
 |      the result of any object literal decode with an ordered list of pairs.
 |      The return value of *object_pairs_hook* will be used instead of the
 |      :class:`dict`.  This feature can be used to implement custom decoders
 |      that rely on the order that the key and value pairs are decoded (for
 |      example, :func:`collections.OrderedDict` will remember the order of
 |      insertion). If *object_hook* is also defined, the *object_pairs_hook*
 |      takes priority.
 |      
 |      *parse_float*, if specified, will be called with the string of every
 |      JSON float to be decoded.  By default, this is equivalent to
 |      ``float(num_str)``. This can be used to use another datatype or parser
 |      for JSON floats (e.g. :class:`decimal.Decimal`).
 |      
 |      *parse_int*, if specified, will be called with the string of every
 |      JSON int to be decoded.  By default, this is equivalent to
 |      ``int(num_str)``.  This can be used to use another datatype or parser
 |      for JSON integers (e.g. :class:`float`).
 |      
 |      *parse_constant*, if specified, will be called with one of the
 |      following strings: ``'-Infinity'``, ``'Infinity'``, ``'NaN'``.  This
 |      can be used to raise an exception if invalid JSON numbers are
 |      encountered.
 |      
 |      *strict* controls the parser's behavior when it encounters an
 |      invalid control character in a string. The default setting of
 |      ``True`` means that unescaped control characters are parse errors, if
 |      ``False`` then control characters will be allowed in strings.
 |  
 |  decode(self, s, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _PY3=True)
 |      Return the Python representation of ``s`` (a ``str`` or ``unicode``
 |      instance containing a JSON document)
 |  
 |  raw_decode(self, s, idx=0, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _PY3=True)
 |      Decode a JSON document from ``s`` (a ``str`` or ``unicode``
 |      beginning with a JSON document) and return a 2-tuple of the Python
 |      representation and the index in ``s`` where the document ended.
 |      Optionally, ``idx`` can be used to specify an offset in ``s`` where
 |      the JSON document begins.
 |      
 |      This can be used to decode a JSON document from a string that may
 |      have extraneous data at the end.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, encoding=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)',)",encoding,,NoneType,arg_info
simplejson,3.17.0,simplejson.decoder.JSONDecoder,decoder,JSONDecoder,"Python Library Documentation: class JSONDecoder in module simplejson.decoder

class JSONDecoder(builtins.object)
 |  Simple JSON <http://json.org> decoder
 |  
 |  Performs the following translations in decoding by default:
 |  
 |  +---------------+-------------------+
 |  | JSON          | Python            |
 |  +===============+===================+
 |  | object        | dict              |
 |  +---------------+-------------------+
 |  | array         | list              |
 |  +---------------+-------------------+
 |  | string        | str, unicode      |
 |  +---------------+-------------------+
 |  | number (int)  | int, long         |
 |  +---------------+-------------------+
 |  | number (real) | float             |
 |  +---------------+-------------------+
 |  | true          | True              |
 |  +---------------+-------------------+
 |  | false         | False             |
 |  +---------------+-------------------+
 |  | null          | None              |
 |  +---------------+-------------------+
 |  
 |  It also understands ``NaN``, ``Infinity``, and ``-Infinity`` as
 |  their corresponding ``float`` values, which is outside the JSON spec.
 |  
 |  Methods defined here:
 |  
 |  __init__(self, encoding=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)
 |      *encoding* determines the encoding used to interpret any
 |      :class:`str` objects decoded by this instance (``'utf-8'`` by
 |      default).  It has no effect when decoding :class:`unicode` objects.
 |      
 |      Note that currently only encodings that are a superset of ASCII work,
 |      strings of other encodings should be passed in as :class:`unicode`.
 |      
 |      *object_hook*, if specified, will be called with the result of every
 |      JSON object decoded and its return value will be used in place of the
 |      given :class:`dict`.  This can be used to provide custom
 |      deserializations (e.g. to support JSON-RPC class hinting).
 |      
 |      *object_pairs_hook* is an optional function that will be called with
 |      the result of any object literal decode with an ordered list of pairs.
 |      The return value of *object_pairs_hook* will be used instead of the
 |      :class:`dict`.  This feature can be used to implement custom decoders
 |      that rely on the order that the key and value pairs are decoded (for
 |      example, :func:`collections.OrderedDict` will remember the order of
 |      insertion). If *object_hook* is also defined, the *object_pairs_hook*
 |      takes priority.
 |      
 |      *parse_float*, if specified, will be called with the string of every
 |      JSON float to be decoded.  By default, this is equivalent to
 |      ``float(num_str)``. This can be used to use another datatype or parser
 |      for JSON floats (e.g. :class:`decimal.Decimal`).
 |      
 |      *parse_int*, if specified, will be called with the string of every
 |      JSON int to be decoded.  By default, this is equivalent to
 |      ``int(num_str)``.  This can be used to use another datatype or parser
 |      for JSON integers (e.g. :class:`float`).
 |      
 |      *parse_constant*, if specified, will be called with one of the
 |      following strings: ``'-Infinity'``, ``'Infinity'``, ``'NaN'``.  This
 |      can be used to raise an exception if invalid JSON numbers are
 |      encountered.
 |      
 |      *strict* controls the parser's behavior when it encounters an
 |      invalid control character in a string. The default setting of
 |      ``True`` means that unescaped control characters are parse errors, if
 |      ``False`` then control characters will be allowed in strings.
 |  
 |  decode(self, s, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _PY3=True)
 |      Return the Python representation of ``s`` (a ``str`` or ``unicode``
 |      instance containing a JSON document)
 |  
 |  raw_decode(self, s, idx=0, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _PY3=True)
 |      Decode a JSON document from ``s`` (a ``str`` or ``unicode``
 |      beginning with a JSON document) and return a 2-tuple of the Python
 |      representation and the index in ``s`` where the document ended.
 |      Optionally, ``idx`` can be used to specify an offset in ``s`` where
 |      the JSON document begins.
 |      
 |      This can be used to decode a JSON document from a string that may
 |      have extraneous data at the end.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, encoding=None, object_hook=None, parse_float=None, parse_int=None, parse_constant=None, strict=True, object_pairs_hook=None)',)",self,,,arg_info
simplejson,3.17.0,simplejson.decoder.JSONObject,decoder,JSONObject,"Python Library Documentation: function JSONObject in module simplejson.decoder

JSONObject(state, encoding, strict, scan_once, object_hook, object_pairs_hook, memo=None, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _ws=' \t\n\r')
",function,"(""(state, encoding, strict, scan_once, object_hook, object_pairs_hook, memo=None, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _ws=' \\t\\n\\r')"",)",object_hook,,,arg_info
simplejson,3.17.0,simplejson.decoder.JSONObject,decoder,JSONObject,"Python Library Documentation: function JSONObject in module simplejson.decoder

JSONObject(state, encoding, strict, scan_once, object_hook, object_pairs_hook, memo=None, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _ws=' \t\n\r')
",function,"(""(state, encoding, strict, scan_once, object_hook, object_pairs_hook, memo=None, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _ws=' \\t\\n\\r')"",)",strict,,,arg_info
simplejson,3.17.0,simplejson.decoder.JSONObject,decoder,JSONObject,"Python Library Documentation: function JSONObject in module simplejson.decoder

JSONObject(state, encoding, strict, scan_once, object_hook, object_pairs_hook, memo=None, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _ws=' \t\n\r')
",function,"(""(state, encoding, strict, scan_once, object_hook, object_pairs_hook, memo=None, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _ws=' \\t\\n\\r')"",)",scan_once,,,arg_info
simplejson,3.17.0,simplejson.decoder.JSONObject,decoder,JSONObject,"Python Library Documentation: function JSONObject in module simplejson.decoder

JSONObject(state, encoding, strict, scan_once, object_hook, object_pairs_hook, memo=None, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _ws=' \t\n\r')
",function,"(""(state, encoding, strict, scan_once, object_hook, object_pairs_hook, memo=None, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _ws=' \\t\\n\\r')"",)",object_pairs_hook,,,arg_info
simplejson,3.17.0,simplejson.decoder.JSONObject,decoder,JSONObject,"Python Library Documentation: function JSONObject in module simplejson.decoder

JSONObject(state, encoding, strict, scan_once, object_hook, object_pairs_hook, memo=None, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _ws=' \t\n\r')
",function,"(""(state, encoding, strict, scan_once, object_hook, object_pairs_hook, memo=None, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _ws=' \\t\\n\\r')"",)",_ws," 	
",,arg_info
simplejson,3.17.0,simplejson.decoder.JSONObject,decoder,JSONObject,"Python Library Documentation: function JSONObject in module simplejson.decoder

JSONObject(state, encoding, strict, scan_once, object_hook, object_pairs_hook, memo=None, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _ws=' \t\n\r')
",function,"(""(state, encoding, strict, scan_once, object_hook, object_pairs_hook, memo=None, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _ws=' \\t\\n\\r')"",)",_w,<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>,builtin_function_or_method,arg_info
simplejson,3.17.0,simplejson.decoder.JSONObject,decoder,JSONObject,"Python Library Documentation: function JSONObject in module simplejson.decoder

JSONObject(state, encoding, strict, scan_once, object_hook, object_pairs_hook, memo=None, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _ws=' \t\n\r')
",function,"(""(state, encoding, strict, scan_once, object_hook, object_pairs_hook, memo=None, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _ws=' \\t\\n\\r')"",)",encoding,,,arg_info
simplejson,3.17.0,simplejson.decoder.JSONObject,decoder,JSONObject,"Python Library Documentation: function JSONObject in module simplejson.decoder

JSONObject(state, encoding, strict, scan_once, object_hook, object_pairs_hook, memo=None, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _ws=' \t\n\r')
",function,"(""(state, encoding, strict, scan_once, object_hook, object_pairs_hook, memo=None, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _ws=' \\t\\n\\r')"",)",memo,,NoneType,arg_info
simplejson,3.17.0,simplejson.decoder.JSONObject,decoder,JSONObject,"Python Library Documentation: function JSONObject in module simplejson.decoder

JSONObject(state, encoding, strict, scan_once, object_hook, object_pairs_hook, memo=None, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _ws=' \t\n\r')
",function,"(""(state, encoding, strict, scan_once, object_hook, object_pairs_hook, memo=None, _w=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE64B0>, _ws=' \\t\\n\\r')"",)",state,,,arg_info
simplejson,3.17.0,simplejson.decoder.make_scanner,decoder,py_make_scanner,"Python Library Documentation: function py_make_scanner in module simplejson.scanner

py_make_scanner(context)
",function,"('(context)',)",context,,,arg_info
simplejson,3.17.0,simplejson.decoder.py_scanstring,decoder,py_scanstring,"Python Library Documentation: function py_scanstring in module simplejson.decoder

py_scanstring(s, end, encoding=None, strict=True, _b={'""': '""', '\\': '\\', '/': '/', 'b': '\x08', 'f': '\x0c', 'n': '\n', 'r': '\r', 't': '\t'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)
    Scan the string s for a JSON string. End is the index of the
    character in s after the quote that started the JSON string.
    Unescapes all valid JSON string escape sequences and raises ValueError
    on attempt to decode an invalid string. If strict is False then literal
    control characters are allowed in the string.
    
    Returns a tuple of the decoded string and the index of the character in s
    after the end quote.
",function,"('(s, end, encoding=None, strict=True, _b={\'""\': \'""\', \'\\\\\': \'\\\\\', \'/\': \'/\', \'b\': \'\\x08\', \'f\': \'\\x0c\', \'n\': \'\\n\', \'r\': \'\\r\', \'t\': \'\\t\'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)',)",s,,,arg_info
simplejson,3.17.0,simplejson.decoder.py_scanstring,decoder,py_scanstring,"Python Library Documentation: function py_scanstring in module simplejson.decoder

py_scanstring(s, end, encoding=None, strict=True, _b={'""': '""', '\\': '\\', '/': '/', 'b': '\x08', 'f': '\x0c', 'n': '\n', 'r': '\r', 't': '\t'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)
    Scan the string s for a JSON string. End is the index of the
    character in s after the quote that started the JSON string.
    Unescapes all valid JSON string escape sequences and raises ValueError
    on attempt to decode an invalid string. If strict is False then literal
    control characters are allowed in the string.
    
    Returns a tuple of the decoded string and the index of the character in s
    after the end quote.
",function,"('(s, end, encoding=None, strict=True, _b={\'""\': \'""\', \'\\\\\': \'\\\\\', \'/\': \'/\', \'b\': \'\\x08\', \'f\': \'\\x0c\', \'n\': \'\\n\', \'r\': \'\\r\', \'t\': \'\\t\'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)',)",_m,<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>,builtin_function_or_method,arg_info
simplejson,3.17.0,simplejson.decoder.py_scanstring,decoder,py_scanstring,"Python Library Documentation: function py_scanstring in module simplejson.decoder

py_scanstring(s, end, encoding=None, strict=True, _b={'""': '""', '\\': '\\', '/': '/', 'b': '\x08', 'f': '\x0c', 'n': '\n', 'r': '\r', 't': '\t'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)
    Scan the string s for a JSON string. End is the index of the
    character in s after the quote that started the JSON string.
    Unescapes all valid JSON string escape sequences and raises ValueError
    on attempt to decode an invalid string. If strict is False then literal
    control characters are allowed in the string.
    
    Returns a tuple of the decoded string and the index of the character in s
    after the end quote.
",function,"('(s, end, encoding=None, strict=True, _b={\'""\': \'""\', \'\\\\\': \'\\\\\', \'/\': \'/\', \'b\': \'\\x08\', \'f\': \'\\x0c\', \'n\': \'\\n\', \'r\': \'\\r\', \'t\': \'\\t\'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)',)",end,,,arg_info
simplejson,3.17.0,simplejson.decoder.py_scanstring,decoder,py_scanstring,"Python Library Documentation: function py_scanstring in module simplejson.decoder

py_scanstring(s, end, encoding=None, strict=True, _b={'""': '""', '\\': '\\', '/': '/', 'b': '\x08', 'f': '\x0c', 'n': '\n', 'r': '\r', 't': '\t'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)
    Scan the string s for a JSON string. End is the index of the
    character in s after the quote that started the JSON string.
    Unescapes all valid JSON string escape sequences and raises ValueError
    on attempt to decode an invalid string. If strict is False then literal
    control characters are allowed in the string.
    
    Returns a tuple of the decoded string and the index of the character in s
    after the end quote.
",function,"('(s, end, encoding=None, strict=True, _b={\'""\': \'""\', \'\\\\\': \'\\\\\', \'/\': \'/\', \'b\': \'\\x08\', \'f\': \'\\x0c\', \'n\': \'\\n\', \'r\': \'\\r\', \'t\': \'\\t\'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)',)",encoding,,NoneType,arg_info
simplejson,3.17.0,simplejson.decoder.py_scanstring,decoder,py_scanstring,"Python Library Documentation: function py_scanstring in module simplejson.decoder

py_scanstring(s, end, encoding=None, strict=True, _b={'""': '""', '\\': '\\', '/': '/', 'b': '\x08', 'f': '\x0c', 'n': '\n', 'r': '\r', 't': '\t'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)
    Scan the string s for a JSON string. End is the index of the
    character in s after the quote that started the JSON string.
    Unescapes all valid JSON string escape sequences and raises ValueError
    on attempt to decode an invalid string. If strict is False then literal
    control characters are allowed in the string.
    
    Returns a tuple of the decoded string and the index of the character in s
    after the end quote.
",function,"('(s, end, encoding=None, strict=True, _b={\'""\': \'""\', \'\\\\\': \'\\\\\', \'/\': \'/\', \'b\': \'\\x08\', \'f\': \'\\x0c\', \'n\': \'\\n\', \'r\': \'\\r\', \'t\': \'\\t\'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)',)",strict,True,bool,arg_info
simplejson,3.17.0,simplejson.decoder.py_scanstring,decoder,py_scanstring,"Python Library Documentation: function py_scanstring in module simplejson.decoder

py_scanstring(s, end, encoding=None, strict=True, _b={'""': '""', '\\': '\\', '/': '/', 'b': '\x08', 'f': '\x0c', 'n': '\n', 'r': '\r', 't': '\t'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)
    Scan the string s for a JSON string. End is the index of the
    character in s after the quote that started the JSON string.
    Unescapes all valid JSON string escape sequences and raises ValueError
    on attempt to decode an invalid string. If strict is False then literal
    control characters are allowed in the string.
    
    Returns a tuple of the decoded string and the index of the character in s
    after the end quote.
",function,"('(s, end, encoding=None, strict=True, _b={\'""\': \'""\', \'\\\\\': \'\\\\\', \'/\': \'/\', \'b\': \'\\x08\', \'f\': \'\\x0c\', \'n\': \'\\n\', \'r\': \'\\r\', \'t\': \'\\t\'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)',)",_b,"{'""': '""', '\\': '\\', '/': '/', 'b': '\x08', 'f': '\x0c', 'n': '\n', 'r': '\r', 't': '\t'}",dict,arg_info
simplejson,3.17.0,simplejson.decoder.py_scanstring,decoder,py_scanstring,"Python Library Documentation: function py_scanstring in module simplejson.decoder

py_scanstring(s, end, encoding=None, strict=True, _b={'""': '""', '\\': '\\', '/': '/', 'b': '\x08', 'f': '\x0c', 'n': '\n', 'r': '\r', 't': '\t'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)
    Scan the string s for a JSON string. End is the index of the
    character in s after the quote that started the JSON string.
    Unescapes all valid JSON string escape sequences and raises ValueError
    on attempt to decode an invalid string. If strict is False then literal
    control characters are allowed in the string.
    
    Returns a tuple of the decoded string and the index of the character in s
    after the end quote.
",function,"('(s, end, encoding=None, strict=True, _b={\'""\': \'""\', \'\\\\\': \'\\\\\', \'/\': \'/\', \'b\': \'\\x08\', \'f\': \'\\x0c\', \'n\': \'\\n\', \'r\': \'\\r\', \'t\': \'\\t\'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)',)",_join,<built-in method join of str object at 0x0000000000637AB0>,builtin_function_or_method,arg_info
simplejson,3.17.0,simplejson.decoder.py_scanstring,decoder,py_scanstring,"Python Library Documentation: function py_scanstring in module simplejson.decoder

py_scanstring(s, end, encoding=None, strict=True, _b={'""': '""', '\\': '\\', '/': '/', 'b': '\x08', 'f': '\x0c', 'n': '\n', 'r': '\r', 't': '\t'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)
    Scan the string s for a JSON string. End is the index of the
    character in s after the quote that started the JSON string.
    Unescapes all valid JSON string escape sequences and raises ValueError
    on attempt to decode an invalid string. If strict is False then literal
    control characters are allowed in the string.
    
    Returns a tuple of the decoded string and the index of the character in s
    after the end quote.
",function,"('(s, end, encoding=None, strict=True, _b={\'""\': \'""\', \'\\\\\': \'\\\\\', \'/\': \'/\', \'b\': \'\\x08\', \'f\': \'\\x0c\', \'n\': \'\\n\', \'r\': \'\\r\', \'t\': \'\\t\'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)',)",_PY3,True,bool,arg_info
simplejson,3.17.0,simplejson.decoder.py_scanstring,decoder,py_scanstring,"Python Library Documentation: function py_scanstring in module simplejson.decoder

py_scanstring(s, end, encoding=None, strict=True, _b={'""': '""', '\\': '\\', '/': '/', 'b': '\x08', 'f': '\x0c', 'n': '\n', 'r': '\r', 't': '\t'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)
    Scan the string s for a JSON string. End is the index of the
    character in s after the quote that started the JSON string.
    Unescapes all valid JSON string escape sequences and raises ValueError
    on attempt to decode an invalid string. If strict is False then literal
    control characters are allowed in the string.
    
    Returns a tuple of the decoded string and the index of the character in s
    after the end quote.
",function,"('(s, end, encoding=None, strict=True, _b={\'""\': \'""\', \'\\\\\': \'\\\\\', \'/\': \'/\', \'b\': \'\\x08\', \'f\': \'\\x0c\', \'n\': \'\\n\', \'r\': \'\\r\', \'t\': \'\\t\'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)',)",_maxunicode,1114111,int,arg_info
simplejson,3.17.0,simplejson.decoder.scanstring,decoder,py_scanstring,"Python Library Documentation: function py_scanstring in module simplejson.decoder

py_scanstring(s, end, encoding=None, strict=True, _b={'""': '""', '\\': '\\', '/': '/', 'b': '\x08', 'f': '\x0c', 'n': '\n', 'r': '\r', 't': '\t'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)
    Scan the string s for a JSON string. End is the index of the
    character in s after the quote that started the JSON string.
    Unescapes all valid JSON string escape sequences and raises ValueError
    on attempt to decode an invalid string. If strict is False then literal
    control characters are allowed in the string.
    
    Returns a tuple of the decoded string and the index of the character in s
    after the end quote.
",function,"('(s, end, encoding=None, strict=True, _b={\'""\': \'""\', \'\\\\\': \'\\\\\', \'/\': \'/\', \'b\': \'\\x08\', \'f\': \'\\x0c\', \'n\': \'\\n\', \'r\': \'\\r\', \'t\': \'\\t\'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)',)",_maxunicode,1114111,int,arg_info
simplejson,3.17.0,simplejson.decoder.scanstring,decoder,py_scanstring,"Python Library Documentation: function py_scanstring in module simplejson.decoder

py_scanstring(s, end, encoding=None, strict=True, _b={'""': '""', '\\': '\\', '/': '/', 'b': '\x08', 'f': '\x0c', 'n': '\n', 'r': '\r', 't': '\t'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)
    Scan the string s for a JSON string. End is the index of the
    character in s after the quote that started the JSON string.
    Unescapes all valid JSON string escape sequences and raises ValueError
    on attempt to decode an invalid string. If strict is False then literal
    control characters are allowed in the string.
    
    Returns a tuple of the decoded string and the index of the character in s
    after the end quote.
",function,"('(s, end, encoding=None, strict=True, _b={\'""\': \'""\', \'\\\\\': \'\\\\\', \'/\': \'/\', \'b\': \'\\x08\', \'f\': \'\\x0c\', \'n\': \'\\n\', \'r\': \'\\r\', \'t\': \'\\t\'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)',)",_PY3,True,bool,arg_info
simplejson,3.17.0,simplejson.decoder.scanstring,decoder,py_scanstring,"Python Library Documentation: function py_scanstring in module simplejson.decoder

py_scanstring(s, end, encoding=None, strict=True, _b={'""': '""', '\\': '\\', '/': '/', 'b': '\x08', 'f': '\x0c', 'n': '\n', 'r': '\r', 't': '\t'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)
    Scan the string s for a JSON string. End is the index of the
    character in s after the quote that started the JSON string.
    Unescapes all valid JSON string escape sequences and raises ValueError
    on attempt to decode an invalid string. If strict is False then literal
    control characters are allowed in the string.
    
    Returns a tuple of the decoded string and the index of the character in s
    after the end quote.
",function,"('(s, end, encoding=None, strict=True, _b={\'""\': \'""\', \'\\\\\': \'\\\\\', \'/\': \'/\', \'b\': \'\\x08\', \'f\': \'\\x0c\', \'n\': \'\\n\', \'r\': \'\\r\', \'t\': \'\\t\'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)',)",end,,,arg_info
simplejson,3.17.0,simplejson.decoder.scanstring,decoder,py_scanstring,"Python Library Documentation: function py_scanstring in module simplejson.decoder

py_scanstring(s, end, encoding=None, strict=True, _b={'""': '""', '\\': '\\', '/': '/', 'b': '\x08', 'f': '\x0c', 'n': '\n', 'r': '\r', 't': '\t'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)
    Scan the string s for a JSON string. End is the index of the
    character in s after the quote that started the JSON string.
    Unescapes all valid JSON string escape sequences and raises ValueError
    on attempt to decode an invalid string. If strict is False then literal
    control characters are allowed in the string.
    
    Returns a tuple of the decoded string and the index of the character in s
    after the end quote.
",function,"('(s, end, encoding=None, strict=True, _b={\'""\': \'""\', \'\\\\\': \'\\\\\', \'/\': \'/\', \'b\': \'\\x08\', \'f\': \'\\x0c\', \'n\': \'\\n\', \'r\': \'\\r\', \'t\': \'\\t\'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)',)",encoding,,NoneType,arg_info
simplejson,3.17.0,simplejson.decoder.scanstring,decoder,py_scanstring,"Python Library Documentation: function py_scanstring in module simplejson.decoder

py_scanstring(s, end, encoding=None, strict=True, _b={'""': '""', '\\': '\\', '/': '/', 'b': '\x08', 'f': '\x0c', 'n': '\n', 'r': '\r', 't': '\t'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)
    Scan the string s for a JSON string. End is the index of the
    character in s after the quote that started the JSON string.
    Unescapes all valid JSON string escape sequences and raises ValueError
    on attempt to decode an invalid string. If strict is False then literal
    control characters are allowed in the string.
    
    Returns a tuple of the decoded string and the index of the character in s
    after the end quote.
",function,"('(s, end, encoding=None, strict=True, _b={\'""\': \'""\', \'\\\\\': \'\\\\\', \'/\': \'/\', \'b\': \'\\x08\', \'f\': \'\\x0c\', \'n\': \'\\n\', \'r\': \'\\r\', \'t\': \'\\t\'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)',)",strict,True,bool,arg_info
simplejson,3.17.0,simplejson.decoder.scanstring,decoder,py_scanstring,"Python Library Documentation: function py_scanstring in module simplejson.decoder

py_scanstring(s, end, encoding=None, strict=True, _b={'""': '""', '\\': '\\', '/': '/', 'b': '\x08', 'f': '\x0c', 'n': '\n', 'r': '\r', 't': '\t'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)
    Scan the string s for a JSON string. End is the index of the
    character in s after the quote that started the JSON string.
    Unescapes all valid JSON string escape sequences and raises ValueError
    on attempt to decode an invalid string. If strict is False then literal
    control characters are allowed in the string.
    
    Returns a tuple of the decoded string and the index of the character in s
    after the end quote.
",function,"('(s, end, encoding=None, strict=True, _b={\'""\': \'""\', \'\\\\\': \'\\\\\', \'/\': \'/\', \'b\': \'\\x08\', \'f\': \'\\x0c\', \'n\': \'\\n\', \'r\': \'\\r\', \'t\': \'\\t\'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)',)",_b,"{'""': '""', '\\': '\\', '/': '/', 'b': '\x08', 'f': '\x0c', 'n': '\n', 'r': '\r', 't': '\t'}",dict,arg_info
simplejson,3.17.0,simplejson.decoder.scanstring,decoder,py_scanstring,"Python Library Documentation: function py_scanstring in module simplejson.decoder

py_scanstring(s, end, encoding=None, strict=True, _b={'""': '""', '\\': '\\', '/': '/', 'b': '\x08', 'f': '\x0c', 'n': '\n', 'r': '\r', 't': '\t'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)
    Scan the string s for a JSON string. End is the index of the
    character in s after the quote that started the JSON string.
    Unescapes all valid JSON string escape sequences and raises ValueError
    on attempt to decode an invalid string. If strict is False then literal
    control characters are allowed in the string.
    
    Returns a tuple of the decoded string and the index of the character in s
    after the end quote.
",function,"('(s, end, encoding=None, strict=True, _b={\'""\': \'""\', \'\\\\\': \'\\\\\', \'/\': \'/\', \'b\': \'\\x08\', \'f\': \'\\x0c\', \'n\': \'\\n\', \'r\': \'\\r\', \'t\': \'\\t\'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)',)",_m,<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>,builtin_function_or_method,arg_info
simplejson,3.17.0,simplejson.decoder.scanstring,decoder,py_scanstring,"Python Library Documentation: function py_scanstring in module simplejson.decoder

py_scanstring(s, end, encoding=None, strict=True, _b={'""': '""', '\\': '\\', '/': '/', 'b': '\x08', 'f': '\x0c', 'n': '\n', 'r': '\r', 't': '\t'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)
    Scan the string s for a JSON string. End is the index of the
    character in s after the quote that started the JSON string.
    Unescapes all valid JSON string escape sequences and raises ValueError
    on attempt to decode an invalid string. If strict is False then literal
    control characters are allowed in the string.
    
    Returns a tuple of the decoded string and the index of the character in s
    after the end quote.
",function,"('(s, end, encoding=None, strict=True, _b={\'""\': \'""\', \'\\\\\': \'\\\\\', \'/\': \'/\', \'b\': \'\\x08\', \'f\': \'\\x0c\', \'n\': \'\\n\', \'r\': \'\\r\', \'t\': \'\\t\'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)',)",_join,<built-in method join of str object at 0x0000000000637AB0>,builtin_function_or_method,arg_info
simplejson,3.17.0,simplejson.decoder.scanstring,decoder,py_scanstring,"Python Library Documentation: function py_scanstring in module simplejson.decoder

py_scanstring(s, end, encoding=None, strict=True, _b={'""': '""', '\\': '\\', '/': '/', 'b': '\x08', 'f': '\x0c', 'n': '\n', 'r': '\r', 't': '\t'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)
    Scan the string s for a JSON string. End is the index of the
    character in s after the quote that started the JSON string.
    Unescapes all valid JSON string escape sequences and raises ValueError
    on attempt to decode an invalid string. If strict is False then literal
    control characters are allowed in the string.
    
    Returns a tuple of the decoded string and the index of the character in s
    after the end quote.
",function,"('(s, end, encoding=None, strict=True, _b={\'""\': \'""\', \'\\\\\': \'\\\\\', \'/\': \'/\', \'b\': \'\\x08\', \'f\': \'\\x0c\', \'n\': \'\\n\', \'r\': \'\\r\', \'t\': \'\\t\'}, _m=<built-in method match of _sre.SRE_Pattern object at 0x0000000004DE1570>, _join=<built-in method join of str object at 0x0000000000637AB0>, _PY3=True, _maxunicode=1114111)',)",s,,,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoder,encoder,JSONEncoder,"Python Library Documentation: class JSONEncoder in module simplejson.encoder

class JSONEncoder(builtins.object)
 |  Extensible JSON <http://json.org> encoder for Python data structures.
 |  
 |  Supports the following objects and types by default:
 |  
 |  +-------------------+---------------+
 |  | Python            | JSON          |
 |  +===================+===============+
 |  | dict, namedtuple  | object        |
 |  +-------------------+---------------+
 |  | list, tuple       | array         |
 |  +-------------------+---------------+
 |  | str, unicode      | string        |
 |  +-------------------+---------------+
 |  | int, long, float  | number        |
 |  +-------------------+---------------+
 |  | True              | true          |
 |  +-------------------+---------------+
 |  | False             | false         |
 |  +-------------------+---------------+
 |  | None              | null          |
 |  +-------------------+---------------+
 |  
 |  To extend this to recognize other objects, subclass and implement a
 |  ``.default()`` method with another method that returns a serializable
 |  object for ``o`` if possible, otherwise it should call the superclass
 |  implementation (to raise ``TypeError``).
 |  
 |  Methods defined here:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",separators,,NoneType,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoder,encoder,JSONEncoder,"Python Library Documentation: class JSONEncoder in module simplejson.encoder

class JSONEncoder(builtins.object)
 |  Extensible JSON <http://json.org> encoder for Python data structures.
 |  
 |  Supports the following objects and types by default:
 |  
 |  +-------------------+---------------+
 |  | Python            | JSON          |
 |  +===================+===============+
 |  | dict, namedtuple  | object        |
 |  +-------------------+---------------+
 |  | list, tuple       | array         |
 |  +-------------------+---------------+
 |  | str, unicode      | string        |
 |  +-------------------+---------------+
 |  | int, long, float  | number        |
 |  +-------------------+---------------+
 |  | True              | true          |
 |  +-------------------+---------------+
 |  | False             | false         |
 |  +-------------------+---------------+
 |  | None              | null          |
 |  +-------------------+---------------+
 |  
 |  To extend this to recognize other objects, subclass and implement a
 |  ``.default()`` method with another method that returns a serializable
 |  object for ``o`` if possible, otherwise it should call the superclass
 |  implementation (to raise ``TypeError``).
 |  
 |  Methods defined here:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",self,,,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoder,encoder,JSONEncoder,"Python Library Documentation: class JSONEncoder in module simplejson.encoder

class JSONEncoder(builtins.object)
 |  Extensible JSON <http://json.org> encoder for Python data structures.
 |  
 |  Supports the following objects and types by default:
 |  
 |  +-------------------+---------------+
 |  | Python            | JSON          |
 |  +===================+===============+
 |  | dict, namedtuple  | object        |
 |  +-------------------+---------------+
 |  | list, tuple       | array         |
 |  +-------------------+---------------+
 |  | str, unicode      | string        |
 |  +-------------------+---------------+
 |  | int, long, float  | number        |
 |  +-------------------+---------------+
 |  | True              | true          |
 |  +-------------------+---------------+
 |  | False             | false         |
 |  +-------------------+---------------+
 |  | None              | null          |
 |  +-------------------+---------------+
 |  
 |  To extend this to recognize other objects, subclass and implement a
 |  ``.default()`` method with another method that returns a serializable
 |  object for ``o`` if possible, otherwise it should call the superclass
 |  implementation (to raise ``TypeError``).
 |  
 |  Methods defined here:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",skipkeys,False,bool,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoder,encoder,JSONEncoder,"Python Library Documentation: class JSONEncoder in module simplejson.encoder

class JSONEncoder(builtins.object)
 |  Extensible JSON <http://json.org> encoder for Python data structures.
 |  
 |  Supports the following objects and types by default:
 |  
 |  +-------------------+---------------+
 |  | Python            | JSON          |
 |  +===================+===============+
 |  | dict, namedtuple  | object        |
 |  +-------------------+---------------+
 |  | list, tuple       | array         |
 |  +-------------------+---------------+
 |  | str, unicode      | string        |
 |  +-------------------+---------------+
 |  | int, long, float  | number        |
 |  +-------------------+---------------+
 |  | True              | true          |
 |  +-------------------+---------------+
 |  | False             | false         |
 |  +-------------------+---------------+
 |  | None              | null          |
 |  +-------------------+---------------+
 |  
 |  To extend this to recognize other objects, subclass and implement a
 |  ``.default()`` method with another method that returns a serializable
 |  object for ``o`` if possible, otherwise it should call the superclass
 |  implementation (to raise ``TypeError``).
 |  
 |  Methods defined here:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",ensure_ascii,True,bool,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoder,encoder,JSONEncoder,"Python Library Documentation: class JSONEncoder in module simplejson.encoder

class JSONEncoder(builtins.object)
 |  Extensible JSON <http://json.org> encoder for Python data structures.
 |  
 |  Supports the following objects and types by default:
 |  
 |  +-------------------+---------------+
 |  | Python            | JSON          |
 |  +===================+===============+
 |  | dict, namedtuple  | object        |
 |  +-------------------+---------------+
 |  | list, tuple       | array         |
 |  +-------------------+---------------+
 |  | str, unicode      | string        |
 |  +-------------------+---------------+
 |  | int, long, float  | number        |
 |  +-------------------+---------------+
 |  | True              | true          |
 |  +-------------------+---------------+
 |  | False             | false         |
 |  +-------------------+---------------+
 |  | None              | null          |
 |  +-------------------+---------------+
 |  
 |  To extend this to recognize other objects, subclass and implement a
 |  ``.default()`` method with another method that returns a serializable
 |  object for ``o`` if possible, otherwise it should call the superclass
 |  implementation (to raise ``TypeError``).
 |  
 |  Methods defined here:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",check_circular,True,bool,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoder,encoder,JSONEncoder,"Python Library Documentation: class JSONEncoder in module simplejson.encoder

class JSONEncoder(builtins.object)
 |  Extensible JSON <http://json.org> encoder for Python data structures.
 |  
 |  Supports the following objects and types by default:
 |  
 |  +-------------------+---------------+
 |  | Python            | JSON          |
 |  +===================+===============+
 |  | dict, namedtuple  | object        |
 |  +-------------------+---------------+
 |  | list, tuple       | array         |
 |  +-------------------+---------------+
 |  | str, unicode      | string        |
 |  +-------------------+---------------+
 |  | int, long, float  | number        |
 |  +-------------------+---------------+
 |  | True              | true          |
 |  +-------------------+---------------+
 |  | False             | false         |
 |  +-------------------+---------------+
 |  | None              | null          |
 |  +-------------------+---------------+
 |  
 |  To extend this to recognize other objects, subclass and implement a
 |  ``.default()`` method with another method that returns a serializable
 |  object for ``o`` if possible, otherwise it should call the superclass
 |  implementation (to raise ``TypeError``).
 |  
 |  Methods defined here:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",allow_nan,True,bool,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoder,encoder,JSONEncoder,"Python Library Documentation: class JSONEncoder in module simplejson.encoder

class JSONEncoder(builtins.object)
 |  Extensible JSON <http://json.org> encoder for Python data structures.
 |  
 |  Supports the following objects and types by default:
 |  
 |  +-------------------+---------------+
 |  | Python            | JSON          |
 |  +===================+===============+
 |  | dict, namedtuple  | object        |
 |  +-------------------+---------------+
 |  | list, tuple       | array         |
 |  +-------------------+---------------+
 |  | str, unicode      | string        |
 |  +-------------------+---------------+
 |  | int, long, float  | number        |
 |  +-------------------+---------------+
 |  | True              | true          |
 |  +-------------------+---------------+
 |  | False             | false         |
 |  +-------------------+---------------+
 |  | None              | null          |
 |  +-------------------+---------------+
 |  
 |  To extend this to recognize other objects, subclass and implement a
 |  ``.default()`` method with another method that returns a serializable
 |  object for ``o`` if possible, otherwise it should call the superclass
 |  implementation (to raise ``TypeError``).
 |  
 |  Methods defined here:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",sort_keys,False,bool,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoder,encoder,JSONEncoder,"Python Library Documentation: class JSONEncoder in module simplejson.encoder

class JSONEncoder(builtins.object)
 |  Extensible JSON <http://json.org> encoder for Python data structures.
 |  
 |  Supports the following objects and types by default:
 |  
 |  +-------------------+---------------+
 |  | Python            | JSON          |
 |  +===================+===============+
 |  | dict, namedtuple  | object        |
 |  +-------------------+---------------+
 |  | list, tuple       | array         |
 |  +-------------------+---------------+
 |  | str, unicode      | string        |
 |  +-------------------+---------------+
 |  | int, long, float  | number        |
 |  +-------------------+---------------+
 |  | True              | true          |
 |  +-------------------+---------------+
 |  | False             | false         |
 |  +-------------------+---------------+
 |  | None              | null          |
 |  +-------------------+---------------+
 |  
 |  To extend this to recognize other objects, subclass and implement a
 |  ``.default()`` method with another method that returns a serializable
 |  object for ``o`` if possible, otherwise it should call the superclass
 |  implementation (to raise ``TypeError``).
 |  
 |  Methods defined here:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",indent,,NoneType,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoder,encoder,JSONEncoder,"Python Library Documentation: class JSONEncoder in module simplejson.encoder

class JSONEncoder(builtins.object)
 |  Extensible JSON <http://json.org> encoder for Python data structures.
 |  
 |  Supports the following objects and types by default:
 |  
 |  +-------------------+---------------+
 |  | Python            | JSON          |
 |  +===================+===============+
 |  | dict, namedtuple  | object        |
 |  +-------------------+---------------+
 |  | list, tuple       | array         |
 |  +-------------------+---------------+
 |  | str, unicode      | string        |
 |  +-------------------+---------------+
 |  | int, long, float  | number        |
 |  +-------------------+---------------+
 |  | True              | true          |
 |  +-------------------+---------------+
 |  | False             | false         |
 |  +-------------------+---------------+
 |  | None              | null          |
 |  +-------------------+---------------+
 |  
 |  To extend this to recognize other objects, subclass and implement a
 |  ``.default()`` method with another method that returns a serializable
 |  object for ``o`` if possible, otherwise it should call the superclass
 |  implementation (to raise ``TypeError``).
 |  
 |  Methods defined here:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",encoding,utf-8,str,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoder,encoder,JSONEncoder,"Python Library Documentation: class JSONEncoder in module simplejson.encoder

class JSONEncoder(builtins.object)
 |  Extensible JSON <http://json.org> encoder for Python data structures.
 |  
 |  Supports the following objects and types by default:
 |  
 |  +-------------------+---------------+
 |  | Python            | JSON          |
 |  +===================+===============+
 |  | dict, namedtuple  | object        |
 |  +-------------------+---------------+
 |  | list, tuple       | array         |
 |  +-------------------+---------------+
 |  | str, unicode      | string        |
 |  +-------------------+---------------+
 |  | int, long, float  | number        |
 |  +-------------------+---------------+
 |  | True              | true          |
 |  +-------------------+---------------+
 |  | False             | false         |
 |  +-------------------+---------------+
 |  | None              | null          |
 |  +-------------------+---------------+
 |  
 |  To extend this to recognize other objects, subclass and implement a
 |  ``.default()`` method with another method that returns a serializable
 |  object for ``o`` if possible, otherwise it should call the superclass
 |  implementation (to raise ``TypeError``).
 |  
 |  Methods defined here:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",iterable_as_array,False,bool,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoder,encoder,JSONEncoder,"Python Library Documentation: class JSONEncoder in module simplejson.encoder

class JSONEncoder(builtins.object)
 |  Extensible JSON <http://json.org> encoder for Python data structures.
 |  
 |  Supports the following objects and types by default:
 |  
 |  +-------------------+---------------+
 |  | Python            | JSON          |
 |  +===================+===============+
 |  | dict, namedtuple  | object        |
 |  +-------------------+---------------+
 |  | list, tuple       | array         |
 |  +-------------------+---------------+
 |  | str, unicode      | string        |
 |  +-------------------+---------------+
 |  | int, long, float  | number        |
 |  +-------------------+---------------+
 |  | True              | true          |
 |  +-------------------+---------------+
 |  | False             | false         |
 |  +-------------------+---------------+
 |  | None              | null          |
 |  +-------------------+---------------+
 |  
 |  To extend this to recognize other objects, subclass and implement a
 |  ``.default()`` method with another method that returns a serializable
 |  object for ``o`` if possible, otherwise it should call the superclass
 |  implementation (to raise ``TypeError``).
 |  
 |  Methods defined here:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",use_decimal,True,bool,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoder,encoder,JSONEncoder,"Python Library Documentation: class JSONEncoder in module simplejson.encoder

class JSONEncoder(builtins.object)
 |  Extensible JSON <http://json.org> encoder for Python data structures.
 |  
 |  Supports the following objects and types by default:
 |  
 |  +-------------------+---------------+
 |  | Python            | JSON          |
 |  +===================+===============+
 |  | dict, namedtuple  | object        |
 |  +-------------------+---------------+
 |  | list, tuple       | array         |
 |  +-------------------+---------------+
 |  | str, unicode      | string        |
 |  +-------------------+---------------+
 |  | int, long, float  | number        |
 |  +-------------------+---------------+
 |  | True              | true          |
 |  +-------------------+---------------+
 |  | False             | false         |
 |  +-------------------+---------------+
 |  | None              | null          |
 |  +-------------------+---------------+
 |  
 |  To extend this to recognize other objects, subclass and implement a
 |  ``.default()`` method with another method that returns a serializable
 |  object for ``o`` if possible, otherwise it should call the superclass
 |  implementation (to raise ``TypeError``).
 |  
 |  Methods defined here:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",default,,NoneType,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoder,encoder,JSONEncoder,"Python Library Documentation: class JSONEncoder in module simplejson.encoder

class JSONEncoder(builtins.object)
 |  Extensible JSON <http://json.org> encoder for Python data structures.
 |  
 |  Supports the following objects and types by default:
 |  
 |  +-------------------+---------------+
 |  | Python            | JSON          |
 |  +===================+===============+
 |  | dict, namedtuple  | object        |
 |  +-------------------+---------------+
 |  | list, tuple       | array         |
 |  +-------------------+---------------+
 |  | str, unicode      | string        |
 |  +-------------------+---------------+
 |  | int, long, float  | number        |
 |  +-------------------+---------------+
 |  | True              | true          |
 |  +-------------------+---------------+
 |  | False             | false         |
 |  +-------------------+---------------+
 |  | None              | null          |
 |  +-------------------+---------------+
 |  
 |  To extend this to recognize other objects, subclass and implement a
 |  ``.default()`` method with another method that returns a serializable
 |  object for ``o`` if possible, otherwise it should call the superclass
 |  implementation (to raise ``TypeError``).
 |  
 |  Methods defined here:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",ignore_nan,False,bool,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoder,encoder,JSONEncoder,"Python Library Documentation: class JSONEncoder in module simplejson.encoder

class JSONEncoder(builtins.object)
 |  Extensible JSON <http://json.org> encoder for Python data structures.
 |  
 |  Supports the following objects and types by default:
 |  
 |  +-------------------+---------------+
 |  | Python            | JSON          |
 |  +===================+===============+
 |  | dict, namedtuple  | object        |
 |  +-------------------+---------------+
 |  | list, tuple       | array         |
 |  +-------------------+---------------+
 |  | str, unicode      | string        |
 |  +-------------------+---------------+
 |  | int, long, float  | number        |
 |  +-------------------+---------------+
 |  | True              | true          |
 |  +-------------------+---------------+
 |  | False             | false         |
 |  +-------------------+---------------+
 |  | None              | null          |
 |  +-------------------+---------------+
 |  
 |  To extend this to recognize other objects, subclass and implement a
 |  ``.default()`` method with another method that returns a serializable
 |  object for ``o`` if possible, otherwise it should call the superclass
 |  implementation (to raise ``TypeError``).
 |  
 |  Methods defined here:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",for_json,False,bool,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoder,encoder,JSONEncoder,"Python Library Documentation: class JSONEncoder in module simplejson.encoder

class JSONEncoder(builtins.object)
 |  Extensible JSON <http://json.org> encoder for Python data structures.
 |  
 |  Supports the following objects and types by default:
 |  
 |  +-------------------+---------------+
 |  | Python            | JSON          |
 |  +===================+===============+
 |  | dict, namedtuple  | object        |
 |  +-------------------+---------------+
 |  | list, tuple       | array         |
 |  +-------------------+---------------+
 |  | str, unicode      | string        |
 |  +-------------------+---------------+
 |  | int, long, float  | number        |
 |  +-------------------+---------------+
 |  | True              | true          |
 |  +-------------------+---------------+
 |  | False             | false         |
 |  +-------------------+---------------+
 |  | None              | null          |
 |  +-------------------+---------------+
 |  
 |  To extend this to recognize other objects, subclass and implement a
 |  ``.default()`` method with another method that returns a serializable
 |  object for ``o`` if possible, otherwise it should call the superclass
 |  implementation (to raise ``TypeError``).
 |  
 |  Methods defined here:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",int_as_string_bitcount,,NoneType,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoder,encoder,JSONEncoder,"Python Library Documentation: class JSONEncoder in module simplejson.encoder

class JSONEncoder(builtins.object)
 |  Extensible JSON <http://json.org> encoder for Python data structures.
 |  
 |  Supports the following objects and types by default:
 |  
 |  +-------------------+---------------+
 |  | Python            | JSON          |
 |  +===================+===============+
 |  | dict, namedtuple  | object        |
 |  +-------------------+---------------+
 |  | list, tuple       | array         |
 |  +-------------------+---------------+
 |  | str, unicode      | string        |
 |  +-------------------+---------------+
 |  | int, long, float  | number        |
 |  +-------------------+---------------+
 |  | True              | true          |
 |  +-------------------+---------------+
 |  | False             | false         |
 |  +-------------------+---------------+
 |  | None              | null          |
 |  +-------------------+---------------+
 |  
 |  To extend this to recognize other objects, subclass and implement a
 |  ``.default()`` method with another method that returns a serializable
 |  object for ``o`` if possible, otherwise it should call the superclass
 |  implementation (to raise ``TypeError``).
 |  
 |  Methods defined here:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",bigint_as_string,False,bool,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoder,encoder,JSONEncoder,"Python Library Documentation: class JSONEncoder in module simplejson.encoder

class JSONEncoder(builtins.object)
 |  Extensible JSON <http://json.org> encoder for Python data structures.
 |  
 |  Supports the following objects and types by default:
 |  
 |  +-------------------+---------------+
 |  | Python            | JSON          |
 |  +===================+===============+
 |  | dict, namedtuple  | object        |
 |  +-------------------+---------------+
 |  | list, tuple       | array         |
 |  +-------------------+---------------+
 |  | str, unicode      | string        |
 |  +-------------------+---------------+
 |  | int, long, float  | number        |
 |  +-------------------+---------------+
 |  | True              | true          |
 |  +-------------------+---------------+
 |  | False             | false         |
 |  +-------------------+---------------+
 |  | None              | null          |
 |  +-------------------+---------------+
 |  
 |  To extend this to recognize other objects, subclass and implement a
 |  ``.default()`` method with another method that returns a serializable
 |  object for ``o`` if possible, otherwise it should call the superclass
 |  implementation (to raise ``TypeError``).
 |  
 |  Methods defined here:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",tuple_as_array,True,bool,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoder,encoder,JSONEncoder,"Python Library Documentation: class JSONEncoder in module simplejson.encoder

class JSONEncoder(builtins.object)
 |  Extensible JSON <http://json.org> encoder for Python data structures.
 |  
 |  Supports the following objects and types by default:
 |  
 |  +-------------------+---------------+
 |  | Python            | JSON          |
 |  +===================+===============+
 |  | dict, namedtuple  | object        |
 |  +-------------------+---------------+
 |  | list, tuple       | array         |
 |  +-------------------+---------------+
 |  | str, unicode      | string        |
 |  +-------------------+---------------+
 |  | int, long, float  | number        |
 |  +-------------------+---------------+
 |  | True              | true          |
 |  +-------------------+---------------+
 |  | False             | false         |
 |  +-------------------+---------------+
 |  | None              | null          |
 |  +-------------------+---------------+
 |  
 |  To extend this to recognize other objects, subclass and implement a
 |  ``.default()`` method with another method that returns a serializable
 |  object for ``o`` if possible, otherwise it should call the superclass
 |  implementation (to raise ``TypeError``).
 |  
 |  Methods defined here:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",namedtuple_as_object,True,bool,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoder,encoder,JSONEncoder,"Python Library Documentation: class JSONEncoder in module simplejson.encoder

class JSONEncoder(builtins.object)
 |  Extensible JSON <http://json.org> encoder for Python data structures.
 |  
 |  Supports the following objects and types by default:
 |  
 |  +-------------------+---------------+
 |  | Python            | JSON          |
 |  +===================+===============+
 |  | dict, namedtuple  | object        |
 |  +-------------------+---------------+
 |  | list, tuple       | array         |
 |  +-------------------+---------------+
 |  | str, unicode      | string        |
 |  +-------------------+---------------+
 |  | int, long, float  | number        |
 |  +-------------------+---------------+
 |  | True              | true          |
 |  +-------------------+---------------+
 |  | False             | false         |
 |  +-------------------+---------------+
 |  | None              | null          |
 |  +-------------------+---------------+
 |  
 |  To extend this to recognize other objects, subclass and implement a
 |  ``.default()`` method with another method that returns a serializable
 |  object for ``o`` if possible, otherwise it should call the superclass
 |  implementation (to raise ``TypeError``).
 |  
 |  Methods defined here:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",item_sort_key,,NoneType,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoderForHTML,encoder,JSONEncoderForHTML,"Python Library Documentation: class JSONEncoderForHTML in module simplejson.encoder

class JSONEncoderForHTML(JSONEncoder)
 |  An encoder that produces JSON safe to embed in HTML.
 |  
 |  To embed JSON content in, say, a script tag on a web page, the
 |  characters &, < and > should be escaped. They cannot be escaped
 |  with the usual entities (e.g. &amp;) because they are not expanded
 |  within <script> tags.
 |  
 |  This class also escapes the line separator and paragraph separator
 |  characters U+2028 and U+2029, irrespective of the ensure_ascii setting,
 |  as these characters are not valid in JavaScript strings (see
 |  http://timelessrepo.com/json-isnt-a-javascript-subset).
 |  
 |  Method resolution order:
 |      JSONEncoderForHTML
 |      JSONEncoder
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from JSONEncoder:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from JSONEncoder:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from JSONEncoder:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",int_as_string_bitcount,,NoneType,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoderForHTML,encoder,JSONEncoderForHTML,"Python Library Documentation: class JSONEncoderForHTML in module simplejson.encoder

class JSONEncoderForHTML(JSONEncoder)
 |  An encoder that produces JSON safe to embed in HTML.
 |  
 |  To embed JSON content in, say, a script tag on a web page, the
 |  characters &, < and > should be escaped. They cannot be escaped
 |  with the usual entities (e.g. &amp;) because they are not expanded
 |  within <script> tags.
 |  
 |  This class also escapes the line separator and paragraph separator
 |  characters U+2028 and U+2029, irrespective of the ensure_ascii setting,
 |  as these characters are not valid in JavaScript strings (see
 |  http://timelessrepo.com/json-isnt-a-javascript-subset).
 |  
 |  Method resolution order:
 |      JSONEncoderForHTML
 |      JSONEncoder
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from JSONEncoder:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from JSONEncoder:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from JSONEncoder:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",namedtuple_as_object,True,bool,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoderForHTML,encoder,JSONEncoderForHTML,"Python Library Documentation: class JSONEncoderForHTML in module simplejson.encoder

class JSONEncoderForHTML(JSONEncoder)
 |  An encoder that produces JSON safe to embed in HTML.
 |  
 |  To embed JSON content in, say, a script tag on a web page, the
 |  characters &, < and > should be escaped. They cannot be escaped
 |  with the usual entities (e.g. &amp;) because they are not expanded
 |  within <script> tags.
 |  
 |  This class also escapes the line separator and paragraph separator
 |  characters U+2028 and U+2029, irrespective of the ensure_ascii setting,
 |  as these characters are not valid in JavaScript strings (see
 |  http://timelessrepo.com/json-isnt-a-javascript-subset).
 |  
 |  Method resolution order:
 |      JSONEncoderForHTML
 |      JSONEncoder
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from JSONEncoder:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from JSONEncoder:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from JSONEncoder:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",ignore_nan,False,bool,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoderForHTML,encoder,JSONEncoderForHTML,"Python Library Documentation: class JSONEncoderForHTML in module simplejson.encoder

class JSONEncoderForHTML(JSONEncoder)
 |  An encoder that produces JSON safe to embed in HTML.
 |  
 |  To embed JSON content in, say, a script tag on a web page, the
 |  characters &, < and > should be escaped. They cannot be escaped
 |  with the usual entities (e.g. &amp;) because they are not expanded
 |  within <script> tags.
 |  
 |  This class also escapes the line separator and paragraph separator
 |  characters U+2028 and U+2029, irrespective of the ensure_ascii setting,
 |  as these characters are not valid in JavaScript strings (see
 |  http://timelessrepo.com/json-isnt-a-javascript-subset).
 |  
 |  Method resolution order:
 |      JSONEncoderForHTML
 |      JSONEncoder
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from JSONEncoder:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from JSONEncoder:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from JSONEncoder:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",for_json,False,bool,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoderForHTML,encoder,JSONEncoderForHTML,"Python Library Documentation: class JSONEncoderForHTML in module simplejson.encoder

class JSONEncoderForHTML(JSONEncoder)
 |  An encoder that produces JSON safe to embed in HTML.
 |  
 |  To embed JSON content in, say, a script tag on a web page, the
 |  characters &, < and > should be escaped. They cannot be escaped
 |  with the usual entities (e.g. &amp;) because they are not expanded
 |  within <script> tags.
 |  
 |  This class also escapes the line separator and paragraph separator
 |  characters U+2028 and U+2029, irrespective of the ensure_ascii setting,
 |  as these characters are not valid in JavaScript strings (see
 |  http://timelessrepo.com/json-isnt-a-javascript-subset).
 |  
 |  Method resolution order:
 |      JSONEncoderForHTML
 |      JSONEncoder
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from JSONEncoder:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from JSONEncoder:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from JSONEncoder:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",item_sort_key,,NoneType,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoderForHTML,encoder,JSONEncoderForHTML,"Python Library Documentation: class JSONEncoderForHTML in module simplejson.encoder

class JSONEncoderForHTML(JSONEncoder)
 |  An encoder that produces JSON safe to embed in HTML.
 |  
 |  To embed JSON content in, say, a script tag on a web page, the
 |  characters &, < and > should be escaped. They cannot be escaped
 |  with the usual entities (e.g. &amp;) because they are not expanded
 |  within <script> tags.
 |  
 |  This class also escapes the line separator and paragraph separator
 |  characters U+2028 and U+2029, irrespective of the ensure_ascii setting,
 |  as these characters are not valid in JavaScript strings (see
 |  http://timelessrepo.com/json-isnt-a-javascript-subset).
 |  
 |  Method resolution order:
 |      JSONEncoderForHTML
 |      JSONEncoder
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from JSONEncoder:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from JSONEncoder:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from JSONEncoder:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",bigint_as_string,False,bool,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoderForHTML,encoder,JSONEncoderForHTML,"Python Library Documentation: class JSONEncoderForHTML in module simplejson.encoder

class JSONEncoderForHTML(JSONEncoder)
 |  An encoder that produces JSON safe to embed in HTML.
 |  
 |  To embed JSON content in, say, a script tag on a web page, the
 |  characters &, < and > should be escaped. They cannot be escaped
 |  with the usual entities (e.g. &amp;) because they are not expanded
 |  within <script> tags.
 |  
 |  This class also escapes the line separator and paragraph separator
 |  characters U+2028 and U+2029, irrespective of the ensure_ascii setting,
 |  as these characters are not valid in JavaScript strings (see
 |  http://timelessrepo.com/json-isnt-a-javascript-subset).
 |  
 |  Method resolution order:
 |      JSONEncoderForHTML
 |      JSONEncoder
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from JSONEncoder:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from JSONEncoder:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from JSONEncoder:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",tuple_as_array,True,bool,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoderForHTML,encoder,JSONEncoderForHTML,"Python Library Documentation: class JSONEncoderForHTML in module simplejson.encoder

class JSONEncoderForHTML(JSONEncoder)
 |  An encoder that produces JSON safe to embed in HTML.
 |  
 |  To embed JSON content in, say, a script tag on a web page, the
 |  characters &, < and > should be escaped. They cannot be escaped
 |  with the usual entities (e.g. &amp;) because they are not expanded
 |  within <script> tags.
 |  
 |  This class also escapes the line separator and paragraph separator
 |  characters U+2028 and U+2029, irrespective of the ensure_ascii setting,
 |  as these characters are not valid in JavaScript strings (see
 |  http://timelessrepo.com/json-isnt-a-javascript-subset).
 |  
 |  Method resolution order:
 |      JSONEncoderForHTML
 |      JSONEncoder
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from JSONEncoder:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from JSONEncoder:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from JSONEncoder:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",use_decimal,True,bool,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoderForHTML,encoder,JSONEncoderForHTML,"Python Library Documentation: class JSONEncoderForHTML in module simplejson.encoder

class JSONEncoderForHTML(JSONEncoder)
 |  An encoder that produces JSON safe to embed in HTML.
 |  
 |  To embed JSON content in, say, a script tag on a web page, the
 |  characters &, < and > should be escaped. They cannot be escaped
 |  with the usual entities (e.g. &amp;) because they are not expanded
 |  within <script> tags.
 |  
 |  This class also escapes the line separator and paragraph separator
 |  characters U+2028 and U+2029, irrespective of the ensure_ascii setting,
 |  as these characters are not valid in JavaScript strings (see
 |  http://timelessrepo.com/json-isnt-a-javascript-subset).
 |  
 |  Method resolution order:
 |      JSONEncoderForHTML
 |      JSONEncoder
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from JSONEncoder:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from JSONEncoder:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from JSONEncoder:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",allow_nan,True,bool,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoderForHTML,encoder,JSONEncoderForHTML,"Python Library Documentation: class JSONEncoderForHTML in module simplejson.encoder

class JSONEncoderForHTML(JSONEncoder)
 |  An encoder that produces JSON safe to embed in HTML.
 |  
 |  To embed JSON content in, say, a script tag on a web page, the
 |  characters &, < and > should be escaped. They cannot be escaped
 |  with the usual entities (e.g. &amp;) because they are not expanded
 |  within <script> tags.
 |  
 |  This class also escapes the line separator and paragraph separator
 |  characters U+2028 and U+2029, irrespective of the ensure_ascii setting,
 |  as these characters are not valid in JavaScript strings (see
 |  http://timelessrepo.com/json-isnt-a-javascript-subset).
 |  
 |  Method resolution order:
 |      JSONEncoderForHTML
 |      JSONEncoder
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from JSONEncoder:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from JSONEncoder:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from JSONEncoder:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",encoding,utf-8,str,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoderForHTML,encoder,JSONEncoderForHTML,"Python Library Documentation: class JSONEncoderForHTML in module simplejson.encoder

class JSONEncoderForHTML(JSONEncoder)
 |  An encoder that produces JSON safe to embed in HTML.
 |  
 |  To embed JSON content in, say, a script tag on a web page, the
 |  characters &, < and > should be escaped. They cannot be escaped
 |  with the usual entities (e.g. &amp;) because they are not expanded
 |  within <script> tags.
 |  
 |  This class also escapes the line separator and paragraph separator
 |  characters U+2028 and U+2029, irrespective of the ensure_ascii setting,
 |  as these characters are not valid in JavaScript strings (see
 |  http://timelessrepo.com/json-isnt-a-javascript-subset).
 |  
 |  Method resolution order:
 |      JSONEncoderForHTML
 |      JSONEncoder
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from JSONEncoder:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from JSONEncoder:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from JSONEncoder:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",indent,,NoneType,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoderForHTML,encoder,JSONEncoderForHTML,"Python Library Documentation: class JSONEncoderForHTML in module simplejson.encoder

class JSONEncoderForHTML(JSONEncoder)
 |  An encoder that produces JSON safe to embed in HTML.
 |  
 |  To embed JSON content in, say, a script tag on a web page, the
 |  characters &, < and > should be escaped. They cannot be escaped
 |  with the usual entities (e.g. &amp;) because they are not expanded
 |  within <script> tags.
 |  
 |  This class also escapes the line separator and paragraph separator
 |  characters U+2028 and U+2029, irrespective of the ensure_ascii setting,
 |  as these characters are not valid in JavaScript strings (see
 |  http://timelessrepo.com/json-isnt-a-javascript-subset).
 |  
 |  Method resolution order:
 |      JSONEncoderForHTML
 |      JSONEncoder
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from JSONEncoder:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from JSONEncoder:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from JSONEncoder:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",sort_keys,False,bool,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoderForHTML,encoder,JSONEncoderForHTML,"Python Library Documentation: class JSONEncoderForHTML in module simplejson.encoder

class JSONEncoderForHTML(JSONEncoder)
 |  An encoder that produces JSON safe to embed in HTML.
 |  
 |  To embed JSON content in, say, a script tag on a web page, the
 |  characters &, < and > should be escaped. They cannot be escaped
 |  with the usual entities (e.g. &amp;) because they are not expanded
 |  within <script> tags.
 |  
 |  This class also escapes the line separator and paragraph separator
 |  characters U+2028 and U+2029, irrespective of the ensure_ascii setting,
 |  as these characters are not valid in JavaScript strings (see
 |  http://timelessrepo.com/json-isnt-a-javascript-subset).
 |  
 |  Method resolution order:
 |      JSONEncoderForHTML
 |      JSONEncoder
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from JSONEncoder:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from JSONEncoder:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from JSONEncoder:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",check_circular,True,bool,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoderForHTML,encoder,JSONEncoderForHTML,"Python Library Documentation: class JSONEncoderForHTML in module simplejson.encoder

class JSONEncoderForHTML(JSONEncoder)
 |  An encoder that produces JSON safe to embed in HTML.
 |  
 |  To embed JSON content in, say, a script tag on a web page, the
 |  characters &, < and > should be escaped. They cannot be escaped
 |  with the usual entities (e.g. &amp;) because they are not expanded
 |  within <script> tags.
 |  
 |  This class also escapes the line separator and paragraph separator
 |  characters U+2028 and U+2029, irrespective of the ensure_ascii setting,
 |  as these characters are not valid in JavaScript strings (see
 |  http://timelessrepo.com/json-isnt-a-javascript-subset).
 |  
 |  Method resolution order:
 |      JSONEncoderForHTML
 |      JSONEncoder
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from JSONEncoder:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from JSONEncoder:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from JSONEncoder:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",ensure_ascii,True,bool,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoderForHTML,encoder,JSONEncoderForHTML,"Python Library Documentation: class JSONEncoderForHTML in module simplejson.encoder

class JSONEncoderForHTML(JSONEncoder)
 |  An encoder that produces JSON safe to embed in HTML.
 |  
 |  To embed JSON content in, say, a script tag on a web page, the
 |  characters &, < and > should be escaped. They cannot be escaped
 |  with the usual entities (e.g. &amp;) because they are not expanded
 |  within <script> tags.
 |  
 |  This class also escapes the line separator and paragraph separator
 |  characters U+2028 and U+2029, irrespective of the ensure_ascii setting,
 |  as these characters are not valid in JavaScript strings (see
 |  http://timelessrepo.com/json-isnt-a-javascript-subset).
 |  
 |  Method resolution order:
 |      JSONEncoderForHTML
 |      JSONEncoder
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from JSONEncoder:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from JSONEncoder:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from JSONEncoder:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",skipkeys,False,bool,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoderForHTML,encoder,JSONEncoderForHTML,"Python Library Documentation: class JSONEncoderForHTML in module simplejson.encoder

class JSONEncoderForHTML(JSONEncoder)
 |  An encoder that produces JSON safe to embed in HTML.
 |  
 |  To embed JSON content in, say, a script tag on a web page, the
 |  characters &, < and > should be escaped. They cannot be escaped
 |  with the usual entities (e.g. &amp;) because they are not expanded
 |  within <script> tags.
 |  
 |  This class also escapes the line separator and paragraph separator
 |  characters U+2028 and U+2029, irrespective of the ensure_ascii setting,
 |  as these characters are not valid in JavaScript strings (see
 |  http://timelessrepo.com/json-isnt-a-javascript-subset).
 |  
 |  Method resolution order:
 |      JSONEncoderForHTML
 |      JSONEncoder
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from JSONEncoder:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from JSONEncoder:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from JSONEncoder:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",self,,,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoderForHTML,encoder,JSONEncoderForHTML,"Python Library Documentation: class JSONEncoderForHTML in module simplejson.encoder

class JSONEncoderForHTML(JSONEncoder)
 |  An encoder that produces JSON safe to embed in HTML.
 |  
 |  To embed JSON content in, say, a script tag on a web page, the
 |  characters &, < and > should be escaped. They cannot be escaped
 |  with the usual entities (e.g. &amp;) because they are not expanded
 |  within <script> tags.
 |  
 |  This class also escapes the line separator and paragraph separator
 |  characters U+2028 and U+2029, irrespective of the ensure_ascii setting,
 |  as these characters are not valid in JavaScript strings (see
 |  http://timelessrepo.com/json-isnt-a-javascript-subset).
 |  
 |  Method resolution order:
 |      JSONEncoderForHTML
 |      JSONEncoder
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from JSONEncoder:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from JSONEncoder:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from JSONEncoder:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",iterable_as_array,False,bool,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoderForHTML,encoder,JSONEncoderForHTML,"Python Library Documentation: class JSONEncoderForHTML in module simplejson.encoder

class JSONEncoderForHTML(JSONEncoder)
 |  An encoder that produces JSON safe to embed in HTML.
 |  
 |  To embed JSON content in, say, a script tag on a web page, the
 |  characters &, < and > should be escaped. They cannot be escaped
 |  with the usual entities (e.g. &amp;) because they are not expanded
 |  within <script> tags.
 |  
 |  This class also escapes the line separator and paragraph separator
 |  characters U+2028 and U+2029, irrespective of the ensure_ascii setting,
 |  as these characters are not valid in JavaScript strings (see
 |  http://timelessrepo.com/json-isnt-a-javascript-subset).
 |  
 |  Method resolution order:
 |      JSONEncoderForHTML
 |      JSONEncoder
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from JSONEncoder:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from JSONEncoder:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from JSONEncoder:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",default,,NoneType,arg_info
simplejson,3.17.0,simplejson.encoder.JSONEncoderForHTML,encoder,JSONEncoderForHTML,"Python Library Documentation: class JSONEncoderForHTML in module simplejson.encoder

class JSONEncoderForHTML(JSONEncoder)
 |  An encoder that produces JSON safe to embed in HTML.
 |  
 |  To embed JSON content in, say, a script tag on a web page, the
 |  characters &, < and > should be escaped. They cannot be escaped
 |  with the usual entities (e.g. &amp;) because they are not expanded
 |  within <script> tags.
 |  
 |  This class also escapes the line separator and paragraph separator
 |  characters U+2028 and U+2029, irrespective of the ensure_ascii setting,
 |  as these characters are not valid in JavaScript strings (see
 |  http://timelessrepo.com/json-isnt-a-javascript-subset).
 |  
 |  Method resolution order:
 |      JSONEncoderForHTML
 |      JSONEncoder
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  encode(self, o)
 |      Return a JSON string representation of a Python data structure.
 |      
 |      >>> from simplejson import JSONEncoder
 |      >>> JSONEncoder().encode({""foo"": [""bar"", ""baz""]})
 |      '{""foo"": [""bar"", ""baz""]}'
 |  
 |  iterencode(self, o, _one_shot=False)
 |      Encode the given object and yield each string
 |      representation as available.
 |      
 |      For example::
 |      
 |          for chunk in JSONEncoder().iterencode(bigobject):
 |              mysocket.write(chunk)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from JSONEncoder:
 |  
 |  __init__(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)
 |      Constructor for JSONEncoder, with sensible defaults.
 |      
 |      If skipkeys is false, then it is a TypeError to attempt
 |      encoding of keys that are not str, int, long, float or None.  If
 |      skipkeys is True, such items are simply skipped.
 |      
 |      If ensure_ascii is true, the output is guaranteed to be str
 |      objects with all incoming unicode characters escaped.  If
 |      ensure_ascii is false, the output will be unicode object.
 |      
 |      If check_circular is true, then lists, dicts, and custom encoded
 |      objects will be checked for circular references during encoding to
 |      prevent an infinite recursion (which would cause an OverflowError).
 |      Otherwise, no such check takes place.
 |      
 |      If allow_nan is true, then NaN, Infinity, and -Infinity will be
 |      encoded as such.  This behavior is not JSON specification compliant,
 |      but is consistent with most JavaScript based encoders and decoders.
 |      Otherwise, it will be a ValueError to encode such floats.
 |      
 |      If sort_keys is true, then the output of dictionaries will be
 |      sorted by key; this is useful for regression tests to ensure
 |      that JSON serializations can be compared on a day-to-day basis.
 |      
 |      If indent is a string, then JSON array elements and object members
 |      will be pretty-printed with a newline followed by that string repeated
 |      for each level of nesting. ``None`` (the default) selects the most compact
 |      representation without any newlines. For backwards compatibility with
 |      versions of simplejson earlier than 2.1.0, an integer is also accepted
 |      and is converted to a string with that many spaces.
 |      
 |      If specified, separators should be an (item_separator, key_separator)
 |      tuple.  The default is (', ', ': ') if *indent* is ``None`` and
 |      (',', ': ') otherwise.  To get the most compact JSON representation,
 |      you should specify (',', ':') to eliminate whitespace.
 |      
 |      If specified, default is a function that gets called for objects
 |      that can't otherwise be serialized.  It should return a JSON encodable
 |      version of the object or raise a ``TypeError``.
 |      
 |      If encoding is not None, then all input strings will be
 |      transformed into unicode using that encoding prior to JSON-encoding.
 |      The default is UTF-8.
 |      
 |      If use_decimal is true (default: ``True``), ``decimal.Decimal`` will
 |      be supported directly by the encoder. For the inverse, decode JSON
 |      with ``parse_float=decimal.Decimal``.
 |      
 |      If namedtuple_as_object is true (the default), objects with
 |      ``_asdict()`` methods will be encoded as JSON objects.
 |      
 |      If tuple_as_array is true (the default), tuple (and subclasses) will
 |      be encoded as JSON arrays.
 |      
 |      If *iterable_as_array* is true (default: ``False``),
 |      any object not in the above table that implements ``__iter__()``
 |      will be encoded as a JSON array.
 |      
 |      If bigint_as_string is true (not the default), ints 2**53 and higher
 |      or lower than -2**53 will be encoded as strings. This is to avoid the
 |      rounding that happens in Javascript otherwise.
 |      
 |      If int_as_string_bitcount is a positive number (n), then int of size
 |      greater than or equal to 2**n or lower than or equal to -2**n will be
 |      encoded as strings.
 |      
 |      If specified, item_sort_key is a callable used to sort the items in
 |      each dictionary. This is useful if you want to sort items other than
 |      in alphabetical order by key.
 |      
 |      If for_json is true (not the default), objects with a ``for_json()``
 |      method will use the return value of that method for encoding as JSON
 |      instead of the object.
 |      
 |      If *ignore_nan* is true (default: ``False``), then out of range
 |      :class:`float` values (``nan``, ``inf``, ``-inf``) will be serialized
 |      as ``null`` in compliance with the ECMA-262 specification. If true,
 |      this will override *allow_nan*.
 |  
 |  default(self, o)
 |      Implement this method in a subclass such that it returns
 |      a serializable object for ``o``, or calls the base implementation
 |      (to raise a ``TypeError``).
 |      
 |      For example, to support arbitrary iterators, you could
 |      implement default like this::
 |      
 |          def default(self, o):
 |              try:
 |                  iterable = iter(o)
 |              except TypeError:
 |                  pass
 |              else:
 |                  return list(iterable)
 |              return JSONEncoder.default(self, o)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from JSONEncoder:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from JSONEncoder:
 |  
 |  item_separator = ', '
 |  
 |  key_separator = ': '
",class,"(""(self, skipkeys=False, ensure_ascii=True, check_circular=True, allow_nan=True, sort_keys=False, indent=None, separators=None, encoding='utf-8', default=None, use_decimal=True, namedtuple_as_object=True, tuple_as_array=True, bigint_as_string=False, item_sort_key=None, for_json=False, ignore_nan=False, int_as_string_bitcount=None, iterable_as_array=False)"",)",separators,,NoneType,arg_info
simplejson,3.17.0,simplejson.encoder.RawJSON,encoder,RawJSON,"Python Library Documentation: class RawJSON in module simplejson.raw_json

class RawJSON(builtins.object)
 |  Wrap an encoded JSON document for direct embedding in the output
 |  
 |  Methods defined here:
 |  
 |  __init__(self, encoded_json)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, encoded_json)',)",self,,,arg_info
simplejson,3.17.0,simplejson.encoder.RawJSON,encoder,RawJSON,"Python Library Documentation: class RawJSON in module simplejson.raw_json

class RawJSON(builtins.object)
 |  Wrap an encoded JSON document for direct embedding in the output
 |  
 |  Methods defined here:
 |  
 |  __init__(self, encoded_json)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, encoded_json)',)",encoded_json,,,arg_info
simplejson,3.17.0,simplejson.encoder._make_iterencode,encoder,_make_iterencode,"Python Library Documentation: function _make_iterencode in module simplejson.encoder

_make_iterencode(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)
",function,"(""(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)"",)",Decimal,,NoneType,arg_info
simplejson,3.17.0,simplejson.encoder._make_iterencode,encoder,_make_iterencode,"Python Library Documentation: function _make_iterencode in module simplejson.encoder

_make_iterencode(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)
",function,"(""(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)"",)",_encoding,,,arg_info
simplejson,3.17.0,simplejson.encoder._make_iterencode,encoder,_make_iterencode,"Python Library Documentation: function _make_iterencode in module simplejson.encoder

_make_iterencode(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)
",function,"(""(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)"",)",_for_json,,,arg_info
simplejson,3.17.0,simplejson.encoder._make_iterencode,encoder,_make_iterencode,"Python Library Documentation: function _make_iterencode in module simplejson.encoder

_make_iterencode(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)
",function,"(""(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)"",)",_iterable_as_array,,,arg_info
simplejson,3.17.0,simplejson.encoder._make_iterencode,encoder,_make_iterencode,"Python Library Documentation: function _make_iterencode in module simplejson.encoder

_make_iterencode(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)
",function,"(""(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)"",)",_PY3,True,bool,arg_info
simplejson,3.17.0,simplejson.encoder._make_iterencode,encoder,_make_iterencode,"Python Library Documentation: function _make_iterencode in module simplejson.encoder

_make_iterencode(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)
",function,"(""(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)"",)",ValueError,<class 'ValueError'>,type,arg_info
simplejson,3.17.0,simplejson.encoder._make_iterencode,encoder,_make_iterencode,"Python Library Documentation: function _make_iterencode in module simplejson.encoder

_make_iterencode(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)
",function,"(""(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)"",)",string_types,"(<class 'str'>,)",tuple,arg_info
simplejson,3.17.0,simplejson.encoder._make_iterencode,encoder,_make_iterencode,"Python Library Documentation: function _make_iterencode in module simplejson.encoder

_make_iterencode(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)
",function,"(""(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)"",)",dict,<class 'dict'>,type,arg_info
simplejson,3.17.0,simplejson.encoder._make_iterencode,encoder,_make_iterencode,"Python Library Documentation: function _make_iterencode in module simplejson.encoder

_make_iterencode(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)
",function,"(""(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)"",)",float,<class 'float'>,type,arg_info
simplejson,3.17.0,simplejson.encoder._make_iterencode,encoder,_make_iterencode,"Python Library Documentation: function _make_iterencode in module simplejson.encoder

_make_iterencode(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)
",function,"(""(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)"",)",id,<built-in function id>,builtin_function_or_method,arg_info
simplejson,3.17.0,simplejson.encoder._make_iterencode,encoder,_make_iterencode,"Python Library Documentation: function _make_iterencode in module simplejson.encoder

_make_iterencode(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)
",function,"(""(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)"",)",integer_types,"(<class 'int'>,)",tuple,arg_info
simplejson,3.17.0,simplejson.encoder._make_iterencode,encoder,_make_iterencode,"Python Library Documentation: function _make_iterencode in module simplejson.encoder

_make_iterencode(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)
",function,"(""(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)"",)",isinstance,<built-in function isinstance>,builtin_function_or_method,arg_info
simplejson,3.17.0,simplejson.encoder._make_iterencode,encoder,_make_iterencode,"Python Library Documentation: function _make_iterencode in module simplejson.encoder

_make_iterencode(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)
",function,"(""(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)"",)",list,<class 'list'>,type,arg_info
simplejson,3.17.0,simplejson.encoder._make_iterencode,encoder,_make_iterencode,"Python Library Documentation: function _make_iterencode in module simplejson.encoder

_make_iterencode(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)
",function,"(""(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)"",)",str,<class 'str'>,type,arg_info
simplejson,3.17.0,simplejson.encoder._make_iterencode,encoder,_make_iterencode,"Python Library Documentation: function _make_iterencode in module simplejson.encoder

_make_iterencode(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)
",function,"(""(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)"",)",tuple,<class 'tuple'>,type,arg_info
simplejson,3.17.0,simplejson.encoder._make_iterencode,encoder,_make_iterencode,"Python Library Documentation: function _make_iterencode in module simplejson.encoder

_make_iterencode(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)
",function,"(""(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)"",)",iter,<built-in function iter>,builtin_function_or_method,arg_info
simplejson,3.17.0,simplejson.encoder._make_iterencode,encoder,_make_iterencode,"Python Library Documentation: function _make_iterencode in module simplejson.encoder

_make_iterencode(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)
",function,"(""(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)"",)",_tuple_as_array,,,arg_info
simplejson,3.17.0,simplejson.encoder._make_iterencode,encoder,_make_iterencode,"Python Library Documentation: function _make_iterencode in module simplejson.encoder

_make_iterencode(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)
",function,"(""(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)"",)",_namedtuple_as_object,,,arg_info
simplejson,3.17.0,simplejson.encoder._make_iterencode,encoder,_make_iterencode,"Python Library Documentation: function _make_iterencode in module simplejson.encoder

_make_iterencode(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)
",function,"(""(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)"",)",_use_decimal,,,arg_info
simplejson,3.17.0,simplejson.encoder._make_iterencode,encoder,_make_iterencode,"Python Library Documentation: function _make_iterencode in module simplejson.encoder

_make_iterencode(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)
",function,"(""(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)"",)",_one_shot,,,arg_info
simplejson,3.17.0,simplejson.encoder._make_iterencode,encoder,_make_iterencode,"Python Library Documentation: function _make_iterencode in module simplejson.encoder

_make_iterencode(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)
",function,"(""(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)"",)",_skipkeys,,,arg_info
simplejson,3.17.0,simplejson.encoder._make_iterencode,encoder,_make_iterencode,"Python Library Documentation: function _make_iterencode in module simplejson.encoder

_make_iterencode(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)
",function,"(""(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)"",)",_sort_keys,,,arg_info
simplejson,3.17.0,simplejson.encoder._make_iterencode,encoder,_make_iterencode,"Python Library Documentation: function _make_iterencode in module simplejson.encoder

_make_iterencode(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)
",function,"(""(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)"",)",_item_separator,,,arg_info
simplejson,3.17.0,simplejson.encoder._make_iterencode,encoder,_make_iterencode,"Python Library Documentation: function _make_iterencode in module simplejson.encoder

_make_iterencode(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)
",function,"(""(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)"",)",_key_separator,,,arg_info
simplejson,3.17.0,simplejson.encoder._make_iterencode,encoder,_make_iterencode,"Python Library Documentation: function _make_iterencode in module simplejson.encoder

_make_iterencode(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)
",function,"(""(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)"",)",_floatstr,,,arg_info
simplejson,3.17.0,simplejson.encoder._make_iterencode,encoder,_make_iterencode,"Python Library Documentation: function _make_iterencode in module simplejson.encoder

_make_iterencode(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)
",function,"(""(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)"",)",_indent,,,arg_info
simplejson,3.17.0,simplejson.encoder._make_iterencode,encoder,_make_iterencode,"Python Library Documentation: function _make_iterencode in module simplejson.encoder

_make_iterencode(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)
",function,"(""(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)"",)",_encoder,,,arg_info
simplejson,3.17.0,simplejson.encoder._make_iterencode,encoder,_make_iterencode,"Python Library Documentation: function _make_iterencode in module simplejson.encoder

_make_iterencode(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)
",function,"(""(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)"",)",_default,,,arg_info
simplejson,3.17.0,simplejson.encoder._make_iterencode,encoder,_make_iterencode,"Python Library Documentation: function _make_iterencode in module simplejson.encoder

_make_iterencode(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)
",function,"(""(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)"",)",markers,,,arg_info
simplejson,3.17.0,simplejson.encoder._make_iterencode,encoder,_make_iterencode,"Python Library Documentation: function _make_iterencode in module simplejson.encoder

_make_iterencode(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)
",function,"(""(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)"",)",_item_sort_key,,,arg_info
simplejson,3.17.0,simplejson.encoder._make_iterencode,encoder,_make_iterencode,"Python Library Documentation: function _make_iterencode in module simplejson.encoder

_make_iterencode(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)
",function,"(""(markers, _default, _encoder, _indent, _floatstr, _key_separator, _item_separator, _sort_keys, _skipkeys, _one_shot, _use_decimal, _namedtuple_as_object, _tuple_as_array, _int_as_string_bitcount, _item_sort_key, _encoding, _for_json, _iterable_as_array, _PY3=True, ValueError=<class 'ValueError'>, string_types=(<class 'str'>,), Decimal=None, dict=<class 'dict'>, float=<class 'float'>, id=<built-in function id>, integer_types=(<class 'int'>,), isinstance=<built-in function isinstance>, list=<class 'list'>, str=<class 'str'>, tuple=<class 'tuple'>, iter=<built-in function iter>)"",)",_int_as_string_bitcount,,,arg_info
simplejson,3.17.0,simplejson.encoder.binary_type,encoder,bytes,"Python Library Documentation: class bytes in module builtins

class bytes(object)
 |  bytes(iterable_of_ints) -> bytes
 |  bytes(string, encoding[, errors]) -> bytes
 |  bytes(bytes_or_buffer) -> immutable copy of bytes_or_buffer
 |  bytes(int) -> bytes object of size given by the parameter initialized with null bytes
 |  bytes() -> empty bytes object
 |  
 |  Construct an immutable array of bytes from:
 |    - an iterable yielding integers in range(256)
 |    - a text string encoded using the specified encoding
 |    - any object implementing the buffer API.
 |    - an integer
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __getnewargs__(...)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  capitalize(...)
 |      B.capitalize() -> copy of B
 |      
 |      Return a copy of B with only its first character capitalized (ASCII)
 |      and the rest lower-cased.
 |  
 |  center(...)
 |      B.center(width[, fillchar]) -> copy of B
 |      
 |      Return B centered in a string of length width.  Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  count(...)
 |      B.count(sub[, start[, end]]) -> int
 |      
 |      Return the number of non-overlapping occurrences of subsection sub in
 |      bytes B[start:end].  Optional arguments start and end are interpreted
 |      as in slice notation.
 |  
 |  decode(self, /, encoding='utf-8', errors='strict')
 |      Decode the bytes using the codec registered for encoding.
 |      
 |      encoding
 |        The encoding with which to decode the bytes.
 |      errors
 |        The error handling scheme to use for the handling of decoding errors.
 |        The default is 'strict' meaning that decoding errors raise a
 |        UnicodeDecodeError. Other possible values are 'ignore' and 'replace'
 |        as well as any other name registered with codecs.register_error that
 |        can handle UnicodeDecodeErrors.
 |  
 |  endswith(...)
 |      B.endswith(suffix[, start[, end]]) -> bool
 |      
 |      Return True if B ends with the specified suffix, False otherwise.
 |      With optional start, test B beginning at that position.
 |      With optional end, stop comparing B at that position.
 |      suffix can also be a tuple of bytes to try.
 |  
 |  expandtabs(...)
 |      B.expandtabs(tabsize=8) -> copy of B
 |      
 |      Return a copy of B where all tab characters are expanded using spaces.
 |      If tabsize is not given, a tab size of 8 characters is assumed.
 |  
 |  find(...)
 |      B.find(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in B where subsection sub is found,
 |      such that sub is contained within B[start,end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  fromhex(string, /) from builtins.type
 |      Create a bytes object from a string of hexadecimal numbers.
 |      
 |      Spaces between two numbers are accepted.
 |      Example: bytes.fromhex('B9 01EF') -> b'\\xb9\\x01\\xef'.
 |  
 |  hex(...)
 |      B.hex() -> string
 |      
 |      Create a string of hexadecimal numbers from a bytes object.
 |      Example: b'\xb9\x01\xef'.hex() -> 'b901ef'.
 |  
 |  index(...)
 |      B.index(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in B where subsection sub is found,
 |      such that sub is contained within B[start,end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the subsection is not found.
 |  
 |  isalnum(...)
 |      B.isalnum() -> bool
 |      
 |      Return True if all characters in B are alphanumeric
 |      and there is at least one character in B, False otherwise.
 |  
 |  isalpha(...)
 |      B.isalpha() -> bool
 |      
 |      Return True if all characters in B are alphabetic
 |      and there is at least one character in B, False otherwise.
 |  
 |  isdigit(...)
 |      B.isdigit() -> bool
 |      
 |      Return True if all characters in B are digits
 |      and there is at least one character in B, False otherwise.
 |  
 |  islower(...)
 |      B.islower() -> bool
 |      
 |      Return True if all cased characters in B are lowercase and there is
 |      at least one cased character in B, False otherwise.
 |  
 |  isspace(...)
 |      B.isspace() -> bool
 |      
 |      Return True if all characters in B are whitespace
 |      and there is at least one character in B, False otherwise.
 |  
 |  istitle(...)
 |      B.istitle() -> bool
 |      
 |      Return True if B is a titlecased string and there is at least one
 |      character in B, i.e. uppercase characters may only follow uncased
 |      characters and lowercase characters only cased ones. Return False
 |      otherwise.
 |  
 |  isupper(...)
 |      B.isupper() -> bool
 |      
 |      Return True if all cased characters in B are uppercase and there is
 |      at least one cased character in B, False otherwise.
 |  
 |  join(self, iterable_of_bytes, /)
 |      Concatenate any number of bytes objects.
 |      
 |      The bytes whose method is called is inserted in between each pair.
 |      
 |      The result is returned as a new bytes object.
 |      
 |      Example: b'.'.join([b'ab', b'pq', b'rs']) -> b'ab.pq.rs'.
 |  
 |  ljust(...)
 |      B.ljust(width[, fillchar]) -> copy of B
 |      
 |      Return B left justified in a string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  lower(...)
 |      B.lower() -> copy of B
 |      
 |      Return a copy of B with all ASCII characters converted to lowercase.
 |  
 |  lstrip(self, bytes=None, /)
 |      Strip leading bytes contained in the argument.
 |      
 |      If the argument is omitted or None, strip leading  ASCII whitespace.
 |  
 |  partition(self, sep, /)
 |      Partition the bytes into three parts using the given separator.
 |      
 |      This will search for the separator sep in the bytes. If the separator is found,
 |      returns a 3-tuple containing the part before the separator, the separator
 |      itself, and the part after it.
 |      
 |      If the separator is not found, returns a 3-tuple containing the original bytes
 |      object and two empty bytes objects.
 |  
 |  replace(self, old, new, count=-1, /)
 |      Return a copy with all occurrences of substring old replaced by new.
 |      
 |        count
 |          Maximum number of occurrences to replace.
 |          -1 (the default value) means replace all occurrences.
 |      
 |      If the optional argument count is given, only the first count occurrences are
 |      replaced.
 |  
 |  rfind(...)
 |      B.rfind(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in B where subsection sub is found,
 |      such that sub is contained within B[start,end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  rindex(...)
 |      B.rindex(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in B where subsection sub is found,
 |      such that sub is contained within B[start,end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raise ValueError when the subsection is not found.
 |  
 |  rjust(...)
 |      B.rjust(width[, fillchar]) -> copy of B
 |      
 |      Return B right justified in a string of length width. Padding is
 |      done using the specified fill character (default is a space)
 |  
 |  rpartition(self, sep, /)
 |      Partition the bytes into three parts using the given separator.
 |      
 |      This will search for the separator sep in the bytes, starting at the end. If
 |      the separator is found, returns a 3-tuple containing the part before the
 |      separator, the separator itself, and the part after it.
 |      
 |      If the separator is not found, returns a 3-tuple containing two empty bytes
 |      objects and the original bytes object.
 |  
 |  rsplit(self, /, sep=None, maxsplit=-1)
 |      Return a list of the sections in the bytes, using sep as the delimiter.
 |      
 |        sep
 |          The delimiter according which to split the bytes.
 |          None (the default value) means split on ASCII whitespace characters
 |          (space, tab, return, newline, formfeed, vertical tab).
 |        maxsplit
 |          Maximum number of splits to do.
 |          -1 (the default value) means no limit.
 |      
 |      Splitting is done starting at the end of the bytes and working to the front.
 |  
 |  rstrip(self, bytes=None, /)
 |      Strip trailing bytes contained in the argument.
 |      
 |      If the argument is omitted or None, strip trailing ASCII whitespace.
 |  
 |  split(self, /, sep=None, maxsplit=-1)
 |      Return a list of the sections in the bytes, using sep as the delimiter.
 |      
 |      sep
 |        The delimiter according which to split the bytes.
 |        None (the default value) means split on ASCII whitespace characters
 |        (space, tab, return, newline, formfeed, vertical tab).
 |      maxsplit
 |        Maximum number of splits to do.
 |        -1 (the default value) means no limit.
 |  
 |  splitlines(self, /, keepends=False)
 |      Return a list of the lines in the bytes, breaking at line boundaries.
 |      
 |      Line breaks are not included in the resulting list unless keepends is given and
 |      true.
 |  
 |  startswith(...)
 |      B.startswith(prefix[, start[, end]]) -> bool
 |      
 |      Return True if B starts with the specified prefix, False otherwise.
 |      With optional start, test B beginning at that position.
 |      With optional end, stop comparing B at that position.
 |      prefix can also be a tuple of bytes to try.
 |  
 |  strip(self, bytes=None, /)
 |      Strip leading and trailing bytes contained in the argument.
 |      
 |      If the argument is omitted or None, strip leading and trailing ASCII whitespace.
 |  
 |  swapcase(...)
 |      B.swapcase() -> copy of B
 |      
 |      Return a copy of B with uppercase ASCII characters converted
 |      to lowercase ASCII and vice versa.
 |  
 |  title(...)
 |      B.title() -> copy of B
 |      
 |      Return a titlecased version of B, i.e. ASCII words start with uppercase
 |      characters, all remaining cased characters have lowercase.
 |  
 |  translate(self, table, /, delete=b'')
 |      Return a copy with each character mapped by the given translation table.
 |      
 |        table
 |          Translation table, which must be a bytes object of length 256.
 |      
 |      All characters occurring in the optional argument delete are removed.
 |      The remaining characters are mapped through the given translation table.
 |  
 |  upper(...)
 |      B.upper() -> copy of B
 |      
 |      Return a copy of B with all ASCII characters converted to uppercase.
 |  
 |  zfill(...)
 |      B.zfill(width) -> copy of B
 |      
 |      Pad a numeric string B with zeros on the left, to fill a field
 |      of the specified width.  B is never truncated.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  maketrans(frm, to, /)
 |      Return a translation table useable for the bytes or bytearray translate method.
 |      
 |      The returned table will be one where each byte in frm is mapped to the byte at
 |      the same position in to.
 |      
 |      The bytes objects frm and to must be of the same length.
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
simplejson,3.17.0,simplejson.encoder.encode_basestring,encoder,encode_basestring,"Python Library Documentation: function encode_basestring in module simplejson.encoder

encode_basestring(s, _PY3=True, _q='""')
    Return a JSON representation of a Python string
",function,"('(s, _PY3=True, _q=\'""\')',)",_PY3,True,bool,arg_info
simplejson,3.17.0,simplejson.encoder.encode_basestring,encoder,encode_basestring,"Python Library Documentation: function encode_basestring in module simplejson.encoder

encode_basestring(s, _PY3=True, _q='""')
    Return a JSON representation of a Python string
",function,"('(s, _PY3=True, _q=\'""\')',)",_q,"""",,arg_info
simplejson,3.17.0,simplejson.encoder.encode_basestring,encoder,encode_basestring,"Python Library Documentation: function encode_basestring in module simplejson.encoder

encode_basestring(s, _PY3=True, _q='""')
    Return a JSON representation of a Python string
",function,"('(s, _PY3=True, _q=\'""\')',)",s,,,arg_info
simplejson,3.17.0,simplejson.encoder.encode_basestring_ascii,encoder,py_encode_basestring_ascii,"Python Library Documentation: function py_encode_basestring_ascii in module simplejson.encoder

py_encode_basestring_ascii(s, _PY3=True)
    Return an ASCII-only JSON representation of a Python string
",function,"('(s, _PY3=True)',)",_PY3,True,bool,arg_info
simplejson,3.17.0,simplejson.encoder.encode_basestring_ascii,encoder,py_encode_basestring_ascii,"Python Library Documentation: function py_encode_basestring_ascii in module simplejson.encoder

py_encode_basestring_ascii(s, _PY3=True)
    Return an ASCII-only JSON representation of a Python string
",function,"('(s, _PY3=True)',)",s,,,arg_info
simplejson,3.17.0,simplejson.encoder.itemgetter,encoder,itemgetter,"Python Library Documentation: class itemgetter in module operator

class itemgetter(builtins.object)
 |  itemgetter(item, ...) --> itemgetter object
 |  
 |  Return a callable object that fetches the given item(s) from its operand.
 |  After f = itemgetter(2), the call f(r) returns r[2].
 |  After g = itemgetter(2, 5, 3), the call g(r) returns (r[2], r[5], r[3])
 |  
 |  Methods defined here:
 |  
 |  __call__(self, /, *args, **kwargs)
 |      Call self as a function.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __reduce__(...)
 |      Return state information for pickling
 |  
 |  __repr__(self, /)
 |      Return repr(self).
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
simplejson,3.17.0,simplejson.encoder.py_encode_basestring_ascii,encoder,py_encode_basestring_ascii,"Python Library Documentation: function py_encode_basestring_ascii in module simplejson.encoder

py_encode_basestring_ascii(s, _PY3=True)
    Return an ASCII-only JSON representation of a Python string
",function,"('(s, _PY3=True)',)",s,,,arg_info
simplejson,3.17.0,simplejson.encoder.py_encode_basestring_ascii,encoder,py_encode_basestring_ascii,"Python Library Documentation: function py_encode_basestring_ascii in module simplejson.encoder

py_encode_basestring_ascii(s, _PY3=True)
    Return an ASCII-only JSON representation of a Python string
",function,"('(s, _PY3=True)',)",_PY3,True,bool,arg_info
simplejson,3.17.0,simplejson.encoder.text_type,encoder,str,"Python Library Documentation: class str in module builtins

class str(object)
 |  str(object='') -> str
 |  str(bytes_or_buffer[, encoding[, errors]]) -> str
 |  
 |  Create a new string object from the given object. If encoding or
 |  errors is specified, then the object must expose a data buffer
 |  that will be decoded using the given encoding and error handler.
 |  Otherwise, returns the result of object.__str__() (if defined)
 |  or repr(object).
 |  encoding defaults to sys.getdefaultencoding().
 |  errors defaults to 'strict'.
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __format__(...)
 |      S.__format__(format_spec) -> str
 |      
 |      Return a formatted version of S as described by format_spec.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __getnewargs__(...)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  __sizeof__(...)
 |      S.__sizeof__() -> size of S in memory, in bytes
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  capitalize(...)
 |      S.capitalize() -> str
 |      
 |      Return a capitalized version of S, i.e. make the first character
 |      have upper case and the rest lower case.
 |  
 |  casefold(...)
 |      S.casefold() -> str
 |      
 |      Return a version of S suitable for caseless comparisons.
 |  
 |  center(...)
 |      S.center(width[, fillchar]) -> str
 |      
 |      Return S centered in a string of length width. Padding is
 |      done using the specified fill character (default is a space)
 |  
 |  count(...)
 |      S.count(sub[, start[, end]]) -> int
 |      
 |      Return the number of non-overlapping occurrences of substring sub in
 |      string S[start:end].  Optional arguments start and end are
 |      interpreted as in slice notation.
 |  
 |  encode(...)
 |      S.encode(encoding='utf-8', errors='strict') -> bytes
 |      
 |      Encode S using the codec registered for encoding. Default encoding
 |      is 'utf-8'. errors may be given to set a different error
 |      handling scheme. Default is 'strict' meaning that encoding errors raise
 |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
 |      'xmlcharrefreplace' as well as any other name registered with
 |      codecs.register_error that can handle UnicodeEncodeErrors.
 |  
 |  endswith(...)
 |      S.endswith(suffix[, start[, end]]) -> bool
 |      
 |      Return True if S ends with the specified suffix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      suffix can also be a tuple of strings to try.
 |  
 |  expandtabs(...)
 |      S.expandtabs(tabsize=8) -> str
 |      
 |      Return a copy of S where all tab characters are expanded using spaces.
 |      If tabsize is not given, a tab size of 8 characters is assumed.
 |  
 |  find(...)
 |      S.find(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  format(...)
 |      S.format(*args, **kwargs) -> str
 |      
 |      Return a formatted version of S, using substitutions from args and kwargs.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  format_map(...)
 |      S.format_map(mapping) -> str
 |      
 |      Return a formatted version of S, using substitutions from mapping.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  index(...)
 |      S.index(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found, 
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  isalnum(...)
 |      S.isalnum() -> bool
 |      
 |      Return True if all characters in S are alphanumeric
 |      and there is at least one character in S, False otherwise.
 |  
 |  isalpha(...)
 |      S.isalpha() -> bool
 |      
 |      Return True if all characters in S are alphabetic
 |      and there is at least one character in S, False otherwise.
 |  
 |  isdecimal(...)
 |      S.isdecimal() -> bool
 |      
 |      Return True if there are only decimal characters in S,
 |      False otherwise.
 |  
 |  isdigit(...)
 |      S.isdigit() -> bool
 |      
 |      Return True if all characters in S are digits
 |      and there is at least one character in S, False otherwise.
 |  
 |  isidentifier(...)
 |      S.isidentifier() -> bool
 |      
 |      Return True if S is a valid identifier according
 |      to the language definition.
 |      
 |      Use keyword.iskeyword() to test for reserved identifiers
 |      such as ""def"" and ""class"".
 |  
 |  islower(...)
 |      S.islower() -> bool
 |      
 |      Return True if all cased characters in S are lowercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  isnumeric(...)
 |      S.isnumeric() -> bool
 |      
 |      Return True if there are only numeric characters in S,
 |      False otherwise.
 |  
 |  isprintable(...)
 |      S.isprintable() -> bool
 |      
 |      Return True if all characters in S are considered
 |      printable in repr() or S is empty, False otherwise.
 |  
 |  isspace(...)
 |      S.isspace() -> bool
 |      
 |      Return True if all characters in S are whitespace
 |      and there is at least one character in S, False otherwise.
 |  
 |  istitle(...)
 |      S.istitle() -> bool
 |      
 |      Return True if S is a titlecased string and there is at least one
 |      character in S, i.e. upper- and titlecase characters may only
 |      follow uncased characters and lowercase characters only cased ones.
 |      Return False otherwise.
 |  
 |  isupper(...)
 |      S.isupper() -> bool
 |      
 |      Return True if all cased characters in S are uppercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  join(...)
 |      S.join(iterable) -> str
 |      
 |      Return a string which is the concatenation of the strings in the
 |      iterable.  The separator between elements is S.
 |  
 |  ljust(...)
 |      S.ljust(width[, fillchar]) -> str
 |      
 |      Return S left-justified in a Unicode string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  lower(...)
 |      S.lower() -> str
 |      
 |      Return a copy of the string S converted to lowercase.
 |  
 |  lstrip(...)
 |      S.lstrip([chars]) -> str
 |      
 |      Return a copy of the string S with leading whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  partition(...)
 |      S.partition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, and return the part before it,
 |      the separator itself, and the part after it.  If the separator is not
 |      found, return S and two empty strings.
 |  
 |  replace(...)
 |      S.replace(old, new[, count]) -> str
 |      
 |      Return a copy of S with all occurrences of substring
 |      old replaced by new.  If the optional argument count is
 |      given, only the first count occurrences are replaced.
 |  
 |  rfind(...)
 |      S.rfind(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  rindex(...)
 |      S.rindex(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  rjust(...)
 |      S.rjust(width[, fillchar]) -> str
 |      
 |      Return S right-justified in a string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  rpartition(...)
 |      S.rpartition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, starting at the end of S, and return
 |      the part before it, the separator itself, and the part after it.  If the
 |      separator is not found, return two empty strings and S.
 |  
 |  rsplit(...)
 |      S.rsplit(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string, starting at the end of the string and
 |      working to the front.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified, any whitespace string
 |      is a separator.
 |  
 |  rstrip(...)
 |      S.rstrip([chars]) -> str
 |      
 |      Return a copy of the string S with trailing whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  split(...)
 |      S.split(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified or is None, any
 |      whitespace string is a separator and empty strings are
 |      removed from the result.
 |  
 |  splitlines(...)
 |      S.splitlines([keepends]) -> list of strings
 |      
 |      Return a list of the lines in S, breaking at line boundaries.
 |      Line breaks are not included in the resulting list unless keepends
 |      is given and true.
 |  
 |  startswith(...)
 |      S.startswith(prefix[, start[, end]]) -> bool
 |      
 |      Return True if S starts with the specified prefix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      prefix can also be a tuple of strings to try.
 |  
 |  strip(...)
 |      S.strip([chars]) -> str
 |      
 |      Return a copy of the string S with leading and trailing
 |      whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  swapcase(...)
 |      S.swapcase() -> str
 |      
 |      Return a copy of S with uppercase characters converted to lowercase
 |      and vice versa.
 |  
 |  title(...)
 |      S.title() -> str
 |      
 |      Return a titlecased version of S, i.e. words start with title case
 |      characters, all remaining cased characters have lower case.
 |  
 |  translate(...)
 |      S.translate(table) -> str
 |      
 |      Return a copy of the string S in which each character has been mapped
 |      through the given translation table. The table must implement
 |      lookup/indexing via __getitem__, for instance a dictionary or list,
 |      mapping Unicode ordinals to Unicode ordinals, strings, or None. If
 |      this operation raises LookupError, the character is left untouched.
 |      Characters mapped to None are deleted.
 |  
 |  upper(...)
 |      S.upper() -> str
 |      
 |      Return a copy of S converted to uppercase.
 |  
 |  zfill(...)
 |      S.zfill(width) -> str
 |      
 |      Pad a numeric string S with zeros on the left, to fill a field
 |      of the specified width. The string S is never truncated.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  maketrans(x, y=None, z=None, /)
 |      Return a translation table usable for str.translate().
 |      
 |      If there is only one argument, it must be a dictionary mapping Unicode
 |      ordinals (integers) or characters to Unicode ordinals, strings or None.
 |      Character keys will be then converted to ordinals.
 |      If there are two arguments, they must be strings of equal length, and
 |      in the resulting dictionary, each character in x will be mapped to the
 |      character at the same position in y. If there is a third argument, it
 |      must be a string, whose characters will be mapped to None in the result.
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
simplejson,3.17.0,simplejson.errors.JSONDecodeError,errors,JSONDecodeError,"Python Library Documentation: class JSONDecodeError in module simplejson.errors

class JSONDecodeError(builtins.ValueError)
 |  Subclass of ValueError with the following additional properties:
 |  
 |  msg: The unformatted error message
 |  doc: The JSON document being parsed
 |  pos: The start index of doc where parsing failed
 |  end: The end index of doc where parsing failed (may be None)
 |  lineno: The line corresponding to pos
 |  colno: The column corresponding to pos
 |  endlineno: The line corresponding to end (may be None)
 |  endcolno: The column corresponding to end (may be None)
 |  
 |  Method resolution order:
 |      JSONDecodeError
 |      builtins.ValueError
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, msg, doc, pos, end=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __reduce__(self)
 |      helper for pickle
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.ValueError:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, msg, doc, pos, end=None)',)",end,,NoneType,arg_info
simplejson,3.17.0,simplejson.errors.JSONDecodeError,errors,JSONDecodeError,"Python Library Documentation: class JSONDecodeError in module simplejson.errors

class JSONDecodeError(builtins.ValueError)
 |  Subclass of ValueError with the following additional properties:
 |  
 |  msg: The unformatted error message
 |  doc: The JSON document being parsed
 |  pos: The start index of doc where parsing failed
 |  end: The end index of doc where parsing failed (may be None)
 |  lineno: The line corresponding to pos
 |  colno: The column corresponding to pos
 |  endlineno: The line corresponding to end (may be None)
 |  endcolno: The column corresponding to end (may be None)
 |  
 |  Method resolution order:
 |      JSONDecodeError
 |      builtins.ValueError
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, msg, doc, pos, end=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __reduce__(self)
 |      helper for pickle
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.ValueError:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, msg, doc, pos, end=None)',)",pos,,,arg_info
simplejson,3.17.0,simplejson.errors.JSONDecodeError,errors,JSONDecodeError,"Python Library Documentation: class JSONDecodeError in module simplejson.errors

class JSONDecodeError(builtins.ValueError)
 |  Subclass of ValueError with the following additional properties:
 |  
 |  msg: The unformatted error message
 |  doc: The JSON document being parsed
 |  pos: The start index of doc where parsing failed
 |  end: The end index of doc where parsing failed (may be None)
 |  lineno: The line corresponding to pos
 |  colno: The column corresponding to pos
 |  endlineno: The line corresponding to end (may be None)
 |  endcolno: The column corresponding to end (may be None)
 |  
 |  Method resolution order:
 |      JSONDecodeError
 |      builtins.ValueError
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, msg, doc, pos, end=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __reduce__(self)
 |      helper for pickle
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.ValueError:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, msg, doc, pos, end=None)',)",doc,,,arg_info
simplejson,3.17.0,simplejson.errors.JSONDecodeError,errors,JSONDecodeError,"Python Library Documentation: class JSONDecodeError in module simplejson.errors

class JSONDecodeError(builtins.ValueError)
 |  Subclass of ValueError with the following additional properties:
 |  
 |  msg: The unformatted error message
 |  doc: The JSON document being parsed
 |  pos: The start index of doc where parsing failed
 |  end: The end index of doc where parsing failed (may be None)
 |  lineno: The line corresponding to pos
 |  colno: The column corresponding to pos
 |  endlineno: The line corresponding to end (may be None)
 |  endcolno: The column corresponding to end (may be None)
 |  
 |  Method resolution order:
 |      JSONDecodeError
 |      builtins.ValueError
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, msg, doc, pos, end=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __reduce__(self)
 |      helper for pickle
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.ValueError:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, msg, doc, pos, end=None)',)",msg,,,arg_info
simplejson,3.17.0,simplejson.errors.JSONDecodeError,errors,JSONDecodeError,"Python Library Documentation: class JSONDecodeError in module simplejson.errors

class JSONDecodeError(builtins.ValueError)
 |  Subclass of ValueError with the following additional properties:
 |  
 |  msg: The unformatted error message
 |  doc: The JSON document being parsed
 |  pos: The start index of doc where parsing failed
 |  end: The end index of doc where parsing failed (may be None)
 |  lineno: The line corresponding to pos
 |  colno: The column corresponding to pos
 |  endlineno: The line corresponding to end (may be None)
 |  endcolno: The column corresponding to end (may be None)
 |  
 |  Method resolution order:
 |      JSONDecodeError
 |      builtins.ValueError
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, msg, doc, pos, end=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __reduce__(self)
 |      helper for pickle
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.ValueError:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, msg, doc, pos, end=None)',)",self,,,arg_info
simplejson,3.17.0,simplejson.errors.errmsg,errors,errmsg,"Python Library Documentation: function errmsg in module simplejson.errors

errmsg(msg, doc, pos, end=None)
",function,"('(msg, doc, pos, end=None)',)",end,,NoneType,arg_info
simplejson,3.17.0,simplejson.errors.errmsg,errors,errmsg,"Python Library Documentation: function errmsg in module simplejson.errors

errmsg(msg, doc, pos, end=None)
",function,"('(msg, doc, pos, end=None)',)",pos,,,arg_info
simplejson,3.17.0,simplejson.errors.errmsg,errors,errmsg,"Python Library Documentation: function errmsg in module simplejson.errors

errmsg(msg, doc, pos, end=None)
",function,"('(msg, doc, pos, end=None)',)",doc,,,arg_info
simplejson,3.17.0,simplejson.errors.errmsg,errors,errmsg,"Python Library Documentation: function errmsg in module simplejson.errors

errmsg(msg, doc, pos, end=None)
",function,"('(msg, doc, pos, end=None)',)",msg,,,arg_info
simplejson,3.17.0,simplejson.errors.linecol,errors,linecol,"Python Library Documentation: function linecol in module simplejson.errors

linecol(doc, pos)
",function,"('(doc, pos)',)",pos,,,arg_info
simplejson,3.17.0,simplejson.errors.linecol,errors,linecol,"Python Library Documentation: function linecol in module simplejson.errors

linecol(doc, pos)
",function,"('(doc, pos)',)",doc,,,arg_info
simplejson,3.17.0,simplejson.raw_json.RawJSON,raw_json,RawJSON,"Python Library Documentation: class RawJSON in module simplejson.raw_json

class RawJSON(builtins.object)
 |  Wrap an encoded JSON document for direct embedding in the output
 |  
 |  Methods defined here:
 |  
 |  __init__(self, encoded_json)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, encoded_json)',)",self,,,arg_info
simplejson,3.17.0,simplejson.raw_json.RawJSON,raw_json,RawJSON,"Python Library Documentation: class RawJSON in module simplejson.raw_json

class RawJSON(builtins.object)
 |  Wrap an encoded JSON document for direct embedding in the output
 |  
 |  Methods defined here:
 |  
 |  __init__(self, encoded_json)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, encoded_json)',)",encoded_json,,,arg_info
simplejson,3.17.0,simplejson.scanner.JSONDecodeError,scanner,JSONDecodeError,"Python Library Documentation: class JSONDecodeError in module simplejson.errors

class JSONDecodeError(builtins.ValueError)
 |  Subclass of ValueError with the following additional properties:
 |  
 |  msg: The unformatted error message
 |  doc: The JSON document being parsed
 |  pos: The start index of doc where parsing failed
 |  end: The end index of doc where parsing failed (may be None)
 |  lineno: The line corresponding to pos
 |  colno: The column corresponding to pos
 |  endlineno: The line corresponding to end (may be None)
 |  endcolno: The column corresponding to end (may be None)
 |  
 |  Method resolution order:
 |      JSONDecodeError
 |      builtins.ValueError
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, msg, doc, pos, end=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __reduce__(self)
 |      helper for pickle
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.ValueError:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, msg, doc, pos, end=None)',)",end,,NoneType,arg_info
simplejson,3.17.0,simplejson.scanner.JSONDecodeError,scanner,JSONDecodeError,"Python Library Documentation: class JSONDecodeError in module simplejson.errors

class JSONDecodeError(builtins.ValueError)
 |  Subclass of ValueError with the following additional properties:
 |  
 |  msg: The unformatted error message
 |  doc: The JSON document being parsed
 |  pos: The start index of doc where parsing failed
 |  end: The end index of doc where parsing failed (may be None)
 |  lineno: The line corresponding to pos
 |  colno: The column corresponding to pos
 |  endlineno: The line corresponding to end (may be None)
 |  endcolno: The column corresponding to end (may be None)
 |  
 |  Method resolution order:
 |      JSONDecodeError
 |      builtins.ValueError
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, msg, doc, pos, end=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __reduce__(self)
 |      helper for pickle
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.ValueError:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, msg, doc, pos, end=None)',)",msg,,,arg_info
simplejson,3.17.0,simplejson.scanner.JSONDecodeError,scanner,JSONDecodeError,"Python Library Documentation: class JSONDecodeError in module simplejson.errors

class JSONDecodeError(builtins.ValueError)
 |  Subclass of ValueError with the following additional properties:
 |  
 |  msg: The unformatted error message
 |  doc: The JSON document being parsed
 |  pos: The start index of doc where parsing failed
 |  end: The end index of doc where parsing failed (may be None)
 |  lineno: The line corresponding to pos
 |  colno: The column corresponding to pos
 |  endlineno: The line corresponding to end (may be None)
 |  endcolno: The column corresponding to end (may be None)
 |  
 |  Method resolution order:
 |      JSONDecodeError
 |      builtins.ValueError
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, msg, doc, pos, end=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __reduce__(self)
 |      helper for pickle
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.ValueError:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, msg, doc, pos, end=None)',)",self,,,arg_info
simplejson,3.17.0,simplejson.scanner.JSONDecodeError,scanner,JSONDecodeError,"Python Library Documentation: class JSONDecodeError in module simplejson.errors

class JSONDecodeError(builtins.ValueError)
 |  Subclass of ValueError with the following additional properties:
 |  
 |  msg: The unformatted error message
 |  doc: The JSON document being parsed
 |  pos: The start index of doc where parsing failed
 |  end: The end index of doc where parsing failed (may be None)
 |  lineno: The line corresponding to pos
 |  colno: The column corresponding to pos
 |  endlineno: The line corresponding to end (may be None)
 |  endcolno: The column corresponding to end (may be None)
 |  
 |  Method resolution order:
 |      JSONDecodeError
 |      builtins.ValueError
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, msg, doc, pos, end=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __reduce__(self)
 |      helper for pickle
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.ValueError:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, msg, doc, pos, end=None)',)",pos,,,arg_info
simplejson,3.17.0,simplejson.scanner.JSONDecodeError,scanner,JSONDecodeError,"Python Library Documentation: class JSONDecodeError in module simplejson.errors

class JSONDecodeError(builtins.ValueError)
 |  Subclass of ValueError with the following additional properties:
 |  
 |  msg: The unformatted error message
 |  doc: The JSON document being parsed
 |  pos: The start index of doc where parsing failed
 |  end: The end index of doc where parsing failed (may be None)
 |  lineno: The line corresponding to pos
 |  colno: The column corresponding to pos
 |  endlineno: The line corresponding to end (may be None)
 |  endcolno: The column corresponding to end (may be None)
 |  
 |  Method resolution order:
 |      JSONDecodeError
 |      builtins.ValueError
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, msg, doc, pos, end=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __reduce__(self)
 |      helper for pickle
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.ValueError:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, msg, doc, pos, end=None)',)",doc,,,arg_info
simplejson,3.17.0,simplejson.scanner.make_scanner,scanner,py_make_scanner,"Python Library Documentation: function py_make_scanner in module simplejson.scanner

py_make_scanner(context)
",function,"('(context)',)",context,,,arg_info
simplejson,3.17.0,simplejson.scanner.py_make_scanner,scanner,py_make_scanner,"Python Library Documentation: function py_make_scanner in module simplejson.scanner

py_make_scanner(context)
",function,"('(context)',)",context,,,arg_info
simplejson,3.17.0,simplejson.tests.NoExtensionTestSuite,tests,NoExtensionTestSuite,"Python Library Documentation: class NoExtensionTestSuite in module simplejson.tests

class NoExtensionTestSuite(unittest.suite.TestSuite)
 |  A test suite is a composite test consisting of a number of TestCases.
 |  
 |  For use, create an instance of TestSuite, then add test case instances.
 |  When all tests have been added, the suite can be passed to a test
 |  runner, such as TextTestRunner. It will run the individual test cases
 |  in the order in which they were added, aggregating the results. When
 |  subclassing, do not forget to call the base class constructor.
 |  
 |  Method resolution order:
 |      NoExtensionTestSuite
 |      unittest.suite.TestSuite
 |      unittest.suite.BaseTestSuite
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  run(self, result)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from unittest.suite.TestSuite:
 |  
 |  debug(self)
 |      Run the tests without collecting errors in a TestResult
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from unittest.suite.BaseTestSuite:
 |  
 |  __call__(self, *args, **kwds)
 |      Call self as a function.
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __init__(self, tests=())
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  addTest(self, test)
 |  
 |  addTests(self, tests)
 |  
 |  countTestCases(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from unittest.suite.BaseTestSuite:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from unittest.suite.BaseTestSuite:
 |  
 |  __hash__ = None
",class,"('(self, tests=())',)",self,,,arg_info
simplejson,3.17.0,simplejson.tests.NoExtensionTestSuite,tests,NoExtensionTestSuite,"Python Library Documentation: class NoExtensionTestSuite in module simplejson.tests

class NoExtensionTestSuite(unittest.suite.TestSuite)
 |  A test suite is a composite test consisting of a number of TestCases.
 |  
 |  For use, create an instance of TestSuite, then add test case instances.
 |  When all tests have been added, the suite can be passed to a test
 |  runner, such as TextTestRunner. It will run the individual test cases
 |  in the order in which they were added, aggregating the results. When
 |  subclassing, do not forget to call the base class constructor.
 |  
 |  Method resolution order:
 |      NoExtensionTestSuite
 |      unittest.suite.TestSuite
 |      unittest.suite.BaseTestSuite
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  run(self, result)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from unittest.suite.TestSuite:
 |  
 |  debug(self)
 |      Run the tests without collecting errors in a TestResult
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from unittest.suite.BaseTestSuite:
 |  
 |  __call__(self, *args, **kwds)
 |      Call self as a function.
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __init__(self, tests=())
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  addTest(self, test)
 |  
 |  addTests(self, tests)
 |  
 |  countTestCases(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from unittest.suite.BaseTestSuite:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from unittest.suite.BaseTestSuite:
 |  
 |  __hash__ = None
",class,"('(self, tests=())',)",tests,(),tuple,arg_info
simplejson,3.17.0,simplejson.tests.TestMissingSpeedups,tests,TestMissingSpeedups,"Python Library Documentation: class TestMissingSpeedups in module simplejson.tests

class TestMissingSpeedups(unittest.case.TestCase)
 |  A class whose instances are single test cases.
 |  
 |  By default, the test code itself should be placed in a method named
 |  'runTest'.
 |  
 |  If the fixture may be used for many test cases, create as
 |  many test methods as are needed. When instantiating such a TestCase
 |  subclass, specify in the constructor arguments the name of the test method
 |  that the instance is to execute.
 |  
 |  Test authors should subclass TestCase for their own tests. Construction
 |  and deconstruction of the test's environment ('fixture') can be
 |  implemented by overriding the 'setUp' and 'tearDown' methods respectively.
 |  
 |  If it is necessary to override the __init__ method, the base class
 |  __init__ method must always be called. It is important that subclasses
 |  should not change the signature of their __init__ method, since instances
 |  of the classes are instantiated automatically by parts of the framework
 |  in order to be run.
 |  
 |  When subclassing TestCase, you can set these attributes:
 |  * failureException: determines which exception will be raised when
 |      the instance's assertion methods fail; test methods raising this
 |      exception will be deemed to have 'failed' rather than 'errored'.
 |  * longMessage: determines whether long messages (including repr of
 |      objects used in assert methods) will be printed on failure in *addition*
 |      to any explicit message passed.
 |  * maxDiff: sets the maximum length of a diff in failure messages
 |      by assert methods using difflib. It is looked up as an instance
 |      attribute so can be configured by individual tests if required.
 |  
 |  Method resolution order:
 |      TestMissingSpeedups
 |      unittest.case.TestCase
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  runTest(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from unittest.case.TestCase:
 |  
 |  __call__(self, *args, **kwds)
 |      Call self as a function.
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __init__(self, methodName='runTest')
 |      Create an instance of the class that will use the named test
 |      method when executed. Raises a ValueError if the instance does
 |      not have a method with the specified name.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __str__(self)
 |      Return str(self).
 |  
 |  addCleanup(self, function, *args, **kwargs)
 |      Add a function, with arguments, to be called when the test is
 |      completed. Functions added are called on a LIFO basis and are
 |      called after tearDown on test failure or success.
 |      
 |      Cleanup items are called even if setUp fails (unlike tearDown).
 |  
 |  addTypeEqualityFunc(self, typeobj, function)
 |      Add a type specific assertEqual style function to compare a type.
 |      
 |      This method is for use by TestCase subclasses that need to register
 |      their own type equality functions to provide nicer error messages.
 |      
 |      Args:
 |          typeobj: The data type to call this function on when both values
 |                  are of the same type in assertEqual().
 |          function: The callable taking two arguments and an optional
 |                  msg= argument that raises self.failureException with a
 |                  useful error message when the two arguments are not equal.
 |  
 |  assertAlmostEqual(self, first, second, places=None, msg=None, delta=None)
 |      Fail if the two objects are unequal as determined by their
 |      difference rounded to the given number of decimal places
 |      (default 7) and comparing to zero, or by comparing that the
 |      difference between the two objects is more than the given
 |      delta.
 |      
 |      Note that decimal places (from zero) are usually not the same
 |      as significant digits (measured from the most significant digit).
 |      
 |      If the two objects compare equal then they will automatically
 |      compare almost equal.
 |  
 |  assertAlmostEquals = deprecated_func(*args, **kwargs)
 |  
 |  assertCountEqual(self, first, second, msg=None)
 |      An unordered sequence comparison asserting that the same elements,
 |      regardless of order.  If the same element occurs more than once,
 |      it verifies that the elements occur the same number of times.
 |      
 |          self.assertEqual(Counter(list(first)),
 |                           Counter(list(second)))
 |      
 |       Example:
 |          - [0, 1, 1] and [1, 0, 1] compare equal.
 |          - [0, 0, 1] and [0, 1] compare unequal.
 |  
 |  assertDictContainsSubset(self, subset, dictionary, msg=None)
 |      Checks whether dictionary is a superset of subset.
 |  
 |  assertDictEqual(self, d1, d2, msg=None)
 |  
 |  assertEqual(self, first, second, msg=None)
 |      Fail if the two objects are unequal as determined by the '=='
 |      operator.
 |  
 |  assertEquals = deprecated_func(*args, **kwargs)
 |  
 |  assertFalse(self, expr, msg=None)
 |      Check that the expression is false.
 |  
 |  assertGreater(self, a, b, msg=None)
 |      Just like self.assertTrue(a > b), but with a nicer default message.
 |  
 |  assertGreaterEqual(self, a, b, msg=None)
 |      Just like self.assertTrue(a >= b), but with a nicer default message.
 |  
 |  assertIn(self, member, container, msg=None)
 |      Just like self.assertTrue(a in b), but with a nicer default message.
 |  
 |  assertIs(self, expr1, expr2, msg=None)
 |      Just like self.assertTrue(a is b), but with a nicer default message.
 |  
 |  assertIsInstance(self, obj, cls, msg=None)
 |      Same as self.assertTrue(isinstance(obj, cls)), with a nicer
 |      default message.
 |  
 |  assertIsNone(self, obj, msg=None)
 |      Same as self.assertTrue(obj is None), with a nicer default message.
 |  
 |  assertIsNot(self, expr1, expr2, msg=None)
 |      Just like self.assertTrue(a is not b), but with a nicer default message.
 |  
 |  assertIsNotNone(self, obj, msg=None)
 |      Included for symmetry with assertIsNone.
 |  
 |  assertLess(self, a, b, msg=None)
 |      Just like self.assertTrue(a < b), but with a nicer default message.
 |  
 |  assertLessEqual(self, a, b, msg=None)
 |      Just like self.assertTrue(a <= b), but with a nicer default message.
 |  
 |  assertListEqual(self, list1, list2, msg=None)
 |      A list-specific equality assertion.
 |      
 |      Args:
 |          list1: The first list to compare.
 |          list2: The second list to compare.
 |          msg: Optional message to use on failure instead of a list of
 |                  differences.
 |  
 |  assertLogs(self, logger=None, level=None)
 |      Fail unless a log message of level *level* or higher is emitted
 |      on *logger_name* or its children.  If omitted, *level* defaults to
 |      INFO and *logger* defaults to the root logger.
 |      
 |      This method must be used as a context manager, and will yield
 |      a recording object with two attributes: `output` and `records`.
 |      At the end of the context manager, the `output` attribute will
 |      be a list of the matching formatted log messages and the
 |      `records` attribute will be a list of the corresponding LogRecord
 |      objects.
 |      
 |      Example::
 |      
 |          with self.assertLogs('foo', level='INFO') as cm:
 |              logging.getLogger('foo').info('first message')
 |              logging.getLogger('foo.bar').error('second message')
 |          self.assertEqual(cm.output, ['INFO:foo:first message',
 |                                       'ERROR:foo.bar:second message'])
 |  
 |  assertMultiLineEqual(self, first, second, msg=None)
 |      Assert that two multi-line strings are equal.
 |  
 |  assertNotAlmostEqual(self, first, second, places=None, msg=None, delta=None)
 |      Fail if the two objects are equal as determined by their
 |      difference rounded to the given number of decimal places
 |      (default 7) and comparing to zero, or by comparing that the
 |      difference between the two objects is less than the given delta.
 |      
 |      Note that decimal places (from zero) are usually not the same
 |      as significant digits (measured from the most significant digit).
 |      
 |      Objects that are equal automatically fail.
 |  
 |  assertNotAlmostEquals = deprecated_func(*args, **kwargs)
 |  
 |  assertNotEqual(self, first, second, msg=None)
 |      Fail if the two objects are equal as determined by the '!='
 |      operator.
 |  
 |  assertNotEquals = deprecated_func(*args, **kwargs)
 |  
 |  assertNotIn(self, member, container, msg=None)
 |      Just like self.assertTrue(a not in b), but with a nicer default message.
 |  
 |  assertNotIsInstance(self, obj, cls, msg=None)
 |      Included for symmetry with assertIsInstance.
 |  
 |  assertNotRegex(self, text, unexpected_regex, msg=None)
 |      Fail the test if the text matches the regular expression.
 |  
 |  assertNotRegexpMatches = deprecated_func(*args, **kwargs)
 |  
 |  assertRaises(self, expected_exception, *args, **kwargs)
 |      Fail unless an exception of class expected_exception is raised
 |      by the callable when invoked with specified positional and
 |      keyword arguments. If a different type of exception is
 |      raised, it will not be caught, and the test case will be
 |      deemed to have suffered an error, exactly as for an
 |      unexpected exception.
 |      
 |      If called with the callable and arguments omitted, will return a
 |      context object used like this::
 |      
 |           with self.assertRaises(SomeException):
 |               do_something()
 |      
 |      An optional keyword argument 'msg' can be provided when assertRaises
 |      is used as a context object.
 |      
 |      The context manager keeps a reference to the exception as
 |      the 'exception' attribute. This allows you to inspect the
 |      exception after the assertion::
 |      
 |          with self.assertRaises(SomeException) as cm:
 |              do_something()
 |          the_exception = cm.exception
 |          self.assertEqual(the_exception.error_code, 3)
 |  
 |  assertRaisesRegex(self, expected_exception, expected_regex, *args, **kwargs)
 |      Asserts that the message in a raised exception matches a regex.
 |      
 |      Args:
 |          expected_exception: Exception class expected to be raised.
 |          expected_regex: Regex (re pattern object or string) expected
 |                  to be found in error message.
 |          args: Function to be called and extra positional args.
 |          kwargs: Extra kwargs.
 |          msg: Optional message used in case of failure. Can only be used
 |                  when assertRaisesRegex is used as a context manager.
 |  
 |  assertRaisesRegexp = deprecated_func(*args, **kwargs)
 |  
 |  assertRegex(self, text, expected_regex, msg=None)
 |      Fail the test unless the text matches the regular expression.
 |  
 |  assertRegexpMatches = deprecated_func(*args, **kwargs)
 |  
 |  assertSequenceEqual(self, seq1, seq2, msg=None, seq_type=None)
 |      An equality assertion for ordered sequences (like lists and tuples).
 |      
 |      For the purposes of this function, a valid ordered sequence type is one
 |      which can be indexed, has a length, and has an equality operator.
 |      
 |      Args:
 |          seq1: The first sequence to compare.
 |          seq2: The second sequence to compare.
 |          seq_type: The expected datatype of the sequences, or None if no
 |                  datatype should be enforced.
 |          msg: Optional message to use on failure instead of a list of
 |                  differences.
 |  
 |  assertSetEqual(self, set1, set2, msg=None)
 |      A set-specific equality assertion.
 |      
 |      Args:
 |          set1: The first set to compare.
 |          set2: The second set to compare.
 |          msg: Optional message to use on failure instead of a list of
 |                  differences.
 |      
 |      assertSetEqual uses ducktyping to support different types of sets, and
 |      is optimized for sets specifically (parameters must support a
 |      difference method).
 |  
 |  assertTrue(self, expr, msg=None)
 |      Check that the expression is true.
 |  
 |  assertTupleEqual(self, tuple1, tuple2, msg=None)
 |      A tuple-specific equality assertion.
 |      
 |      Args:
 |          tuple1: The first tuple to compare.
 |          tuple2: The second tuple to compare.
 |          msg: Optional message to use on failure instead of a list of
 |                  differences.
 |  
 |  assertWarns(self, expected_warning, *args, **kwargs)
 |      Fail unless a warning of class warnClass is triggered
 |      by the callable when invoked with specified positional and
 |      keyword arguments.  If a different type of warning is
 |      triggered, it will not be handled: depending on the other
 |      warning filtering rules in effect, it might be silenced, printed
 |      out, or raised as an exception.
 |      
 |      If called with the callable and arguments omitted, will return a
 |      context object used like this::
 |      
 |           with self.assertWarns(SomeWarning):
 |               do_something()
 |      
 |      An optional keyword argument 'msg' can be provided when assertWarns
 |      is used as a context object.
 |      
 |      The context manager keeps a reference to the first matching
 |      warning as the 'warning' attribute; similarly, the 'filename'
 |      and 'lineno' attributes give you information about the line
 |      of Python code from which the warning was triggered.
 |      This allows you to inspect the warning after the assertion::
 |      
 |          with self.assertWarns(SomeWarning) as cm:
 |              do_something()
 |          the_warning = cm.warning
 |          self.assertEqual(the_warning.some_attribute, 147)
 |  
 |  assertWarnsRegex(self, expected_warning, expected_regex, *args, **kwargs)
 |      Asserts that the message in a triggered warning matches a regexp.
 |      Basic functioning is similar to assertWarns() with the addition
 |      that only warnings whose messages also match the regular expression
 |      are considered successful matches.
 |      
 |      Args:
 |          expected_warning: Warning class expected to be triggered.
 |          expected_regex: Regex (re pattern object or string) expected
 |                  to be found in error message.
 |          args: Function to be called and extra positional args.
 |          kwargs: Extra kwargs.
 |          msg: Optional message used in case of failure. Can only be used
 |                  when assertWarnsRegex is used as a context manager.
 |  
 |  assert_ = deprecated_func(*args, **kwargs)
 |  
 |  countTestCases(self)
 |  
 |  debug(self)
 |      Run the test without collecting errors in a TestResult
 |  
 |  defaultTestResult(self)
 |  
 |  doCleanups(self)
 |      Execute all cleanup functions. Normally called for you after
 |      tearDown.
 |  
 |  fail(self, msg=None)
 |      Fail immediately, with the given message.
 |  
 |  failIf = deprecated_func(*args, **kwargs)
 |  
 |  failIfAlmostEqual = deprecated_func(*args, **kwargs)
 |  
 |  failIfEqual = deprecated_func(*args, **kwargs)
 |  
 |  failUnless = deprecated_func(*args, **kwargs)
 |  
 |  failUnlessAlmostEqual = deprecated_func(*args, **kwargs)
 |  
 |  failUnlessEqual = deprecated_func(*args, **kwargs)
 |  
 |  failUnlessRaises = deprecated_func(*args, **kwargs)
 |  
 |  id(self)
 |  
 |  run(self, result=None)
 |  
 |  setUp(self)
 |      Hook method for setting up the test fixture before exercising it.
 |  
 |  shortDescription(self)
 |      Returns a one-line description of the test, or None if no
 |      description has been provided.
 |      
 |      The default implementation of this method returns the first line of
 |      the specified test method's docstring.
 |  
 |  skipTest(self, reason)
 |      Skip this test.
 |  
 |  subTest(self, msg=<object object at 0x000000000068B270>, **params)
 |      Return a context manager that will return the enclosed block
 |      of code in a subtest identified by the optional message and
 |      keyword parameters.  A failure in the subtest marks the test
 |      case as failed but resumes execution at the end of the enclosed
 |      block, allowing further test code to be executed.
 |  
 |  tearDown(self)
 |      Hook method for deconstructing the test fixture after testing it.
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from unittest.case.TestCase:
 |  
 |  setUpClass() from builtins.type
 |      Hook method for setting up class fixture before running tests in the class.
 |  
 |  tearDownClass() from builtins.type
 |      Hook method for deconstructing the class fixture after running all tests in the class.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from unittest.case.TestCase:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from unittest.case.TestCase:
 |  
 |  failureException = <class 'AssertionError'>
 |      Assertion failed.
 |  
 |  longMessage = True
 |  
 |  maxDiff = 640
",class,"(""(self, methodName='runTest')"",)",self,,,arg_info
simplejson,3.17.0,simplejson.tests.TestMissingSpeedups,tests,TestMissingSpeedups,"Python Library Documentation: class TestMissingSpeedups in module simplejson.tests

class TestMissingSpeedups(unittest.case.TestCase)
 |  A class whose instances are single test cases.
 |  
 |  By default, the test code itself should be placed in a method named
 |  'runTest'.
 |  
 |  If the fixture may be used for many test cases, create as
 |  many test methods as are needed. When instantiating such a TestCase
 |  subclass, specify in the constructor arguments the name of the test method
 |  that the instance is to execute.
 |  
 |  Test authors should subclass TestCase for their own tests. Construction
 |  and deconstruction of the test's environment ('fixture') can be
 |  implemented by overriding the 'setUp' and 'tearDown' methods respectively.
 |  
 |  If it is necessary to override the __init__ method, the base class
 |  __init__ method must always be called. It is important that subclasses
 |  should not change the signature of their __init__ method, since instances
 |  of the classes are instantiated automatically by parts of the framework
 |  in order to be run.
 |  
 |  When subclassing TestCase, you can set these attributes:
 |  * failureException: determines which exception will be raised when
 |      the instance's assertion methods fail; test methods raising this
 |      exception will be deemed to have 'failed' rather than 'errored'.
 |  * longMessage: determines whether long messages (including repr of
 |      objects used in assert methods) will be printed on failure in *addition*
 |      to any explicit message passed.
 |  * maxDiff: sets the maximum length of a diff in failure messages
 |      by assert methods using difflib. It is looked up as an instance
 |      attribute so can be configured by individual tests if required.
 |  
 |  Method resolution order:
 |      TestMissingSpeedups
 |      unittest.case.TestCase
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  runTest(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from unittest.case.TestCase:
 |  
 |  __call__(self, *args, **kwds)
 |      Call self as a function.
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __init__(self, methodName='runTest')
 |      Create an instance of the class that will use the named test
 |      method when executed. Raises a ValueError if the instance does
 |      not have a method with the specified name.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __str__(self)
 |      Return str(self).
 |  
 |  addCleanup(self, function, *args, **kwargs)
 |      Add a function, with arguments, to be called when the test is
 |      completed. Functions added are called on a LIFO basis and are
 |      called after tearDown on test failure or success.
 |      
 |      Cleanup items are called even if setUp fails (unlike tearDown).
 |  
 |  addTypeEqualityFunc(self, typeobj, function)
 |      Add a type specific assertEqual style function to compare a type.
 |      
 |      This method is for use by TestCase subclasses that need to register
 |      their own type equality functions to provide nicer error messages.
 |      
 |      Args:
 |          typeobj: The data type to call this function on when both values
 |                  are of the same type in assertEqual().
 |          function: The callable taking two arguments and an optional
 |                  msg= argument that raises self.failureException with a
 |                  useful error message when the two arguments are not equal.
 |  
 |  assertAlmostEqual(self, first, second, places=None, msg=None, delta=None)
 |      Fail if the two objects are unequal as determined by their
 |      difference rounded to the given number of decimal places
 |      (default 7) and comparing to zero, or by comparing that the
 |      difference between the two objects is more than the given
 |      delta.
 |      
 |      Note that decimal places (from zero) are usually not the same
 |      as significant digits (measured from the most significant digit).
 |      
 |      If the two objects compare equal then they will automatically
 |      compare almost equal.
 |  
 |  assertAlmostEquals = deprecated_func(*args, **kwargs)
 |  
 |  assertCountEqual(self, first, second, msg=None)
 |      An unordered sequence comparison asserting that the same elements,
 |      regardless of order.  If the same element occurs more than once,
 |      it verifies that the elements occur the same number of times.
 |      
 |          self.assertEqual(Counter(list(first)),
 |                           Counter(list(second)))
 |      
 |       Example:
 |          - [0, 1, 1] and [1, 0, 1] compare equal.
 |          - [0, 0, 1] and [0, 1] compare unequal.
 |  
 |  assertDictContainsSubset(self, subset, dictionary, msg=None)
 |      Checks whether dictionary is a superset of subset.
 |  
 |  assertDictEqual(self, d1, d2, msg=None)
 |  
 |  assertEqual(self, first, second, msg=None)
 |      Fail if the two objects are unequal as determined by the '=='
 |      operator.
 |  
 |  assertEquals = deprecated_func(*args, **kwargs)
 |  
 |  assertFalse(self, expr, msg=None)
 |      Check that the expression is false.
 |  
 |  assertGreater(self, a, b, msg=None)
 |      Just like self.assertTrue(a > b), but with a nicer default message.
 |  
 |  assertGreaterEqual(self, a, b, msg=None)
 |      Just like self.assertTrue(a >= b), but with a nicer default message.
 |  
 |  assertIn(self, member, container, msg=None)
 |      Just like self.assertTrue(a in b), but with a nicer default message.
 |  
 |  assertIs(self, expr1, expr2, msg=None)
 |      Just like self.assertTrue(a is b), but with a nicer default message.
 |  
 |  assertIsInstance(self, obj, cls, msg=None)
 |      Same as self.assertTrue(isinstance(obj, cls)), with a nicer
 |      default message.
 |  
 |  assertIsNone(self, obj, msg=None)
 |      Same as self.assertTrue(obj is None), with a nicer default message.
 |  
 |  assertIsNot(self, expr1, expr2, msg=None)
 |      Just like self.assertTrue(a is not b), but with a nicer default message.
 |  
 |  assertIsNotNone(self, obj, msg=None)
 |      Included for symmetry with assertIsNone.
 |  
 |  assertLess(self, a, b, msg=None)
 |      Just like self.assertTrue(a < b), but with a nicer default message.
 |  
 |  assertLessEqual(self, a, b, msg=None)
 |      Just like self.assertTrue(a <= b), but with a nicer default message.
 |  
 |  assertListEqual(self, list1, list2, msg=None)
 |      A list-specific equality assertion.
 |      
 |      Args:
 |          list1: The first list to compare.
 |          list2: The second list to compare.
 |          msg: Optional message to use on failure instead of a list of
 |                  differences.
 |  
 |  assertLogs(self, logger=None, level=None)
 |      Fail unless a log message of level *level* or higher is emitted
 |      on *logger_name* or its children.  If omitted, *level* defaults to
 |      INFO and *logger* defaults to the root logger.
 |      
 |      This method must be used as a context manager, and will yield
 |      a recording object with two attributes: `output` and `records`.
 |      At the end of the context manager, the `output` attribute will
 |      be a list of the matching formatted log messages and the
 |      `records` attribute will be a list of the corresponding LogRecord
 |      objects.
 |      
 |      Example::
 |      
 |          with self.assertLogs('foo', level='INFO') as cm:
 |              logging.getLogger('foo').info('first message')
 |              logging.getLogger('foo.bar').error('second message')
 |          self.assertEqual(cm.output, ['INFO:foo:first message',
 |                                       'ERROR:foo.bar:second message'])
 |  
 |  assertMultiLineEqual(self, first, second, msg=None)
 |      Assert that two multi-line strings are equal.
 |  
 |  assertNotAlmostEqual(self, first, second, places=None, msg=None, delta=None)
 |      Fail if the two objects are equal as determined by their
 |      difference rounded to the given number of decimal places
 |      (default 7) and comparing to zero, or by comparing that the
 |      difference between the two objects is less than the given delta.
 |      
 |      Note that decimal places (from zero) are usually not the same
 |      as significant digits (measured from the most significant digit).
 |      
 |      Objects that are equal automatically fail.
 |  
 |  assertNotAlmostEquals = deprecated_func(*args, **kwargs)
 |  
 |  assertNotEqual(self, first, second, msg=None)
 |      Fail if the two objects are equal as determined by the '!='
 |      operator.
 |  
 |  assertNotEquals = deprecated_func(*args, **kwargs)
 |  
 |  assertNotIn(self, member, container, msg=None)
 |      Just like self.assertTrue(a not in b), but with a nicer default message.
 |  
 |  assertNotIsInstance(self, obj, cls, msg=None)
 |      Included for symmetry with assertIsInstance.
 |  
 |  assertNotRegex(self, text, unexpected_regex, msg=None)
 |      Fail the test if the text matches the regular expression.
 |  
 |  assertNotRegexpMatches = deprecated_func(*args, **kwargs)
 |  
 |  assertRaises(self, expected_exception, *args, **kwargs)
 |      Fail unless an exception of class expected_exception is raised
 |      by the callable when invoked with specified positional and
 |      keyword arguments. If a different type of exception is
 |      raised, it will not be caught, and the test case will be
 |      deemed to have suffered an error, exactly as for an
 |      unexpected exception.
 |      
 |      If called with the callable and arguments omitted, will return a
 |      context object used like this::
 |      
 |           with self.assertRaises(SomeException):
 |               do_something()
 |      
 |      An optional keyword argument 'msg' can be provided when assertRaises
 |      is used as a context object.
 |      
 |      The context manager keeps a reference to the exception as
 |      the 'exception' attribute. This allows you to inspect the
 |      exception after the assertion::
 |      
 |          with self.assertRaises(SomeException) as cm:
 |              do_something()
 |          the_exception = cm.exception
 |          self.assertEqual(the_exception.error_code, 3)
 |  
 |  assertRaisesRegex(self, expected_exception, expected_regex, *args, **kwargs)
 |      Asserts that the message in a raised exception matches a regex.
 |      
 |      Args:
 |          expected_exception: Exception class expected to be raised.
 |          expected_regex: Regex (re pattern object or string) expected
 |                  to be found in error message.
 |          args: Function to be called and extra positional args.
 |          kwargs: Extra kwargs.
 |          msg: Optional message used in case of failure. Can only be used
 |                  when assertRaisesRegex is used as a context manager.
 |  
 |  assertRaisesRegexp = deprecated_func(*args, **kwargs)
 |  
 |  assertRegex(self, text, expected_regex, msg=None)
 |      Fail the test unless the text matches the regular expression.
 |  
 |  assertRegexpMatches = deprecated_func(*args, **kwargs)
 |  
 |  assertSequenceEqual(self, seq1, seq2, msg=None, seq_type=None)
 |      An equality assertion for ordered sequences (like lists and tuples).
 |      
 |      For the purposes of this function, a valid ordered sequence type is one
 |      which can be indexed, has a length, and has an equality operator.
 |      
 |      Args:
 |          seq1: The first sequence to compare.
 |          seq2: The second sequence to compare.
 |          seq_type: The expected datatype of the sequences, or None if no
 |                  datatype should be enforced.
 |          msg: Optional message to use on failure instead of a list of
 |                  differences.
 |  
 |  assertSetEqual(self, set1, set2, msg=None)
 |      A set-specific equality assertion.
 |      
 |      Args:
 |          set1: The first set to compare.
 |          set2: The second set to compare.
 |          msg: Optional message to use on failure instead of a list of
 |                  differences.
 |      
 |      assertSetEqual uses ducktyping to support different types of sets, and
 |      is optimized for sets specifically (parameters must support a
 |      difference method).
 |  
 |  assertTrue(self, expr, msg=None)
 |      Check that the expression is true.
 |  
 |  assertTupleEqual(self, tuple1, tuple2, msg=None)
 |      A tuple-specific equality assertion.
 |      
 |      Args:
 |          tuple1: The first tuple to compare.
 |          tuple2: The second tuple to compare.
 |          msg: Optional message to use on failure instead of a list of
 |                  differences.
 |  
 |  assertWarns(self, expected_warning, *args, **kwargs)
 |      Fail unless a warning of class warnClass is triggered
 |      by the callable when invoked with specified positional and
 |      keyword arguments.  If a different type of warning is
 |      triggered, it will not be handled: depending on the other
 |      warning filtering rules in effect, it might be silenced, printed
 |      out, or raised as an exception.
 |      
 |      If called with the callable and arguments omitted, will return a
 |      context object used like this::
 |      
 |           with self.assertWarns(SomeWarning):
 |               do_something()
 |      
 |      An optional keyword argument 'msg' can be provided when assertWarns
 |      is used as a context object.
 |      
 |      The context manager keeps a reference to the first matching
 |      warning as the 'warning' attribute; similarly, the 'filename'
 |      and 'lineno' attributes give you information about the line
 |      of Python code from which the warning was triggered.
 |      This allows you to inspect the warning after the assertion::
 |      
 |          with self.assertWarns(SomeWarning) as cm:
 |              do_something()
 |          the_warning = cm.warning
 |          self.assertEqual(the_warning.some_attribute, 147)
 |  
 |  assertWarnsRegex(self, expected_warning, expected_regex, *args, **kwargs)
 |      Asserts that the message in a triggered warning matches a regexp.
 |      Basic functioning is similar to assertWarns() with the addition
 |      that only warnings whose messages also match the regular expression
 |      are considered successful matches.
 |      
 |      Args:
 |          expected_warning: Warning class expected to be triggered.
 |          expected_regex: Regex (re pattern object or string) expected
 |                  to be found in error message.
 |          args: Function to be called and extra positional args.
 |          kwargs: Extra kwargs.
 |          msg: Optional message used in case of failure. Can only be used
 |                  when assertWarnsRegex is used as a context manager.
 |  
 |  assert_ = deprecated_func(*args, **kwargs)
 |  
 |  countTestCases(self)
 |  
 |  debug(self)
 |      Run the test without collecting errors in a TestResult
 |  
 |  defaultTestResult(self)
 |  
 |  doCleanups(self)
 |      Execute all cleanup functions. Normally called for you after
 |      tearDown.
 |  
 |  fail(self, msg=None)
 |      Fail immediately, with the given message.
 |  
 |  failIf = deprecated_func(*args, **kwargs)
 |  
 |  failIfAlmostEqual = deprecated_func(*args, **kwargs)
 |  
 |  failIfEqual = deprecated_func(*args, **kwargs)
 |  
 |  failUnless = deprecated_func(*args, **kwargs)
 |  
 |  failUnlessAlmostEqual = deprecated_func(*args, **kwargs)
 |  
 |  failUnlessEqual = deprecated_func(*args, **kwargs)
 |  
 |  failUnlessRaises = deprecated_func(*args, **kwargs)
 |  
 |  id(self)
 |  
 |  run(self, result=None)
 |  
 |  setUp(self)
 |      Hook method for setting up the test fixture before exercising it.
 |  
 |  shortDescription(self)
 |      Returns a one-line description of the test, or None if no
 |      description has been provided.
 |      
 |      The default implementation of this method returns the first line of
 |      the specified test method's docstring.
 |  
 |  skipTest(self, reason)
 |      Skip this test.
 |  
 |  subTest(self, msg=<object object at 0x000000000068B270>, **params)
 |      Return a context manager that will return the enclosed block
 |      of code in a subtest identified by the optional message and
 |      keyword parameters.  A failure in the subtest marks the test
 |      case as failed but resumes execution at the end of the enclosed
 |      block, allowing further test code to be executed.
 |  
 |  tearDown(self)
 |      Hook method for deconstructing the test fixture after testing it.
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from unittest.case.TestCase:
 |  
 |  setUpClass() from builtins.type
 |      Hook method for setting up class fixture before running tests in the class.
 |  
 |  tearDownClass() from builtins.type
 |      Hook method for deconstructing the class fixture after running all tests in the class.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from unittest.case.TestCase:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from unittest.case.TestCase:
 |  
 |  failureException = <class 'AssertionError'>
 |      Assertion failed.
 |  
 |  longMessage = True
 |  
 |  maxDiff = 640
",class,"(""(self, methodName='runTest')"",)",methodName,runTest,str,arg_info
simplejson,3.17.0,simplejson.tests.TestMissingSpeedups.setUpClass,tests.TestMissingSpeedups,setUpClass,"Python Library Documentation: method setUpClass in module unittest.case

setUpClass() method of builtins.type instance
    Hook method for setting up class fixture before running tests in the class.
",method,"('()',)",cls,,,arg_info
simplejson,3.17.0,simplejson.tests.TestMissingSpeedups.tearDownClass,tests.TestMissingSpeedups,tearDownClass,"Python Library Documentation: method tearDownClass in module unittest.case

tearDownClass() method of builtins.type instance
    Hook method for deconstructing the class fixture after running all tests in the class.
",method,"('()',)",cls,,,arg_info
simplejson,3.17.0,simplejson.tests.additional_tests,tests,additional_tests,"Python Library Documentation: function additional_tests in module simplejson.tests

additional_tests(suite=None)
",function,"('(suite=None)',)",suite,,NoneType,arg_info
