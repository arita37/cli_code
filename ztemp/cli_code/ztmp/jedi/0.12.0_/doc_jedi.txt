#jedi_0.12.0
jedi._compatibility.DummyFile(self, loader, string)
jedi._compatibility.FileNotFoundError(self, /, *args, **kwargs)
jedi._compatibility.GeneralizedPopen(self, *args, **kwargs)
jedi._compatibility.ImplicitNSInfo(self, name, paths)
jedi._compatibility.NotADirectoryError(self, /, *args, **kwargs)
jedi._compatibility.Parameter(self, name, kind, *, default, annotation)
jedi._compatibility.Python3Method(self, func)
jedi._compatibility._iter_modules(paths, prefix='')
jedi._compatibility.cast_path(obj)
jedi._compatibility.find_module(string, path=None, full_name=None)
jedi._compatibility.find_module_pre_py33(string, path=None, full_name=None)
jedi._compatibility.find_module_py33(string, path=None, loader=None, full_name=None)
jedi._compatibility.find_module_py34(string, path=None, full_name=None)
jedi._compatibility.force_unicode(obj)
jedi._compatibility.iter_modules(paths, prefix='')
jedi._compatibility.literal_eval(string)
jedi._compatibility.no_unicode_pprint(dct)
jedi._compatibility.pickle_dump(data, file)
jedi._compatibility.pickle_load(file)
jedi._compatibility.reraise(exception, traceback)
jedi._compatibility.u(string, errors='strict')
jedi._compatibility.unicode(self, /, *args, **kwargs)
jedi._compatibility.use_metaclass(meta, *bases)
jedi._compatibility.utf8_repr(func)
jedi._compatibility.zip_longest(self, /, *args, **kwargs)
jedi.api.Completion(self, evaluator, module, code_lines, position, call_signatures_method)
jedi.api.Evaluator(self, project, environment=None, script_path=None)
jedi.api.Interpreter(self, source, namespaces, **kwds)
jedi.api.InterpreterEnvironment(self)
jedi.api.ModuleContext(self, evaluator, module_node, path, code_lines)
jedi.api.ParamName(self, parent_context, tree_name)
jedi.api.Script(self, source=None, line=None, column=None, path=None, encoding='utf-8', sys_path=None, environment=None)
jedi.api.TreeNameDefinition(self, parent_context, tree_name)
jedi.api.classes.BaseDefinition(self, evaluator, name)
jedi.api.classes.CallSignature(self, evaluator, executable_name, bracket_start_pos, index, key_name_str)
jedi.api.classes.ClassContext(self, evaluator, parent_context, classdef)
jedi.api.classes.Completion(self, evaluator, name, stack, like_name_length)
jedi.api.classes.Definition(self, evaluator, definition)
jedi.api.classes.FunctionContext(self, evaluator, parent_context, funcdef)
jedi.api.classes.FunctionExecutionContext(self, evaluator, parent_context, function_context, var_args)
jedi.api.classes.ImportName(self, parent_context, string_name)
jedi.api.classes.KeywordName(self, evaluator, name)
jedi.api.classes._Help(self, definition)
jedi.api.classes._sort_names_by_start_pos(names)
jedi.api.classes.defined_names(evaluator, context)
jedi.api.classes.memoize_method(method)
jedi.api.classes.search_ancestor(node, *node_types)
jedi.api.classes.unite(iterable)
jedi.api.completion.Completion(self, evaluator, module, code_lines, position, call_signatures_method)
jedi.api.completion.Leaf(self, value, start_pos, prefix='')
jedi.api.completion.Parameter(self, name, kind, *, default, annotation)
jedi.api.completion.evaluate_call_of_leaf(context, leaf, cut_own_trailer=False)
jedi.api.completion.filter_names(evaluator, completion_names, stack, like_name)
jedi.api.completion.get_call_signature_param_names(call_signatures)
jedi.api.completion.get_flow_scope_node(module_node, position)
jedi.api.completion.get_global_filters(evaluator, context, until_position, origin_scope)
jedi.api.completion.get_statement_of_position(node, pos)
jedi.api.completion.get_user_scope(module_context, position)
jedi.api.completion.search_ancestor(node, *node_types)
jedi.api.dotted_path_in_sys_path(sys_path, module_path)
jedi.api.environment.Environment(self, path, executable)
jedi.api.environment.EvaluatorSameProcess(self, evaluator)
jedi.api.environment.EvaluatorSubprocess(self, evaluator, compiled_subprocess)
jedi.api.environment.GeneralizedPopen(self, *args, **kwargs)
jedi.api.environment.InterpreterEnvironment(self)
jedi.api.environment.InvalidPythonEnvironment(self, /, *args, **kwargs)
jedi.api.environment.SameEnvironment(self)
jedi.api.environment._BaseEnvironment(self, /, *args, **kwargs)
jedi.api.environment._VersionInfo(self, /, *args, **kwargs)
jedi.api.environment._VersionInfo._make(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>)
jedi.api.environment._calculate_sha256_for_file(path)
jedi.api.environment._get_executable_path(path, safe=True)
jedi.api.environment._get_executables_from_windows_registry(version)
jedi.api.environment._get_python_prefix(executable)
jedi.api.environment._is_safe(executable_path)
jedi.api.environment._is_unix_safe_simple(real_path)
jedi.api.environment.create_environment(path, safe=True)
jedi.api.environment.find_executable(executable, path=None)
jedi.api.environment.find_virtualenvs(paths=None, **kwargs)
jedi.api.environment.get_subprocess(executable)
jedi.api.environment.get_system_environment(version)
jedi.api.environment.memoize_method(method)
jedi.api.environment.namedtuple(typename, field_names, *, verbose=False, rename=False, module=None)
jedi.api.environment.time_cache(seconds)
jedi.api.evaluate_call_of_leaf(context, leaf, cut_own_trailer=False)
jedi.api.exceptions.InternalError(self, /, *args, **kwargs)
jedi.api.exceptions.WrongVersion(self, /, *args, **kwargs)
jedi.api.exceptions._JediError(self, /, *args, **kwargs)
jedi.api.force_unicode(obj)
jedi.api.get_default_project(path=None)
jedi.api.get_executable_nodes(node, last_added=False)
jedi.api.get_module_names(module, all_scopes)
jedi.api.helpers.CallSignatureDetails(self, /, *args, **kwargs)
jedi.api.helpers.CallSignatureDetails._make(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>)
jedi.api.helpers.CompletionParts(self, /, *args, **kwargs)
jedi.api.helpers.CompletionParts._make(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>)
jedi.api.helpers.ContextSet(self, *args)
jedi.api.helpers.ContextSet.from_iterable(iterable)
jedi.api.helpers.ContextSet.from_set(set_)
jedi.api.helpers.ContextSet.from_sets(sets)
jedi.api.helpers.OnErrorLeaf(self, /, *args, **kwargs)
jedi.api.helpers.Parser(self, pgen_grammar, error_recovery=True, start_symbol='file_input')
jedi.api.helpers.Stack(self, /, *args, **kwargs)
jedi.api.helpers._get_call_signature_details_from_error_node(node, position)
jedi.api.helpers._get_code(code_lines, start_pos, end_pos)
jedi.api.helpers._get_code_for_stack(code_lines, module_node, position)
jedi.api.helpers._get_index_and_key(nodes, position)
jedi.api.helpers.call_signature_time_cache(time_add_setting)
jedi.api.helpers.dedent(text)
jedi.api.helpers.eval_atom(context, atom)
jedi.api.helpers.evaluate_call_of_leaf(context, leaf, cut_own_trailer=False)
jedi.api.helpers.evaluate_goto_definition(evaluator, context, leaf)
jedi.api.helpers.get_call_signature_details(module, position)
jedi.api.helpers.get_on_completion_name(module_node, lines, position)
jedi.api.helpers.get_possible_completion_types(pgen_grammar, stack)
jedi.api.helpers.get_stack_at_position(grammar, code_lines, module_node, pos)
jedi.api.helpers.get_string_context_set(evaluator)
jedi.api.helpers.namedtuple(typename, field_names, *, verbose=False, rename=False, module=None)
jedi.api.helpers.sorted_definitions(defs)
jedi.api.helpers.u(string, errors='strict')
jedi.api.interpreter.Context(self, evaluator, parent_context=None)
jedi.api.interpreter.MixedModuleContext(self, evaluator, tree_module, namespaces, path, code_lines)
jedi.api.interpreter.ModuleContext(self, evaluator, module_node, path, code_lines)
jedi.api.interpreter.NamespaceObject(self, dct)
jedi.api.interpreter._create(evaluator, obj)
jedi.api.interpreter.create_access_path(evaluator, obj)
jedi.api.keywords.AbstractNameDefinition(self, /, *args, **kwargs)
jedi.api.keywords.Keyword(self, evaluator, name, pos)
jedi.api.keywords.KeywordName(self, evaluator, name)
jedi.api.keywords.get_operator(evaluator, string, pos)
jedi.api.keywords.imitate_pydoc(string)
jedi.api.names(source=None, path=None, encoding='utf-8', all_scopes=False, definitions=True, references=False, environment=None)
jedi.api.project.FileNotFoundError(self, /, *args, **kwargs)
jedi.api.project.NotADirectoryError(self, /, *args, **kwargs)
jedi.api.project.Project(self, path, **kwargs)
jedi.api.project.Project.load(path)
jedi.api.project.SameEnvironment(self)
jedi.api.project.WrongVersion(self, /, *args, **kwargs)
jedi.api.project._force_unicode_list(lst)
jedi.api.project._is_django_path(directory)
jedi.api.project._is_potential_project(path)
jedi.api.project._remove_duplicates_from_path(path)
jedi.api.project.discover_buildout_paths(evaluator, script_path)
jedi.api.project.force_unicode(obj)
jedi.api.project.get_default_project(path=None)
jedi.api.project.traverse_parents(path, include_current=False)
jedi.api.set_debug_function(func_cb=<function print_to_stdout at 0x0000000005718D08>, warnings=True, notices=True, speed=True)
jedi.api.tree_name_to_contexts(evaluator, context, tree_name)
jedi.api.try_iter_content(types, depth=0)
jedi.api.unpack_tuple_to_dict(context, types, exprlist)
jedi.cache.call_signature_time_cache(time_add_setting)
jedi.cache.clear_time_caches(delete_all=False)
jedi.cache.memoize_method(method)
jedi.cache.time_cache(seconds)
jedi.cache.underscore_memoization(func)
jedi.cache.wraps(wrapped, assigned=('__module__', '__name__', '__qualname__', '__doc__', '__annotations__'), updated=('__dict__',))
jedi.common.BaseContext(self, evaluator, parent_context=None)
jedi.common.BaseContextSet(self, *args)
jedi.common.BaseContextSet.from_iterable(iterable)
jedi.common.BaseContextSet.from_set(set_)
jedi.common.BaseContextSet.from_sets(sets)
jedi.common.context.BaseContext(self, evaluator, parent_context=None)
jedi.common.context.BaseContextSet(self, *args)
jedi.common.context.BaseContextSet.from_iterable(iterable)
jedi.common.context.BaseContextSet.from_set(set_)
jedi.common.context.BaseContextSet.from_sets(sets)
jedi.common.utils.traverse_parents(path, include_current=False)
jedi.debug.Fore(self, /, *args, **kwargs)
jedi.debug.dbg(message, *args, **kwargs)
jedi.debug.increase_indent(func)
jedi.debug.print_to_stdout(color, str_out)
jedi.debug.speed(name)
jedi.debug.u(string, errors='strict')
jedi.debug.warning(message, *args, **kwargs)
jedi.evaluate.AnonymousInstance(self, evaluator, parent_context, class_context)
jedi.evaluate.BoundMethod(self, evaluator, instance, class_context, *args, **kwargs)
jedi.evaluate.ClassContext(self, evaluator, parent_context, classdef)
jedi.evaluate.CompForContext(self, evaluator, parent_context, comp_for)
jedi.evaluate.CompForContext.from_comp_for(parent_context, comp_for)
jedi.evaluate.ContextSet(self, *args)
jedi.evaluate.ContextSet.from_iterable(iterable)
jedi.evaluate.ContextSet.from_set(set_)
jedi.evaluate.ContextSet.from_sets(sets)
jedi.evaluate.ContextualizedName(self, context, node)
jedi.evaluate.ContextualizedNode(self, context, node)
jedi.evaluate.Evaluator(self, project, environment=None, script_path=None)
jedi.evaluate.FunctionContext(self, evaluator, parent_context, funcdef)
jedi.evaluate.ParamName(self, parent_context, tree_name)
jedi.evaluate.TreeNameDefinition(self, parent_context, tree_name)
jedi.evaluate.analysis.CompiledObject(self, evaluator, access_handle, parent_context=None, faked_class=None)
jedi.evaluate.analysis.Error(self, name, module_path, start_pos, message=None)
jedi.evaluate.analysis.Warning(self, name, module_path, start_pos, message=None)
jedi.evaluate.analysis._check_for_exception_catch(node_context, jedi_name, exception, payload=None)
jedi.evaluate.analysis._check_for_setattr(instance)
jedi.evaluate.analysis.add(node_context, error_name, node, message=None, typ=<class 'jedi.evaluate.analysis.Error'>, payload=None)
jedi.evaluate.analysis.add_attribute_error(name_context, lookup_context, name)
jedi.evaluate.analysis.force_unicode(obj)
jedi.evaluate.analysis.is_string(context)
jedi.evaluate.arguments.AbstractArguments(self, /, *args, **kwargs)
jedi.evaluate.arguments.AnonymousArguments(self, /, *args, **kwargs)
jedi.evaluate.arguments.ExecutedParam(self, execution_context, param_node, lazy_context)
jedi.evaluate.arguments.LazyKnownContext(self, data)
jedi.evaluate.arguments.LazyKnownContexts(self, data)
jedi.evaluate.arguments.LazyTreeContext(self, context, node)
jedi.evaluate.arguments.ParamName(self, parent_context, tree_name)
jedi.evaluate.arguments.TreeArguments(self, evaluator, context, argument_node, trailer=None)
jedi.evaluate.arguments.ValuesArguments(self, values_list)
jedi.evaluate.arguments._iterate_star_args(context, array, input_node, funcdef=None)
jedi.evaluate.arguments._star_star_dict(context, array, input_node, funcdef)
jedi.evaluate.arguments.get_merged_lazy_context(lazy_contexts)
jedi.evaluate.arguments.get_params(execution_context, var_args)
jedi.evaluate.arguments.try_iter_content(types, depth=0)
jedi.evaluate.arguments.zip_longest(self, /, *args, **kwargs)
jedi.evaluate.base_context.BaseContext(self, evaluator, parent_context=None)
jedi.evaluate.base_context.BaseContextSet(self, *args)
jedi.evaluate.base_context.BaseContextSet.from_iterable(iterable)
jedi.evaluate.base_context.BaseContextSet.from_set(set_)
jedi.evaluate.base_context.BaseContextSet.from_sets(sets)
jedi.evaluate.base_context.CompFor(self, children)
jedi.evaluate.base_context.Context(self, evaluator, parent_context=None)
jedi.evaluate.base_context.ContextSet(self, *args)
jedi.evaluate.base_context.ContextSet.from_iterable(iterable)
jedi.evaluate.base_context.ContextSet.from_set(set_)
jedi.evaluate.base_context.ContextSet.from_sets(sets)
jedi.evaluate.base_context.ContextualizedName(self, context, node)
jedi.evaluate.base_context.ContextualizedNode(self, context, node)
jedi.evaluate.base_context.ExprStmt(self, children)
jedi.evaluate.base_context.Python3Method(self, func)
jedi.evaluate.base_context.TreeContext(self, evaluator, parent_context=None)
jedi.evaluate.base_context.clean_scope_docstring(scope_node)
jedi.evaluate.base_context.get_doc_with_call_signature(scope_node)
jedi.evaluate.base_context.iterate_contexts(contexts, contextualized_node=None, is_async=False)
jedi.evaluate.base_context.iterator_to_context_set(func)
jedi.evaluate.base_context.unicode(self, /, *args, **kwargs)
jedi.evaluate.base_context.zip_longest(self, /, *args, **kwargs)
jedi.evaluate.cache.CachedMetaClass(self, /, *args, **kwargs)
jedi.evaluate.cache._memoize_default(default=<object object at 0x000000000520FC20>, evaluator_is_first_arg=False, second_arg_is_evaluator=False)
jedi.evaluate.cache.evaluator_function_cache(default=<object object at 0x000000000520FC20>)
jedi.evaluate.cache.evaluator_method_cache(default=<object object at 0x000000000520FC20>)
jedi.evaluate.check_tuple_assignments(evaluator, contextualized_name, context_set)
jedi.evaluate.compiled.CompiledContextName(self, context, name)
jedi.evaluate.compiled.CompiledName(self, evaluator, parent_context, name)
jedi.evaluate.compiled.CompiledObject(self, evaluator, access_handle, parent_context=None, faked_class=None)
jedi.evaluate.compiled.CompiledObjectFilter(self, evaluator, compiled_object, is_instance=False)
jedi.evaluate.compiled.access.AccessPath(self, accesses)
jedi.evaluate.compiled.access.AsyncGeneratorType(self, /, *args, **kwargs)
jedi.evaluate.compiled.access.ClassMethodDescriptorType(self, /, *args, **kwargs)
jedi.evaluate.compiled.access.CoroutineType(self, /, *args, **kwargs)
jedi.evaluate.compiled.access.DirectObjectAccess(self, evaluator, obj)
jedi.evaluate.compiled.access.MethodDescriptorType(self, /, *args, **kwargs)
jedi.evaluate.compiled.access.SignatureParam(self, /, *args, **kwargs)
jedi.evaluate.compiled.access.SignatureParam._make(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>)
jedi.evaluate.compiled.access.WrapperDescriptorType(self, /, *args, **kwargs)
jedi.evaluate.compiled.access._SPECIAL_OBJECTS(self, /, *args, **kwargs)
jedi.evaluate.compiled.access._a_generator(foo)
jedi.evaluate.compiled.access._force_unicode_decorator(func)
jedi.evaluate.compiled.access._is_class_instance(obj)
jedi.evaluate.compiled.access.compiled_objects_cache(attribute_name)
jedi.evaluate.compiled.access.create_access(evaluator, obj)
jedi.evaluate.compiled.access.create_access_path(evaluator, obj)
jedi.evaluate.compiled.access.dedent(text)
jedi.evaluate.compiled.access.dotted_from_fs_path(fs_path, sys_path)
jedi.evaluate.compiled.access.force_unicode(obj)
jedi.evaluate.compiled.access.get_special_object(evaluator, identifier)
jedi.evaluate.compiled.access.getattr_static(obj, attr, default=<object object at 0x000000000520FC30>)
jedi.evaluate.compiled.access.load_module(evaluator, path=None, name=None, sys_path=None)
jedi.evaluate.compiled.access.namedtuple(typename, field_names, *, verbose=False, rename=False, module=None)
jedi.evaluate.compiled.access.safe_getattr(obj, name, default=<object object at 0x000000000520FC40>)
jedi.evaluate.compiled.access.unicode(self, /, *args, **kwargs)
jedi.evaluate.compiled.builtin_from_name(evaluator, string)
jedi.evaluate.compiled.context.AbstractFilter(self, /, *args, **kwargs)
jedi.evaluate.compiled.context.AbstractNameDefinition(self, /, *args, **kwargs)
jedi.evaluate.compiled.context.CheckAttribute(self, func)
jedi.evaluate.compiled.context.CompiledContextName(self, context, name)
jedi.evaluate.compiled.context.CompiledName(self, evaluator, parent_context, name)
jedi.evaluate.compiled.context.CompiledObject(self, evaluator, access_handle, parent_context=None, faked_class=None)
jedi.evaluate.compiled.context.CompiledObjectFilter(self, evaluator, compiled_object, is_instance=False)
jedi.evaluate.compiled.context.Context(self, evaluator, parent_context=None)
jedi.evaluate.compiled.context.ContextNameMixin(self, /, *args, **kwargs)
jedi.evaluate.compiled.context.ContextSet(self, *args)
jedi.evaluate.compiled.context.ContextSet.from_iterable(iterable)
jedi.evaluate.compiled.context.ContextSet.from_set(set_)
jedi.evaluate.compiled.context.ContextSet.from_sets(sets)
jedi.evaluate.compiled.context.EmptyCompiledName(self, evaluator, name)
jedi.evaluate.compiled.context.LazyKnownContext(self, data)
jedi.evaluate.compiled.context.Parameter(self, name, kind, *, default, annotation)
jedi.evaluate.compiled.context.SignatureParamName(self, compiled_obj, signature_param)
jedi.evaluate.compiled.context.UnresolvableParamName(self, compiled_obj, name)
jedi.evaluate.compiled.context._normalize_create_args(func)
jedi.evaluate.compiled.context._parse_function_doc(doc)
jedi.evaluate.compiled.context.create_cached_compiled_object(evaluator, obj, parent_context=None, faked=None)
jedi.evaluate.compiled.context.create_from_access_path(evaluator, access_path)
jedi.evaluate.compiled.context.create_from_name(evaluator, compiled_object, name)
jedi.evaluate.compiled.context.evaluator_function_cache(default=<object object at 0x000000000520FC20>)
jedi.evaluate.compiled.context.force_unicode(obj)
jedi.evaluate.compiled.context.memoize_method(method)
jedi.evaluate.compiled.context.partial(self, /, *args, **kwargs)
jedi.evaluate.compiled.context.underscore_memoization(func)
jedi.evaluate.compiled.create_from_access_path(evaluator, access_path)
jedi.evaluate.compiled.create_from_name(evaluator, compiled_object, name)
jedi.evaluate.compiled.create_simple_object(evaluator, obj)
jedi.evaluate.compiled.fake.FakeDoesNotExist(self, /, *args, **kwargs)
jedi.evaluate.compiled.fake._load_faked_module(evaluator, module_name)
jedi.evaluate.compiled.fake._search_scope(scope, obj_name)
jedi.evaluate.compiled.fake.chain(self, /, *args, **kwargs)
jedi.evaluate.compiled.fake.get_faked_module(evaluator, string_name)
jedi.evaluate.compiled.fake.get_faked_with_parent_context(parent_context, name)
jedi.evaluate.compiled.fake.unicode(self, /, *args, **kwargs)
jedi.evaluate.compiled.get_special_object(evaluator, identifier)
jedi.evaluate.compiled.get_string_context_set(evaluator)
jedi.evaluate.compiled.getattr_static._check_class(klass, attr)
jedi.evaluate.compiled.getattr_static._check_instance(obj, attr)
jedi.evaluate.compiled.getattr_static._get_type(self, /, *args, **kwargs)
jedi.evaluate.compiled.getattr_static._is_type(obj)
jedi.evaluate.compiled.getattr_static._safe_hasattr(obj, name)
jedi.evaluate.compiled.getattr_static._safe_is_data_descriptor(obj)
jedi.evaluate.compiled.getattr_static._shadowed_dict(klass)
jedi.evaluate.compiled.getattr_static._shadowed_dict_newstyle(klass)
jedi.evaluate.compiled.getattr_static._static_getmro(klass)
jedi.evaluate.compiled.getattr_static._static_getmro_newstyle(klass)
jedi.evaluate.compiled.getattr_static.getattr_static(obj, attr, default=<object object at 0x000000000520FC30>)
jedi.evaluate.compiled.load_module(evaluator, **kwargs)
jedi.evaluate.compiled.mixed.Context(self, evaluator, parent_context=None)
jedi.evaluate.compiled.mixed.ContextSet(self, *args)
jedi.evaluate.compiled.mixed.ContextSet.from_iterable(iterable)
jedi.evaluate.compiled.mixed.ContextSet.from_set(set_)
jedi.evaluate.compiled.mixed.ContextSet.from_sets(sets)
jedi.evaluate.compiled.mixed.MixedName(self, evaluator, parent_context, name)
jedi.evaluate.compiled.mixed.MixedObject(self, evaluator, parent_context, compiled_object, tree_context)
jedi.evaluate.compiled.mixed.MixedObjectFilter(self, evaluator, mixed_object, is_instance=False)
jedi.evaluate.compiled.mixed.ModuleContext(self, evaluator, module_node, path, code_lines)
jedi.evaluate.compiled.mixed._create(evaluator, obj, parent_context=None)
jedi.evaluate.compiled.mixed._find_syntax_node_name(evaluator, access_handle)
jedi.evaluate.compiled.mixed._get_object_to_check(python_object)
jedi.evaluate.compiled.mixed._load_module(obj, *args, **kwargs)
jedi.evaluate.compiled.mixed.compiled_objects_cache(attribute_name)
jedi.evaluate.compiled.mixed.create_cached_compiled_object(evaluator, obj, parent_context=None, faked=None)
jedi.evaluate.compiled.mixed.evaluator_function_cache(default=<object object at 0x000000000520FC20>)
jedi.evaluate.compiled.mixed.get_cached_code_lines(grammar, path)
jedi.evaluate.compiled.mixed.getattr_static(obj, attr, default=<object object at 0x000000000520FC30>)
jedi.evaluate.compiled.mixed.underscore_memoization(func)
jedi.evaluate.compiled.subprocess.AccessHandle(self, subprocess, access, id_)
jedi.evaluate.compiled.subprocess.AccessPath(self, accesses)
jedi.evaluate.compiled.subprocess.DirectObjectAccess(self, evaluator, obj)
jedi.evaluate.compiled.subprocess.EvaluatorSameProcess(self, evaluator)
jedi.evaluate.compiled.subprocess.EvaluatorSubprocess(self, evaluator, compiled_subprocess)
jedi.evaluate.compiled.subprocess.GeneralizedPopen(self, *args, **kwargs)
jedi.evaluate.compiled.subprocess.InternalError(self, /, *args, **kwargs)
jedi.evaluate.compiled.subprocess.Listener(self)
jedi.evaluate.compiled.subprocess.SignatureParam(self, /, *args, **kwargs)
jedi.evaluate.compiled.subprocess.SignatureParam._make(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>)
jedi.evaluate.compiled.subprocess._CompiledSubprocess(self, executable)
jedi.evaluate.compiled.subprocess._EvaluatorProcess(self, evaluator)
jedi.evaluate.compiled.subprocess._get_function(name)
jedi.evaluate.compiled.subprocess.force_unicode(obj)
jedi.evaluate.compiled.subprocess.functions._get_init_path(directory_path)
jedi.evaluate.compiled.subprocess.functions._test_print(evaluator, stderr=None, stdout=None)
jedi.evaluate.compiled.subprocess.functions._test_raise_error(evaluator, exception_type)
jedi.evaluate.compiled.subprocess.functions.cast_path(obj)
jedi.evaluate.compiled.subprocess.functions.create_simple_object(evaluator, obj)
jedi.evaluate.compiled.subprocess.functions.find_module(string, path=None, full_name=None)
jedi.evaluate.compiled.subprocess.functions.force_unicode(obj)
jedi.evaluate.compiled.subprocess.functions.get_builtin_module_names(evaluator)
jedi.evaluate.compiled.subprocess.functions.get_compiled_method_return(evaluator, id, attribute, *args, **kwargs)
jedi.evaluate.compiled.subprocess.functions.get_module_info(evaluator, sys_path=None, full_name=None, **kwargs)
jedi.evaluate.compiled.subprocess.functions.get_special_object(evaluator, identifier)
jedi.evaluate.compiled.subprocess.functions.iter_modules(paths, prefix='')
jedi.evaluate.compiled.subprocess.functions.list_module_names(evaluator, search_path)
jedi.evaluate.compiled.subprocess.functions.load_module(evaluator, **kwargs)
jedi.evaluate.compiled.subprocess.functions.safe_literal_eval(evaluator, value)
jedi.evaluate.compiled.subprocess.get_subprocess(executable)
jedi.evaluate.compiled.subprocess.memoize_method(method)
jedi.evaluate.compiled.subprocess.partial(self, /, *args, **kwargs)
jedi.evaluate.compiled.subprocess.pickle_dump(data, file)
jedi.evaluate.compiled.subprocess.pickle_load(file)
jedi.evaluate.compiled.unicode(self, /, *args, **kwargs)
jedi.evaluate.context.AbstractInstanceContext(self, evaluator, parent_context, class_context, var_args)
jedi.evaluate.context.AnonymousInstance(self, evaluator, parent_context, class_context)
jedi.evaluate.context.BoundMethod(self, evaluator, instance, class_context, *args, **kwargs)
jedi.evaluate.context.ClassContext(self, evaluator, parent_context, classdef)
jedi.evaluate.context.CompiledInstance(self, *args, **kwargs)
jedi.evaluate.context.FunctionContext(self, evaluator, parent_context, funcdef)
jedi.evaluate.context.FunctionExecutionContext(self, evaluator, parent_context, function_context, var_args)
jedi.evaluate.context.ModuleContext(self, evaluator, module_node, path, code_lines)
jedi.evaluate.context.TreeInstance(self, evaluator, parent_context, class_context, var_args)
jedi.evaluate.context.asynchronous.AsyncBase(self, evaluator, func_execution_context)
jedi.evaluate.context.asynchronous.AsyncGenerator(self, evaluator, func_execution_context)
jedi.evaluate.context.asynchronous.BuiltinOverwrite(self, evaluator)
jedi.evaluate.context.asynchronous.ContextSet(self, *args)
jedi.evaluate.context.asynchronous.ContextSet.from_iterable(iterable)
jedi.evaluate.context.asynchronous.ContextSet.from_set(set_)
jedi.evaluate.context.asynchronous.ContextSet.from_sets(sets)
jedi.evaluate.context.asynchronous.Coroutine(self, evaluator, func_execution_context)
jedi.evaluate.context.asynchronous.CoroutineWrapper(self, evaluator, func_execution_context)
jedi.evaluate.context.asynchronous.publish_method(method_name, python_version_match=None)
jedi.evaluate.context.function.AbstractNameDefinition(self, /, *args, **kwargs)
jedi.evaluate.context.function.AnonymousArguments(self, /, *args, **kwargs)
jedi.evaluate.context.function.CachedMetaClass(self, /, *args, **kwargs)
jedi.evaluate.context.function.ContextName(self, context, tree_name)
jedi.evaluate.context.function.ContextSet(self, *args)
jedi.evaluate.context.function.ContextSet.from_iterable(iterable)
jedi.evaluate.context.function.ContextSet.from_set(set_)
jedi.evaluate.context.function.ContextSet.from_sets(sets)
jedi.evaluate.context.function.ContextualizedNode(self, context, node)
jedi.evaluate.context.function.FunctionContext(self, evaluator, parent_context, funcdef)
jedi.evaluate.context.function.FunctionExecutionContext(self, evaluator, parent_context, function_context, var_args)
jedi.evaluate.context.function.FunctionExecutionFilter(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
jedi.evaluate.context.function.LambdaName(self, lambda_context)
jedi.evaluate.context.function.LazyKnownContext(self, data)
jedi.evaluate.context.function.LazyKnownContexts(self, data)
jedi.evaluate.context.function.LazyTreeContext(self, context, node)
jedi.evaluate.context.function.ParamName(self, parent_context, tree_name)
jedi.evaluate.context.function.ParserTreeFilter(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
jedi.evaluate.context.function.TreeContext(self, evaluator, parent_context=None)
jedi.evaluate.context.function.evaluator_method_cache(default=<object object at 0x000000000520FC20>)
jedi.evaluate.context.function.get_yield_exprs(obj, *args, **kwargs)
jedi.evaluate.context.function.use_metaclass(meta, *bases)
jedi.evaluate.context.instance.AbstractArguments(self, /, *args, **kwargs)
jedi.evaluate.context.instance.AbstractInstanceContext(self, evaluator, parent_context, class_context, var_args)
jedi.evaluate.context.instance.AnonymousArguments(self, /, *args, **kwargs)
jedi.evaluate.context.instance.AnonymousInstance(self, evaluator, parent_context, class_context)
jedi.evaluate.context.instance.AnonymousInstanceFunctionExecution(self, instance, parent_context, function_context, var_args)
jedi.evaluate.context.instance.BaseInstanceFunctionExecution(self, instance, *args, **kwargs)
jedi.evaluate.context.instance.BoundMethod(self, evaluator, instance, class_context, *args, **kwargs)
jedi.evaluate.context.instance.ClassContext(self, evaluator, parent_context, classdef)
jedi.evaluate.context.instance.CompiledBoundMethod(self, func)
jedi.evaluate.context.instance.CompiledInstance(self, *args, **kwargs)
jedi.evaluate.context.instance.CompiledInstanceClassFilter(self, evaluator, instance, compiled_object)
jedi.evaluate.context.instance.CompiledInstanceName(self, evaluator, instance, parent_context, name)
jedi.evaluate.context.instance.Context(self, evaluator, parent_context=None)
jedi.evaluate.context.instance.ContextSet(self, *args)
jedi.evaluate.context.instance.ContextSet.from_iterable(iterable)
jedi.evaluate.context.instance.ContextSet.from_set(set_)
jedi.evaluate.context.instance.ContextSet.from_sets(sets)
jedi.evaluate.context.instance.FunctionContext(self, evaluator, parent_context, funcdef)
jedi.evaluate.context.instance.FunctionExecutionContext(self, evaluator, parent_context, function_context, var_args)
jedi.evaluate.context.instance.InstanceClassFilter(self, evaluator, context, class_context, origin_scope)
jedi.evaluate.context.instance.InstanceFunctionExecution(self, instance, parent_context, function_context, var_args)
jedi.evaluate.context.instance.InstanceNameDefinition(self, parent_context, tree_name)
jedi.evaluate.context.instance.InstanceVarArgs(self, execution_context, var_args)
jedi.evaluate.context.instance.LazyInstanceClassName(self, instance, class_context, tree_name)
jedi.evaluate.context.instance.LazyKnownContext(self, data)
jedi.evaluate.context.instance.LazyKnownContexts(self, data)
jedi.evaluate.context.instance.SelfAttributeFilter(self, evaluator, context, class_context, origin_scope)
jedi.evaluate.context.instance.SelfName(self, instance, class_context, tree_name)
jedi.evaluate.context.instance.TreeInstance(self, evaluator, parent_context, class_context, var_args)
jedi.evaluate.context.instance.abstractproperty(self, /, *args, **kwargs)
jedi.evaluate.context.instance.apply_py__get__(context, base_context)
jedi.evaluate.context.instance.evaluator_method_cache(default=<object object at 0x000000000520FC20>)
jedi.evaluate.context.instance.get_parent_scope(node, include_flows=False)
jedi.evaluate.context.instance.iterator_to_context_set(func)
jedi.evaluate.context.instance.memoize_method(method)
jedi.evaluate.context.iterable.BuiltinOverwrite(self, evaluator)
jedi.evaluate.context.iterable.CompForContext(self, evaluator, parent_context, comp_for)
jedi.evaluate.context.iterable.CompForContext.from_comp_for(parent_context, comp_for)
jedi.evaluate.context.iterable.ComprehensionMixin(self, evaluator, defining_context, atom)
jedi.evaluate.context.iterable.Context(self, evaluator, parent_context=None)
jedi.evaluate.context.iterable.ContextSet(self, *args)
jedi.evaluate.context.iterable.ContextSet.from_iterable(iterable)
jedi.evaluate.context.iterable.ContextSet.from_set(set_)
jedi.evaluate.context.iterable.ContextSet.from_sets(sets)
jedi.evaluate.context.iterable.ContextualizedNode(self, context, node)
jedi.evaluate.context.iterable.DictComprehension(self, evaluator, defining_context, atom)
jedi.evaluate.context.iterable.DictLiteralContext(self, evaluator, defining_context, atom)
jedi.evaluate.context.iterable.FakeDict(self, evaluator, dct)
jedi.evaluate.context.iterable.FakeSequence(self, evaluator, array_type, lazy_context_list)
jedi.evaluate.context.iterable.Generator(self, evaluator, func_execution_context)
jedi.evaluate.context.iterable.GeneratorBase(self, evaluator)
jedi.evaluate.context.iterable.GeneratorComprehension(self, evaluator, defining_context, atom)
jedi.evaluate.context.iterable.IterableMixin(self, /, *args, **kwargs)
jedi.evaluate.context.iterable.LazyKnownContext(self, data)
jedi.evaluate.context.iterable.LazyKnownContexts(self, data)
jedi.evaluate.context.iterable.LazyTreeContext(self, context, node)
jedi.evaluate.context.iterable.ListComprehension(self, evaluator, defining_context, atom)
jedi.evaluate.context.iterable.MergedArray(self, evaluator, arrays)
jedi.evaluate.context.iterable.ParserTreeFilter(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
jedi.evaluate.context.iterable.Sequence(self, evaluator)
jedi.evaluate.context.iterable.SequenceLiteralContext(self, evaluator, defining_context, atom)
jedi.evaluate.context.iterable.SetComprehension(self, evaluator, defining_context, atom)
jedi.evaluate.context.iterable.Slice(self, context, start, stop, step)
jedi.evaluate.context.iterable.TreeContext(self, evaluator, parent_context=None)
jedi.evaluate.context.iterable._ArrayInstance(self, instance)
jedi.evaluate.context.iterable._FakeArray(self, evaluator, container, type)
jedi.evaluate.context.iterable._check_array_additions(obj, *args, **kwargs)
jedi.evaluate.context.iterable.check_array_additions(context, sequence)
jedi.evaluate.context.iterable.comprehension_from_atom(evaluator, context, atom)
jedi.evaluate.context.iterable.evaluate_call_of_leaf(context, leaf, cut_own_trailer=False)
jedi.evaluate.context.iterable.evaluator_method_cache(default=<object object at 0x000000000520FC20>)
jedi.evaluate.context.iterable.force_unicode(obj)
jedi.evaluate.context.iterable.get_comp_fors(comp_for)
jedi.evaluate.context.iterable.get_dynamic_array_instance(instance)
jedi.evaluate.context.iterable.get_int_or_none(context)
jedi.evaluate.context.iterable.is_string(context)
jedi.evaluate.context.iterable.memoize_method(method)
jedi.evaluate.context.iterable.publish_method(method_name, python_version_match=None)
jedi.evaluate.context.iterable.safe_property(func)
jedi.evaluate.context.iterable.to_list(func)
jedi.evaluate.context.iterable.unpack_tuple_to_dict(context, types, exprlist)
jedi.evaluate.context.klass.AnonymousInstanceParamName(self, parent_context, tree_name)
jedi.evaluate.context.klass.CachedMetaClass(self, /, *args, **kwargs)
jedi.evaluate.context.klass.ClassContext(self, evaluator, parent_context, classdef)
jedi.evaluate.context.klass.ClassFilter(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
jedi.evaluate.context.klass.ClassName(self, parent_context, tree_name, name_context)
jedi.evaluate.context.klass.ContextName(self, context, tree_name)
jedi.evaluate.context.klass.ContextSet(self, *args)
jedi.evaluate.context.klass.ContextSet.from_iterable(iterable)
jedi.evaluate.context.klass.ContextSet.from_set(set_)
jedi.evaluate.context.klass.ContextSet.from_sets(sets)
jedi.evaluate.context.klass.LazyKnownContext(self, data)
jedi.evaluate.context.klass.ParserTreeFilter(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
jedi.evaluate.context.klass.TreeContext(self, evaluator, parent_context=None)
jedi.evaluate.context.klass.TreeNameDefinition(self, parent_context, tree_name)
jedi.evaluate.context.klass.apply_py__get__(context, base_context)
jedi.evaluate.context.klass.evaluator_method_cache(default=<object object at 0x000000000520FC20>)
jedi.evaluate.context.klass.iterator_to_context_set(func)
jedi.evaluate.context.klass.use_metaclass(meta, *bases)
jedi.evaluate.context.module.AbstractNameDefinition(self, /, *args, **kwargs)
jedi.evaluate.context.module.ContextNameMixin(self, /, *args, **kwargs)
jedi.evaluate.context.module.DictFilter(self, dct)
jedi.evaluate.context.module.GlobalNameFilter(self, context, parser_scope)
jedi.evaluate.context.module.MergedFilter(self, *filters)
jedi.evaluate.context.module.ModuleContext(self, evaluator, module_node, path, code_lines)
jedi.evaluate.context.module.ModuleName(self, context, name)
jedi.evaluate.context.module.ParserTreeFilter(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
jedi.evaluate.context.module.SubModuleName(self, parent_context, string_name)
jedi.evaluate.context.module.TreeContext(self, evaluator, parent_context=None)
jedi.evaluate.context.module._ModuleAttributeName(self, parent_module, string_name)
jedi.evaluate.context.module.evaluator_method_cache(default=<object object at 0x000000000520FC20>)
jedi.evaluate.context.module.infer_import(obj, *args, **kwargs)
jedi.evaluate.context.module.iter_modules(paths, prefix='')
jedi.evaluate.context.module.python_bytes_to_unicode(source, encoding='utf-8', errors='strict')
jedi.evaluate.docstrings.ContextSet(self, *args)
jedi.evaluate.docstrings.ContextSet.from_iterable(iterable)
jedi.evaluate.docstrings.ContextSet.from_set(set_)
jedi.evaluate.docstrings.ContextSet.from_sets(sets)
jedi.evaluate.docstrings.LazyKnownContexts(self, data)
jedi.evaluate.docstrings.ParserSyntaxError(self, message, error_leaf)
jedi.evaluate.docstrings._evaluate_for_statement_string(module_context, string)
jedi.evaluate.docstrings._execute_array_values(evaluator, array)
jedi.evaluate.docstrings._execute_types_in_stmt(module_context, stmt)
jedi.evaluate.docstrings._expand_typestr(type_str)
jedi.evaluate.docstrings._search_param_in_docstr(docstr, param_str)
jedi.evaluate.docstrings._search_param_in_numpydocstr(docstr, param_str)
jedi.evaluate.docstrings._search_return_in_numpydocstr(docstr)
jedi.evaluate.docstrings._strip_rst_role(type_str)
jedi.evaluate.docstrings.dedent(text)
jedi.evaluate.docstrings.evaluator_method_cache(default=<object object at 0x000000000520FC20>)
jedi.evaluate.docstrings.indent_block(text, indention='    ')
jedi.evaluate.docstrings.infer_param(obj, *args, **kwargs)
jedi.evaluate.docstrings.infer_return_types(obj, *args, **kwargs)
jedi.evaluate.docstrings.iterator_to_context_set(func)
jedi.evaluate.docstrings.parse(code=None, **kwargs)
jedi.evaluate.docstrings.u(string, errors='strict')
jedi.evaluate.eval_expr_stmt(context, *args, **kwargs)
jedi.evaluate.eval_trailer(context, base_contexts, trailer)
jedi.evaluate.evaluator_function_cache(default=<object object at 0x000000000520FC20>)
jedi.evaluate.filters.AbstractFilter(self, /, *args, **kwargs)
jedi.evaluate.filters.AbstractNameDefinition(self, /, *args, **kwargs)
jedi.evaluate.filters.AbstractObjectOverwrite(self, /, *args, **kwargs)
jedi.evaluate.filters.AbstractTreeName(self, parent_context, tree_name)
jedi.evaluate.filters.AbstractUsedNamesFilter(self, context, parser_scope)
jedi.evaluate.filters.AnonymousInstanceFunctionExecutionFilter(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
jedi.evaluate.filters.AnonymousInstanceParamName(self, parent_context, tree_name)
jedi.evaluate.filters.BuiltinOverwrite(self, evaluator)
jedi.evaluate.filters.Context(self, evaluator, parent_context=None)
jedi.evaluate.filters.ContextName(self, context, tree_name)
jedi.evaluate.filters.ContextNameMixin(self, /, *args, **kwargs)
jedi.evaluate.filters.ContextSet(self, *args)
jedi.evaluate.filters.ContextSet.from_iterable(iterable)
jedi.evaluate.filters.ContextSet.from_set(set_)
jedi.evaluate.filters.ContextSet.from_sets(sets)
jedi.evaluate.filters.DictFilter(self, dct)
jedi.evaluate.filters.FunctionExecutionFilter(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
jedi.evaluate.filters.GlobalNameFilter(self, context, parser_scope)
jedi.evaluate.filters.MergedFilter(self, *filters)
jedi.evaluate.filters.ParamName(self, parent_context, tree_name)
jedi.evaluate.filters.Parameter(self, name, kind, *, default, annotation)
jedi.evaluate.filters.ParserTreeFilter(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
jedi.evaluate.filters.SpecialMethodFilter(self, context, dct, builtin_context)
jedi.evaluate.filters.TreeNameDefinition(self, parent_context, tree_name)
jedi.evaluate.filters._BuiltinMappedMethod(self, builtin_context, method, builtin_func)
jedi.evaluate.filters._OverwriteMeta(cls, name, bases, dct)
jedi.evaluate.filters.abstractmethod(funcobj)
jedi.evaluate.filters.get_global_filters(evaluator, context, until_position, origin_scope)
jedi.evaluate.filters.get_parent_scope(node, include_flows=False)
jedi.evaluate.filters.memoize_method(method)
jedi.evaluate.filters.publish_method(method_name, python_version_match=None)
jedi.evaluate.filters.search_ancestor(node, *node_types)
jedi.evaluate.filters.to_list(func)
jedi.evaluate.filters.use_metaclass(meta, *bases)
jedi.evaluate.finder.AbstractInstanceContext(self, evaluator, parent_context, class_context, var_args)
jedi.evaluate.finder.ContextSet(self, *args)
jedi.evaluate.finder.ContextSet.from_iterable(iterable)
jedi.evaluate.finder.ContextSet.from_set(set_)
jedi.evaluate.finder.ContextSet.from_sets(sets)
jedi.evaluate.finder.NameFinder(self, evaluator, context, name_context, name_or_str, position=None, analysis_errors=True)
jedi.evaluate.finder.TreeArguments(self, evaluator, context, argument_node, trailer=None)
jedi.evaluate.finder.TreeNameDefinition(self, parent_context, tree_name)
jedi.evaluate.finder._check_flow_information(context, flow, search_name, pos)
jedi.evaluate.finder._check_isinstance_type(context, element, search_name)
jedi.evaluate.finder.get_global_filters(evaluator, context, until_position, origin_scope)
jedi.evaluate.finder.get_parent_scope(node, include_flows=False)
jedi.evaluate.finder.is_scope(node)
jedi.evaluate.finder.search_ancestor(node, *node_types)
jedi.evaluate.flow_analysis.Status(self, value, name)
jedi.evaluate.flow_analysis._break_check(context, context_scope, flow_scope, node)
jedi.evaluate.flow_analysis._check_if(context, node)
jedi.evaluate.flow_analysis._get_flow_scopes(node)
jedi.evaluate.flow_analysis.get_flow_branch_keyword(flow_node, node)
jedi.evaluate.flow_analysis.get_parent_scope(node, include_flows=False)
jedi.evaluate.flow_analysis.is_scope(node)
jedi.evaluate.flow_analysis.reachability_check(context, context_scope, node, origin_scope=None)
jedi.evaluate.helpers.CompiledObject(self, evaluator, access_handle, parent_context=None, faked_class=None)
jedi.evaluate.helpers._get_safe_value_or_none(context, accept)
jedi.evaluate.helpers.call_of_leaf(leaf)
jedi.evaluate.helpers.chain(self, /, *args, **kwargs)
jedi.evaluate.helpers.contextmanager(func)
jedi.evaluate.helpers.deep_ast_copy(obj)
jedi.evaluate.helpers.evaluate_call_of_leaf(context, leaf, cut_own_trailer=False)
jedi.evaluate.helpers.get_int_or_none(context)
jedi.evaluate.helpers.get_module_names(module, all_scopes)
jedi.evaluate.helpers.get_names_of_node(node)
jedi.evaluate.helpers.get_parent_scope(node, include_flows=False)
jedi.evaluate.helpers.is_compiled(context)
jedi.evaluate.helpers.is_literal(context)
jedi.evaluate.helpers.is_number(context)
jedi.evaluate.helpers.is_stdlib_path(path)
jedi.evaluate.helpers.is_string(context)
jedi.evaluate.helpers.unicode(self, /, *args, **kwargs)
jedi.evaluate.imports.AbstractNameDefinition(self, /, *args, **kwargs)
jedi.evaluate.imports.ContextSet(self, *args)
jedi.evaluate.imports.ContextSet.from_iterable(iterable)
jedi.evaluate.imports.ContextSet.from_set(set_)
jedi.evaluate.imports.ContextSet.from_sets(sets)
jedi.evaluate.imports.ImplicitNSInfo(self, name, paths)
jedi.evaluate.imports.ImportName(self, parent_context, string_name)
jedi.evaluate.imports.Importer(self, evaluator, import_path, module_context, level=0)
jedi.evaluate.imports.ModuleCache(self)
jedi.evaluate.imports.NestedImportModule(self, module, nested_import)
jedi.evaluate.imports.SubModuleName(self, parent_context, string_name)
jedi.evaluate.imports._add_error(context, name, message=None)
jedi.evaluate.imports._load_module(evaluator, path=None, code=None, sys_path=None, module_name=None, safe_module_name=False)
jedi.evaluate.imports.add_module_to_cache(evaluator, module_name, module, safe=False)
jedi.evaluate.imports.dotted_from_fs_path(fs_path, sys_path)
jedi.evaluate.imports.evaluator_method_cache(default=<object object at 0x000000000520FC20>)
jedi.evaluate.imports.force_unicode(obj)
jedi.evaluate.imports.get_cached_code_lines(grammar, path)
jedi.evaluate.imports.get_modules_containing_name(evaluator, modules, name)
jedi.evaluate.imports.infer_import(obj, *args, **kwargs)
jedi.evaluate.imports.python_bytes_to_unicode(source, encoding='utf-8', errors='strict')
jedi.evaluate.imports.search_ancestor(node, *node_types)
jedi.evaluate.imports.unicode(self, /, *args, **kwargs)
jedi.evaluate.imports.unite(iterable)
jedi.evaluate.iterate_contexts(contexts, contextualized_node=None, is_async=False)
jedi.evaluate.lazy_context.AbstractLazyContext(self, data)
jedi.evaluate.lazy_context.ContextSet(self, *args)
jedi.evaluate.lazy_context.ContextSet.from_iterable(iterable)
jedi.evaluate.lazy_context.ContextSet.from_set(set_)
jedi.evaluate.lazy_context.ContextSet.from_sets(sets)
jedi.evaluate.lazy_context.LazyKnownContext(self, data)
jedi.evaluate.lazy_context.LazyKnownContexts(self, data)
jedi.evaluate.lazy_context.LazyTreeContext(self, context, node)
jedi.evaluate.lazy_context.LazyUnknownContext(self)
jedi.evaluate.lazy_context.MergedLazyContexts(self, data)
jedi.evaluate.lazy_context.get_merged_lazy_context(lazy_contexts)
jedi.evaluate.param.ExecutedParam(self, execution_context, param_node, lazy_context)
jedi.evaluate.param.LazyKnownContext(self, data)
jedi.evaluate.param.LazyTreeContext(self, context, node)
jedi.evaluate.param.LazyUnknownContext(self)
jedi.evaluate.param.PushBackIterator(self, iterator)
jedi.evaluate.param._add_argument_issue(parent_context, error_name, lazy_context, message)
jedi.evaluate.param._create_default_param(execution_context, param)
jedi.evaluate.param._error_argument_count(funcdef, actual_count)
jedi.evaluate.param.create_default_params(execution_context, funcdef)
jedi.evaluate.param.defaultdict(self, /, *args, **kwargs)
jedi.evaluate.param.get_params(execution_context, var_args)
jedi.evaluate.parser_cache.evaluator_function_cache(default=<object object at 0x000000000520FC20>)
jedi.evaluate.parser_cache.get_yield_exprs(obj, *args, **kwargs)
jedi.evaluate.pep0484.ContextSet(self, *args)
jedi.evaluate.pep0484.ContextSet.from_iterable(iterable)
jedi.evaluate.pep0484.ContextSet.from_set(set_)
jedi.evaluate.pep0484.ContextSet.from_sets(sets)
jedi.evaluate.pep0484.LazyTreeContext(self, context, node)
jedi.evaluate.pep0484.ModuleContext(self, evaluator, module_node, path, code_lines)
jedi.evaluate.pep0484.ParserSyntaxError(self, message, error_leaf)
jedi.evaluate.pep0484._evaluate_annotation_string(context, string, index=None)
jedi.evaluate.pep0484._evaluate_for_annotation(context, annotation, index=None)
jedi.evaluate.pep0484._find_type_from_comment_hint(context, node, varlist, name)
jedi.evaluate.pep0484._fix_forward_reference(context, node)
jedi.evaluate.pep0484._get_forward_reference_node(context, string)
jedi.evaluate.pep0484._get_typing_replacement_module(grammar)
jedi.evaluate.pep0484._split_comment_param_declaration(decl_text)
jedi.evaluate.pep0484.evaluator_method_cache(default=<object object at 0x000000000520FC20>)
jedi.evaluate.pep0484.find_type_from_comment_hint_assign(context, node, name)
jedi.evaluate.pep0484.find_type_from_comment_hint_for(context, node, name)
jedi.evaluate.pep0484.find_type_from_comment_hint_with(context, node, name)
jedi.evaluate.pep0484.force_unicode(obj)
jedi.evaluate.pep0484.infer_param(obj, *args, **kwargs)
jedi.evaluate.pep0484.infer_return_types(obj, *args, **kwargs)
jedi.evaluate.pep0484.is_string(context)
jedi.evaluate.pep0484.parse(code=None, **kwargs)
jedi.evaluate.pep0484.py__annotations__(funcdef)
jedi.evaluate.pep0484.py__getitem__(context, typ, node)
jedi.evaluate.pep0484.split_lines(string, keepends=False)
jedi.evaluate.pep0484.unicode(self, /, *args, **kwargs)
jedi.evaluate.python_bytes_to_unicode(source, encoding='utf-8', errors='strict')
jedi.evaluate.recursion.ExecutionRecursionDetector(self, evaluator)
jedi.evaluate.recursion.RecursionDetector(self)
jedi.evaluate.recursion.contextmanager(func)
jedi.evaluate.recursion.execution_recursion_decorator(default=ContextSet())
jedi.evaluate.syntax_tree.ClassContext(self, evaluator, parent_context, classdef)
jedi.evaluate.syntax_tree.CompiledInstance(self, *args, **kwargs)
jedi.evaluate.syntax_tree.ContextSet(self, *args)
jedi.evaluate.syntax_tree.ContextSet.from_iterable(iterable)
jedi.evaluate.syntax_tree.ContextSet.from_set(set_)
jedi.evaluate.syntax_tree.ContextSet.from_sets(sets)
jedi.evaluate.syntax_tree.ContextualizedName(self, context, node)
jedi.evaluate.syntax_tree.ContextualizedNode(self, context, node)
jedi.evaluate.syntax_tree.FunctionContext(self, evaluator, parent_context, funcdef)
jedi.evaluate.syntax_tree.NameFinder(self, evaluator, context, name_context, name_or_str, position=None, analysis_errors=True)
jedi.evaluate.syntax_tree.TreeInstance(self, evaluator, parent_context, class_context, var_args)
jedi.evaluate.syntax_tree._apply_decorators(context, node)
jedi.evaluate.syntax_tree._bool_to_context(evaluator, bool_)
jedi.evaluate.syntax_tree._eval_comparison(evaluator, context, left_contexts, operator, right_contexts)
jedi.evaluate.syntax_tree._eval_comparison_part(evaluator, context, left, operator, right)
jedi.evaluate.syntax_tree._evaluate_for_annotation(context, annotation, index=None)
jedi.evaluate.syntax_tree._is_list(context)
jedi.evaluate.syntax_tree._is_tuple(context)
jedi.evaluate.syntax_tree._limit_context_infers(func)
jedi.evaluate.syntax_tree._literals_to_types(evaluator, result)
jedi.evaluate.syntax_tree._py__stop_iteration_returns(generators)
jedi.evaluate.syntax_tree._remove_statements(evaluator, context, stmt, name)
jedi.evaluate.syntax_tree.check_tuple_assignments(evaluator, contextualized_name, context_set)
jedi.evaluate.syntax_tree.eval_atom(context, atom)
jedi.evaluate.syntax_tree.eval_expr_stmt(context, *args, **kwargs)
jedi.evaluate.syntax_tree.eval_or_test(context, or_test)
jedi.evaluate.syntax_tree.eval_subscript_list(evaluator, context, index)
jedi.evaluate.syntax_tree.eval_trailer(context, base_contexts, trailer)
jedi.evaluate.syntax_tree.force_unicode(obj)
jedi.evaluate.syntax_tree.is_compiled(context)
jedi.evaluate.syntax_tree.is_literal(context)
jedi.evaluate.syntax_tree.is_number(context)
jedi.evaluate.syntax_tree.is_string(context)
jedi.evaluate.syntax_tree.iterate_contexts(contexts, contextualized_node=None, is_async=False)
jedi.evaluate.syntax_tree.iterator_to_context_set(func)
jedi.evaluate.syntax_tree.tree_name_to_contexts(evaluator, context, tree_name)
jedi.evaluate.syntax_tree.unicode(self, /, *args, **kwargs)
jedi.evaluate.sys_path.ContextualizedNode(self, context, node)
jedi.evaluate.sys_path._abs_path(module_context, path)
jedi.evaluate.sys_path._get_buildout_script_paths(search_path)
jedi.evaluate.sys_path._get_parent_dir_with_file(path, filename)
jedi.evaluate.sys_path._get_paths_from_buildout_script(evaluator, buildout_script_path)
jedi.evaluate.sys_path._paths_from_assignment(module_context, expr_stmt)
jedi.evaluate.sys_path._paths_from_list_modifications(module_context, trailer1, trailer2)
jedi.evaluate.sys_path.check_sys_path_modifications(obj, *args, **kwargs)
jedi.evaluate.sys_path.discover_buildout_paths(evaluator, script_path)
jedi.evaluate.sys_path.dotted_path_in_sys_path(sys_path, module_path)
jedi.evaluate.sys_path.evaluator_method_cache(default=<object object at 0x000000000520FC20>)
jedi.evaluate.sys_path.force_unicode(obj)
jedi.evaluate.sys_path.get_cached_code_lines(grammar, path)
jedi.evaluate.sys_path.is_string(context)
jedi.evaluate.sys_path.traverse_parents(path, include_current=False)
jedi.evaluate.sys_path.unicode(self, /, *args, **kwargs)
jedi.evaluate.unite(iterable)
jedi.evaluate.usages.ModuleContext(self, evaluator, module_node, path, code_lines)
jedi.evaluate.usages.TreeNameDefinition(self, parent_context, tree_name)
jedi.evaluate.usages._dictionarize(names)
jedi.evaluate.usages._find_names(module_context, tree_name)
jedi.evaluate.usages._resolve_names(definition_names, avoid_names=())
jedi.evaluate.usages.usages(module_context, tree_name)
jedi.evaluate.utils.PushBackIterator(self, iterator)
jedi.evaluate.utils.UncaughtAttributeError(self, /, *args, **kwargs)
jedi.evaluate.utils.dotted_from_fs_path(fs_path, sys_path)
jedi.evaluate.utils.indent_block(text, indention='    ')
jedi.evaluate.utils.reraise(exception, traceback)
jedi.evaluate.utils.reraise_uncaught(func)
jedi.evaluate.utils.safe_property(func)
jedi.evaluate.utils.to_list(func)
jedi.evaluate.utils.unite(iterable)
jedi.parser_utils.clean_scope_docstring(scope_node)
jedi.parser_utils.cleandoc(doc)
jedi.parser_utils.for_stmt_defines_one_name(for_stmt)
jedi.parser_utils.force_unicode(obj)
jedi.parser_utils.get_cached_code_lines(grammar, path)
jedi.parser_utils.get_call_signature(funcdef, width=72, call_string=None)
jedi.parser_utils.get_comp_fors(comp_for)
jedi.parser_utils.get_doc_with_call_signature(scope_node)
jedi.parser_utils.get_executable_nodes(node, last_added=False)
jedi.parser_utils.get_flow_branch_keyword(flow_node, node)
jedi.parser_utils.get_following_comment_same_line(node)
jedi.parser_utils.get_parent_scope(node, include_flows=False)
jedi.parser_utils.get_statement_of_position(node, pos)
jedi.parser_utils.is_scope(node)
jedi.parser_utils.literal_eval(string)
jedi.parser_utils.move(node, line_offset)
jedi.parser_utils.safe_literal_eval(value)
