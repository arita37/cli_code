module_name,module_version,full_name,prefix,obj_name,obj_doc,object_type,arg_full,0,1,2,3
jedi,0.12.0,jedi._compatibility.DummyFile,_compatibility,DummyFile,"Python Library Documentation: class DummyFile in module jedi._compatibility

class DummyFile(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, loader, string)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  close(self)
 |  
 |  read(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, loader, string)',)",self,,,arg_info
jedi,0.12.0,jedi._compatibility.DummyFile,_compatibility,DummyFile,"Python Library Documentation: class DummyFile in module jedi._compatibility

class DummyFile(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, loader, string)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  close(self)
 |  
 |  read(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, loader, string)',)",string,,,arg_info
jedi,0.12.0,jedi._compatibility.DummyFile,_compatibility,DummyFile,"Python Library Documentation: class DummyFile in module jedi._compatibility

class DummyFile(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, loader, string)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  close(self)
 |  
 |  read(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, loader, string)',)",loader,,,arg_info
jedi,0.12.0,jedi._compatibility.FileNotFoundError,_compatibility,FileNotFoundError,"Python Library Documentation: class FileNotFoundError in module builtins

class FileNotFoundError(OSError)
 |  File not found.
 |  
 |  Method resolution order:
 |      FileNotFoundError
 |      OSError
 |      Exception
 |      BaseException
 |      object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from OSError:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from OSError:
 |  
 |  characters_written
 |  
 |  errno
 |      POSIX exception code
 |  
 |  filename
 |      exception filename
 |  
 |  filename2
 |      second exception filename
 |  
 |  strerror
 |      exception strerror
 |  
 |  winerror
 |      Win32 exception code
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi._compatibility.GeneralizedPopen,_compatibility,GeneralizedPopen,"Python Library Documentation: class GeneralizedPopen in module jedi._compatibility

class GeneralizedPopen(subprocess.Popen)
 |  Execute a child program in a new process.
 |  
 |  For a complete description of the arguments see the Python documentation.
 |  
 |  Arguments:
 |    args: A string, or a sequence of program arguments.
 |  
 |    bufsize: supplied as the buffering argument to the open() function when
 |        creating the stdin/stdout/stderr pipe file objects
 |  
 |    executable: A replacement program to execute.
 |  
 |    stdin, stdout and stderr: These specify the executed programs' standard
 |        input, standard output and standard error file handles, respectively.
 |  
 |    preexec_fn: (POSIX only) An object to be called in the child process
 |        just before the child is executed.
 |  
 |    close_fds: Controls closing or inheriting of file descriptors.
 |  
 |    shell: If true, the command will be executed through the shell.
 |  
 |    cwd: Sets the current directory before the child is executed.
 |  
 |    env: Defines the environment variables for the new process.
 |  
 |    universal_newlines: If true, use universal line endings for file
 |        objects stdin, stdout and stderr.
 |  
 |    startupinfo and creationflags (Windows only)
 |  
 |    restore_signals (POSIX only)
 |  
 |    start_new_session (POSIX only)
 |  
 |    pass_fds (POSIX only)
 |  
 |    encoding and errors: Text mode encoding and error handling to use for
 |        file objects stdin, stdout and stderr.
 |  
 |  Attributes:
 |      stdin, stdout, stderr, pid, returncode
 |  
 |  Method resolution order:
 |      GeneralizedPopen
 |      subprocess.Popen
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, *args, **kwargs)
 |      Create new Popen instance.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from subprocess.Popen:
 |  
 |  __del__(self, _maxsize=9223372036854775807, _warn=<built-in function warn>)
 |  
 |  __enter__(self)
 |  
 |  __exit__(self, type, value, traceback)
 |  
 |  communicate(self, input=None, timeout=None)
 |      Interact with process: Send data to stdin.  Read data from
 |      stdout and stderr, until end-of-file is reached.  Wait for
 |      process to terminate.
 |      
 |      The optional ""input"" argument should be data to be sent to the
 |      child process (if self.universal_newlines is True, this should
 |      be a string; if it is False, ""input"" should be bytes), or
 |      None, if no data should be sent to the child.
 |      
 |      communicate() returns a tuple (stdout, stderr).  These will be
 |      bytes or, if self.universal_newlines was True, a string.
 |  
 |  kill = terminate(self)
 |      Terminates the process.
 |  
 |  poll(self)
 |      Check if child process has terminated. Set and return returncode
 |      attribute.
 |  
 |  send_signal(self, sig)
 |      Send a signal to the process.
 |  
 |  terminate(self)
 |      Terminates the process.
 |  
 |  wait(self, timeout=None, endtime=None)
 |      Wait for child process to terminate.  Returns returncode
 |      attribute.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from subprocess.Popen:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi._compatibility.ImplicitNSInfo,_compatibility,ImplicitNSInfo,"Python Library Documentation: class ImplicitNSInfo in module jedi._compatibility

class ImplicitNSInfo(builtins.object)
 |  Stores information returned from an implicit namespace spec
 |  
 |  Methods defined here:
 |  
 |  __init__(self, name, paths)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, name, paths)',)",self,,,arg_info
jedi,0.12.0,jedi._compatibility.ImplicitNSInfo,_compatibility,ImplicitNSInfo,"Python Library Documentation: class ImplicitNSInfo in module jedi._compatibility

class ImplicitNSInfo(builtins.object)
 |  Stores information returned from an implicit namespace spec
 |  
 |  Methods defined here:
 |  
 |  __init__(self, name, paths)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, name, paths)',)",name,,,arg_info
jedi,0.12.0,jedi._compatibility.ImplicitNSInfo,_compatibility,ImplicitNSInfo,"Python Library Documentation: class ImplicitNSInfo in module jedi._compatibility

class ImplicitNSInfo(builtins.object)
 |  Stores information returned from an implicit namespace spec
 |  
 |  Methods defined here:
 |  
 |  __init__(self, name, paths)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, name, paths)',)",paths,,,arg_info
jedi,0.12.0,jedi._compatibility.NotADirectoryError,_compatibility,NotADirectoryError,"Python Library Documentation: class NotADirectoryError in module builtins

class NotADirectoryError(OSError)
 |  Operation only works on directories.
 |  
 |  Method resolution order:
 |      NotADirectoryError
 |      OSError
 |      Exception
 |      BaseException
 |      object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from OSError:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from OSError:
 |  
 |  characters_written
 |  
 |  errno
 |      POSIX exception code
 |  
 |  filename
 |      exception filename
 |  
 |  filename2
 |      second exception filename
 |  
 |  strerror
 |      exception strerror
 |  
 |  winerror
 |      Win32 exception code
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi._compatibility.Parameter,_compatibility,Parameter,"Python Library Documentation: class Parameter in module inspect

class Parameter(builtins.object)
 |  Represents a parameter in a function signature.
 |  
 |  Has the following public attributes:
 |  
 |  * name : str
 |      The name of the parameter as a string.
 |  * default : object
 |      The default value for the parameter if specified.  If the
 |      parameter has no default value, this attribute is set to
 |      `Parameter.empty`.
 |  * annotation
 |      The annotation for the parameter if specified.  If the
 |      parameter has no annotation, this attribute is set to
 |      `Parameter.empty`.
 |  * kind : str
 |      Describes how argument values are bound to the parameter.
 |      Possible values: `Parameter.POSITIONAL_ONLY`,
 |      `Parameter.POSITIONAL_OR_KEYWORD`, `Parameter.VAR_POSITIONAL`,
 |      `Parameter.KEYWORD_ONLY`, `Parameter.VAR_KEYWORD`.
 |  
 |  Methods defined here:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __init__(self, name, kind, *, default, annotation)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __reduce__(self)
 |      helper for pickle
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __setstate__(self, state)
 |  
 |  __str__(self)
 |      Return str(self).
 |  
 |  replace(self, *, name=<class 'inspect._void'>, kind=<class 'inspect._void'>, annotation=<class 'inspect._void'>, default=<class 'inspect._void'>)
 |      Creates a customized copy of the Parameter.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  annotation
 |  
 |  default
 |  
 |  kind
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  KEYWORD_ONLY = <_ParameterKind.KEYWORD_ONLY: 3>
 |  
 |  POSITIONAL_ONLY = <_ParameterKind.POSITIONAL_ONLY: 0>
 |  
 |  POSITIONAL_OR_KEYWORD = <_ParameterKind.POSITIONAL_OR_KEYWORD: 1>
 |  
 |  VAR_KEYWORD = <_ParameterKind.VAR_KEYWORD: 4>
 |  
 |  VAR_POSITIONAL = <_ParameterKind.VAR_POSITIONAL: 2>
 |  
 |  empty = <class 'inspect._empty'>
 |      Marker object for Signature.empty and Parameter.empty.
",class,"('(self, name, kind, *, default, annotation)',)",self,,,arg_info
jedi,0.12.0,jedi._compatibility.Parameter,_compatibility,Parameter,"Python Library Documentation: class Parameter in module inspect

class Parameter(builtins.object)
 |  Represents a parameter in a function signature.
 |  
 |  Has the following public attributes:
 |  
 |  * name : str
 |      The name of the parameter as a string.
 |  * default : object
 |      The default value for the parameter if specified.  If the
 |      parameter has no default value, this attribute is set to
 |      `Parameter.empty`.
 |  * annotation
 |      The annotation for the parameter if specified.  If the
 |      parameter has no annotation, this attribute is set to
 |      `Parameter.empty`.
 |  * kind : str
 |      Describes how argument values are bound to the parameter.
 |      Possible values: `Parameter.POSITIONAL_ONLY`,
 |      `Parameter.POSITIONAL_OR_KEYWORD`, `Parameter.VAR_POSITIONAL`,
 |      `Parameter.KEYWORD_ONLY`, `Parameter.VAR_KEYWORD`.
 |  
 |  Methods defined here:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __init__(self, name, kind, *, default, annotation)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __reduce__(self)
 |      helper for pickle
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __setstate__(self, state)
 |  
 |  __str__(self)
 |      Return str(self).
 |  
 |  replace(self, *, name=<class 'inspect._void'>, kind=<class 'inspect._void'>, annotation=<class 'inspect._void'>, default=<class 'inspect._void'>)
 |      Creates a customized copy of the Parameter.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  annotation
 |  
 |  default
 |  
 |  kind
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  KEYWORD_ONLY = <_ParameterKind.KEYWORD_ONLY: 3>
 |  
 |  POSITIONAL_ONLY = <_ParameterKind.POSITIONAL_ONLY: 0>
 |  
 |  POSITIONAL_OR_KEYWORD = <_ParameterKind.POSITIONAL_OR_KEYWORD: 1>
 |  
 |  VAR_KEYWORD = <_ParameterKind.VAR_KEYWORD: 4>
 |  
 |  VAR_POSITIONAL = <_ParameterKind.VAR_POSITIONAL: 2>
 |  
 |  empty = <class 'inspect._empty'>
 |      Marker object for Signature.empty and Parameter.empty.
",class,"('(self, name, kind, *, default, annotation)',)",name,,,arg_info
jedi,0.12.0,jedi._compatibility.Parameter,_compatibility,Parameter,"Python Library Documentation: class Parameter in module inspect

class Parameter(builtins.object)
 |  Represents a parameter in a function signature.
 |  
 |  Has the following public attributes:
 |  
 |  * name : str
 |      The name of the parameter as a string.
 |  * default : object
 |      The default value for the parameter if specified.  If the
 |      parameter has no default value, this attribute is set to
 |      `Parameter.empty`.
 |  * annotation
 |      The annotation for the parameter if specified.  If the
 |      parameter has no annotation, this attribute is set to
 |      `Parameter.empty`.
 |  * kind : str
 |      Describes how argument values are bound to the parameter.
 |      Possible values: `Parameter.POSITIONAL_ONLY`,
 |      `Parameter.POSITIONAL_OR_KEYWORD`, `Parameter.VAR_POSITIONAL`,
 |      `Parameter.KEYWORD_ONLY`, `Parameter.VAR_KEYWORD`.
 |  
 |  Methods defined here:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __init__(self, name, kind, *, default, annotation)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __reduce__(self)
 |      helper for pickle
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __setstate__(self, state)
 |  
 |  __str__(self)
 |      Return str(self).
 |  
 |  replace(self, *, name=<class 'inspect._void'>, kind=<class 'inspect._void'>, annotation=<class 'inspect._void'>, default=<class 'inspect._void'>)
 |      Creates a customized copy of the Parameter.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  annotation
 |  
 |  default
 |  
 |  kind
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  KEYWORD_ONLY = <_ParameterKind.KEYWORD_ONLY: 3>
 |  
 |  POSITIONAL_ONLY = <_ParameterKind.POSITIONAL_ONLY: 0>
 |  
 |  POSITIONAL_OR_KEYWORD = <_ParameterKind.POSITIONAL_OR_KEYWORD: 1>
 |  
 |  VAR_KEYWORD = <_ParameterKind.VAR_KEYWORD: 4>
 |  
 |  VAR_POSITIONAL = <_ParameterKind.VAR_POSITIONAL: 2>
 |  
 |  empty = <class 'inspect._empty'>
 |      Marker object for Signature.empty and Parameter.empty.
",class,"('(self, name, kind, *, default, annotation)',)",kind,,,arg_info
jedi,0.12.0,jedi._compatibility.Python3Method,_compatibility,Python3Method,"Python Library Documentation: class Python3Method in module jedi._compatibility

class Python3Method(builtins.object)
 |  Methods defined here:
 |  
 |  __get__(self, obj, objtype)
 |  
 |  __init__(self, func)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, func)',)",self,,,arg_info
jedi,0.12.0,jedi._compatibility.Python3Method,_compatibility,Python3Method,"Python Library Documentation: class Python3Method in module jedi._compatibility

class Python3Method(builtins.object)
 |  Methods defined here:
 |  
 |  __get__(self, obj, objtype)
 |  
 |  __init__(self, func)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, func)',)",func,,,arg_info
jedi,0.12.0,jedi._compatibility._iter_modules,_compatibility,_iter_modules,"Python Library Documentation: function _iter_modules in module jedi._compatibility

_iter_modules(paths, prefix='')
",function,"(""(paths, prefix='')"",)",paths,,,arg_info
jedi,0.12.0,jedi._compatibility._iter_modules,_compatibility,_iter_modules,"Python Library Documentation: function _iter_modules in module jedi._compatibility

_iter_modules(paths, prefix='')
",function,"(""(paths, prefix='')"",)",prefix,,,arg_info
jedi,0.12.0,jedi._compatibility.cast_path,_compatibility,cast_path,"Python Library Documentation: function cast_path in module jedi._compatibility

cast_path(obj)
    Take a bytes or str path and cast it to unicode.
    
    Apparently it is perfectly fine to pass both byte and unicode objects into
    the sys.path. This probably means that byte paths are normal at other
    places as well.
    
    Since this just really complicates everything and Python 2.7 will be EOL
    soon anyway, just go with always strings.
",function,"('(obj)',)",obj,,,arg_info
jedi,0.12.0,jedi._compatibility.find_module,_compatibility,find_module_py34,"Python Library Documentation: function find_module_py34 in module jedi._compatibility

find_module_py34(string, path=None, full_name=None)
    Provides information about a module.
    
    This function isolates the differences in importing libraries introduced with
    python 3.3 on; it gets a module name and optionally a path. It will return a
    tuple containin an open file for the module (if not builtin), the filename
    or the name of the module if it is a builtin one and a boolean indicating
    if the module is contained in a package.
",function,"('(string, path=None, full_name=None)',)",full_name,,NoneType,arg_info
jedi,0.12.0,jedi._compatibility.find_module,_compatibility,find_module_py34,"Python Library Documentation: function find_module_py34 in module jedi._compatibility

find_module_py34(string, path=None, full_name=None)
    Provides information about a module.
    
    This function isolates the differences in importing libraries introduced with
    python 3.3 on; it gets a module name and optionally a path. It will return a
    tuple containin an open file for the module (if not builtin), the filename
    or the name of the module if it is a builtin one and a boolean indicating
    if the module is contained in a package.
",function,"('(string, path=None, full_name=None)',)",path,,NoneType,arg_info
jedi,0.12.0,jedi._compatibility.find_module,_compatibility,find_module_py34,"Python Library Documentation: function find_module_py34 in module jedi._compatibility

find_module_py34(string, path=None, full_name=None)
    Provides information about a module.
    
    This function isolates the differences in importing libraries introduced with
    python 3.3 on; it gets a module name and optionally a path. It will return a
    tuple containin an open file for the module (if not builtin), the filename
    or the name of the module if it is a builtin one and a boolean indicating
    if the module is contained in a package.
",function,"('(string, path=None, full_name=None)',)",string,,,arg_info
jedi,0.12.0,jedi._compatibility.find_module_pre_py33,_compatibility,find_module_pre_py33,"Python Library Documentation: function find_module_pre_py33 in module jedi._compatibility

find_module_pre_py33(string, path=None, full_name=None)
",function,"('(string, path=None, full_name=None)',)",full_name,,NoneType,arg_info
jedi,0.12.0,jedi._compatibility.find_module_pre_py33,_compatibility,find_module_pre_py33,"Python Library Documentation: function find_module_pre_py33 in module jedi._compatibility

find_module_pre_py33(string, path=None, full_name=None)
",function,"('(string, path=None, full_name=None)',)",path,,NoneType,arg_info
jedi,0.12.0,jedi._compatibility.find_module_pre_py33,_compatibility,find_module_pre_py33,"Python Library Documentation: function find_module_pre_py33 in module jedi._compatibility

find_module_pre_py33(string, path=None, full_name=None)
",function,"('(string, path=None, full_name=None)',)",string,,,arg_info
jedi,0.12.0,jedi._compatibility.find_module_py33,_compatibility,find_module_py33,"Python Library Documentation: function find_module_py33 in module jedi._compatibility

find_module_py33(string, path=None, loader=None, full_name=None)
",function,"('(string, path=None, loader=None, full_name=None)',)",full_name,,NoneType,arg_info
jedi,0.12.0,jedi._compatibility.find_module_py33,_compatibility,find_module_py33,"Python Library Documentation: function find_module_py33 in module jedi._compatibility

find_module_py33(string, path=None, loader=None, full_name=None)
",function,"('(string, path=None, loader=None, full_name=None)',)",loader,,NoneType,arg_info
jedi,0.12.0,jedi._compatibility.find_module_py33,_compatibility,find_module_py33,"Python Library Documentation: function find_module_py33 in module jedi._compatibility

find_module_py33(string, path=None, loader=None, full_name=None)
",function,"('(string, path=None, loader=None, full_name=None)',)",path,,NoneType,arg_info
jedi,0.12.0,jedi._compatibility.find_module_py33,_compatibility,find_module_py33,"Python Library Documentation: function find_module_py33 in module jedi._compatibility

find_module_py33(string, path=None, loader=None, full_name=None)
",function,"('(string, path=None, loader=None, full_name=None)',)",string,,,arg_info
jedi,0.12.0,jedi._compatibility.find_module_py34,_compatibility,find_module_py34,"Python Library Documentation: function find_module_py34 in module jedi._compatibility

find_module_py34(string, path=None, full_name=None)
    Provides information about a module.
    
    This function isolates the differences in importing libraries introduced with
    python 3.3 on; it gets a module name and optionally a path. It will return a
    tuple containin an open file for the module (if not builtin), the filename
    or the name of the module if it is a builtin one and a boolean indicating
    if the module is contained in a package.
",function,"('(string, path=None, full_name=None)',)",full_name,,NoneType,arg_info
jedi,0.12.0,jedi._compatibility.find_module_py34,_compatibility,find_module_py34,"Python Library Documentation: function find_module_py34 in module jedi._compatibility

find_module_py34(string, path=None, full_name=None)
    Provides information about a module.
    
    This function isolates the differences in importing libraries introduced with
    python 3.3 on; it gets a module name and optionally a path. It will return a
    tuple containin an open file for the module (if not builtin), the filename
    or the name of the module if it is a builtin one and a boolean indicating
    if the module is contained in a package.
",function,"('(string, path=None, full_name=None)',)",path,,NoneType,arg_info
jedi,0.12.0,jedi._compatibility.find_module_py34,_compatibility,find_module_py34,"Python Library Documentation: function find_module_py34 in module jedi._compatibility

find_module_py34(string, path=None, full_name=None)
    Provides information about a module.
    
    This function isolates the differences in importing libraries introduced with
    python 3.3 on; it gets a module name and optionally a path. It will return a
    tuple containin an open file for the module (if not builtin), the filename
    or the name of the module if it is a builtin one and a boolean indicating
    if the module is contained in a package.
",function,"('(string, path=None, full_name=None)',)",string,,,arg_info
jedi,0.12.0,jedi._compatibility.force_unicode,_compatibility,force_unicode,"Python Library Documentation: function force_unicode in module jedi._compatibility

force_unicode(obj)
",function,"('(obj)',)",obj,,,arg_info
jedi,0.12.0,jedi._compatibility.iter_modules,_compatibility,_iter_modules,"Python Library Documentation: function _iter_modules in module jedi._compatibility

_iter_modules(paths, prefix='')
",function,"(""(paths, prefix='')"",)",paths,,,arg_info
jedi,0.12.0,jedi._compatibility.iter_modules,_compatibility,_iter_modules,"Python Library Documentation: function _iter_modules in module jedi._compatibility

_iter_modules(paths, prefix='')
",function,"(""(paths, prefix='')"",)",prefix,,,arg_info
jedi,0.12.0,jedi._compatibility.literal_eval,_compatibility,literal_eval,"Python Library Documentation: function literal_eval in module jedi._compatibility

literal_eval(string)
",function,"('(string)',)",string,,,arg_info
jedi,0.12.0,jedi._compatibility.no_unicode_pprint,_compatibility,no_unicode_pprint,"Python Library Documentation: function no_unicode_pprint in module jedi._compatibility

no_unicode_pprint(dct)
    Python 2/3 dict __repr__ may be different, because of unicode differens
    (with or without a `u` prefix). Normally in doctests we could use `pprint`
    to sort dicts and check for equality, but here we have to write a separate
    function to do that.
",function,"('(dct)',)",dct,,,arg_info
jedi,0.12.0,jedi._compatibility.pickle_dump,_compatibility,pickle_dump,"Python Library Documentation: function pickle_dump in module jedi._compatibility

pickle_dump(data, file)
",function,"('(data, file)',)",file,,,arg_info
jedi,0.12.0,jedi._compatibility.pickle_dump,_compatibility,pickle_dump,"Python Library Documentation: function pickle_dump in module jedi._compatibility

pickle_dump(data, file)
",function,"('(data, file)',)",data,,,arg_info
jedi,0.12.0,jedi._compatibility.pickle_load,_compatibility,pickle_load,"Python Library Documentation: function pickle_load in module jedi._compatibility

pickle_load(file)
",function,"('(file)',)",file,,,arg_info
jedi,0.12.0,jedi._compatibility.reraise,_compatibility,reraise,"Python Library Documentation: function reraise in module jedi._compatibility

reraise(exception, traceback)
    Re-raise `exception` with a `traceback` object.
    
    Usage::
    
        reraise(Exception, sys.exc_info()[2])
",function,"('(exception, traceback)',)",traceback,,,arg_info
jedi,0.12.0,jedi._compatibility.reraise,_compatibility,reraise,"Python Library Documentation: function reraise in module jedi._compatibility

reraise(exception, traceback)
    Re-raise `exception` with a `traceback` object.
    
    Usage::
    
        reraise(Exception, sys.exc_info()[2])
",function,"('(exception, traceback)',)",exception,,,arg_info
jedi,0.12.0,jedi._compatibility.u,_compatibility,u,"Python Library Documentation: function u in module jedi._compatibility

u(string, errors='strict')
    Cast to unicode DAMMIT!
    Written because Python2 repr always implicitly casts to a string, so we
    have to cast back to a unicode (and we now that we always deal with valid
    unicode, because we check that in the beginning).
",function,"(""(string, errors='strict')"",)",string,,,arg_info
jedi,0.12.0,jedi._compatibility.u,_compatibility,u,"Python Library Documentation: function u in module jedi._compatibility

u(string, errors='strict')
    Cast to unicode DAMMIT!
    Written because Python2 repr always implicitly casts to a string, so we
    have to cast back to a unicode (and we now that we always deal with valid
    unicode, because we check that in the beginning).
",function,"(""(string, errors='strict')"",)",errors,strict,str,arg_info
jedi,0.12.0,jedi._compatibility.unicode,_compatibility,str,"Python Library Documentation: class str in module builtins

class str(object)
 |  str(object='') -> str
 |  str(bytes_or_buffer[, encoding[, errors]]) -> str
 |  
 |  Create a new string object from the given object. If encoding or
 |  errors is specified, then the object must expose a data buffer
 |  that will be decoded using the given encoding and error handler.
 |  Otherwise, returns the result of object.__str__() (if defined)
 |  or repr(object).
 |  encoding defaults to sys.getdefaultencoding().
 |  errors defaults to 'strict'.
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __format__(...)
 |      S.__format__(format_spec) -> str
 |      
 |      Return a formatted version of S as described by format_spec.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __getnewargs__(...)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  __sizeof__(...)
 |      S.__sizeof__() -> size of S in memory, in bytes
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  capitalize(...)
 |      S.capitalize() -> str
 |      
 |      Return a capitalized version of S, i.e. make the first character
 |      have upper case and the rest lower case.
 |  
 |  casefold(...)
 |      S.casefold() -> str
 |      
 |      Return a version of S suitable for caseless comparisons.
 |  
 |  center(...)
 |      S.center(width[, fillchar]) -> str
 |      
 |      Return S centered in a string of length width. Padding is
 |      done using the specified fill character (default is a space)
 |  
 |  count(...)
 |      S.count(sub[, start[, end]]) -> int
 |      
 |      Return the number of non-overlapping occurrences of substring sub in
 |      string S[start:end].  Optional arguments start and end are
 |      interpreted as in slice notation.
 |  
 |  encode(...)
 |      S.encode(encoding='utf-8', errors='strict') -> bytes
 |      
 |      Encode S using the codec registered for encoding. Default encoding
 |      is 'utf-8'. errors may be given to set a different error
 |      handling scheme. Default is 'strict' meaning that encoding errors raise
 |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
 |      'xmlcharrefreplace' as well as any other name registered with
 |      codecs.register_error that can handle UnicodeEncodeErrors.
 |  
 |  endswith(...)
 |      S.endswith(suffix[, start[, end]]) -> bool
 |      
 |      Return True if S ends with the specified suffix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      suffix can also be a tuple of strings to try.
 |  
 |  expandtabs(...)
 |      S.expandtabs(tabsize=8) -> str
 |      
 |      Return a copy of S where all tab characters are expanded using spaces.
 |      If tabsize is not given, a tab size of 8 characters is assumed.
 |  
 |  find(...)
 |      S.find(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  format(...)
 |      S.format(*args, **kwargs) -> str
 |      
 |      Return a formatted version of S, using substitutions from args and kwargs.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  format_map(...)
 |      S.format_map(mapping) -> str
 |      
 |      Return a formatted version of S, using substitutions from mapping.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  index(...)
 |      S.index(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found, 
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  isalnum(...)
 |      S.isalnum() -> bool
 |      
 |      Return True if all characters in S are alphanumeric
 |      and there is at least one character in S, False otherwise.
 |  
 |  isalpha(...)
 |      S.isalpha() -> bool
 |      
 |      Return True if all characters in S are alphabetic
 |      and there is at least one character in S, False otherwise.
 |  
 |  isdecimal(...)
 |      S.isdecimal() -> bool
 |      
 |      Return True if there are only decimal characters in S,
 |      False otherwise.
 |  
 |  isdigit(...)
 |      S.isdigit() -> bool
 |      
 |      Return True if all characters in S are digits
 |      and there is at least one character in S, False otherwise.
 |  
 |  isidentifier(...)
 |      S.isidentifier() -> bool
 |      
 |      Return True if S is a valid identifier according
 |      to the language definition.
 |      
 |      Use keyword.iskeyword() to test for reserved identifiers
 |      such as ""def"" and ""class"".
 |  
 |  islower(...)
 |      S.islower() -> bool
 |      
 |      Return True if all cased characters in S are lowercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  isnumeric(...)
 |      S.isnumeric() -> bool
 |      
 |      Return True if there are only numeric characters in S,
 |      False otherwise.
 |  
 |  isprintable(...)
 |      S.isprintable() -> bool
 |      
 |      Return True if all characters in S are considered
 |      printable in repr() or S is empty, False otherwise.
 |  
 |  isspace(...)
 |      S.isspace() -> bool
 |      
 |      Return True if all characters in S are whitespace
 |      and there is at least one character in S, False otherwise.
 |  
 |  istitle(...)
 |      S.istitle() -> bool
 |      
 |      Return True if S is a titlecased string and there is at least one
 |      character in S, i.e. upper- and titlecase characters may only
 |      follow uncased characters and lowercase characters only cased ones.
 |      Return False otherwise.
 |  
 |  isupper(...)
 |      S.isupper() -> bool
 |      
 |      Return True if all cased characters in S are uppercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  join(...)
 |      S.join(iterable) -> str
 |      
 |      Return a string which is the concatenation of the strings in the
 |      iterable.  The separator between elements is S.
 |  
 |  ljust(...)
 |      S.ljust(width[, fillchar]) -> str
 |      
 |      Return S left-justified in a Unicode string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  lower(...)
 |      S.lower() -> str
 |      
 |      Return a copy of the string S converted to lowercase.
 |  
 |  lstrip(...)
 |      S.lstrip([chars]) -> str
 |      
 |      Return a copy of the string S with leading whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  partition(...)
 |      S.partition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, and return the part before it,
 |      the separator itself, and the part after it.  If the separator is not
 |      found, return S and two empty strings.
 |  
 |  replace(...)
 |      S.replace(old, new[, count]) -> str
 |      
 |      Return a copy of S with all occurrences of substring
 |      old replaced by new.  If the optional argument count is
 |      given, only the first count occurrences are replaced.
 |  
 |  rfind(...)
 |      S.rfind(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  rindex(...)
 |      S.rindex(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  rjust(...)
 |      S.rjust(width[, fillchar]) -> str
 |      
 |      Return S right-justified in a string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  rpartition(...)
 |      S.rpartition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, starting at the end of S, and return
 |      the part before it, the separator itself, and the part after it.  If the
 |      separator is not found, return two empty strings and S.
 |  
 |  rsplit(...)
 |      S.rsplit(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string, starting at the end of the string and
 |      working to the front.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified, any whitespace string
 |      is a separator.
 |  
 |  rstrip(...)
 |      S.rstrip([chars]) -> str
 |      
 |      Return a copy of the string S with trailing whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  split(...)
 |      S.split(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified or is None, any
 |      whitespace string is a separator and empty strings are
 |      removed from the result.
 |  
 |  splitlines(...)
 |      S.splitlines([keepends]) -> list of strings
 |      
 |      Return a list of the lines in S, breaking at line boundaries.
 |      Line breaks are not included in the resulting list unless keepends
 |      is given and true.
 |  
 |  startswith(...)
 |      S.startswith(prefix[, start[, end]]) -> bool
 |      
 |      Return True if S starts with the specified prefix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      prefix can also be a tuple of strings to try.
 |  
 |  strip(...)
 |      S.strip([chars]) -> str
 |      
 |      Return a copy of the string S with leading and trailing
 |      whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  swapcase(...)
 |      S.swapcase() -> str
 |      
 |      Return a copy of S with uppercase characters converted to lowercase
 |      and vice versa.
 |  
 |  title(...)
 |      S.title() -> str
 |      
 |      Return a titlecased version of S, i.e. words start with title case
 |      characters, all remaining cased characters have lower case.
 |  
 |  translate(...)
 |      S.translate(table) -> str
 |      
 |      Return a copy of the string S in which each character has been mapped
 |      through the given translation table. The table must implement
 |      lookup/indexing via __getitem__, for instance a dictionary or list,
 |      mapping Unicode ordinals to Unicode ordinals, strings, or None. If
 |      this operation raises LookupError, the character is left untouched.
 |      Characters mapped to None are deleted.
 |  
 |  upper(...)
 |      S.upper() -> str
 |      
 |      Return a copy of S converted to uppercase.
 |  
 |  zfill(...)
 |      S.zfill(width) -> str
 |      
 |      Pad a numeric string S with zeros on the left, to fill a field
 |      of the specified width. The string S is never truncated.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  maketrans(x, y=None, z=None, /)
 |      Return a translation table usable for str.translate().
 |      
 |      If there is only one argument, it must be a dictionary mapping Unicode
 |      ordinals (integers) or characters to Unicode ordinals, strings or None.
 |      Character keys will be then converted to ordinals.
 |      If there are two arguments, they must be strings of equal length, and
 |      in the resulting dictionary, each character in x will be mapped to the
 |      character at the same position in y. If there is a third argument, it
 |      must be a string, whose characters will be mapped to None in the result.
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi._compatibility.use_metaclass,_compatibility,use_metaclass,"Python Library Documentation: function use_metaclass in module jedi._compatibility

use_metaclass(meta, *bases)
    Create a class with a metaclass.
",function,"('(meta, *bases)',)",meta,,,arg_info
jedi,0.12.0,jedi._compatibility.utf8_repr,_compatibility,utf8_repr,"Python Library Documentation: function utf8_repr in module jedi._compatibility

utf8_repr(func)
    ``__repr__`` methods in Python 2 don't allow unicode objects to be
    returned. Therefore cast them to utf-8 bytes in this decorator.
",function,"('(func)',)",func,,,arg_info
jedi,0.12.0,jedi._compatibility.zip_longest,_compatibility,zip_longest,"Python Library Documentation: class zip_longest in module itertools

class zip_longest(builtins.object)
 |  zip_longest(iter1 [,iter2 [...]], [fillvalue=None]) --> zip_longest object
 |  
 |  Return a zip_longest object whose .__next__() method returns a tuple where
 |  the i-th element comes from the i-th iterable argument.  The .__next__()
 |  method continues until the longest iterable in the argument sequence
 |  is exhausted and then it raises StopIteration.  When the shorter iterables
 |  are exhausted, the fillvalue is substituted in their place.  The fillvalue
 |  defaults to None or can be specified by a keyword argument.
 |  
 |  Methods defined here:
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __next__(self, /)
 |      Implement next(self).
 |  
 |  __reduce__(...)
 |      Return state information for pickling.
 |  
 |  __setstate__(...)
 |      Set state information for unpickling.
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.api.Completion,api,Completion,"Python Library Documentation: class Completion in module jedi.api.completion

class Completion(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module, code_lines, position, call_signatures_method)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  completions(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module, code_lines, position, call_signatures_method)',)",position,,,arg_info
jedi,0.12.0,jedi.api.Completion,api,Completion,"Python Library Documentation: class Completion in module jedi.api.completion

class Completion(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module, code_lines, position, call_signatures_method)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  completions(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module, code_lines, position, call_signatures_method)',)",call_signatures_method,,,arg_info
jedi,0.12.0,jedi.api.Completion,api,Completion,"Python Library Documentation: class Completion in module jedi.api.completion

class Completion(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module, code_lines, position, call_signatures_method)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  completions(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module, code_lines, position, call_signatures_method)',)",code_lines,,,arg_info
jedi,0.12.0,jedi.api.Completion,api,Completion,"Python Library Documentation: class Completion in module jedi.api.completion

class Completion(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module, code_lines, position, call_signatures_method)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  completions(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module, code_lines, position, call_signatures_method)',)",self,,,arg_info
jedi,0.12.0,jedi.api.Completion,api,Completion,"Python Library Documentation: class Completion in module jedi.api.completion

class Completion(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module, code_lines, position, call_signatures_method)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  completions(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module, code_lines, position, call_signatures_method)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.api.Completion,api,Completion,"Python Library Documentation: class Completion in module jedi.api.completion

class Completion(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module, code_lines, position, call_signatures_method)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  completions(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module, code_lines, position, call_signatures_method)',)",module,,,arg_info
jedi,0.12.0,jedi.api.Evaluator,api,Evaluator,"Python Library Documentation: class Evaluator in module jedi.evaluate

class Evaluator(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, project, environment=None, script_path=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  create_context(self, base_context, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_element(self, context, element)
 |  
 |  get_sys_path(self)
 |      Convenience function
 |  
 |  goto(self, context, name)
 |  
 |  goto_definitions(self, context, name)
 |  
 |  parse(self, *args, **kwargs)
 |  
 |  parse_and_get_code(self, code=None, path=None, **kwargs)
 |  
 |  reset_recursion_limitations(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  builtins_module
",class,"('(self, project, environment=None, script_path=None)',)",self,,,arg_info
jedi,0.12.0,jedi.api.Evaluator,api,Evaluator,"Python Library Documentation: class Evaluator in module jedi.evaluate

class Evaluator(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, project, environment=None, script_path=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  create_context(self, base_context, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_element(self, context, element)
 |  
 |  get_sys_path(self)
 |      Convenience function
 |  
 |  goto(self, context, name)
 |  
 |  goto_definitions(self, context, name)
 |  
 |  parse(self, *args, **kwargs)
 |  
 |  parse_and_get_code(self, code=None, path=None, **kwargs)
 |  
 |  reset_recursion_limitations(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  builtins_module
",class,"('(self, project, environment=None, script_path=None)',)",environment,,NoneType,arg_info
jedi,0.12.0,jedi.api.Evaluator,api,Evaluator,"Python Library Documentation: class Evaluator in module jedi.evaluate

class Evaluator(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, project, environment=None, script_path=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  create_context(self, base_context, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_element(self, context, element)
 |  
 |  get_sys_path(self)
 |      Convenience function
 |  
 |  goto(self, context, name)
 |  
 |  goto_definitions(self, context, name)
 |  
 |  parse(self, *args, **kwargs)
 |  
 |  parse_and_get_code(self, code=None, path=None, **kwargs)
 |  
 |  reset_recursion_limitations(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  builtins_module
",class,"('(self, project, environment=None, script_path=None)',)",script_path,,NoneType,arg_info
jedi,0.12.0,jedi.api.Evaluator,api,Evaluator,"Python Library Documentation: class Evaluator in module jedi.evaluate

class Evaluator(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, project, environment=None, script_path=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  create_context(self, base_context, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_element(self, context, element)
 |  
 |  get_sys_path(self)
 |      Convenience function
 |  
 |  goto(self, context, name)
 |  
 |  goto_definitions(self, context, name)
 |  
 |  parse(self, *args, **kwargs)
 |  
 |  parse_and_get_code(self, code=None, path=None, **kwargs)
 |  
 |  reset_recursion_limitations(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  builtins_module
",class,"('(self, project, environment=None, script_path=None)',)",project,,,arg_info
jedi,0.12.0,jedi.api.Interpreter,api,Interpreter,"Python Library Documentation: class Interpreter in module jedi.api

class Interpreter(Script)
 |  Jedi API for Python REPLs.
 |  
 |  In addition to completion of simple attribute access, Jedi
 |  supports code completion based on static code analysis.
 |  Jedi can complete attributes of object which is not initialized
 |  yet.
 |  
 |  >>> from os.path import join
 |  >>> namespace = locals()
 |  >>> script = Interpreter('join("""").up', [namespace])
 |  >>> print(script.completions()[0].name)
 |  upper
 |  
 |  Method resolution order:
 |      Interpreter
 |      Script
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, source, namespaces, **kwds)
 |      Parse `source` and mixin interpreted Python objects from `namespaces`.
 |      
 |      :type source: str
 |      :arg  source: Code to parse.
 |      :type namespaces: list of dict
 |      :arg  namespaces: a list of namespace dictionaries such as the one
 |                        returned by :func:`locals`.
 |      
 |      Other optional arguments are same as the ones for :class:`Script`.
 |      If `line` and `column` are None, they are assumed be at the end of
 |      `source`.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Script:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  call_signatures(self)
 |      Return the function object of the call you're currently in.
 |      
 |      E.g. if the cursor is here::
 |      
 |          abs(# <-- cursor is here
 |      
 |      This would return the ``abs`` function. On the other hand::
 |      
 |          abs()# <-- cursor is here
 |      
 |      This would return an empty list..
 |      
 |      :rtype: list of :class:`classes.CallSignature`
 |  
 |  completions(self)
 |      Return :class:`classes.Completion` objects. Those objects contain
 |      information about the completions, more than just names.
 |      
 |      :return: Completion objects, sorted by name and __ comes last.
 |      :rtype: list of :class:`classes.Completion`
 |  
 |  goto_assignments(self, follow_imports=False)
 |      Return the first definition found, while optionally following imports.
 |      Multiple objects may be returned, because Python itself is a
 |      dynamic language, which means depending on an option you can have two
 |      different versions of a function.
 |      
 |      :rtype: list of :class:`classes.Definition`
 |  
 |  goto_definitions(self)
 |      Return the definitions of a the path under the cursor.  goto function!
 |      This follows complicated paths and returns the end, not the first
 |      definition. The big difference between :meth:`goto_assignments` and
 |      :meth:`goto_definitions` is that :meth:`goto_assignments` doesn't
 |      follow imports and statements. Multiple objects may be returned,
 |      because Python itself is a dynamic language, which means depending on
 |      an option you can have two different versions of a function.
 |      
 |      :rtype: list of :class:`classes.Definition`
 |  
 |  usages(self, additional_module_paths=())
 |      Return :class:`classes.Definition` objects, which contain all
 |      names that point to the definition of the name under the cursor. This
 |      is very useful for refactoring (renaming), or to show all usages of a
 |      variable.
 |      
 |      .. todo:: Implement additional_module_paths
 |      
 |      :rtype: list of :class:`classes.Definition`
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Script:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, source, namespaces, **kwds)',)",self,,,arg_info
jedi,0.12.0,jedi.api.Interpreter,api,Interpreter,"Python Library Documentation: class Interpreter in module jedi.api

class Interpreter(Script)
 |  Jedi API for Python REPLs.
 |  
 |  In addition to completion of simple attribute access, Jedi
 |  supports code completion based on static code analysis.
 |  Jedi can complete attributes of object which is not initialized
 |  yet.
 |  
 |  >>> from os.path import join
 |  >>> namespace = locals()
 |  >>> script = Interpreter('join("""").up', [namespace])
 |  >>> print(script.completions()[0].name)
 |  upper
 |  
 |  Method resolution order:
 |      Interpreter
 |      Script
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, source, namespaces, **kwds)
 |      Parse `source` and mixin interpreted Python objects from `namespaces`.
 |      
 |      :type source: str
 |      :arg  source: Code to parse.
 |      :type namespaces: list of dict
 |      :arg  namespaces: a list of namespace dictionaries such as the one
 |                        returned by :func:`locals`.
 |      
 |      Other optional arguments are same as the ones for :class:`Script`.
 |      If `line` and `column` are None, they are assumed be at the end of
 |      `source`.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Script:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  call_signatures(self)
 |      Return the function object of the call you're currently in.
 |      
 |      E.g. if the cursor is here::
 |      
 |          abs(# <-- cursor is here
 |      
 |      This would return the ``abs`` function. On the other hand::
 |      
 |          abs()# <-- cursor is here
 |      
 |      This would return an empty list..
 |      
 |      :rtype: list of :class:`classes.CallSignature`
 |  
 |  completions(self)
 |      Return :class:`classes.Completion` objects. Those objects contain
 |      information about the completions, more than just names.
 |      
 |      :return: Completion objects, sorted by name and __ comes last.
 |      :rtype: list of :class:`classes.Completion`
 |  
 |  goto_assignments(self, follow_imports=False)
 |      Return the first definition found, while optionally following imports.
 |      Multiple objects may be returned, because Python itself is a
 |      dynamic language, which means depending on an option you can have two
 |      different versions of a function.
 |      
 |      :rtype: list of :class:`classes.Definition`
 |  
 |  goto_definitions(self)
 |      Return the definitions of a the path under the cursor.  goto function!
 |      This follows complicated paths and returns the end, not the first
 |      definition. The big difference between :meth:`goto_assignments` and
 |      :meth:`goto_definitions` is that :meth:`goto_assignments` doesn't
 |      follow imports and statements. Multiple objects may be returned,
 |      because Python itself is a dynamic language, which means depending on
 |      an option you can have two different versions of a function.
 |      
 |      :rtype: list of :class:`classes.Definition`
 |  
 |  usages(self, additional_module_paths=())
 |      Return :class:`classes.Definition` objects, which contain all
 |      names that point to the definition of the name under the cursor. This
 |      is very useful for refactoring (renaming), or to show all usages of a
 |      variable.
 |      
 |      .. todo:: Implement additional_module_paths
 |      
 |      :rtype: list of :class:`classes.Definition`
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Script:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, source, namespaces, **kwds)',)",source,,,arg_info
jedi,0.12.0,jedi.api.Interpreter,api,Interpreter,"Python Library Documentation: class Interpreter in module jedi.api

class Interpreter(Script)
 |  Jedi API for Python REPLs.
 |  
 |  In addition to completion of simple attribute access, Jedi
 |  supports code completion based on static code analysis.
 |  Jedi can complete attributes of object which is not initialized
 |  yet.
 |  
 |  >>> from os.path import join
 |  >>> namespace = locals()
 |  >>> script = Interpreter('join("""").up', [namespace])
 |  >>> print(script.completions()[0].name)
 |  upper
 |  
 |  Method resolution order:
 |      Interpreter
 |      Script
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, source, namespaces, **kwds)
 |      Parse `source` and mixin interpreted Python objects from `namespaces`.
 |      
 |      :type source: str
 |      :arg  source: Code to parse.
 |      :type namespaces: list of dict
 |      :arg  namespaces: a list of namespace dictionaries such as the one
 |                        returned by :func:`locals`.
 |      
 |      Other optional arguments are same as the ones for :class:`Script`.
 |      If `line` and `column` are None, they are assumed be at the end of
 |      `source`.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Script:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  call_signatures(self)
 |      Return the function object of the call you're currently in.
 |      
 |      E.g. if the cursor is here::
 |      
 |          abs(# <-- cursor is here
 |      
 |      This would return the ``abs`` function. On the other hand::
 |      
 |          abs()# <-- cursor is here
 |      
 |      This would return an empty list..
 |      
 |      :rtype: list of :class:`classes.CallSignature`
 |  
 |  completions(self)
 |      Return :class:`classes.Completion` objects. Those objects contain
 |      information about the completions, more than just names.
 |      
 |      :return: Completion objects, sorted by name and __ comes last.
 |      :rtype: list of :class:`classes.Completion`
 |  
 |  goto_assignments(self, follow_imports=False)
 |      Return the first definition found, while optionally following imports.
 |      Multiple objects may be returned, because Python itself is a
 |      dynamic language, which means depending on an option you can have two
 |      different versions of a function.
 |      
 |      :rtype: list of :class:`classes.Definition`
 |  
 |  goto_definitions(self)
 |      Return the definitions of a the path under the cursor.  goto function!
 |      This follows complicated paths and returns the end, not the first
 |      definition. The big difference between :meth:`goto_assignments` and
 |      :meth:`goto_definitions` is that :meth:`goto_assignments` doesn't
 |      follow imports and statements. Multiple objects may be returned,
 |      because Python itself is a dynamic language, which means depending on
 |      an option you can have two different versions of a function.
 |      
 |      :rtype: list of :class:`classes.Definition`
 |  
 |  usages(self, additional_module_paths=())
 |      Return :class:`classes.Definition` objects, which contain all
 |      names that point to the definition of the name under the cursor. This
 |      is very useful for refactoring (renaming), or to show all usages of a
 |      variable.
 |      
 |      .. todo:: Implement additional_module_paths
 |      
 |      :rtype: list of :class:`classes.Definition`
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Script:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, source, namespaces, **kwds)',)",namespaces,,,arg_info
jedi,0.12.0,jedi.api.InterpreterEnvironment,api,InterpreterEnvironment,"Python Library Documentation: class InterpreterEnvironment in module jedi.api.environment

class InterpreterEnvironment(_BaseEnvironment)
 |  Method resolution order:
 |      InterpreterEnvironment
 |      _BaseEnvironment
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_evaluator_subprocess(self, evaluator)
 |  
 |  get_sys_path(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from _BaseEnvironment:
 |  
 |  get_grammar(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from _BaseEnvironment:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self)',)",self,,,arg_info
jedi,0.12.0,jedi.api.ModuleContext,api,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",module_node,,,arg_info
jedi,0.12.0,jedi.api.ModuleContext,api,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",path,,,arg_info
jedi,0.12.0,jedi.api.ModuleContext,api,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",code_lines,,,arg_info
jedi,0.12.0,jedi.api.ModuleContext,api,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",self,,,arg_info
jedi,0.12.0,jedi.api.ModuleContext,api,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.api.ParamName,api,ParamName,"Python Library Documentation: class ParamName in module jedi.evaluate.filters

class ParamName(AbstractTreeName)
 |  Method resolution order:
 |      ParamName
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_kind(self)
 |  
 |  get_param(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'param'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",tree_name,,,arg_info
jedi,0.12.0,jedi.api.ParamName,api,ParamName,"Python Library Documentation: class ParamName in module jedi.evaluate.filters

class ParamName(AbstractTreeName)
 |  Method resolution order:
 |      ParamName
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_kind(self)
 |  
 |  get_param(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'param'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.api.ParamName,api,ParamName,"Python Library Documentation: class ParamName in module jedi.evaluate.filters

class ParamName(AbstractTreeName)
 |  Method resolution order:
 |      ParamName
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_kind(self)
 |  
 |  get_param(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'param'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",self,,,arg_info
jedi,0.12.0,jedi.api.Script,api,Script,"Python Library Documentation: class Script in module jedi.api

class Script(builtins.object)
 |  A Script is the base for completions, goto or whatever you want to do with
 |  |jedi|.
 |  
 |  You can either use the ``source`` parameter or ``path`` to read a file.
 |  Usually you're going to want to use both of them (in an editor).
 |  
 |  The script might be analyzed in a different ``sys.path`` than |jedi|:
 |  
 |  - if `sys_path` parameter is not ``None``, it will be used as ``sys.path``
 |    for the script;
 |  
 |  - if `sys_path` parameter is ``None`` and ``VIRTUAL_ENV`` environment
 |    variable is defined, ``sys.path`` for the specified environment will be
 |    guessed (see :func:`jedi.evaluate.sys_path.get_venv_path`) and used for
 |    the script;
 |  
 |  - otherwise ``sys.path`` will match that of |jedi|.
 |  
 |  :param source: The source code of the current file, separated by newlines.
 |  :type source: str
 |  :param line: The line to perform actions on (starting with 1).
 |  :type line: int
 |  :param column: The column of the cursor (starting with 0).
 |  :type column: int
 |  :param path: The path of the file in the file system, or ``''`` if
 |      it hasn't been saved yet.
 |  :type path: str or None
 |  :param encoding: The encoding of ``source``, if it is not a
 |      ``unicode`` object (default ``'utf-8'``).
 |  :type encoding: str
 |  :param source_encoding: The encoding of ``source``, if it is not a
 |      ``unicode`` object (default ``'utf-8'``).
 |  :type encoding: str
 |  :param sys_path: ``sys.path`` to use during analysis of the script
 |  :type sys_path: list
 |  :param environment: TODO
 |  :type sys_path: Environment
 |  
 |  Methods defined here:
 |  
 |  __init__(self, source=None, line=None, column=None, path=None, encoding='utf-8', sys_path=None, environment=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  call_signatures(self)
 |      Return the function object of the call you're currently in.
 |      
 |      E.g. if the cursor is here::
 |      
 |          abs(# <-- cursor is here
 |      
 |      This would return the ``abs`` function. On the other hand::
 |      
 |          abs()# <-- cursor is here
 |      
 |      This would return an empty list..
 |      
 |      :rtype: list of :class:`classes.CallSignature`
 |  
 |  completions(self)
 |      Return :class:`classes.Completion` objects. Those objects contain
 |      information about the completions, more than just names.
 |      
 |      :return: Completion objects, sorted by name and __ comes last.
 |      :rtype: list of :class:`classes.Completion`
 |  
 |  goto_assignments(self, follow_imports=False)
 |      Return the first definition found, while optionally following imports.
 |      Multiple objects may be returned, because Python itself is a
 |      dynamic language, which means depending on an option you can have two
 |      different versions of a function.
 |      
 |      :rtype: list of :class:`classes.Definition`
 |  
 |  goto_definitions(self)
 |      Return the definitions of a the path under the cursor.  goto function!
 |      This follows complicated paths and returns the end, not the first
 |      definition. The big difference between :meth:`goto_assignments` and
 |      :meth:`goto_definitions` is that :meth:`goto_assignments` doesn't
 |      follow imports and statements. Multiple objects may be returned,
 |      because Python itself is a dynamic language, which means depending on
 |      an option you can have two different versions of a function.
 |      
 |      :rtype: list of :class:`classes.Definition`
 |  
 |  usages(self, additional_module_paths=())
 |      Return :class:`classes.Definition` objects, which contain all
 |      names that point to the definition of the name under the cursor. This
 |      is very useful for refactoring (renaming), or to show all usages of a
 |      variable.
 |      
 |      .. todo:: Implement additional_module_paths
 |      
 |      :rtype: list of :class:`classes.Definition`
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"(""(self, source=None, line=None, column=None, path=None, encoding='utf-8', sys_path=None, environment=None)"",)",encoding,utf-8,str,arg_info
jedi,0.12.0,jedi.api.Script,api,Script,"Python Library Documentation: class Script in module jedi.api

class Script(builtins.object)
 |  A Script is the base for completions, goto or whatever you want to do with
 |  |jedi|.
 |  
 |  You can either use the ``source`` parameter or ``path`` to read a file.
 |  Usually you're going to want to use both of them (in an editor).
 |  
 |  The script might be analyzed in a different ``sys.path`` than |jedi|:
 |  
 |  - if `sys_path` parameter is not ``None``, it will be used as ``sys.path``
 |    for the script;
 |  
 |  - if `sys_path` parameter is ``None`` and ``VIRTUAL_ENV`` environment
 |    variable is defined, ``sys.path`` for the specified environment will be
 |    guessed (see :func:`jedi.evaluate.sys_path.get_venv_path`) and used for
 |    the script;
 |  
 |  - otherwise ``sys.path`` will match that of |jedi|.
 |  
 |  :param source: The source code of the current file, separated by newlines.
 |  :type source: str
 |  :param line: The line to perform actions on (starting with 1).
 |  :type line: int
 |  :param column: The column of the cursor (starting with 0).
 |  :type column: int
 |  :param path: The path of the file in the file system, or ``''`` if
 |      it hasn't been saved yet.
 |  :type path: str or None
 |  :param encoding: The encoding of ``source``, if it is not a
 |      ``unicode`` object (default ``'utf-8'``).
 |  :type encoding: str
 |  :param source_encoding: The encoding of ``source``, if it is not a
 |      ``unicode`` object (default ``'utf-8'``).
 |  :type encoding: str
 |  :param sys_path: ``sys.path`` to use during analysis of the script
 |  :type sys_path: list
 |  :param environment: TODO
 |  :type sys_path: Environment
 |  
 |  Methods defined here:
 |  
 |  __init__(self, source=None, line=None, column=None, path=None, encoding='utf-8', sys_path=None, environment=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  call_signatures(self)
 |      Return the function object of the call you're currently in.
 |      
 |      E.g. if the cursor is here::
 |      
 |          abs(# <-- cursor is here
 |      
 |      This would return the ``abs`` function. On the other hand::
 |      
 |          abs()# <-- cursor is here
 |      
 |      This would return an empty list..
 |      
 |      :rtype: list of :class:`classes.CallSignature`
 |  
 |  completions(self)
 |      Return :class:`classes.Completion` objects. Those objects contain
 |      information about the completions, more than just names.
 |      
 |      :return: Completion objects, sorted by name and __ comes last.
 |      :rtype: list of :class:`classes.Completion`
 |  
 |  goto_assignments(self, follow_imports=False)
 |      Return the first definition found, while optionally following imports.
 |      Multiple objects may be returned, because Python itself is a
 |      dynamic language, which means depending on an option you can have two
 |      different versions of a function.
 |      
 |      :rtype: list of :class:`classes.Definition`
 |  
 |  goto_definitions(self)
 |      Return the definitions of a the path under the cursor.  goto function!
 |      This follows complicated paths and returns the end, not the first
 |      definition. The big difference between :meth:`goto_assignments` and
 |      :meth:`goto_definitions` is that :meth:`goto_assignments` doesn't
 |      follow imports and statements. Multiple objects may be returned,
 |      because Python itself is a dynamic language, which means depending on
 |      an option you can have two different versions of a function.
 |      
 |      :rtype: list of :class:`classes.Definition`
 |  
 |  usages(self, additional_module_paths=())
 |      Return :class:`classes.Definition` objects, which contain all
 |      names that point to the definition of the name under the cursor. This
 |      is very useful for refactoring (renaming), or to show all usages of a
 |      variable.
 |      
 |      .. todo:: Implement additional_module_paths
 |      
 |      :rtype: list of :class:`classes.Definition`
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"(""(self, source=None, line=None, column=None, path=None, encoding='utf-8', sys_path=None, environment=None)"",)",path,,NoneType,arg_info
jedi,0.12.0,jedi.api.Script,api,Script,"Python Library Documentation: class Script in module jedi.api

class Script(builtins.object)
 |  A Script is the base for completions, goto or whatever you want to do with
 |  |jedi|.
 |  
 |  You can either use the ``source`` parameter or ``path`` to read a file.
 |  Usually you're going to want to use both of them (in an editor).
 |  
 |  The script might be analyzed in a different ``sys.path`` than |jedi|:
 |  
 |  - if `sys_path` parameter is not ``None``, it will be used as ``sys.path``
 |    for the script;
 |  
 |  - if `sys_path` parameter is ``None`` and ``VIRTUAL_ENV`` environment
 |    variable is defined, ``sys.path`` for the specified environment will be
 |    guessed (see :func:`jedi.evaluate.sys_path.get_venv_path`) and used for
 |    the script;
 |  
 |  - otherwise ``sys.path`` will match that of |jedi|.
 |  
 |  :param source: The source code of the current file, separated by newlines.
 |  :type source: str
 |  :param line: The line to perform actions on (starting with 1).
 |  :type line: int
 |  :param column: The column of the cursor (starting with 0).
 |  :type column: int
 |  :param path: The path of the file in the file system, or ``''`` if
 |      it hasn't been saved yet.
 |  :type path: str or None
 |  :param encoding: The encoding of ``source``, if it is not a
 |      ``unicode`` object (default ``'utf-8'``).
 |  :type encoding: str
 |  :param source_encoding: The encoding of ``source``, if it is not a
 |      ``unicode`` object (default ``'utf-8'``).
 |  :type encoding: str
 |  :param sys_path: ``sys.path`` to use during analysis of the script
 |  :type sys_path: list
 |  :param environment: TODO
 |  :type sys_path: Environment
 |  
 |  Methods defined here:
 |  
 |  __init__(self, source=None, line=None, column=None, path=None, encoding='utf-8', sys_path=None, environment=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  call_signatures(self)
 |      Return the function object of the call you're currently in.
 |      
 |      E.g. if the cursor is here::
 |      
 |          abs(# <-- cursor is here
 |      
 |      This would return the ``abs`` function. On the other hand::
 |      
 |          abs()# <-- cursor is here
 |      
 |      This would return an empty list..
 |      
 |      :rtype: list of :class:`classes.CallSignature`
 |  
 |  completions(self)
 |      Return :class:`classes.Completion` objects. Those objects contain
 |      information about the completions, more than just names.
 |      
 |      :return: Completion objects, sorted by name and __ comes last.
 |      :rtype: list of :class:`classes.Completion`
 |  
 |  goto_assignments(self, follow_imports=False)
 |      Return the first definition found, while optionally following imports.
 |      Multiple objects may be returned, because Python itself is a
 |      dynamic language, which means depending on an option you can have two
 |      different versions of a function.
 |      
 |      :rtype: list of :class:`classes.Definition`
 |  
 |  goto_definitions(self)
 |      Return the definitions of a the path under the cursor.  goto function!
 |      This follows complicated paths and returns the end, not the first
 |      definition. The big difference between :meth:`goto_assignments` and
 |      :meth:`goto_definitions` is that :meth:`goto_assignments` doesn't
 |      follow imports and statements. Multiple objects may be returned,
 |      because Python itself is a dynamic language, which means depending on
 |      an option you can have two different versions of a function.
 |      
 |      :rtype: list of :class:`classes.Definition`
 |  
 |  usages(self, additional_module_paths=())
 |      Return :class:`classes.Definition` objects, which contain all
 |      names that point to the definition of the name under the cursor. This
 |      is very useful for refactoring (renaming), or to show all usages of a
 |      variable.
 |      
 |      .. todo:: Implement additional_module_paths
 |      
 |      :rtype: list of :class:`classes.Definition`
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"(""(self, source=None, line=None, column=None, path=None, encoding='utf-8', sys_path=None, environment=None)"",)",column,,NoneType,arg_info
jedi,0.12.0,jedi.api.Script,api,Script,"Python Library Documentation: class Script in module jedi.api

class Script(builtins.object)
 |  A Script is the base for completions, goto or whatever you want to do with
 |  |jedi|.
 |  
 |  You can either use the ``source`` parameter or ``path`` to read a file.
 |  Usually you're going to want to use both of them (in an editor).
 |  
 |  The script might be analyzed in a different ``sys.path`` than |jedi|:
 |  
 |  - if `sys_path` parameter is not ``None``, it will be used as ``sys.path``
 |    for the script;
 |  
 |  - if `sys_path` parameter is ``None`` and ``VIRTUAL_ENV`` environment
 |    variable is defined, ``sys.path`` for the specified environment will be
 |    guessed (see :func:`jedi.evaluate.sys_path.get_venv_path`) and used for
 |    the script;
 |  
 |  - otherwise ``sys.path`` will match that of |jedi|.
 |  
 |  :param source: The source code of the current file, separated by newlines.
 |  :type source: str
 |  :param line: The line to perform actions on (starting with 1).
 |  :type line: int
 |  :param column: The column of the cursor (starting with 0).
 |  :type column: int
 |  :param path: The path of the file in the file system, or ``''`` if
 |      it hasn't been saved yet.
 |  :type path: str or None
 |  :param encoding: The encoding of ``source``, if it is not a
 |      ``unicode`` object (default ``'utf-8'``).
 |  :type encoding: str
 |  :param source_encoding: The encoding of ``source``, if it is not a
 |      ``unicode`` object (default ``'utf-8'``).
 |  :type encoding: str
 |  :param sys_path: ``sys.path`` to use during analysis of the script
 |  :type sys_path: list
 |  :param environment: TODO
 |  :type sys_path: Environment
 |  
 |  Methods defined here:
 |  
 |  __init__(self, source=None, line=None, column=None, path=None, encoding='utf-8', sys_path=None, environment=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  call_signatures(self)
 |      Return the function object of the call you're currently in.
 |      
 |      E.g. if the cursor is here::
 |      
 |          abs(# <-- cursor is here
 |      
 |      This would return the ``abs`` function. On the other hand::
 |      
 |          abs()# <-- cursor is here
 |      
 |      This would return an empty list..
 |      
 |      :rtype: list of :class:`classes.CallSignature`
 |  
 |  completions(self)
 |      Return :class:`classes.Completion` objects. Those objects contain
 |      information about the completions, more than just names.
 |      
 |      :return: Completion objects, sorted by name and __ comes last.
 |      :rtype: list of :class:`classes.Completion`
 |  
 |  goto_assignments(self, follow_imports=False)
 |      Return the first definition found, while optionally following imports.
 |      Multiple objects may be returned, because Python itself is a
 |      dynamic language, which means depending on an option you can have two
 |      different versions of a function.
 |      
 |      :rtype: list of :class:`classes.Definition`
 |  
 |  goto_definitions(self)
 |      Return the definitions of a the path under the cursor.  goto function!
 |      This follows complicated paths and returns the end, not the first
 |      definition. The big difference between :meth:`goto_assignments` and
 |      :meth:`goto_definitions` is that :meth:`goto_assignments` doesn't
 |      follow imports and statements. Multiple objects may be returned,
 |      because Python itself is a dynamic language, which means depending on
 |      an option you can have two different versions of a function.
 |      
 |      :rtype: list of :class:`classes.Definition`
 |  
 |  usages(self, additional_module_paths=())
 |      Return :class:`classes.Definition` objects, which contain all
 |      names that point to the definition of the name under the cursor. This
 |      is very useful for refactoring (renaming), or to show all usages of a
 |      variable.
 |      
 |      .. todo:: Implement additional_module_paths
 |      
 |      :rtype: list of :class:`classes.Definition`
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"(""(self, source=None, line=None, column=None, path=None, encoding='utf-8', sys_path=None, environment=None)"",)",line,,NoneType,arg_info
jedi,0.12.0,jedi.api.Script,api,Script,"Python Library Documentation: class Script in module jedi.api

class Script(builtins.object)
 |  A Script is the base for completions, goto or whatever you want to do with
 |  |jedi|.
 |  
 |  You can either use the ``source`` parameter or ``path`` to read a file.
 |  Usually you're going to want to use both of them (in an editor).
 |  
 |  The script might be analyzed in a different ``sys.path`` than |jedi|:
 |  
 |  - if `sys_path` parameter is not ``None``, it will be used as ``sys.path``
 |    for the script;
 |  
 |  - if `sys_path` parameter is ``None`` and ``VIRTUAL_ENV`` environment
 |    variable is defined, ``sys.path`` for the specified environment will be
 |    guessed (see :func:`jedi.evaluate.sys_path.get_venv_path`) and used for
 |    the script;
 |  
 |  - otherwise ``sys.path`` will match that of |jedi|.
 |  
 |  :param source: The source code of the current file, separated by newlines.
 |  :type source: str
 |  :param line: The line to perform actions on (starting with 1).
 |  :type line: int
 |  :param column: The column of the cursor (starting with 0).
 |  :type column: int
 |  :param path: The path of the file in the file system, or ``''`` if
 |      it hasn't been saved yet.
 |  :type path: str or None
 |  :param encoding: The encoding of ``source``, if it is not a
 |      ``unicode`` object (default ``'utf-8'``).
 |  :type encoding: str
 |  :param source_encoding: The encoding of ``source``, if it is not a
 |      ``unicode`` object (default ``'utf-8'``).
 |  :type encoding: str
 |  :param sys_path: ``sys.path`` to use during analysis of the script
 |  :type sys_path: list
 |  :param environment: TODO
 |  :type sys_path: Environment
 |  
 |  Methods defined here:
 |  
 |  __init__(self, source=None, line=None, column=None, path=None, encoding='utf-8', sys_path=None, environment=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  call_signatures(self)
 |      Return the function object of the call you're currently in.
 |      
 |      E.g. if the cursor is here::
 |      
 |          abs(# <-- cursor is here
 |      
 |      This would return the ``abs`` function. On the other hand::
 |      
 |          abs()# <-- cursor is here
 |      
 |      This would return an empty list..
 |      
 |      :rtype: list of :class:`classes.CallSignature`
 |  
 |  completions(self)
 |      Return :class:`classes.Completion` objects. Those objects contain
 |      information about the completions, more than just names.
 |      
 |      :return: Completion objects, sorted by name and __ comes last.
 |      :rtype: list of :class:`classes.Completion`
 |  
 |  goto_assignments(self, follow_imports=False)
 |      Return the first definition found, while optionally following imports.
 |      Multiple objects may be returned, because Python itself is a
 |      dynamic language, which means depending on an option you can have two
 |      different versions of a function.
 |      
 |      :rtype: list of :class:`classes.Definition`
 |  
 |  goto_definitions(self)
 |      Return the definitions of a the path under the cursor.  goto function!
 |      This follows complicated paths and returns the end, not the first
 |      definition. The big difference between :meth:`goto_assignments` and
 |      :meth:`goto_definitions` is that :meth:`goto_assignments` doesn't
 |      follow imports and statements. Multiple objects may be returned,
 |      because Python itself is a dynamic language, which means depending on
 |      an option you can have two different versions of a function.
 |      
 |      :rtype: list of :class:`classes.Definition`
 |  
 |  usages(self, additional_module_paths=())
 |      Return :class:`classes.Definition` objects, which contain all
 |      names that point to the definition of the name under the cursor. This
 |      is very useful for refactoring (renaming), or to show all usages of a
 |      variable.
 |      
 |      .. todo:: Implement additional_module_paths
 |      
 |      :rtype: list of :class:`classes.Definition`
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"(""(self, source=None, line=None, column=None, path=None, encoding='utf-8', sys_path=None, environment=None)"",)",environment,,NoneType,arg_info
jedi,0.12.0,jedi.api.Script,api,Script,"Python Library Documentation: class Script in module jedi.api

class Script(builtins.object)
 |  A Script is the base for completions, goto or whatever you want to do with
 |  |jedi|.
 |  
 |  You can either use the ``source`` parameter or ``path`` to read a file.
 |  Usually you're going to want to use both of them (in an editor).
 |  
 |  The script might be analyzed in a different ``sys.path`` than |jedi|:
 |  
 |  - if `sys_path` parameter is not ``None``, it will be used as ``sys.path``
 |    for the script;
 |  
 |  - if `sys_path` parameter is ``None`` and ``VIRTUAL_ENV`` environment
 |    variable is defined, ``sys.path`` for the specified environment will be
 |    guessed (see :func:`jedi.evaluate.sys_path.get_venv_path`) and used for
 |    the script;
 |  
 |  - otherwise ``sys.path`` will match that of |jedi|.
 |  
 |  :param source: The source code of the current file, separated by newlines.
 |  :type source: str
 |  :param line: The line to perform actions on (starting with 1).
 |  :type line: int
 |  :param column: The column of the cursor (starting with 0).
 |  :type column: int
 |  :param path: The path of the file in the file system, or ``''`` if
 |      it hasn't been saved yet.
 |  :type path: str or None
 |  :param encoding: The encoding of ``source``, if it is not a
 |      ``unicode`` object (default ``'utf-8'``).
 |  :type encoding: str
 |  :param source_encoding: The encoding of ``source``, if it is not a
 |      ``unicode`` object (default ``'utf-8'``).
 |  :type encoding: str
 |  :param sys_path: ``sys.path`` to use during analysis of the script
 |  :type sys_path: list
 |  :param environment: TODO
 |  :type sys_path: Environment
 |  
 |  Methods defined here:
 |  
 |  __init__(self, source=None, line=None, column=None, path=None, encoding='utf-8', sys_path=None, environment=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  call_signatures(self)
 |      Return the function object of the call you're currently in.
 |      
 |      E.g. if the cursor is here::
 |      
 |          abs(# <-- cursor is here
 |      
 |      This would return the ``abs`` function. On the other hand::
 |      
 |          abs()# <-- cursor is here
 |      
 |      This would return an empty list..
 |      
 |      :rtype: list of :class:`classes.CallSignature`
 |  
 |  completions(self)
 |      Return :class:`classes.Completion` objects. Those objects contain
 |      information about the completions, more than just names.
 |      
 |      :return: Completion objects, sorted by name and __ comes last.
 |      :rtype: list of :class:`classes.Completion`
 |  
 |  goto_assignments(self, follow_imports=False)
 |      Return the first definition found, while optionally following imports.
 |      Multiple objects may be returned, because Python itself is a
 |      dynamic language, which means depending on an option you can have two
 |      different versions of a function.
 |      
 |      :rtype: list of :class:`classes.Definition`
 |  
 |  goto_definitions(self)
 |      Return the definitions of a the path under the cursor.  goto function!
 |      This follows complicated paths and returns the end, not the first
 |      definition. The big difference between :meth:`goto_assignments` and
 |      :meth:`goto_definitions` is that :meth:`goto_assignments` doesn't
 |      follow imports and statements. Multiple objects may be returned,
 |      because Python itself is a dynamic language, which means depending on
 |      an option you can have two different versions of a function.
 |      
 |      :rtype: list of :class:`classes.Definition`
 |  
 |  usages(self, additional_module_paths=())
 |      Return :class:`classes.Definition` objects, which contain all
 |      names that point to the definition of the name under the cursor. This
 |      is very useful for refactoring (renaming), or to show all usages of a
 |      variable.
 |      
 |      .. todo:: Implement additional_module_paths
 |      
 |      :rtype: list of :class:`classes.Definition`
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"(""(self, source=None, line=None, column=None, path=None, encoding='utf-8', sys_path=None, environment=None)"",)",self,,,arg_info
jedi,0.12.0,jedi.api.Script,api,Script,"Python Library Documentation: class Script in module jedi.api

class Script(builtins.object)
 |  A Script is the base for completions, goto or whatever you want to do with
 |  |jedi|.
 |  
 |  You can either use the ``source`` parameter or ``path`` to read a file.
 |  Usually you're going to want to use both of them (in an editor).
 |  
 |  The script might be analyzed in a different ``sys.path`` than |jedi|:
 |  
 |  - if `sys_path` parameter is not ``None``, it will be used as ``sys.path``
 |    for the script;
 |  
 |  - if `sys_path` parameter is ``None`` and ``VIRTUAL_ENV`` environment
 |    variable is defined, ``sys.path`` for the specified environment will be
 |    guessed (see :func:`jedi.evaluate.sys_path.get_venv_path`) and used for
 |    the script;
 |  
 |  - otherwise ``sys.path`` will match that of |jedi|.
 |  
 |  :param source: The source code of the current file, separated by newlines.
 |  :type source: str
 |  :param line: The line to perform actions on (starting with 1).
 |  :type line: int
 |  :param column: The column of the cursor (starting with 0).
 |  :type column: int
 |  :param path: The path of the file in the file system, or ``''`` if
 |      it hasn't been saved yet.
 |  :type path: str or None
 |  :param encoding: The encoding of ``source``, if it is not a
 |      ``unicode`` object (default ``'utf-8'``).
 |  :type encoding: str
 |  :param source_encoding: The encoding of ``source``, if it is not a
 |      ``unicode`` object (default ``'utf-8'``).
 |  :type encoding: str
 |  :param sys_path: ``sys.path`` to use during analysis of the script
 |  :type sys_path: list
 |  :param environment: TODO
 |  :type sys_path: Environment
 |  
 |  Methods defined here:
 |  
 |  __init__(self, source=None, line=None, column=None, path=None, encoding='utf-8', sys_path=None, environment=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  call_signatures(self)
 |      Return the function object of the call you're currently in.
 |      
 |      E.g. if the cursor is here::
 |      
 |          abs(# <-- cursor is here
 |      
 |      This would return the ``abs`` function. On the other hand::
 |      
 |          abs()# <-- cursor is here
 |      
 |      This would return an empty list..
 |      
 |      :rtype: list of :class:`classes.CallSignature`
 |  
 |  completions(self)
 |      Return :class:`classes.Completion` objects. Those objects contain
 |      information about the completions, more than just names.
 |      
 |      :return: Completion objects, sorted by name and __ comes last.
 |      :rtype: list of :class:`classes.Completion`
 |  
 |  goto_assignments(self, follow_imports=False)
 |      Return the first definition found, while optionally following imports.
 |      Multiple objects may be returned, because Python itself is a
 |      dynamic language, which means depending on an option you can have two
 |      different versions of a function.
 |      
 |      :rtype: list of :class:`classes.Definition`
 |  
 |  goto_definitions(self)
 |      Return the definitions of a the path under the cursor.  goto function!
 |      This follows complicated paths and returns the end, not the first
 |      definition. The big difference between :meth:`goto_assignments` and
 |      :meth:`goto_definitions` is that :meth:`goto_assignments` doesn't
 |      follow imports and statements. Multiple objects may be returned,
 |      because Python itself is a dynamic language, which means depending on
 |      an option you can have two different versions of a function.
 |      
 |      :rtype: list of :class:`classes.Definition`
 |  
 |  usages(self, additional_module_paths=())
 |      Return :class:`classes.Definition` objects, which contain all
 |      names that point to the definition of the name under the cursor. This
 |      is very useful for refactoring (renaming), or to show all usages of a
 |      variable.
 |      
 |      .. todo:: Implement additional_module_paths
 |      
 |      :rtype: list of :class:`classes.Definition`
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"(""(self, source=None, line=None, column=None, path=None, encoding='utf-8', sys_path=None, environment=None)"",)",sys_path,,NoneType,arg_info
jedi,0.12.0,jedi.api.Script,api,Script,"Python Library Documentation: class Script in module jedi.api

class Script(builtins.object)
 |  A Script is the base for completions, goto or whatever you want to do with
 |  |jedi|.
 |  
 |  You can either use the ``source`` parameter or ``path`` to read a file.
 |  Usually you're going to want to use both of them (in an editor).
 |  
 |  The script might be analyzed in a different ``sys.path`` than |jedi|:
 |  
 |  - if `sys_path` parameter is not ``None``, it will be used as ``sys.path``
 |    for the script;
 |  
 |  - if `sys_path` parameter is ``None`` and ``VIRTUAL_ENV`` environment
 |    variable is defined, ``sys.path`` for the specified environment will be
 |    guessed (see :func:`jedi.evaluate.sys_path.get_venv_path`) and used for
 |    the script;
 |  
 |  - otherwise ``sys.path`` will match that of |jedi|.
 |  
 |  :param source: The source code of the current file, separated by newlines.
 |  :type source: str
 |  :param line: The line to perform actions on (starting with 1).
 |  :type line: int
 |  :param column: The column of the cursor (starting with 0).
 |  :type column: int
 |  :param path: The path of the file in the file system, or ``''`` if
 |      it hasn't been saved yet.
 |  :type path: str or None
 |  :param encoding: The encoding of ``source``, if it is not a
 |      ``unicode`` object (default ``'utf-8'``).
 |  :type encoding: str
 |  :param source_encoding: The encoding of ``source``, if it is not a
 |      ``unicode`` object (default ``'utf-8'``).
 |  :type encoding: str
 |  :param sys_path: ``sys.path`` to use during analysis of the script
 |  :type sys_path: list
 |  :param environment: TODO
 |  :type sys_path: Environment
 |  
 |  Methods defined here:
 |  
 |  __init__(self, source=None, line=None, column=None, path=None, encoding='utf-8', sys_path=None, environment=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  call_signatures(self)
 |      Return the function object of the call you're currently in.
 |      
 |      E.g. if the cursor is here::
 |      
 |          abs(# <-- cursor is here
 |      
 |      This would return the ``abs`` function. On the other hand::
 |      
 |          abs()# <-- cursor is here
 |      
 |      This would return an empty list..
 |      
 |      :rtype: list of :class:`classes.CallSignature`
 |  
 |  completions(self)
 |      Return :class:`classes.Completion` objects. Those objects contain
 |      information about the completions, more than just names.
 |      
 |      :return: Completion objects, sorted by name and __ comes last.
 |      :rtype: list of :class:`classes.Completion`
 |  
 |  goto_assignments(self, follow_imports=False)
 |      Return the first definition found, while optionally following imports.
 |      Multiple objects may be returned, because Python itself is a
 |      dynamic language, which means depending on an option you can have two
 |      different versions of a function.
 |      
 |      :rtype: list of :class:`classes.Definition`
 |  
 |  goto_definitions(self)
 |      Return the definitions of a the path under the cursor.  goto function!
 |      This follows complicated paths and returns the end, not the first
 |      definition. The big difference between :meth:`goto_assignments` and
 |      :meth:`goto_definitions` is that :meth:`goto_assignments` doesn't
 |      follow imports and statements. Multiple objects may be returned,
 |      because Python itself is a dynamic language, which means depending on
 |      an option you can have two different versions of a function.
 |      
 |      :rtype: list of :class:`classes.Definition`
 |  
 |  usages(self, additional_module_paths=())
 |      Return :class:`classes.Definition` objects, which contain all
 |      names that point to the definition of the name under the cursor. This
 |      is very useful for refactoring (renaming), or to show all usages of a
 |      variable.
 |      
 |      .. todo:: Implement additional_module_paths
 |      
 |      :rtype: list of :class:`classes.Definition`
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"(""(self, source=None, line=None, column=None, path=None, encoding='utf-8', sys_path=None, environment=None)"",)",source,,NoneType,arg_info
jedi,0.12.0,jedi.api.TreeNameDefinition,api,TreeNameDefinition,"Python Library Documentation: class TreeNameDefinition in module jedi.evaluate.filters

class TreeNameDefinition(AbstractTreeName)
 |  Method resolution order:
 |      TreeNameDefinition
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.api.TreeNameDefinition,api,TreeNameDefinition,"Python Library Documentation: class TreeNameDefinition in module jedi.evaluate.filters

class TreeNameDefinition(AbstractTreeName)
 |  Method resolution order:
 |      TreeNameDefinition
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",tree_name,,,arg_info
jedi,0.12.0,jedi.api.TreeNameDefinition,api,TreeNameDefinition,"Python Library Documentation: class TreeNameDefinition in module jedi.evaluate.filters

class TreeNameDefinition(AbstractTreeName)
 |  Method resolution order:
 |      TreeNameDefinition
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",self,,,arg_info
jedi,0.12.0,jedi.api.classes.BaseDefinition,api.classes,BaseDefinition,"Python Library Documentation: class BaseDefinition in module jedi.api.classes

class BaseDefinition(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  docstring(self, raw=False, fast=True)
 |      Return a document string for this completion object.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''\
 |      ... def f(a, b=1):
 |      ...     ""Document for function f.""
 |      ... '''
 |      >>> script = Script(source, 1, len('def f'), 'example.py')
 |      >>> doc = script.goto_definitions()[0].docstring()
 |      >>> print(doc)
 |      f(a, b=1)
 |      <BLANKLINE>
 |      Document for function f.
 |      
 |      Notice that useful extra information is added to the actual
 |      docstring.  For function, it is call signature.  If you need
 |      actual docstring, use ``raw=True`` instead.
 |      
 |      >>> print(script.goto_definitions()[0].docstring(raw=True))
 |      Document for function f.
 |      
 |      :param fast: Don't follow imports that are only one level deep like
 |          ``import foo``, but follow ``from foo import bar``. This makes
 |          sense for speed reasons. Completing `import a` is slow if you use
 |          the ``foo.docstring(fast=False)`` on every object, because it
 |          parses all libraries starting with ``a``.
 |  
 |  get_line_code(self, before=0, after=0)
 |      Returns the line of code where this object was defined.
 |      
 |      :param before: Add n lines before the current line to the output.
 |      :param after: Add n lines after the current line to the output.
 |      
 |      :return str: Returns the line(s) of code or an empty string if it's a
 |                   builtin.
 |  
 |  goto_assignments(self)
 |  
 |  in_builtin_module(self)
 |      Whether this is a builtin module.
 |  
 |  parent(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  column
 |      The column where the definition occurs (starting with 0).
 |  
 |  description
 |      A textual description of the object.
 |  
 |  full_name
 |      Dot-separated path of this object.
 |      
 |      It is in the form of ``<module>[.<submodule>[...]][.<object>]``.
 |      It is useful when you want to look up Python manual of the
 |      object at hand.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... import os
 |      ... os.path.join'''
 |      >>> script = Script(source, 3, len('os.path.join'), 'example.py')
 |      >>> print(script.goto_definitions()[0].full_name)
 |      os.path.join
 |      
 |      Notice that it returns ``'os.path.join'`` instead of (for example)
 |      ``'posixpath.join'``. This is not correct, since the modules name would
 |      be ``<module 'posixpath' ...>```. However most users find the latter
 |      more practical.
 |  
 |  line
 |      The line where the definition occurs (starting with 1).
 |  
 |  module_name
 |      The module name.
 |      
 |      >>> from jedi import Script
 |      >>> source = 'import json'
 |      >>> script = Script(source, path='example.py')
 |      >>> d = script.goto_definitions()[0]
 |      >>> print(d.module_name)                       # doctest: +ELLIPSIS
 |      json
 |  
 |  name
 |      Name of variable/function/class/module.
 |      
 |      For example, for ``x = None`` it returns ``'x'``.
 |      
 |      :rtype: str or None
 |  
 |  params
 |      Raises an ``AttributeError``if the definition is not callable.
 |      Otherwise returns a list of `Definition` that represents the params.
 |  
 |  type
 |      The type of the definition.
 |      
 |      Here is an example of the value of this attribute.  Let's consider
 |      the following source.  As what is in ``variable`` is unambiguous
 |      to Jedi, :meth:`jedi.Script.goto_definitions` should return a list of
 |      definition for ``sys``, ``f``, ``C`` and ``x``.
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... import keyword
 |      ...
 |      ... class C:
 |      ...     pass
 |      ...
 |      ... class D:
 |      ...     pass
 |      ...
 |      ... x = D()
 |      ...
 |      ... def f():
 |      ...     pass
 |      ...
 |      ... for variable in [keyword, f, C, x]:
 |      ...     variable'''
 |      
 |      >>> script = Script(source)
 |      >>> defs = script.goto_definitions()
 |      
 |      Before showing what is in ``defs``, let's sort it by :attr:`line`
 |      so that it is easy to relate the result to the source code.
 |      
 |      >>> defs = sorted(defs, key=lambda d: d.line)
 |      >>> defs                           # doctest: +NORMALIZE_WHITESPACE
 |      [<Definition module keyword>, <Definition class C>,
 |       <Definition instance D>, <Definition def f>]
 |      
 |      Finally, here is what you can get from :attr:`type`:
 |      
 |      >>> defs = [str(d.type) for d in defs]  # It's unicode and in Py2 has u before it.
 |      >>> defs[0]
 |      'module'
 |      >>> defs[1]
 |      'class'
 |      >>> defs[2]
 |      'instance'
 |      >>> defs[3]
 |      'function'
",class,"('(self, evaluator, name)',)",self,,,arg_info
jedi,0.12.0,jedi.api.classes.BaseDefinition,api.classes,BaseDefinition,"Python Library Documentation: class BaseDefinition in module jedi.api.classes

class BaseDefinition(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  docstring(self, raw=False, fast=True)
 |      Return a document string for this completion object.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''\
 |      ... def f(a, b=1):
 |      ...     ""Document for function f.""
 |      ... '''
 |      >>> script = Script(source, 1, len('def f'), 'example.py')
 |      >>> doc = script.goto_definitions()[0].docstring()
 |      >>> print(doc)
 |      f(a, b=1)
 |      <BLANKLINE>
 |      Document for function f.
 |      
 |      Notice that useful extra information is added to the actual
 |      docstring.  For function, it is call signature.  If you need
 |      actual docstring, use ``raw=True`` instead.
 |      
 |      >>> print(script.goto_definitions()[0].docstring(raw=True))
 |      Document for function f.
 |      
 |      :param fast: Don't follow imports that are only one level deep like
 |          ``import foo``, but follow ``from foo import bar``. This makes
 |          sense for speed reasons. Completing `import a` is slow if you use
 |          the ``foo.docstring(fast=False)`` on every object, because it
 |          parses all libraries starting with ``a``.
 |  
 |  get_line_code(self, before=0, after=0)
 |      Returns the line of code where this object was defined.
 |      
 |      :param before: Add n lines before the current line to the output.
 |      :param after: Add n lines after the current line to the output.
 |      
 |      :return str: Returns the line(s) of code or an empty string if it's a
 |                   builtin.
 |  
 |  goto_assignments(self)
 |  
 |  in_builtin_module(self)
 |      Whether this is a builtin module.
 |  
 |  parent(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  column
 |      The column where the definition occurs (starting with 0).
 |  
 |  description
 |      A textual description of the object.
 |  
 |  full_name
 |      Dot-separated path of this object.
 |      
 |      It is in the form of ``<module>[.<submodule>[...]][.<object>]``.
 |      It is useful when you want to look up Python manual of the
 |      object at hand.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... import os
 |      ... os.path.join'''
 |      >>> script = Script(source, 3, len('os.path.join'), 'example.py')
 |      >>> print(script.goto_definitions()[0].full_name)
 |      os.path.join
 |      
 |      Notice that it returns ``'os.path.join'`` instead of (for example)
 |      ``'posixpath.join'``. This is not correct, since the modules name would
 |      be ``<module 'posixpath' ...>```. However most users find the latter
 |      more practical.
 |  
 |  line
 |      The line where the definition occurs (starting with 1).
 |  
 |  module_name
 |      The module name.
 |      
 |      >>> from jedi import Script
 |      >>> source = 'import json'
 |      >>> script = Script(source, path='example.py')
 |      >>> d = script.goto_definitions()[0]
 |      >>> print(d.module_name)                       # doctest: +ELLIPSIS
 |      json
 |  
 |  name
 |      Name of variable/function/class/module.
 |      
 |      For example, for ``x = None`` it returns ``'x'``.
 |      
 |      :rtype: str or None
 |  
 |  params
 |      Raises an ``AttributeError``if the definition is not callable.
 |      Otherwise returns a list of `Definition` that represents the params.
 |  
 |  type
 |      The type of the definition.
 |      
 |      Here is an example of the value of this attribute.  Let's consider
 |      the following source.  As what is in ``variable`` is unambiguous
 |      to Jedi, :meth:`jedi.Script.goto_definitions` should return a list of
 |      definition for ``sys``, ``f``, ``C`` and ``x``.
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... import keyword
 |      ...
 |      ... class C:
 |      ...     pass
 |      ...
 |      ... class D:
 |      ...     pass
 |      ...
 |      ... x = D()
 |      ...
 |      ... def f():
 |      ...     pass
 |      ...
 |      ... for variable in [keyword, f, C, x]:
 |      ...     variable'''
 |      
 |      >>> script = Script(source)
 |      >>> defs = script.goto_definitions()
 |      
 |      Before showing what is in ``defs``, let's sort it by :attr:`line`
 |      so that it is easy to relate the result to the source code.
 |      
 |      >>> defs = sorted(defs, key=lambda d: d.line)
 |      >>> defs                           # doctest: +NORMALIZE_WHITESPACE
 |      [<Definition module keyword>, <Definition class C>,
 |       <Definition instance D>, <Definition def f>]
 |      
 |      Finally, here is what you can get from :attr:`type`:
 |      
 |      >>> defs = [str(d.type) for d in defs]  # It's unicode and in Py2 has u before it.
 |      >>> defs[0]
 |      'module'
 |      >>> defs[1]
 |      'class'
 |      >>> defs[2]
 |      'instance'
 |      >>> defs[3]
 |      'function'
",class,"('(self, evaluator, name)',)",name,,,arg_info
jedi,0.12.0,jedi.api.classes.BaseDefinition,api.classes,BaseDefinition,"Python Library Documentation: class BaseDefinition in module jedi.api.classes

class BaseDefinition(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  docstring(self, raw=False, fast=True)
 |      Return a document string for this completion object.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''\
 |      ... def f(a, b=1):
 |      ...     ""Document for function f.""
 |      ... '''
 |      >>> script = Script(source, 1, len('def f'), 'example.py')
 |      >>> doc = script.goto_definitions()[0].docstring()
 |      >>> print(doc)
 |      f(a, b=1)
 |      <BLANKLINE>
 |      Document for function f.
 |      
 |      Notice that useful extra information is added to the actual
 |      docstring.  For function, it is call signature.  If you need
 |      actual docstring, use ``raw=True`` instead.
 |      
 |      >>> print(script.goto_definitions()[0].docstring(raw=True))
 |      Document for function f.
 |      
 |      :param fast: Don't follow imports that are only one level deep like
 |          ``import foo``, but follow ``from foo import bar``. This makes
 |          sense for speed reasons. Completing `import a` is slow if you use
 |          the ``foo.docstring(fast=False)`` on every object, because it
 |          parses all libraries starting with ``a``.
 |  
 |  get_line_code(self, before=0, after=0)
 |      Returns the line of code where this object was defined.
 |      
 |      :param before: Add n lines before the current line to the output.
 |      :param after: Add n lines after the current line to the output.
 |      
 |      :return str: Returns the line(s) of code or an empty string if it's a
 |                   builtin.
 |  
 |  goto_assignments(self)
 |  
 |  in_builtin_module(self)
 |      Whether this is a builtin module.
 |  
 |  parent(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  column
 |      The column where the definition occurs (starting with 0).
 |  
 |  description
 |      A textual description of the object.
 |  
 |  full_name
 |      Dot-separated path of this object.
 |      
 |      It is in the form of ``<module>[.<submodule>[...]][.<object>]``.
 |      It is useful when you want to look up Python manual of the
 |      object at hand.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... import os
 |      ... os.path.join'''
 |      >>> script = Script(source, 3, len('os.path.join'), 'example.py')
 |      >>> print(script.goto_definitions()[0].full_name)
 |      os.path.join
 |      
 |      Notice that it returns ``'os.path.join'`` instead of (for example)
 |      ``'posixpath.join'``. This is not correct, since the modules name would
 |      be ``<module 'posixpath' ...>```. However most users find the latter
 |      more practical.
 |  
 |  line
 |      The line where the definition occurs (starting with 1).
 |  
 |  module_name
 |      The module name.
 |      
 |      >>> from jedi import Script
 |      >>> source = 'import json'
 |      >>> script = Script(source, path='example.py')
 |      >>> d = script.goto_definitions()[0]
 |      >>> print(d.module_name)                       # doctest: +ELLIPSIS
 |      json
 |  
 |  name
 |      Name of variable/function/class/module.
 |      
 |      For example, for ``x = None`` it returns ``'x'``.
 |      
 |      :rtype: str or None
 |  
 |  params
 |      Raises an ``AttributeError``if the definition is not callable.
 |      Otherwise returns a list of `Definition` that represents the params.
 |  
 |  type
 |      The type of the definition.
 |      
 |      Here is an example of the value of this attribute.  Let's consider
 |      the following source.  As what is in ``variable`` is unambiguous
 |      to Jedi, :meth:`jedi.Script.goto_definitions` should return a list of
 |      definition for ``sys``, ``f``, ``C`` and ``x``.
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... import keyword
 |      ...
 |      ... class C:
 |      ...     pass
 |      ...
 |      ... class D:
 |      ...     pass
 |      ...
 |      ... x = D()
 |      ...
 |      ... def f():
 |      ...     pass
 |      ...
 |      ... for variable in [keyword, f, C, x]:
 |      ...     variable'''
 |      
 |      >>> script = Script(source)
 |      >>> defs = script.goto_definitions()
 |      
 |      Before showing what is in ``defs``, let's sort it by :attr:`line`
 |      so that it is easy to relate the result to the source code.
 |      
 |      >>> defs = sorted(defs, key=lambda d: d.line)
 |      >>> defs                           # doctest: +NORMALIZE_WHITESPACE
 |      [<Definition module keyword>, <Definition class C>,
 |       <Definition instance D>, <Definition def f>]
 |      
 |      Finally, here is what you can get from :attr:`type`:
 |      
 |      >>> defs = [str(d.type) for d in defs]  # It's unicode and in Py2 has u before it.
 |      >>> defs[0]
 |      'module'
 |      >>> defs[1]
 |      'class'
 |      >>> defs[2]
 |      'instance'
 |      >>> defs[3]
 |      'function'
",class,"('(self, evaluator, name)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.api.classes.CallSignature,api.classes,CallSignature,"Python Library Documentation: class CallSignature in module jedi.api.classes

class CallSignature(Definition)
 |  `CallSignature` objects is the return value of `Script.function_definition`.
 |  It knows what functions you are currently in. e.g. `isinstance(` would
 |  return the `isinstance` function. without `(` it would return nothing.
 |  
 |  Method resolution order:
 |      CallSignature
 |      Definition
 |      BaseDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, executable_name, bracket_start_pos, index, key_name_str)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  bracket_start
 |      The indent of the bracket that is responsible for the last function
 |      call.
 |  
 |  index
 |      The Param index of the current call.
 |      Returns None if the index cannot be found in the curent call.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Definition:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __ne__(self, other)
 |      Return self!=value.
 |  
 |  defined_names(self)
 |      List sub-definitions (e.g., methods in class).
 |      
 |      :rtype: list of Definition
 |  
 |  is_definition(self)
 |      Returns True, if defined as a name in a statement, function or class.
 |      Returns False, if it's a reference to such a definition.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Definition:
 |  
 |  desc_with_module
 |      In addition to the definition, also return the module.
 |      
 |      .. warning:: Don't use this function yet, its behaviour may change. If
 |          you really need it, talk to me.
 |      
 |      .. todo:: Add full path. This function is should return a
 |          `module.class.function` path.
 |  
 |  description
 |      A description of the :class:`.Definition` object, which is heavily used
 |      in testing. e.g. for ``isinstance`` it returns ``def isinstance``.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... def f():
 |      ...     pass
 |      ...
 |      ... class C:
 |      ...     pass
 |      ...
 |      ... variable = f if random.choice([0,1]) else C'''
 |      >>> script = Script(source, column=3)  # line is maximum by default
 |      >>> defs = script.goto_definitions()
 |      >>> defs = sorted(defs, key=lambda d: d.line)
 |      >>> defs
 |      [<Definition def f>, <Definition class C>]
 |      >>> str(defs[0].description)  # strip literals in python2
 |      'def f'
 |      >>> str(defs[1].description)
 |      'class C'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from BaseDefinition:
 |  
 |  docstring(self, raw=False, fast=True)
 |      Return a document string for this completion object.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''\
 |      ... def f(a, b=1):
 |      ...     ""Document for function f.""
 |      ... '''
 |      >>> script = Script(source, 1, len('def f'), 'example.py')
 |      >>> doc = script.goto_definitions()[0].docstring()
 |      >>> print(doc)
 |      f(a, b=1)
 |      <BLANKLINE>
 |      Document for function f.
 |      
 |      Notice that useful extra information is added to the actual
 |      docstring.  For function, it is call signature.  If you need
 |      actual docstring, use ``raw=True`` instead.
 |      
 |      >>> print(script.goto_definitions()[0].docstring(raw=True))
 |      Document for function f.
 |      
 |      :param fast: Don't follow imports that are only one level deep like
 |          ``import foo``, but follow ``from foo import bar``. This makes
 |          sense for speed reasons. Completing `import a` is slow if you use
 |          the ``foo.docstring(fast=False)`` on every object, because it
 |          parses all libraries starting with ``a``.
 |  
 |  get_line_code(self, before=0, after=0)
 |      Returns the line of code where this object was defined.
 |      
 |      :param before: Add n lines before the current line to the output.
 |      :param after: Add n lines after the current line to the output.
 |      
 |      :return str: Returns the line(s) of code or an empty string if it's a
 |                   builtin.
 |  
 |  goto_assignments(self)
 |  
 |  in_builtin_module(self)
 |      Whether this is a builtin module.
 |  
 |  parent(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from BaseDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  column
 |      The column where the definition occurs (starting with 0).
 |  
 |  full_name
 |      Dot-separated path of this object.
 |      
 |      It is in the form of ``<module>[.<submodule>[...]][.<object>]``.
 |      It is useful when you want to look up Python manual of the
 |      object at hand.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... import os
 |      ... os.path.join'''
 |      >>> script = Script(source, 3, len('os.path.join'), 'example.py')
 |      >>> print(script.goto_definitions()[0].full_name)
 |      os.path.join
 |      
 |      Notice that it returns ``'os.path.join'`` instead of (for example)
 |      ``'posixpath.join'``. This is not correct, since the modules name would
 |      be ``<module 'posixpath' ...>```. However most users find the latter
 |      more practical.
 |  
 |  line
 |      The line where the definition occurs (starting with 1).
 |  
 |  module_name
 |      The module name.
 |      
 |      >>> from jedi import Script
 |      >>> source = 'import json'
 |      >>> script = Script(source, path='example.py')
 |      >>> d = script.goto_definitions()[0]
 |      >>> print(d.module_name)                       # doctest: +ELLIPSIS
 |      json
 |  
 |  name
 |      Name of variable/function/class/module.
 |      
 |      For example, for ``x = None`` it returns ``'x'``.
 |      
 |      :rtype: str or None
 |  
 |  params
 |      Raises an ``AttributeError``if the definition is not callable.
 |      Otherwise returns a list of `Definition` that represents the params.
 |  
 |  type
 |      The type of the definition.
 |      
 |      Here is an example of the value of this attribute.  Let's consider
 |      the following source.  As what is in ``variable`` is unambiguous
 |      to Jedi, :meth:`jedi.Script.goto_definitions` should return a list of
 |      definition for ``sys``, ``f``, ``C`` and ``x``.
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... import keyword
 |      ...
 |      ... class C:
 |      ...     pass
 |      ...
 |      ... class D:
 |      ...     pass
 |      ...
 |      ... x = D()
 |      ...
 |      ... def f():
 |      ...     pass
 |      ...
 |      ... for variable in [keyword, f, C, x]:
 |      ...     variable'''
 |      
 |      >>> script = Script(source)
 |      >>> defs = script.goto_definitions()
 |      
 |      Before showing what is in ``defs``, let's sort it by :attr:`line`
 |      so that it is easy to relate the result to the source code.
 |      
 |      >>> defs = sorted(defs, key=lambda d: d.line)
 |      >>> defs                           # doctest: +NORMALIZE_WHITESPACE
 |      [<Definition module keyword>, <Definition class C>,
 |       <Definition instance D>, <Definition def f>]
 |      
 |      Finally, here is what you can get from :attr:`type`:
 |      
 |      >>> defs = [str(d.type) for d in defs]  # It's unicode and in Py2 has u before it.
 |      >>> defs[0]
 |      'module'
 |      >>> defs[1]
 |      'class'
 |      >>> defs[2]
 |      'instance'
 |      >>> defs[3]
 |      'function'
",class,"('(self, evaluator, executable_name, bracket_start_pos, index, key_name_str)',)",self,,,arg_info
jedi,0.12.0,jedi.api.classes.CallSignature,api.classes,CallSignature,"Python Library Documentation: class CallSignature in module jedi.api.classes

class CallSignature(Definition)
 |  `CallSignature` objects is the return value of `Script.function_definition`.
 |  It knows what functions you are currently in. e.g. `isinstance(` would
 |  return the `isinstance` function. without `(` it would return nothing.
 |  
 |  Method resolution order:
 |      CallSignature
 |      Definition
 |      BaseDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, executable_name, bracket_start_pos, index, key_name_str)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  bracket_start
 |      The indent of the bracket that is responsible for the last function
 |      call.
 |  
 |  index
 |      The Param index of the current call.
 |      Returns None if the index cannot be found in the curent call.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Definition:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __ne__(self, other)
 |      Return self!=value.
 |  
 |  defined_names(self)
 |      List sub-definitions (e.g., methods in class).
 |      
 |      :rtype: list of Definition
 |  
 |  is_definition(self)
 |      Returns True, if defined as a name in a statement, function or class.
 |      Returns False, if it's a reference to such a definition.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Definition:
 |  
 |  desc_with_module
 |      In addition to the definition, also return the module.
 |      
 |      .. warning:: Don't use this function yet, its behaviour may change. If
 |          you really need it, talk to me.
 |      
 |      .. todo:: Add full path. This function is should return a
 |          `module.class.function` path.
 |  
 |  description
 |      A description of the :class:`.Definition` object, which is heavily used
 |      in testing. e.g. for ``isinstance`` it returns ``def isinstance``.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... def f():
 |      ...     pass
 |      ...
 |      ... class C:
 |      ...     pass
 |      ...
 |      ... variable = f if random.choice([0,1]) else C'''
 |      >>> script = Script(source, column=3)  # line is maximum by default
 |      >>> defs = script.goto_definitions()
 |      >>> defs = sorted(defs, key=lambda d: d.line)
 |      >>> defs
 |      [<Definition def f>, <Definition class C>]
 |      >>> str(defs[0].description)  # strip literals in python2
 |      'def f'
 |      >>> str(defs[1].description)
 |      'class C'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from BaseDefinition:
 |  
 |  docstring(self, raw=False, fast=True)
 |      Return a document string for this completion object.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''\
 |      ... def f(a, b=1):
 |      ...     ""Document for function f.""
 |      ... '''
 |      >>> script = Script(source, 1, len('def f'), 'example.py')
 |      >>> doc = script.goto_definitions()[0].docstring()
 |      >>> print(doc)
 |      f(a, b=1)
 |      <BLANKLINE>
 |      Document for function f.
 |      
 |      Notice that useful extra information is added to the actual
 |      docstring.  For function, it is call signature.  If you need
 |      actual docstring, use ``raw=True`` instead.
 |      
 |      >>> print(script.goto_definitions()[0].docstring(raw=True))
 |      Document for function f.
 |      
 |      :param fast: Don't follow imports that are only one level deep like
 |          ``import foo``, but follow ``from foo import bar``. This makes
 |          sense for speed reasons. Completing `import a` is slow if you use
 |          the ``foo.docstring(fast=False)`` on every object, because it
 |          parses all libraries starting with ``a``.
 |  
 |  get_line_code(self, before=0, after=0)
 |      Returns the line of code where this object was defined.
 |      
 |      :param before: Add n lines before the current line to the output.
 |      :param after: Add n lines after the current line to the output.
 |      
 |      :return str: Returns the line(s) of code or an empty string if it's a
 |                   builtin.
 |  
 |  goto_assignments(self)
 |  
 |  in_builtin_module(self)
 |      Whether this is a builtin module.
 |  
 |  parent(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from BaseDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  column
 |      The column where the definition occurs (starting with 0).
 |  
 |  full_name
 |      Dot-separated path of this object.
 |      
 |      It is in the form of ``<module>[.<submodule>[...]][.<object>]``.
 |      It is useful when you want to look up Python manual of the
 |      object at hand.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... import os
 |      ... os.path.join'''
 |      >>> script = Script(source, 3, len('os.path.join'), 'example.py')
 |      >>> print(script.goto_definitions()[0].full_name)
 |      os.path.join
 |      
 |      Notice that it returns ``'os.path.join'`` instead of (for example)
 |      ``'posixpath.join'``. This is not correct, since the modules name would
 |      be ``<module 'posixpath' ...>```. However most users find the latter
 |      more practical.
 |  
 |  line
 |      The line where the definition occurs (starting with 1).
 |  
 |  module_name
 |      The module name.
 |      
 |      >>> from jedi import Script
 |      >>> source = 'import json'
 |      >>> script = Script(source, path='example.py')
 |      >>> d = script.goto_definitions()[0]
 |      >>> print(d.module_name)                       # doctest: +ELLIPSIS
 |      json
 |  
 |  name
 |      Name of variable/function/class/module.
 |      
 |      For example, for ``x = None`` it returns ``'x'``.
 |      
 |      :rtype: str or None
 |  
 |  params
 |      Raises an ``AttributeError``if the definition is not callable.
 |      Otherwise returns a list of `Definition` that represents the params.
 |  
 |  type
 |      The type of the definition.
 |      
 |      Here is an example of the value of this attribute.  Let's consider
 |      the following source.  As what is in ``variable`` is unambiguous
 |      to Jedi, :meth:`jedi.Script.goto_definitions` should return a list of
 |      definition for ``sys``, ``f``, ``C`` and ``x``.
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... import keyword
 |      ...
 |      ... class C:
 |      ...     pass
 |      ...
 |      ... class D:
 |      ...     pass
 |      ...
 |      ... x = D()
 |      ...
 |      ... def f():
 |      ...     pass
 |      ...
 |      ... for variable in [keyword, f, C, x]:
 |      ...     variable'''
 |      
 |      >>> script = Script(source)
 |      >>> defs = script.goto_definitions()
 |      
 |      Before showing what is in ``defs``, let's sort it by :attr:`line`
 |      so that it is easy to relate the result to the source code.
 |      
 |      >>> defs = sorted(defs, key=lambda d: d.line)
 |      >>> defs                           # doctest: +NORMALIZE_WHITESPACE
 |      [<Definition module keyword>, <Definition class C>,
 |       <Definition instance D>, <Definition def f>]
 |      
 |      Finally, here is what you can get from :attr:`type`:
 |      
 |      >>> defs = [str(d.type) for d in defs]  # It's unicode and in Py2 has u before it.
 |      >>> defs[0]
 |      'module'
 |      >>> defs[1]
 |      'class'
 |      >>> defs[2]
 |      'instance'
 |      >>> defs[3]
 |      'function'
",class,"('(self, evaluator, executable_name, bracket_start_pos, index, key_name_str)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.api.classes.CallSignature,api.classes,CallSignature,"Python Library Documentation: class CallSignature in module jedi.api.classes

class CallSignature(Definition)
 |  `CallSignature` objects is the return value of `Script.function_definition`.
 |  It knows what functions you are currently in. e.g. `isinstance(` would
 |  return the `isinstance` function. without `(` it would return nothing.
 |  
 |  Method resolution order:
 |      CallSignature
 |      Definition
 |      BaseDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, executable_name, bracket_start_pos, index, key_name_str)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  bracket_start
 |      The indent of the bracket that is responsible for the last function
 |      call.
 |  
 |  index
 |      The Param index of the current call.
 |      Returns None if the index cannot be found in the curent call.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Definition:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __ne__(self, other)
 |      Return self!=value.
 |  
 |  defined_names(self)
 |      List sub-definitions (e.g., methods in class).
 |      
 |      :rtype: list of Definition
 |  
 |  is_definition(self)
 |      Returns True, if defined as a name in a statement, function or class.
 |      Returns False, if it's a reference to such a definition.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Definition:
 |  
 |  desc_with_module
 |      In addition to the definition, also return the module.
 |      
 |      .. warning:: Don't use this function yet, its behaviour may change. If
 |          you really need it, talk to me.
 |      
 |      .. todo:: Add full path. This function is should return a
 |          `module.class.function` path.
 |  
 |  description
 |      A description of the :class:`.Definition` object, which is heavily used
 |      in testing. e.g. for ``isinstance`` it returns ``def isinstance``.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... def f():
 |      ...     pass
 |      ...
 |      ... class C:
 |      ...     pass
 |      ...
 |      ... variable = f if random.choice([0,1]) else C'''
 |      >>> script = Script(source, column=3)  # line is maximum by default
 |      >>> defs = script.goto_definitions()
 |      >>> defs = sorted(defs, key=lambda d: d.line)
 |      >>> defs
 |      [<Definition def f>, <Definition class C>]
 |      >>> str(defs[0].description)  # strip literals in python2
 |      'def f'
 |      >>> str(defs[1].description)
 |      'class C'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from BaseDefinition:
 |  
 |  docstring(self, raw=False, fast=True)
 |      Return a document string for this completion object.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''\
 |      ... def f(a, b=1):
 |      ...     ""Document for function f.""
 |      ... '''
 |      >>> script = Script(source, 1, len('def f'), 'example.py')
 |      >>> doc = script.goto_definitions()[0].docstring()
 |      >>> print(doc)
 |      f(a, b=1)
 |      <BLANKLINE>
 |      Document for function f.
 |      
 |      Notice that useful extra information is added to the actual
 |      docstring.  For function, it is call signature.  If you need
 |      actual docstring, use ``raw=True`` instead.
 |      
 |      >>> print(script.goto_definitions()[0].docstring(raw=True))
 |      Document for function f.
 |      
 |      :param fast: Don't follow imports that are only one level deep like
 |          ``import foo``, but follow ``from foo import bar``. This makes
 |          sense for speed reasons. Completing `import a` is slow if you use
 |          the ``foo.docstring(fast=False)`` on every object, because it
 |          parses all libraries starting with ``a``.
 |  
 |  get_line_code(self, before=0, after=0)
 |      Returns the line of code where this object was defined.
 |      
 |      :param before: Add n lines before the current line to the output.
 |      :param after: Add n lines after the current line to the output.
 |      
 |      :return str: Returns the line(s) of code or an empty string if it's a
 |                   builtin.
 |  
 |  goto_assignments(self)
 |  
 |  in_builtin_module(self)
 |      Whether this is a builtin module.
 |  
 |  parent(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from BaseDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  column
 |      The column where the definition occurs (starting with 0).
 |  
 |  full_name
 |      Dot-separated path of this object.
 |      
 |      It is in the form of ``<module>[.<submodule>[...]][.<object>]``.
 |      It is useful when you want to look up Python manual of the
 |      object at hand.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... import os
 |      ... os.path.join'''
 |      >>> script = Script(source, 3, len('os.path.join'), 'example.py')
 |      >>> print(script.goto_definitions()[0].full_name)
 |      os.path.join
 |      
 |      Notice that it returns ``'os.path.join'`` instead of (for example)
 |      ``'posixpath.join'``. This is not correct, since the modules name would
 |      be ``<module 'posixpath' ...>```. However most users find the latter
 |      more practical.
 |  
 |  line
 |      The line where the definition occurs (starting with 1).
 |  
 |  module_name
 |      The module name.
 |      
 |      >>> from jedi import Script
 |      >>> source = 'import json'
 |      >>> script = Script(source, path='example.py')
 |      >>> d = script.goto_definitions()[0]
 |      >>> print(d.module_name)                       # doctest: +ELLIPSIS
 |      json
 |  
 |  name
 |      Name of variable/function/class/module.
 |      
 |      For example, for ``x = None`` it returns ``'x'``.
 |      
 |      :rtype: str or None
 |  
 |  params
 |      Raises an ``AttributeError``if the definition is not callable.
 |      Otherwise returns a list of `Definition` that represents the params.
 |  
 |  type
 |      The type of the definition.
 |      
 |      Here is an example of the value of this attribute.  Let's consider
 |      the following source.  As what is in ``variable`` is unambiguous
 |      to Jedi, :meth:`jedi.Script.goto_definitions` should return a list of
 |      definition for ``sys``, ``f``, ``C`` and ``x``.
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... import keyword
 |      ...
 |      ... class C:
 |      ...     pass
 |      ...
 |      ... class D:
 |      ...     pass
 |      ...
 |      ... x = D()
 |      ...
 |      ... def f():
 |      ...     pass
 |      ...
 |      ... for variable in [keyword, f, C, x]:
 |      ...     variable'''
 |      
 |      >>> script = Script(source)
 |      >>> defs = script.goto_definitions()
 |      
 |      Before showing what is in ``defs``, let's sort it by :attr:`line`
 |      so that it is easy to relate the result to the source code.
 |      
 |      >>> defs = sorted(defs, key=lambda d: d.line)
 |      >>> defs                           # doctest: +NORMALIZE_WHITESPACE
 |      [<Definition module keyword>, <Definition class C>,
 |       <Definition instance D>, <Definition def f>]
 |      
 |      Finally, here is what you can get from :attr:`type`:
 |      
 |      >>> defs = [str(d.type) for d in defs]  # It's unicode and in Py2 has u before it.
 |      >>> defs[0]
 |      'module'
 |      >>> defs[1]
 |      'class'
 |      >>> defs[2]
 |      'instance'
 |      >>> defs[3]
 |      'function'
",class,"('(self, evaluator, executable_name, bracket_start_pos, index, key_name_str)',)",executable_name,,,arg_info
jedi,0.12.0,jedi.api.classes.CallSignature,api.classes,CallSignature,"Python Library Documentation: class CallSignature in module jedi.api.classes

class CallSignature(Definition)
 |  `CallSignature` objects is the return value of `Script.function_definition`.
 |  It knows what functions you are currently in. e.g. `isinstance(` would
 |  return the `isinstance` function. without `(` it would return nothing.
 |  
 |  Method resolution order:
 |      CallSignature
 |      Definition
 |      BaseDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, executable_name, bracket_start_pos, index, key_name_str)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  bracket_start
 |      The indent of the bracket that is responsible for the last function
 |      call.
 |  
 |  index
 |      The Param index of the current call.
 |      Returns None if the index cannot be found in the curent call.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Definition:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __ne__(self, other)
 |      Return self!=value.
 |  
 |  defined_names(self)
 |      List sub-definitions (e.g., methods in class).
 |      
 |      :rtype: list of Definition
 |  
 |  is_definition(self)
 |      Returns True, if defined as a name in a statement, function or class.
 |      Returns False, if it's a reference to such a definition.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Definition:
 |  
 |  desc_with_module
 |      In addition to the definition, also return the module.
 |      
 |      .. warning:: Don't use this function yet, its behaviour may change. If
 |          you really need it, talk to me.
 |      
 |      .. todo:: Add full path. This function is should return a
 |          `module.class.function` path.
 |  
 |  description
 |      A description of the :class:`.Definition` object, which is heavily used
 |      in testing. e.g. for ``isinstance`` it returns ``def isinstance``.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... def f():
 |      ...     pass
 |      ...
 |      ... class C:
 |      ...     pass
 |      ...
 |      ... variable = f if random.choice([0,1]) else C'''
 |      >>> script = Script(source, column=3)  # line is maximum by default
 |      >>> defs = script.goto_definitions()
 |      >>> defs = sorted(defs, key=lambda d: d.line)
 |      >>> defs
 |      [<Definition def f>, <Definition class C>]
 |      >>> str(defs[0].description)  # strip literals in python2
 |      'def f'
 |      >>> str(defs[1].description)
 |      'class C'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from BaseDefinition:
 |  
 |  docstring(self, raw=False, fast=True)
 |      Return a document string for this completion object.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''\
 |      ... def f(a, b=1):
 |      ...     ""Document for function f.""
 |      ... '''
 |      >>> script = Script(source, 1, len('def f'), 'example.py')
 |      >>> doc = script.goto_definitions()[0].docstring()
 |      >>> print(doc)
 |      f(a, b=1)
 |      <BLANKLINE>
 |      Document for function f.
 |      
 |      Notice that useful extra information is added to the actual
 |      docstring.  For function, it is call signature.  If you need
 |      actual docstring, use ``raw=True`` instead.
 |      
 |      >>> print(script.goto_definitions()[0].docstring(raw=True))
 |      Document for function f.
 |      
 |      :param fast: Don't follow imports that are only one level deep like
 |          ``import foo``, but follow ``from foo import bar``. This makes
 |          sense for speed reasons. Completing `import a` is slow if you use
 |          the ``foo.docstring(fast=False)`` on every object, because it
 |          parses all libraries starting with ``a``.
 |  
 |  get_line_code(self, before=0, after=0)
 |      Returns the line of code where this object was defined.
 |      
 |      :param before: Add n lines before the current line to the output.
 |      :param after: Add n lines after the current line to the output.
 |      
 |      :return str: Returns the line(s) of code or an empty string if it's a
 |                   builtin.
 |  
 |  goto_assignments(self)
 |  
 |  in_builtin_module(self)
 |      Whether this is a builtin module.
 |  
 |  parent(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from BaseDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  column
 |      The column where the definition occurs (starting with 0).
 |  
 |  full_name
 |      Dot-separated path of this object.
 |      
 |      It is in the form of ``<module>[.<submodule>[...]][.<object>]``.
 |      It is useful when you want to look up Python manual of the
 |      object at hand.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... import os
 |      ... os.path.join'''
 |      >>> script = Script(source, 3, len('os.path.join'), 'example.py')
 |      >>> print(script.goto_definitions()[0].full_name)
 |      os.path.join
 |      
 |      Notice that it returns ``'os.path.join'`` instead of (for example)
 |      ``'posixpath.join'``. This is not correct, since the modules name would
 |      be ``<module 'posixpath' ...>```. However most users find the latter
 |      more practical.
 |  
 |  line
 |      The line where the definition occurs (starting with 1).
 |  
 |  module_name
 |      The module name.
 |      
 |      >>> from jedi import Script
 |      >>> source = 'import json'
 |      >>> script = Script(source, path='example.py')
 |      >>> d = script.goto_definitions()[0]
 |      >>> print(d.module_name)                       # doctest: +ELLIPSIS
 |      json
 |  
 |  name
 |      Name of variable/function/class/module.
 |      
 |      For example, for ``x = None`` it returns ``'x'``.
 |      
 |      :rtype: str or None
 |  
 |  params
 |      Raises an ``AttributeError``if the definition is not callable.
 |      Otherwise returns a list of `Definition` that represents the params.
 |  
 |  type
 |      The type of the definition.
 |      
 |      Here is an example of the value of this attribute.  Let's consider
 |      the following source.  As what is in ``variable`` is unambiguous
 |      to Jedi, :meth:`jedi.Script.goto_definitions` should return a list of
 |      definition for ``sys``, ``f``, ``C`` and ``x``.
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... import keyword
 |      ...
 |      ... class C:
 |      ...     pass
 |      ...
 |      ... class D:
 |      ...     pass
 |      ...
 |      ... x = D()
 |      ...
 |      ... def f():
 |      ...     pass
 |      ...
 |      ... for variable in [keyword, f, C, x]:
 |      ...     variable'''
 |      
 |      >>> script = Script(source)
 |      >>> defs = script.goto_definitions()
 |      
 |      Before showing what is in ``defs``, let's sort it by :attr:`line`
 |      so that it is easy to relate the result to the source code.
 |      
 |      >>> defs = sorted(defs, key=lambda d: d.line)
 |      >>> defs                           # doctest: +NORMALIZE_WHITESPACE
 |      [<Definition module keyword>, <Definition class C>,
 |       <Definition instance D>, <Definition def f>]
 |      
 |      Finally, here is what you can get from :attr:`type`:
 |      
 |      >>> defs = [str(d.type) for d in defs]  # It's unicode and in Py2 has u before it.
 |      >>> defs[0]
 |      'module'
 |      >>> defs[1]
 |      'class'
 |      >>> defs[2]
 |      'instance'
 |      >>> defs[3]
 |      'function'
",class,"('(self, evaluator, executable_name, bracket_start_pos, index, key_name_str)',)",bracket_start_pos,,,arg_info
jedi,0.12.0,jedi.api.classes.CallSignature,api.classes,CallSignature,"Python Library Documentation: class CallSignature in module jedi.api.classes

class CallSignature(Definition)
 |  `CallSignature` objects is the return value of `Script.function_definition`.
 |  It knows what functions you are currently in. e.g. `isinstance(` would
 |  return the `isinstance` function. without `(` it would return nothing.
 |  
 |  Method resolution order:
 |      CallSignature
 |      Definition
 |      BaseDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, executable_name, bracket_start_pos, index, key_name_str)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  bracket_start
 |      The indent of the bracket that is responsible for the last function
 |      call.
 |  
 |  index
 |      The Param index of the current call.
 |      Returns None if the index cannot be found in the curent call.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Definition:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __ne__(self, other)
 |      Return self!=value.
 |  
 |  defined_names(self)
 |      List sub-definitions (e.g., methods in class).
 |      
 |      :rtype: list of Definition
 |  
 |  is_definition(self)
 |      Returns True, if defined as a name in a statement, function or class.
 |      Returns False, if it's a reference to such a definition.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Definition:
 |  
 |  desc_with_module
 |      In addition to the definition, also return the module.
 |      
 |      .. warning:: Don't use this function yet, its behaviour may change. If
 |          you really need it, talk to me.
 |      
 |      .. todo:: Add full path. This function is should return a
 |          `module.class.function` path.
 |  
 |  description
 |      A description of the :class:`.Definition` object, which is heavily used
 |      in testing. e.g. for ``isinstance`` it returns ``def isinstance``.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... def f():
 |      ...     pass
 |      ...
 |      ... class C:
 |      ...     pass
 |      ...
 |      ... variable = f if random.choice([0,1]) else C'''
 |      >>> script = Script(source, column=3)  # line is maximum by default
 |      >>> defs = script.goto_definitions()
 |      >>> defs = sorted(defs, key=lambda d: d.line)
 |      >>> defs
 |      [<Definition def f>, <Definition class C>]
 |      >>> str(defs[0].description)  # strip literals in python2
 |      'def f'
 |      >>> str(defs[1].description)
 |      'class C'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from BaseDefinition:
 |  
 |  docstring(self, raw=False, fast=True)
 |      Return a document string for this completion object.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''\
 |      ... def f(a, b=1):
 |      ...     ""Document for function f.""
 |      ... '''
 |      >>> script = Script(source, 1, len('def f'), 'example.py')
 |      >>> doc = script.goto_definitions()[0].docstring()
 |      >>> print(doc)
 |      f(a, b=1)
 |      <BLANKLINE>
 |      Document for function f.
 |      
 |      Notice that useful extra information is added to the actual
 |      docstring.  For function, it is call signature.  If you need
 |      actual docstring, use ``raw=True`` instead.
 |      
 |      >>> print(script.goto_definitions()[0].docstring(raw=True))
 |      Document for function f.
 |      
 |      :param fast: Don't follow imports that are only one level deep like
 |          ``import foo``, but follow ``from foo import bar``. This makes
 |          sense for speed reasons. Completing `import a` is slow if you use
 |          the ``foo.docstring(fast=False)`` on every object, because it
 |          parses all libraries starting with ``a``.
 |  
 |  get_line_code(self, before=0, after=0)
 |      Returns the line of code where this object was defined.
 |      
 |      :param before: Add n lines before the current line to the output.
 |      :param after: Add n lines after the current line to the output.
 |      
 |      :return str: Returns the line(s) of code or an empty string if it's a
 |                   builtin.
 |  
 |  goto_assignments(self)
 |  
 |  in_builtin_module(self)
 |      Whether this is a builtin module.
 |  
 |  parent(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from BaseDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  column
 |      The column where the definition occurs (starting with 0).
 |  
 |  full_name
 |      Dot-separated path of this object.
 |      
 |      It is in the form of ``<module>[.<submodule>[...]][.<object>]``.
 |      It is useful when you want to look up Python manual of the
 |      object at hand.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... import os
 |      ... os.path.join'''
 |      >>> script = Script(source, 3, len('os.path.join'), 'example.py')
 |      >>> print(script.goto_definitions()[0].full_name)
 |      os.path.join
 |      
 |      Notice that it returns ``'os.path.join'`` instead of (for example)
 |      ``'posixpath.join'``. This is not correct, since the modules name would
 |      be ``<module 'posixpath' ...>```. However most users find the latter
 |      more practical.
 |  
 |  line
 |      The line where the definition occurs (starting with 1).
 |  
 |  module_name
 |      The module name.
 |      
 |      >>> from jedi import Script
 |      >>> source = 'import json'
 |      >>> script = Script(source, path='example.py')
 |      >>> d = script.goto_definitions()[0]
 |      >>> print(d.module_name)                       # doctest: +ELLIPSIS
 |      json
 |  
 |  name
 |      Name of variable/function/class/module.
 |      
 |      For example, for ``x = None`` it returns ``'x'``.
 |      
 |      :rtype: str or None
 |  
 |  params
 |      Raises an ``AttributeError``if the definition is not callable.
 |      Otherwise returns a list of `Definition` that represents the params.
 |  
 |  type
 |      The type of the definition.
 |      
 |      Here is an example of the value of this attribute.  Let's consider
 |      the following source.  As what is in ``variable`` is unambiguous
 |      to Jedi, :meth:`jedi.Script.goto_definitions` should return a list of
 |      definition for ``sys``, ``f``, ``C`` and ``x``.
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... import keyword
 |      ...
 |      ... class C:
 |      ...     pass
 |      ...
 |      ... class D:
 |      ...     pass
 |      ...
 |      ... x = D()
 |      ...
 |      ... def f():
 |      ...     pass
 |      ...
 |      ... for variable in [keyword, f, C, x]:
 |      ...     variable'''
 |      
 |      >>> script = Script(source)
 |      >>> defs = script.goto_definitions()
 |      
 |      Before showing what is in ``defs``, let's sort it by :attr:`line`
 |      so that it is easy to relate the result to the source code.
 |      
 |      >>> defs = sorted(defs, key=lambda d: d.line)
 |      >>> defs                           # doctest: +NORMALIZE_WHITESPACE
 |      [<Definition module keyword>, <Definition class C>,
 |       <Definition instance D>, <Definition def f>]
 |      
 |      Finally, here is what you can get from :attr:`type`:
 |      
 |      >>> defs = [str(d.type) for d in defs]  # It's unicode and in Py2 has u before it.
 |      >>> defs[0]
 |      'module'
 |      >>> defs[1]
 |      'class'
 |      >>> defs[2]
 |      'instance'
 |      >>> defs[3]
 |      'function'
",class,"('(self, evaluator, executable_name, bracket_start_pos, index, key_name_str)',)",index,,,arg_info
jedi,0.12.0,jedi.api.classes.CallSignature,api.classes,CallSignature,"Python Library Documentation: class CallSignature in module jedi.api.classes

class CallSignature(Definition)
 |  `CallSignature` objects is the return value of `Script.function_definition`.
 |  It knows what functions you are currently in. e.g. `isinstance(` would
 |  return the `isinstance` function. without `(` it would return nothing.
 |  
 |  Method resolution order:
 |      CallSignature
 |      Definition
 |      BaseDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, executable_name, bracket_start_pos, index, key_name_str)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  bracket_start
 |      The indent of the bracket that is responsible for the last function
 |      call.
 |  
 |  index
 |      The Param index of the current call.
 |      Returns None if the index cannot be found in the curent call.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Definition:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __ne__(self, other)
 |      Return self!=value.
 |  
 |  defined_names(self)
 |      List sub-definitions (e.g., methods in class).
 |      
 |      :rtype: list of Definition
 |  
 |  is_definition(self)
 |      Returns True, if defined as a name in a statement, function or class.
 |      Returns False, if it's a reference to such a definition.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Definition:
 |  
 |  desc_with_module
 |      In addition to the definition, also return the module.
 |      
 |      .. warning:: Don't use this function yet, its behaviour may change. If
 |          you really need it, talk to me.
 |      
 |      .. todo:: Add full path. This function is should return a
 |          `module.class.function` path.
 |  
 |  description
 |      A description of the :class:`.Definition` object, which is heavily used
 |      in testing. e.g. for ``isinstance`` it returns ``def isinstance``.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... def f():
 |      ...     pass
 |      ...
 |      ... class C:
 |      ...     pass
 |      ...
 |      ... variable = f if random.choice([0,1]) else C'''
 |      >>> script = Script(source, column=3)  # line is maximum by default
 |      >>> defs = script.goto_definitions()
 |      >>> defs = sorted(defs, key=lambda d: d.line)
 |      >>> defs
 |      [<Definition def f>, <Definition class C>]
 |      >>> str(defs[0].description)  # strip literals in python2
 |      'def f'
 |      >>> str(defs[1].description)
 |      'class C'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from BaseDefinition:
 |  
 |  docstring(self, raw=False, fast=True)
 |      Return a document string for this completion object.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''\
 |      ... def f(a, b=1):
 |      ...     ""Document for function f.""
 |      ... '''
 |      >>> script = Script(source, 1, len('def f'), 'example.py')
 |      >>> doc = script.goto_definitions()[0].docstring()
 |      >>> print(doc)
 |      f(a, b=1)
 |      <BLANKLINE>
 |      Document for function f.
 |      
 |      Notice that useful extra information is added to the actual
 |      docstring.  For function, it is call signature.  If you need
 |      actual docstring, use ``raw=True`` instead.
 |      
 |      >>> print(script.goto_definitions()[0].docstring(raw=True))
 |      Document for function f.
 |      
 |      :param fast: Don't follow imports that are only one level deep like
 |          ``import foo``, but follow ``from foo import bar``. This makes
 |          sense for speed reasons. Completing `import a` is slow if you use
 |          the ``foo.docstring(fast=False)`` on every object, because it
 |          parses all libraries starting with ``a``.
 |  
 |  get_line_code(self, before=0, after=0)
 |      Returns the line of code where this object was defined.
 |      
 |      :param before: Add n lines before the current line to the output.
 |      :param after: Add n lines after the current line to the output.
 |      
 |      :return str: Returns the line(s) of code or an empty string if it's a
 |                   builtin.
 |  
 |  goto_assignments(self)
 |  
 |  in_builtin_module(self)
 |      Whether this is a builtin module.
 |  
 |  parent(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from BaseDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  column
 |      The column where the definition occurs (starting with 0).
 |  
 |  full_name
 |      Dot-separated path of this object.
 |      
 |      It is in the form of ``<module>[.<submodule>[...]][.<object>]``.
 |      It is useful when you want to look up Python manual of the
 |      object at hand.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... import os
 |      ... os.path.join'''
 |      >>> script = Script(source, 3, len('os.path.join'), 'example.py')
 |      >>> print(script.goto_definitions()[0].full_name)
 |      os.path.join
 |      
 |      Notice that it returns ``'os.path.join'`` instead of (for example)
 |      ``'posixpath.join'``. This is not correct, since the modules name would
 |      be ``<module 'posixpath' ...>```. However most users find the latter
 |      more practical.
 |  
 |  line
 |      The line where the definition occurs (starting with 1).
 |  
 |  module_name
 |      The module name.
 |      
 |      >>> from jedi import Script
 |      >>> source = 'import json'
 |      >>> script = Script(source, path='example.py')
 |      >>> d = script.goto_definitions()[0]
 |      >>> print(d.module_name)                       # doctest: +ELLIPSIS
 |      json
 |  
 |  name
 |      Name of variable/function/class/module.
 |      
 |      For example, for ``x = None`` it returns ``'x'``.
 |      
 |      :rtype: str or None
 |  
 |  params
 |      Raises an ``AttributeError``if the definition is not callable.
 |      Otherwise returns a list of `Definition` that represents the params.
 |  
 |  type
 |      The type of the definition.
 |      
 |      Here is an example of the value of this attribute.  Let's consider
 |      the following source.  As what is in ``variable`` is unambiguous
 |      to Jedi, :meth:`jedi.Script.goto_definitions` should return a list of
 |      definition for ``sys``, ``f``, ``C`` and ``x``.
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... import keyword
 |      ...
 |      ... class C:
 |      ...     pass
 |      ...
 |      ... class D:
 |      ...     pass
 |      ...
 |      ... x = D()
 |      ...
 |      ... def f():
 |      ...     pass
 |      ...
 |      ... for variable in [keyword, f, C, x]:
 |      ...     variable'''
 |      
 |      >>> script = Script(source)
 |      >>> defs = script.goto_definitions()
 |      
 |      Before showing what is in ``defs``, let's sort it by :attr:`line`
 |      so that it is easy to relate the result to the source code.
 |      
 |      >>> defs = sorted(defs, key=lambda d: d.line)
 |      >>> defs                           # doctest: +NORMALIZE_WHITESPACE
 |      [<Definition module keyword>, <Definition class C>,
 |       <Definition instance D>, <Definition def f>]
 |      
 |      Finally, here is what you can get from :attr:`type`:
 |      
 |      >>> defs = [str(d.type) for d in defs]  # It's unicode and in Py2 has u before it.
 |      >>> defs[0]
 |      'module'
 |      >>> defs[1]
 |      'class'
 |      >>> defs[2]
 |      'instance'
 |      >>> defs[3]
 |      'function'
",class,"('(self, evaluator, executable_name, bracket_start_pos, index, key_name_str)',)",key_name_str,,,arg_info
jedi,0.12.0,jedi.api.classes.ClassContext,api.classes,ClassContext,"Python Library Documentation: class ClassContext in module jedi.evaluate.context.klass

class ClassContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  This class is not only important to extend `tree.Class`, it is also a
 |  important for descriptors (if the descriptor methods are evaluated or not).
 |  
 |  Method resolution order:
 |      ClassContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, classdef)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None, is_instance=False)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  get_param_names(self)
 |  
 |  get_params(self)
 |  
 |  is_class(self)
 |  
 |  py__bases__ = wrapper(obj, *args, **kwargs)
 |  
 |  py__call__(self, params)
 |  
 |  py__class__(self)
 |  
 |  py__mro__ = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'class'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, classdef)',)",classdef,,,arg_info
jedi,0.12.0,jedi.api.classes.ClassContext,api.classes,ClassContext,"Python Library Documentation: class ClassContext in module jedi.evaluate.context.klass

class ClassContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  This class is not only important to extend `tree.Class`, it is also a
 |  important for descriptors (if the descriptor methods are evaluated or not).
 |  
 |  Method resolution order:
 |      ClassContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, classdef)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None, is_instance=False)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  get_param_names(self)
 |  
 |  get_params(self)
 |  
 |  is_class(self)
 |  
 |  py__bases__ = wrapper(obj, *args, **kwargs)
 |  
 |  py__call__(self, params)
 |  
 |  py__class__(self)
 |  
 |  py__mro__ = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'class'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, classdef)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.api.classes.ClassContext,api.classes,ClassContext,"Python Library Documentation: class ClassContext in module jedi.evaluate.context.klass

class ClassContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  This class is not only important to extend `tree.Class`, it is also a
 |  important for descriptors (if the descriptor methods are evaluated or not).
 |  
 |  Method resolution order:
 |      ClassContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, classdef)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None, is_instance=False)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  get_param_names(self)
 |  
 |  get_params(self)
 |  
 |  is_class(self)
 |  
 |  py__bases__ = wrapper(obj, *args, **kwargs)
 |  
 |  py__call__(self, params)
 |  
 |  py__class__(self)
 |  
 |  py__mro__ = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'class'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, classdef)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.api.classes.ClassContext,api.classes,ClassContext,"Python Library Documentation: class ClassContext in module jedi.evaluate.context.klass

class ClassContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  This class is not only important to extend `tree.Class`, it is also a
 |  important for descriptors (if the descriptor methods are evaluated or not).
 |  
 |  Method resolution order:
 |      ClassContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, classdef)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None, is_instance=False)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  get_param_names(self)
 |  
 |  get_params(self)
 |  
 |  is_class(self)
 |  
 |  py__bases__ = wrapper(obj, *args, **kwargs)
 |  
 |  py__call__(self, params)
 |  
 |  py__class__(self)
 |  
 |  py__mro__ = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'class'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, classdef)',)",self,,,arg_info
jedi,0.12.0,jedi.api.classes.Completion,api.classes,Completion,"Python Library Documentation: class Completion in module jedi.api.classes

class Completion(BaseDefinition)
 |  `Completion` objects are returned from :meth:`api.Script.completions`. They
 |  provide additional information about a completion.
 |  
 |  Method resolution order:
 |      Completion
 |      BaseDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, name, stack, like_name_length)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  docstring(self, raw=False, fast=True)
 |      Return a document string for this completion object.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''\
 |      ... def f(a, b=1):
 |      ...     ""Document for function f.""
 |      ... '''
 |      >>> script = Script(source, 1, len('def f'), 'example.py')
 |      >>> doc = script.goto_definitions()[0].docstring()
 |      >>> print(doc)
 |      f(a, b=1)
 |      <BLANKLINE>
 |      Document for function f.
 |      
 |      Notice that useful extra information is added to the actual
 |      docstring.  For function, it is call signature.  If you need
 |      actual docstring, use ``raw=True`` instead.
 |      
 |      >>> print(script.goto_definitions()[0].docstring(raw=True))
 |      Document for function f.
 |      
 |      :param fast: Don't follow imports that are only one level deep like
 |          ``import foo``, but follow ``from foo import bar``. This makes
 |          sense for speed reasons. Completing `import a` is slow if you use
 |          the ``foo.docstring(fast=False)`` on every object, because it
 |          parses all libraries starting with ``a``.
 |  
 |  follow_definition(self)
 |      Return the original definitions. I strongly recommend not using it for
 |      your completions, because it might slow down |jedi|. If you want to
 |      read only a few objects (<=20), it might be useful, especially to get
 |      the original docstrings. The basic problem of this function is that it
 |      follows all results. This means with 1000 completions (e.g.  numpy),
 |      it's just PITA-slow.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  complete
 |      Return the rest of the word, e.g. completing ``isinstance``::
 |      
 |          isinstan# <-- Cursor is here
 |      
 |      would return the string 'ce'. It also adds additional stuff, depending
 |      on your `settings.py`.
 |      
 |      Assuming the following function definition::
 |      
 |          def foo(param=0):
 |              pass
 |      
 |      completing ``foo(par`` would give a ``Completion`` which `complete`
 |      would be `am=`
 |  
 |  description
 |      Provide a description of the completion object.
 |  
 |  name_with_symbols
 |      Similar to :attr:`name`, but like :attr:`name` returns also the
 |      symbols, for example assuming the following function definition::
 |      
 |          def foo(param=0):
 |              pass
 |      
 |      completing ``foo(`` would give a ``Completion`` which
 |      ``name_with_symbols`` would be ""param="".
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from BaseDefinition:
 |  
 |  get_line_code(self, before=0, after=0)
 |      Returns the line of code where this object was defined.
 |      
 |      :param before: Add n lines before the current line to the output.
 |      :param after: Add n lines after the current line to the output.
 |      
 |      :return str: Returns the line(s) of code or an empty string if it's a
 |                   builtin.
 |  
 |  goto_assignments(self)
 |  
 |  in_builtin_module(self)
 |      Whether this is a builtin module.
 |  
 |  parent(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from BaseDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  column
 |      The column where the definition occurs (starting with 0).
 |  
 |  full_name
 |      Dot-separated path of this object.
 |      
 |      It is in the form of ``<module>[.<submodule>[...]][.<object>]``.
 |      It is useful when you want to look up Python manual of the
 |      object at hand.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... import os
 |      ... os.path.join'''
 |      >>> script = Script(source, 3, len('os.path.join'), 'example.py')
 |      >>> print(script.goto_definitions()[0].full_name)
 |      os.path.join
 |      
 |      Notice that it returns ``'os.path.join'`` instead of (for example)
 |      ``'posixpath.join'``. This is not correct, since the modules name would
 |      be ``<module 'posixpath' ...>```. However most users find the latter
 |      more practical.
 |  
 |  line
 |      The line where the definition occurs (starting with 1).
 |  
 |  module_name
 |      The module name.
 |      
 |      >>> from jedi import Script
 |      >>> source = 'import json'
 |      >>> script = Script(source, path='example.py')
 |      >>> d = script.goto_definitions()[0]
 |      >>> print(d.module_name)                       # doctest: +ELLIPSIS
 |      json
 |  
 |  name
 |      Name of variable/function/class/module.
 |      
 |      For example, for ``x = None`` it returns ``'x'``.
 |      
 |      :rtype: str or None
 |  
 |  params
 |      Raises an ``AttributeError``if the definition is not callable.
 |      Otherwise returns a list of `Definition` that represents the params.
 |  
 |  type
 |      The type of the definition.
 |      
 |      Here is an example of the value of this attribute.  Let's consider
 |      the following source.  As what is in ``variable`` is unambiguous
 |      to Jedi, :meth:`jedi.Script.goto_definitions` should return a list of
 |      definition for ``sys``, ``f``, ``C`` and ``x``.
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... import keyword
 |      ...
 |      ... class C:
 |      ...     pass
 |      ...
 |      ... class D:
 |      ...     pass
 |      ...
 |      ... x = D()
 |      ...
 |      ... def f():
 |      ...     pass
 |      ...
 |      ... for variable in [keyword, f, C, x]:
 |      ...     variable'''
 |      
 |      >>> script = Script(source)
 |      >>> defs = script.goto_definitions()
 |      
 |      Before showing what is in ``defs``, let's sort it by :attr:`line`
 |      so that it is easy to relate the result to the source code.
 |      
 |      >>> defs = sorted(defs, key=lambda d: d.line)
 |      >>> defs                           # doctest: +NORMALIZE_WHITESPACE
 |      [<Definition module keyword>, <Definition class C>,
 |       <Definition instance D>, <Definition def f>]
 |      
 |      Finally, here is what you can get from :attr:`type`:
 |      
 |      >>> defs = [str(d.type) for d in defs]  # It's unicode and in Py2 has u before it.
 |      >>> defs[0]
 |      'module'
 |      >>> defs[1]
 |      'class'
 |      >>> defs[2]
 |      'instance'
 |      >>> defs[3]
 |      'function'
",class,"('(self, evaluator, name, stack, like_name_length)',)",name,,,arg_info
jedi,0.12.0,jedi.api.classes.Completion,api.classes,Completion,"Python Library Documentation: class Completion in module jedi.api.classes

class Completion(BaseDefinition)
 |  `Completion` objects are returned from :meth:`api.Script.completions`. They
 |  provide additional information about a completion.
 |  
 |  Method resolution order:
 |      Completion
 |      BaseDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, name, stack, like_name_length)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  docstring(self, raw=False, fast=True)
 |      Return a document string for this completion object.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''\
 |      ... def f(a, b=1):
 |      ...     ""Document for function f.""
 |      ... '''
 |      >>> script = Script(source, 1, len('def f'), 'example.py')
 |      >>> doc = script.goto_definitions()[0].docstring()
 |      >>> print(doc)
 |      f(a, b=1)
 |      <BLANKLINE>
 |      Document for function f.
 |      
 |      Notice that useful extra information is added to the actual
 |      docstring.  For function, it is call signature.  If you need
 |      actual docstring, use ``raw=True`` instead.
 |      
 |      >>> print(script.goto_definitions()[0].docstring(raw=True))
 |      Document for function f.
 |      
 |      :param fast: Don't follow imports that are only one level deep like
 |          ``import foo``, but follow ``from foo import bar``. This makes
 |          sense for speed reasons. Completing `import a` is slow if you use
 |          the ``foo.docstring(fast=False)`` on every object, because it
 |          parses all libraries starting with ``a``.
 |  
 |  follow_definition(self)
 |      Return the original definitions. I strongly recommend not using it for
 |      your completions, because it might slow down |jedi|. If you want to
 |      read only a few objects (<=20), it might be useful, especially to get
 |      the original docstrings. The basic problem of this function is that it
 |      follows all results. This means with 1000 completions (e.g.  numpy),
 |      it's just PITA-slow.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  complete
 |      Return the rest of the word, e.g. completing ``isinstance``::
 |      
 |          isinstan# <-- Cursor is here
 |      
 |      would return the string 'ce'. It also adds additional stuff, depending
 |      on your `settings.py`.
 |      
 |      Assuming the following function definition::
 |      
 |          def foo(param=0):
 |              pass
 |      
 |      completing ``foo(par`` would give a ``Completion`` which `complete`
 |      would be `am=`
 |  
 |  description
 |      Provide a description of the completion object.
 |  
 |  name_with_symbols
 |      Similar to :attr:`name`, but like :attr:`name` returns also the
 |      symbols, for example assuming the following function definition::
 |      
 |          def foo(param=0):
 |              pass
 |      
 |      completing ``foo(`` would give a ``Completion`` which
 |      ``name_with_symbols`` would be ""param="".
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from BaseDefinition:
 |  
 |  get_line_code(self, before=0, after=0)
 |      Returns the line of code where this object was defined.
 |      
 |      :param before: Add n lines before the current line to the output.
 |      :param after: Add n lines after the current line to the output.
 |      
 |      :return str: Returns the line(s) of code or an empty string if it's a
 |                   builtin.
 |  
 |  goto_assignments(self)
 |  
 |  in_builtin_module(self)
 |      Whether this is a builtin module.
 |  
 |  parent(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from BaseDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  column
 |      The column where the definition occurs (starting with 0).
 |  
 |  full_name
 |      Dot-separated path of this object.
 |      
 |      It is in the form of ``<module>[.<submodule>[...]][.<object>]``.
 |      It is useful when you want to look up Python manual of the
 |      object at hand.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... import os
 |      ... os.path.join'''
 |      >>> script = Script(source, 3, len('os.path.join'), 'example.py')
 |      >>> print(script.goto_definitions()[0].full_name)
 |      os.path.join
 |      
 |      Notice that it returns ``'os.path.join'`` instead of (for example)
 |      ``'posixpath.join'``. This is not correct, since the modules name would
 |      be ``<module 'posixpath' ...>```. However most users find the latter
 |      more practical.
 |  
 |  line
 |      The line where the definition occurs (starting with 1).
 |  
 |  module_name
 |      The module name.
 |      
 |      >>> from jedi import Script
 |      >>> source = 'import json'
 |      >>> script = Script(source, path='example.py')
 |      >>> d = script.goto_definitions()[0]
 |      >>> print(d.module_name)                       # doctest: +ELLIPSIS
 |      json
 |  
 |  name
 |      Name of variable/function/class/module.
 |      
 |      For example, for ``x = None`` it returns ``'x'``.
 |      
 |      :rtype: str or None
 |  
 |  params
 |      Raises an ``AttributeError``if the definition is not callable.
 |      Otherwise returns a list of `Definition` that represents the params.
 |  
 |  type
 |      The type of the definition.
 |      
 |      Here is an example of the value of this attribute.  Let's consider
 |      the following source.  As what is in ``variable`` is unambiguous
 |      to Jedi, :meth:`jedi.Script.goto_definitions` should return a list of
 |      definition for ``sys``, ``f``, ``C`` and ``x``.
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... import keyword
 |      ...
 |      ... class C:
 |      ...     pass
 |      ...
 |      ... class D:
 |      ...     pass
 |      ...
 |      ... x = D()
 |      ...
 |      ... def f():
 |      ...     pass
 |      ...
 |      ... for variable in [keyword, f, C, x]:
 |      ...     variable'''
 |      
 |      >>> script = Script(source)
 |      >>> defs = script.goto_definitions()
 |      
 |      Before showing what is in ``defs``, let's sort it by :attr:`line`
 |      so that it is easy to relate the result to the source code.
 |      
 |      >>> defs = sorted(defs, key=lambda d: d.line)
 |      >>> defs                           # doctest: +NORMALIZE_WHITESPACE
 |      [<Definition module keyword>, <Definition class C>,
 |       <Definition instance D>, <Definition def f>]
 |      
 |      Finally, here is what you can get from :attr:`type`:
 |      
 |      >>> defs = [str(d.type) for d in defs]  # It's unicode and in Py2 has u before it.
 |      >>> defs[0]
 |      'module'
 |      >>> defs[1]
 |      'class'
 |      >>> defs[2]
 |      'instance'
 |      >>> defs[3]
 |      'function'
",class,"('(self, evaluator, name, stack, like_name_length)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.api.classes.Completion,api.classes,Completion,"Python Library Documentation: class Completion in module jedi.api.classes

class Completion(BaseDefinition)
 |  `Completion` objects are returned from :meth:`api.Script.completions`. They
 |  provide additional information about a completion.
 |  
 |  Method resolution order:
 |      Completion
 |      BaseDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, name, stack, like_name_length)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  docstring(self, raw=False, fast=True)
 |      Return a document string for this completion object.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''\
 |      ... def f(a, b=1):
 |      ...     ""Document for function f.""
 |      ... '''
 |      >>> script = Script(source, 1, len('def f'), 'example.py')
 |      >>> doc = script.goto_definitions()[0].docstring()
 |      >>> print(doc)
 |      f(a, b=1)
 |      <BLANKLINE>
 |      Document for function f.
 |      
 |      Notice that useful extra information is added to the actual
 |      docstring.  For function, it is call signature.  If you need
 |      actual docstring, use ``raw=True`` instead.
 |      
 |      >>> print(script.goto_definitions()[0].docstring(raw=True))
 |      Document for function f.
 |      
 |      :param fast: Don't follow imports that are only one level deep like
 |          ``import foo``, but follow ``from foo import bar``. This makes
 |          sense for speed reasons. Completing `import a` is slow if you use
 |          the ``foo.docstring(fast=False)`` on every object, because it
 |          parses all libraries starting with ``a``.
 |  
 |  follow_definition(self)
 |      Return the original definitions. I strongly recommend not using it for
 |      your completions, because it might slow down |jedi|. If you want to
 |      read only a few objects (<=20), it might be useful, especially to get
 |      the original docstrings. The basic problem of this function is that it
 |      follows all results. This means with 1000 completions (e.g.  numpy),
 |      it's just PITA-slow.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  complete
 |      Return the rest of the word, e.g. completing ``isinstance``::
 |      
 |          isinstan# <-- Cursor is here
 |      
 |      would return the string 'ce'. It also adds additional stuff, depending
 |      on your `settings.py`.
 |      
 |      Assuming the following function definition::
 |      
 |          def foo(param=0):
 |              pass
 |      
 |      completing ``foo(par`` would give a ``Completion`` which `complete`
 |      would be `am=`
 |  
 |  description
 |      Provide a description of the completion object.
 |  
 |  name_with_symbols
 |      Similar to :attr:`name`, but like :attr:`name` returns also the
 |      symbols, for example assuming the following function definition::
 |      
 |          def foo(param=0):
 |              pass
 |      
 |      completing ``foo(`` would give a ``Completion`` which
 |      ``name_with_symbols`` would be ""param="".
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from BaseDefinition:
 |  
 |  get_line_code(self, before=0, after=0)
 |      Returns the line of code where this object was defined.
 |      
 |      :param before: Add n lines before the current line to the output.
 |      :param after: Add n lines after the current line to the output.
 |      
 |      :return str: Returns the line(s) of code or an empty string if it's a
 |                   builtin.
 |  
 |  goto_assignments(self)
 |  
 |  in_builtin_module(self)
 |      Whether this is a builtin module.
 |  
 |  parent(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from BaseDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  column
 |      The column where the definition occurs (starting with 0).
 |  
 |  full_name
 |      Dot-separated path of this object.
 |      
 |      It is in the form of ``<module>[.<submodule>[...]][.<object>]``.
 |      It is useful when you want to look up Python manual of the
 |      object at hand.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... import os
 |      ... os.path.join'''
 |      >>> script = Script(source, 3, len('os.path.join'), 'example.py')
 |      >>> print(script.goto_definitions()[0].full_name)
 |      os.path.join
 |      
 |      Notice that it returns ``'os.path.join'`` instead of (for example)
 |      ``'posixpath.join'``. This is not correct, since the modules name would
 |      be ``<module 'posixpath' ...>```. However most users find the latter
 |      more practical.
 |  
 |  line
 |      The line where the definition occurs (starting with 1).
 |  
 |  module_name
 |      The module name.
 |      
 |      >>> from jedi import Script
 |      >>> source = 'import json'
 |      >>> script = Script(source, path='example.py')
 |      >>> d = script.goto_definitions()[0]
 |      >>> print(d.module_name)                       # doctest: +ELLIPSIS
 |      json
 |  
 |  name
 |      Name of variable/function/class/module.
 |      
 |      For example, for ``x = None`` it returns ``'x'``.
 |      
 |      :rtype: str or None
 |  
 |  params
 |      Raises an ``AttributeError``if the definition is not callable.
 |      Otherwise returns a list of `Definition` that represents the params.
 |  
 |  type
 |      The type of the definition.
 |      
 |      Here is an example of the value of this attribute.  Let's consider
 |      the following source.  As what is in ``variable`` is unambiguous
 |      to Jedi, :meth:`jedi.Script.goto_definitions` should return a list of
 |      definition for ``sys``, ``f``, ``C`` and ``x``.
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... import keyword
 |      ...
 |      ... class C:
 |      ...     pass
 |      ...
 |      ... class D:
 |      ...     pass
 |      ...
 |      ... x = D()
 |      ...
 |      ... def f():
 |      ...     pass
 |      ...
 |      ... for variable in [keyword, f, C, x]:
 |      ...     variable'''
 |      
 |      >>> script = Script(source)
 |      >>> defs = script.goto_definitions()
 |      
 |      Before showing what is in ``defs``, let's sort it by :attr:`line`
 |      so that it is easy to relate the result to the source code.
 |      
 |      >>> defs = sorted(defs, key=lambda d: d.line)
 |      >>> defs                           # doctest: +NORMALIZE_WHITESPACE
 |      [<Definition module keyword>, <Definition class C>,
 |       <Definition instance D>, <Definition def f>]
 |      
 |      Finally, here is what you can get from :attr:`type`:
 |      
 |      >>> defs = [str(d.type) for d in defs]  # It's unicode and in Py2 has u before it.
 |      >>> defs[0]
 |      'module'
 |      >>> defs[1]
 |      'class'
 |      >>> defs[2]
 |      'instance'
 |      >>> defs[3]
 |      'function'
",class,"('(self, evaluator, name, stack, like_name_length)',)",like_name_length,,,arg_info
jedi,0.12.0,jedi.api.classes.Completion,api.classes,Completion,"Python Library Documentation: class Completion in module jedi.api.classes

class Completion(BaseDefinition)
 |  `Completion` objects are returned from :meth:`api.Script.completions`. They
 |  provide additional information about a completion.
 |  
 |  Method resolution order:
 |      Completion
 |      BaseDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, name, stack, like_name_length)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  docstring(self, raw=False, fast=True)
 |      Return a document string for this completion object.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''\
 |      ... def f(a, b=1):
 |      ...     ""Document for function f.""
 |      ... '''
 |      >>> script = Script(source, 1, len('def f'), 'example.py')
 |      >>> doc = script.goto_definitions()[0].docstring()
 |      >>> print(doc)
 |      f(a, b=1)
 |      <BLANKLINE>
 |      Document for function f.
 |      
 |      Notice that useful extra information is added to the actual
 |      docstring.  For function, it is call signature.  If you need
 |      actual docstring, use ``raw=True`` instead.
 |      
 |      >>> print(script.goto_definitions()[0].docstring(raw=True))
 |      Document for function f.
 |      
 |      :param fast: Don't follow imports that are only one level deep like
 |          ``import foo``, but follow ``from foo import bar``. This makes
 |          sense for speed reasons. Completing `import a` is slow if you use
 |          the ``foo.docstring(fast=False)`` on every object, because it
 |          parses all libraries starting with ``a``.
 |  
 |  follow_definition(self)
 |      Return the original definitions. I strongly recommend not using it for
 |      your completions, because it might slow down |jedi|. If you want to
 |      read only a few objects (<=20), it might be useful, especially to get
 |      the original docstrings. The basic problem of this function is that it
 |      follows all results. This means with 1000 completions (e.g.  numpy),
 |      it's just PITA-slow.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  complete
 |      Return the rest of the word, e.g. completing ``isinstance``::
 |      
 |          isinstan# <-- Cursor is here
 |      
 |      would return the string 'ce'. It also adds additional stuff, depending
 |      on your `settings.py`.
 |      
 |      Assuming the following function definition::
 |      
 |          def foo(param=0):
 |              pass
 |      
 |      completing ``foo(par`` would give a ``Completion`` which `complete`
 |      would be `am=`
 |  
 |  description
 |      Provide a description of the completion object.
 |  
 |  name_with_symbols
 |      Similar to :attr:`name`, but like :attr:`name` returns also the
 |      symbols, for example assuming the following function definition::
 |      
 |          def foo(param=0):
 |              pass
 |      
 |      completing ``foo(`` would give a ``Completion`` which
 |      ``name_with_symbols`` would be ""param="".
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from BaseDefinition:
 |  
 |  get_line_code(self, before=0, after=0)
 |      Returns the line of code where this object was defined.
 |      
 |      :param before: Add n lines before the current line to the output.
 |      :param after: Add n lines after the current line to the output.
 |      
 |      :return str: Returns the line(s) of code or an empty string if it's a
 |                   builtin.
 |  
 |  goto_assignments(self)
 |  
 |  in_builtin_module(self)
 |      Whether this is a builtin module.
 |  
 |  parent(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from BaseDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  column
 |      The column where the definition occurs (starting with 0).
 |  
 |  full_name
 |      Dot-separated path of this object.
 |      
 |      It is in the form of ``<module>[.<submodule>[...]][.<object>]``.
 |      It is useful when you want to look up Python manual of the
 |      object at hand.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... import os
 |      ... os.path.join'''
 |      >>> script = Script(source, 3, len('os.path.join'), 'example.py')
 |      >>> print(script.goto_definitions()[0].full_name)
 |      os.path.join
 |      
 |      Notice that it returns ``'os.path.join'`` instead of (for example)
 |      ``'posixpath.join'``. This is not correct, since the modules name would
 |      be ``<module 'posixpath' ...>```. However most users find the latter
 |      more practical.
 |  
 |  line
 |      The line where the definition occurs (starting with 1).
 |  
 |  module_name
 |      The module name.
 |      
 |      >>> from jedi import Script
 |      >>> source = 'import json'
 |      >>> script = Script(source, path='example.py')
 |      >>> d = script.goto_definitions()[0]
 |      >>> print(d.module_name)                       # doctest: +ELLIPSIS
 |      json
 |  
 |  name
 |      Name of variable/function/class/module.
 |      
 |      For example, for ``x = None`` it returns ``'x'``.
 |      
 |      :rtype: str or None
 |  
 |  params
 |      Raises an ``AttributeError``if the definition is not callable.
 |      Otherwise returns a list of `Definition` that represents the params.
 |  
 |  type
 |      The type of the definition.
 |      
 |      Here is an example of the value of this attribute.  Let's consider
 |      the following source.  As what is in ``variable`` is unambiguous
 |      to Jedi, :meth:`jedi.Script.goto_definitions` should return a list of
 |      definition for ``sys``, ``f``, ``C`` and ``x``.
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... import keyword
 |      ...
 |      ... class C:
 |      ...     pass
 |      ...
 |      ... class D:
 |      ...     pass
 |      ...
 |      ... x = D()
 |      ...
 |      ... def f():
 |      ...     pass
 |      ...
 |      ... for variable in [keyword, f, C, x]:
 |      ...     variable'''
 |      
 |      >>> script = Script(source)
 |      >>> defs = script.goto_definitions()
 |      
 |      Before showing what is in ``defs``, let's sort it by :attr:`line`
 |      so that it is easy to relate the result to the source code.
 |      
 |      >>> defs = sorted(defs, key=lambda d: d.line)
 |      >>> defs                           # doctest: +NORMALIZE_WHITESPACE
 |      [<Definition module keyword>, <Definition class C>,
 |       <Definition instance D>, <Definition def f>]
 |      
 |      Finally, here is what you can get from :attr:`type`:
 |      
 |      >>> defs = [str(d.type) for d in defs]  # It's unicode and in Py2 has u before it.
 |      >>> defs[0]
 |      'module'
 |      >>> defs[1]
 |      'class'
 |      >>> defs[2]
 |      'instance'
 |      >>> defs[3]
 |      'function'
",class,"('(self, evaluator, name, stack, like_name_length)',)",stack,,,arg_info
jedi,0.12.0,jedi.api.classes.Completion,api.classes,Completion,"Python Library Documentation: class Completion in module jedi.api.classes

class Completion(BaseDefinition)
 |  `Completion` objects are returned from :meth:`api.Script.completions`. They
 |  provide additional information about a completion.
 |  
 |  Method resolution order:
 |      Completion
 |      BaseDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, name, stack, like_name_length)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  docstring(self, raw=False, fast=True)
 |      Return a document string for this completion object.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''\
 |      ... def f(a, b=1):
 |      ...     ""Document for function f.""
 |      ... '''
 |      >>> script = Script(source, 1, len('def f'), 'example.py')
 |      >>> doc = script.goto_definitions()[0].docstring()
 |      >>> print(doc)
 |      f(a, b=1)
 |      <BLANKLINE>
 |      Document for function f.
 |      
 |      Notice that useful extra information is added to the actual
 |      docstring.  For function, it is call signature.  If you need
 |      actual docstring, use ``raw=True`` instead.
 |      
 |      >>> print(script.goto_definitions()[0].docstring(raw=True))
 |      Document for function f.
 |      
 |      :param fast: Don't follow imports that are only one level deep like
 |          ``import foo``, but follow ``from foo import bar``. This makes
 |          sense for speed reasons. Completing `import a` is slow if you use
 |          the ``foo.docstring(fast=False)`` on every object, because it
 |          parses all libraries starting with ``a``.
 |  
 |  follow_definition(self)
 |      Return the original definitions. I strongly recommend not using it for
 |      your completions, because it might slow down |jedi|. If you want to
 |      read only a few objects (<=20), it might be useful, especially to get
 |      the original docstrings. The basic problem of this function is that it
 |      follows all results. This means with 1000 completions (e.g.  numpy),
 |      it's just PITA-slow.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  complete
 |      Return the rest of the word, e.g. completing ``isinstance``::
 |      
 |          isinstan# <-- Cursor is here
 |      
 |      would return the string 'ce'. It also adds additional stuff, depending
 |      on your `settings.py`.
 |      
 |      Assuming the following function definition::
 |      
 |          def foo(param=0):
 |              pass
 |      
 |      completing ``foo(par`` would give a ``Completion`` which `complete`
 |      would be `am=`
 |  
 |  description
 |      Provide a description of the completion object.
 |  
 |  name_with_symbols
 |      Similar to :attr:`name`, but like :attr:`name` returns also the
 |      symbols, for example assuming the following function definition::
 |      
 |          def foo(param=0):
 |              pass
 |      
 |      completing ``foo(`` would give a ``Completion`` which
 |      ``name_with_symbols`` would be ""param="".
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from BaseDefinition:
 |  
 |  get_line_code(self, before=0, after=0)
 |      Returns the line of code where this object was defined.
 |      
 |      :param before: Add n lines before the current line to the output.
 |      :param after: Add n lines after the current line to the output.
 |      
 |      :return str: Returns the line(s) of code or an empty string if it's a
 |                   builtin.
 |  
 |  goto_assignments(self)
 |  
 |  in_builtin_module(self)
 |      Whether this is a builtin module.
 |  
 |  parent(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from BaseDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  column
 |      The column where the definition occurs (starting with 0).
 |  
 |  full_name
 |      Dot-separated path of this object.
 |      
 |      It is in the form of ``<module>[.<submodule>[...]][.<object>]``.
 |      It is useful when you want to look up Python manual of the
 |      object at hand.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... import os
 |      ... os.path.join'''
 |      >>> script = Script(source, 3, len('os.path.join'), 'example.py')
 |      >>> print(script.goto_definitions()[0].full_name)
 |      os.path.join
 |      
 |      Notice that it returns ``'os.path.join'`` instead of (for example)
 |      ``'posixpath.join'``. This is not correct, since the modules name would
 |      be ``<module 'posixpath' ...>```. However most users find the latter
 |      more practical.
 |  
 |  line
 |      The line where the definition occurs (starting with 1).
 |  
 |  module_name
 |      The module name.
 |      
 |      >>> from jedi import Script
 |      >>> source = 'import json'
 |      >>> script = Script(source, path='example.py')
 |      >>> d = script.goto_definitions()[0]
 |      >>> print(d.module_name)                       # doctest: +ELLIPSIS
 |      json
 |  
 |  name
 |      Name of variable/function/class/module.
 |      
 |      For example, for ``x = None`` it returns ``'x'``.
 |      
 |      :rtype: str or None
 |  
 |  params
 |      Raises an ``AttributeError``if the definition is not callable.
 |      Otherwise returns a list of `Definition` that represents the params.
 |  
 |  type
 |      The type of the definition.
 |      
 |      Here is an example of the value of this attribute.  Let's consider
 |      the following source.  As what is in ``variable`` is unambiguous
 |      to Jedi, :meth:`jedi.Script.goto_definitions` should return a list of
 |      definition for ``sys``, ``f``, ``C`` and ``x``.
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... import keyword
 |      ...
 |      ... class C:
 |      ...     pass
 |      ...
 |      ... class D:
 |      ...     pass
 |      ...
 |      ... x = D()
 |      ...
 |      ... def f():
 |      ...     pass
 |      ...
 |      ... for variable in [keyword, f, C, x]:
 |      ...     variable'''
 |      
 |      >>> script = Script(source)
 |      >>> defs = script.goto_definitions()
 |      
 |      Before showing what is in ``defs``, let's sort it by :attr:`line`
 |      so that it is easy to relate the result to the source code.
 |      
 |      >>> defs = sorted(defs, key=lambda d: d.line)
 |      >>> defs                           # doctest: +NORMALIZE_WHITESPACE
 |      [<Definition module keyword>, <Definition class C>,
 |       <Definition instance D>, <Definition def f>]
 |      
 |      Finally, here is what you can get from :attr:`type`:
 |      
 |      >>> defs = [str(d.type) for d in defs]  # It's unicode and in Py2 has u before it.
 |      >>> defs[0]
 |      'module'
 |      >>> defs[1]
 |      'class'
 |      >>> defs[2]
 |      'instance'
 |      >>> defs[3]
 |      'function'
",class,"('(self, evaluator, name, stack, like_name_length)',)",self,,,arg_info
jedi,0.12.0,jedi.api.classes.Definition,api.classes,Definition,"Python Library Documentation: class Definition in module jedi.api.classes

class Definition(BaseDefinition)
 |  *Definition* objects are returned from :meth:`api.Script.goto_assignments`
 |  or :meth:`api.Script.goto_definitions`.
 |  
 |  Method resolution order:
 |      Definition
 |      BaseDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __init__(self, evaluator, definition)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __ne__(self, other)
 |      Return self!=value.
 |  
 |  defined_names(self)
 |      List sub-definitions (e.g., methods in class).
 |      
 |      :rtype: list of Definition
 |  
 |  is_definition(self)
 |      Returns True, if defined as a name in a statement, function or class.
 |      Returns False, if it's a reference to such a definition.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  desc_with_module
 |      In addition to the definition, also return the module.
 |      
 |      .. warning:: Don't use this function yet, its behaviour may change. If
 |          you really need it, talk to me.
 |      
 |      .. todo:: Add full path. This function is should return a
 |          `module.class.function` path.
 |  
 |  description
 |      A description of the :class:`.Definition` object, which is heavily used
 |      in testing. e.g. for ``isinstance`` it returns ``def isinstance``.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... def f():
 |      ...     pass
 |      ...
 |      ... class C:
 |      ...     pass
 |      ...
 |      ... variable = f if random.choice([0,1]) else C'''
 |      >>> script = Script(source, column=3)  # line is maximum by default
 |      >>> defs = script.goto_definitions()
 |      >>> defs = sorted(defs, key=lambda d: d.line)
 |      >>> defs
 |      [<Definition def f>, <Definition class C>]
 |      >>> str(defs[0].description)  # strip literals in python2
 |      'def f'
 |      >>> str(defs[1].description)
 |      'class C'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from BaseDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  docstring(self, raw=False, fast=True)
 |      Return a document string for this completion object.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''\
 |      ... def f(a, b=1):
 |      ...     ""Document for function f.""
 |      ... '''
 |      >>> script = Script(source, 1, len('def f'), 'example.py')
 |      >>> doc = script.goto_definitions()[0].docstring()
 |      >>> print(doc)
 |      f(a, b=1)
 |      <BLANKLINE>
 |      Document for function f.
 |      
 |      Notice that useful extra information is added to the actual
 |      docstring.  For function, it is call signature.  If you need
 |      actual docstring, use ``raw=True`` instead.
 |      
 |      >>> print(script.goto_definitions()[0].docstring(raw=True))
 |      Document for function f.
 |      
 |      :param fast: Don't follow imports that are only one level deep like
 |          ``import foo``, but follow ``from foo import bar``. This makes
 |          sense for speed reasons. Completing `import a` is slow if you use
 |          the ``foo.docstring(fast=False)`` on every object, because it
 |          parses all libraries starting with ``a``.
 |  
 |  get_line_code(self, before=0, after=0)
 |      Returns the line of code where this object was defined.
 |      
 |      :param before: Add n lines before the current line to the output.
 |      :param after: Add n lines after the current line to the output.
 |      
 |      :return str: Returns the line(s) of code or an empty string if it's a
 |                   builtin.
 |  
 |  goto_assignments(self)
 |  
 |  in_builtin_module(self)
 |      Whether this is a builtin module.
 |  
 |  parent(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from BaseDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  column
 |      The column where the definition occurs (starting with 0).
 |  
 |  full_name
 |      Dot-separated path of this object.
 |      
 |      It is in the form of ``<module>[.<submodule>[...]][.<object>]``.
 |      It is useful when you want to look up Python manual of the
 |      object at hand.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... import os
 |      ... os.path.join'''
 |      >>> script = Script(source, 3, len('os.path.join'), 'example.py')
 |      >>> print(script.goto_definitions()[0].full_name)
 |      os.path.join
 |      
 |      Notice that it returns ``'os.path.join'`` instead of (for example)
 |      ``'posixpath.join'``. This is not correct, since the modules name would
 |      be ``<module 'posixpath' ...>```. However most users find the latter
 |      more practical.
 |  
 |  line
 |      The line where the definition occurs (starting with 1).
 |  
 |  module_name
 |      The module name.
 |      
 |      >>> from jedi import Script
 |      >>> source = 'import json'
 |      >>> script = Script(source, path='example.py')
 |      >>> d = script.goto_definitions()[0]
 |      >>> print(d.module_name)                       # doctest: +ELLIPSIS
 |      json
 |  
 |  name
 |      Name of variable/function/class/module.
 |      
 |      For example, for ``x = None`` it returns ``'x'``.
 |      
 |      :rtype: str or None
 |  
 |  params
 |      Raises an ``AttributeError``if the definition is not callable.
 |      Otherwise returns a list of `Definition` that represents the params.
 |  
 |  type
 |      The type of the definition.
 |      
 |      Here is an example of the value of this attribute.  Let's consider
 |      the following source.  As what is in ``variable`` is unambiguous
 |      to Jedi, :meth:`jedi.Script.goto_definitions` should return a list of
 |      definition for ``sys``, ``f``, ``C`` and ``x``.
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... import keyword
 |      ...
 |      ... class C:
 |      ...     pass
 |      ...
 |      ... class D:
 |      ...     pass
 |      ...
 |      ... x = D()
 |      ...
 |      ... def f():
 |      ...     pass
 |      ...
 |      ... for variable in [keyword, f, C, x]:
 |      ...     variable'''
 |      
 |      >>> script = Script(source)
 |      >>> defs = script.goto_definitions()
 |      
 |      Before showing what is in ``defs``, let's sort it by :attr:`line`
 |      so that it is easy to relate the result to the source code.
 |      
 |      >>> defs = sorted(defs, key=lambda d: d.line)
 |      >>> defs                           # doctest: +NORMALIZE_WHITESPACE
 |      [<Definition module keyword>, <Definition class C>,
 |       <Definition instance D>, <Definition def f>]
 |      
 |      Finally, here is what you can get from :attr:`type`:
 |      
 |      >>> defs = [str(d.type) for d in defs]  # It's unicode and in Py2 has u before it.
 |      >>> defs[0]
 |      'module'
 |      >>> defs[1]
 |      'class'
 |      >>> defs[2]
 |      'instance'
 |      >>> defs[3]
 |      'function'
",class,"('(self, evaluator, definition)',)",self,,,arg_info
jedi,0.12.0,jedi.api.classes.Definition,api.classes,Definition,"Python Library Documentation: class Definition in module jedi.api.classes

class Definition(BaseDefinition)
 |  *Definition* objects are returned from :meth:`api.Script.goto_assignments`
 |  or :meth:`api.Script.goto_definitions`.
 |  
 |  Method resolution order:
 |      Definition
 |      BaseDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __init__(self, evaluator, definition)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __ne__(self, other)
 |      Return self!=value.
 |  
 |  defined_names(self)
 |      List sub-definitions (e.g., methods in class).
 |      
 |      :rtype: list of Definition
 |  
 |  is_definition(self)
 |      Returns True, if defined as a name in a statement, function or class.
 |      Returns False, if it's a reference to such a definition.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  desc_with_module
 |      In addition to the definition, also return the module.
 |      
 |      .. warning:: Don't use this function yet, its behaviour may change. If
 |          you really need it, talk to me.
 |      
 |      .. todo:: Add full path. This function is should return a
 |          `module.class.function` path.
 |  
 |  description
 |      A description of the :class:`.Definition` object, which is heavily used
 |      in testing. e.g. for ``isinstance`` it returns ``def isinstance``.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... def f():
 |      ...     pass
 |      ...
 |      ... class C:
 |      ...     pass
 |      ...
 |      ... variable = f if random.choice([0,1]) else C'''
 |      >>> script = Script(source, column=3)  # line is maximum by default
 |      >>> defs = script.goto_definitions()
 |      >>> defs = sorted(defs, key=lambda d: d.line)
 |      >>> defs
 |      [<Definition def f>, <Definition class C>]
 |      >>> str(defs[0].description)  # strip literals in python2
 |      'def f'
 |      >>> str(defs[1].description)
 |      'class C'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from BaseDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  docstring(self, raw=False, fast=True)
 |      Return a document string for this completion object.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''\
 |      ... def f(a, b=1):
 |      ...     ""Document for function f.""
 |      ... '''
 |      >>> script = Script(source, 1, len('def f'), 'example.py')
 |      >>> doc = script.goto_definitions()[0].docstring()
 |      >>> print(doc)
 |      f(a, b=1)
 |      <BLANKLINE>
 |      Document for function f.
 |      
 |      Notice that useful extra information is added to the actual
 |      docstring.  For function, it is call signature.  If you need
 |      actual docstring, use ``raw=True`` instead.
 |      
 |      >>> print(script.goto_definitions()[0].docstring(raw=True))
 |      Document for function f.
 |      
 |      :param fast: Don't follow imports that are only one level deep like
 |          ``import foo``, but follow ``from foo import bar``. This makes
 |          sense for speed reasons. Completing `import a` is slow if you use
 |          the ``foo.docstring(fast=False)`` on every object, because it
 |          parses all libraries starting with ``a``.
 |  
 |  get_line_code(self, before=0, after=0)
 |      Returns the line of code where this object was defined.
 |      
 |      :param before: Add n lines before the current line to the output.
 |      :param after: Add n lines after the current line to the output.
 |      
 |      :return str: Returns the line(s) of code or an empty string if it's a
 |                   builtin.
 |  
 |  goto_assignments(self)
 |  
 |  in_builtin_module(self)
 |      Whether this is a builtin module.
 |  
 |  parent(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from BaseDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  column
 |      The column where the definition occurs (starting with 0).
 |  
 |  full_name
 |      Dot-separated path of this object.
 |      
 |      It is in the form of ``<module>[.<submodule>[...]][.<object>]``.
 |      It is useful when you want to look up Python manual of the
 |      object at hand.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... import os
 |      ... os.path.join'''
 |      >>> script = Script(source, 3, len('os.path.join'), 'example.py')
 |      >>> print(script.goto_definitions()[0].full_name)
 |      os.path.join
 |      
 |      Notice that it returns ``'os.path.join'`` instead of (for example)
 |      ``'posixpath.join'``. This is not correct, since the modules name would
 |      be ``<module 'posixpath' ...>```. However most users find the latter
 |      more practical.
 |  
 |  line
 |      The line where the definition occurs (starting with 1).
 |  
 |  module_name
 |      The module name.
 |      
 |      >>> from jedi import Script
 |      >>> source = 'import json'
 |      >>> script = Script(source, path='example.py')
 |      >>> d = script.goto_definitions()[0]
 |      >>> print(d.module_name)                       # doctest: +ELLIPSIS
 |      json
 |  
 |  name
 |      Name of variable/function/class/module.
 |      
 |      For example, for ``x = None`` it returns ``'x'``.
 |      
 |      :rtype: str or None
 |  
 |  params
 |      Raises an ``AttributeError``if the definition is not callable.
 |      Otherwise returns a list of `Definition` that represents the params.
 |  
 |  type
 |      The type of the definition.
 |      
 |      Here is an example of the value of this attribute.  Let's consider
 |      the following source.  As what is in ``variable`` is unambiguous
 |      to Jedi, :meth:`jedi.Script.goto_definitions` should return a list of
 |      definition for ``sys``, ``f``, ``C`` and ``x``.
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... import keyword
 |      ...
 |      ... class C:
 |      ...     pass
 |      ...
 |      ... class D:
 |      ...     pass
 |      ...
 |      ... x = D()
 |      ...
 |      ... def f():
 |      ...     pass
 |      ...
 |      ... for variable in [keyword, f, C, x]:
 |      ...     variable'''
 |      
 |      >>> script = Script(source)
 |      >>> defs = script.goto_definitions()
 |      
 |      Before showing what is in ``defs``, let's sort it by :attr:`line`
 |      so that it is easy to relate the result to the source code.
 |      
 |      >>> defs = sorted(defs, key=lambda d: d.line)
 |      >>> defs                           # doctest: +NORMALIZE_WHITESPACE
 |      [<Definition module keyword>, <Definition class C>,
 |       <Definition instance D>, <Definition def f>]
 |      
 |      Finally, here is what you can get from :attr:`type`:
 |      
 |      >>> defs = [str(d.type) for d in defs]  # It's unicode and in Py2 has u before it.
 |      >>> defs[0]
 |      'module'
 |      >>> defs[1]
 |      'class'
 |      >>> defs[2]
 |      'instance'
 |      >>> defs[3]
 |      'function'
",class,"('(self, evaluator, definition)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.api.classes.Definition,api.classes,Definition,"Python Library Documentation: class Definition in module jedi.api.classes

class Definition(BaseDefinition)
 |  *Definition* objects are returned from :meth:`api.Script.goto_assignments`
 |  or :meth:`api.Script.goto_definitions`.
 |  
 |  Method resolution order:
 |      Definition
 |      BaseDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __init__(self, evaluator, definition)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __ne__(self, other)
 |      Return self!=value.
 |  
 |  defined_names(self)
 |      List sub-definitions (e.g., methods in class).
 |      
 |      :rtype: list of Definition
 |  
 |  is_definition(self)
 |      Returns True, if defined as a name in a statement, function or class.
 |      Returns False, if it's a reference to such a definition.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  desc_with_module
 |      In addition to the definition, also return the module.
 |      
 |      .. warning:: Don't use this function yet, its behaviour may change. If
 |          you really need it, talk to me.
 |      
 |      .. todo:: Add full path. This function is should return a
 |          `module.class.function` path.
 |  
 |  description
 |      A description of the :class:`.Definition` object, which is heavily used
 |      in testing. e.g. for ``isinstance`` it returns ``def isinstance``.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... def f():
 |      ...     pass
 |      ...
 |      ... class C:
 |      ...     pass
 |      ...
 |      ... variable = f if random.choice([0,1]) else C'''
 |      >>> script = Script(source, column=3)  # line is maximum by default
 |      >>> defs = script.goto_definitions()
 |      >>> defs = sorted(defs, key=lambda d: d.line)
 |      >>> defs
 |      [<Definition def f>, <Definition class C>]
 |      >>> str(defs[0].description)  # strip literals in python2
 |      'def f'
 |      >>> str(defs[1].description)
 |      'class C'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from BaseDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  docstring(self, raw=False, fast=True)
 |      Return a document string for this completion object.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''\
 |      ... def f(a, b=1):
 |      ...     ""Document for function f.""
 |      ... '''
 |      >>> script = Script(source, 1, len('def f'), 'example.py')
 |      >>> doc = script.goto_definitions()[0].docstring()
 |      >>> print(doc)
 |      f(a, b=1)
 |      <BLANKLINE>
 |      Document for function f.
 |      
 |      Notice that useful extra information is added to the actual
 |      docstring.  For function, it is call signature.  If you need
 |      actual docstring, use ``raw=True`` instead.
 |      
 |      >>> print(script.goto_definitions()[0].docstring(raw=True))
 |      Document for function f.
 |      
 |      :param fast: Don't follow imports that are only one level deep like
 |          ``import foo``, but follow ``from foo import bar``. This makes
 |          sense for speed reasons. Completing `import a` is slow if you use
 |          the ``foo.docstring(fast=False)`` on every object, because it
 |          parses all libraries starting with ``a``.
 |  
 |  get_line_code(self, before=0, after=0)
 |      Returns the line of code where this object was defined.
 |      
 |      :param before: Add n lines before the current line to the output.
 |      :param after: Add n lines after the current line to the output.
 |      
 |      :return str: Returns the line(s) of code or an empty string if it's a
 |                   builtin.
 |  
 |  goto_assignments(self)
 |  
 |  in_builtin_module(self)
 |      Whether this is a builtin module.
 |  
 |  parent(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from BaseDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  column
 |      The column where the definition occurs (starting with 0).
 |  
 |  full_name
 |      Dot-separated path of this object.
 |      
 |      It is in the form of ``<module>[.<submodule>[...]][.<object>]``.
 |      It is useful when you want to look up Python manual of the
 |      object at hand.
 |      
 |      Example:
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... import os
 |      ... os.path.join'''
 |      >>> script = Script(source, 3, len('os.path.join'), 'example.py')
 |      >>> print(script.goto_definitions()[0].full_name)
 |      os.path.join
 |      
 |      Notice that it returns ``'os.path.join'`` instead of (for example)
 |      ``'posixpath.join'``. This is not correct, since the modules name would
 |      be ``<module 'posixpath' ...>```. However most users find the latter
 |      more practical.
 |  
 |  line
 |      The line where the definition occurs (starting with 1).
 |  
 |  module_name
 |      The module name.
 |      
 |      >>> from jedi import Script
 |      >>> source = 'import json'
 |      >>> script = Script(source, path='example.py')
 |      >>> d = script.goto_definitions()[0]
 |      >>> print(d.module_name)                       # doctest: +ELLIPSIS
 |      json
 |  
 |  name
 |      Name of variable/function/class/module.
 |      
 |      For example, for ``x = None`` it returns ``'x'``.
 |      
 |      :rtype: str or None
 |  
 |  params
 |      Raises an ``AttributeError``if the definition is not callable.
 |      Otherwise returns a list of `Definition` that represents the params.
 |  
 |  type
 |      The type of the definition.
 |      
 |      Here is an example of the value of this attribute.  Let's consider
 |      the following source.  As what is in ``variable`` is unambiguous
 |      to Jedi, :meth:`jedi.Script.goto_definitions` should return a list of
 |      definition for ``sys``, ``f``, ``C`` and ``x``.
 |      
 |      >>> from jedi import Script
 |      >>> source = '''
 |      ... import keyword
 |      ...
 |      ... class C:
 |      ...     pass
 |      ...
 |      ... class D:
 |      ...     pass
 |      ...
 |      ... x = D()
 |      ...
 |      ... def f():
 |      ...     pass
 |      ...
 |      ... for variable in [keyword, f, C, x]:
 |      ...     variable'''
 |      
 |      >>> script = Script(source)
 |      >>> defs = script.goto_definitions()
 |      
 |      Before showing what is in ``defs``, let's sort it by :attr:`line`
 |      so that it is easy to relate the result to the source code.
 |      
 |      >>> defs = sorted(defs, key=lambda d: d.line)
 |      >>> defs                           # doctest: +NORMALIZE_WHITESPACE
 |      [<Definition module keyword>, <Definition class C>,
 |       <Definition instance D>, <Definition def f>]
 |      
 |      Finally, here is what you can get from :attr:`type`:
 |      
 |      >>> defs = [str(d.type) for d in defs]  # It's unicode and in Py2 has u before it.
 |      >>> defs[0]
 |      'module'
 |      >>> defs[1]
 |      'class'
 |      >>> defs[2]
 |      'instance'
 |      >>> defs[3]
 |      'function'
",class,"('(self, evaluator, definition)',)",definition,,,arg_info
jedi,0.12.0,jedi.api.classes.FunctionContext,api.classes,FunctionContext,"Python Library Documentation: class FunctionContext in module jedi.evaluate.context.function

class FunctionContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, funcdef)
 |      This should not be called directly
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, funcdef)',)",self,,,arg_info
jedi,0.12.0,jedi.api.classes.FunctionContext,api.classes,FunctionContext,"Python Library Documentation: class FunctionContext in module jedi.evaluate.context.function

class FunctionContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, funcdef)
 |      This should not be called directly
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, funcdef)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.api.classes.FunctionContext,api.classes,FunctionContext,"Python Library Documentation: class FunctionContext in module jedi.evaluate.context.function

class FunctionContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, funcdef)
 |      This should not be called directly
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, funcdef)',)",funcdef,,,arg_info
jedi,0.12.0,jedi.api.classes.FunctionContext,api.classes,FunctionContext,"Python Library Documentation: class FunctionContext in module jedi.evaluate.context.function

class FunctionContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, funcdef)
 |      This should not be called directly
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, funcdef)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.api.classes.FunctionExecutionContext,api.classes,FunctionExecutionContext,"Python Library Documentation: class FunctionExecutionContext in module jedi.evaluate.context.function

class FunctionExecutionContext(jedi.evaluate.base_context.TreeContext)
 |  This class is used to evaluate functions and their returns.
 |  
 |  This is the most complicated class, because it contains the logic to
 |  transfer parameters. It is even more complicated, because there may be
 |  multiple calls to functions and recursion has to be avoided. But this is
 |  responsibility of the decorators.
 |  
 |  Method resolution order:
 |      FunctionExecutionContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, function_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_params = wrapper(obj, *args, **kwargs)
 |  
 |  get_return_values = wrapper(obj, *args, **kwargs)
 |  
 |  get_yield_lazy_contexts = wrapper(execution, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_filter = <class 'jedi.evaluate.filters.FunctionExec...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, function_context, var_args)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.api.classes.FunctionExecutionContext,api.classes,FunctionExecutionContext,"Python Library Documentation: class FunctionExecutionContext in module jedi.evaluate.context.function

class FunctionExecutionContext(jedi.evaluate.base_context.TreeContext)
 |  This class is used to evaluate functions and their returns.
 |  
 |  This is the most complicated class, because it contains the logic to
 |  transfer parameters. It is even more complicated, because there may be
 |  multiple calls to functions and recursion has to be avoided. But this is
 |  responsibility of the decorators.
 |  
 |  Method resolution order:
 |      FunctionExecutionContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, function_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_params = wrapper(obj, *args, **kwargs)
 |  
 |  get_return_values = wrapper(obj, *args, **kwargs)
 |  
 |  get_yield_lazy_contexts = wrapper(execution, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_filter = <class 'jedi.evaluate.filters.FunctionExec...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, function_context, var_args)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.api.classes.FunctionExecutionContext,api.classes,FunctionExecutionContext,"Python Library Documentation: class FunctionExecutionContext in module jedi.evaluate.context.function

class FunctionExecutionContext(jedi.evaluate.base_context.TreeContext)
 |  This class is used to evaluate functions and their returns.
 |  
 |  This is the most complicated class, because it contains the logic to
 |  transfer parameters. It is even more complicated, because there may be
 |  multiple calls to functions and recursion has to be avoided. But this is
 |  responsibility of the decorators.
 |  
 |  Method resolution order:
 |      FunctionExecutionContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, function_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_params = wrapper(obj, *args, **kwargs)
 |  
 |  get_return_values = wrapper(obj, *args, **kwargs)
 |  
 |  get_yield_lazy_contexts = wrapper(execution, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_filter = <class 'jedi.evaluate.filters.FunctionExec...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, function_context, var_args)',)",function_context,,,arg_info
jedi,0.12.0,jedi.api.classes.FunctionExecutionContext,api.classes,FunctionExecutionContext,"Python Library Documentation: class FunctionExecutionContext in module jedi.evaluate.context.function

class FunctionExecutionContext(jedi.evaluate.base_context.TreeContext)
 |  This class is used to evaluate functions and their returns.
 |  
 |  This is the most complicated class, because it contains the logic to
 |  transfer parameters. It is even more complicated, because there may be
 |  multiple calls to functions and recursion has to be avoided. But this is
 |  responsibility of the decorators.
 |  
 |  Method resolution order:
 |      FunctionExecutionContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, function_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_params = wrapper(obj, *args, **kwargs)
 |  
 |  get_return_values = wrapper(obj, *args, **kwargs)
 |  
 |  get_yield_lazy_contexts = wrapper(execution, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_filter = <class 'jedi.evaluate.filters.FunctionExec...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, function_context, var_args)',)",var_args,,,arg_info
jedi,0.12.0,jedi.api.classes.FunctionExecutionContext,api.classes,FunctionExecutionContext,"Python Library Documentation: class FunctionExecutionContext in module jedi.evaluate.context.function

class FunctionExecutionContext(jedi.evaluate.base_context.TreeContext)
 |  This class is used to evaluate functions and their returns.
 |  
 |  This is the most complicated class, because it contains the logic to
 |  transfer parameters. It is even more complicated, because there may be
 |  multiple calls to functions and recursion has to be avoided. But this is
 |  responsibility of the decorators.
 |  
 |  Method resolution order:
 |      FunctionExecutionContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, function_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_params = wrapper(obj, *args, **kwargs)
 |  
 |  get_return_values = wrapper(obj, *args, **kwargs)
 |  
 |  get_yield_lazy_contexts = wrapper(execution, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_filter = <class 'jedi.evaluate.filters.FunctionExec...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, function_context, var_args)',)",self,,,arg_info
jedi,0.12.0,jedi.api.classes.ImportName,api.classes,ImportName,"Python Library Documentation: class ImportName in module jedi.evaluate.imports

class ImportName(jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      ImportName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, parent_context, string_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  start_pos = (1, 0)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, string_name)',)",self,,,arg_info
jedi,0.12.0,jedi.api.classes.ImportName,api.classes,ImportName,"Python Library Documentation: class ImportName in module jedi.evaluate.imports

class ImportName(jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      ImportName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, parent_context, string_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  start_pos = (1, 0)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, string_name)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.api.classes.ImportName,api.classes,ImportName,"Python Library Documentation: class ImportName in module jedi.evaluate.imports

class ImportName(jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      ImportName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, parent_context, string_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  start_pos = (1, 0)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, string_name)',)",string_name,,,arg_info
jedi,0.12.0,jedi.api.classes.KeywordName,api.classes,KeywordName,"Python Library Documentation: class KeywordName in module jedi.api.keywords

class KeywordName(jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      KeywordName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'keyword'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, evaluator, name)',)",name,,,arg_info
jedi,0.12.0,jedi.api.classes.KeywordName,api.classes,KeywordName,"Python Library Documentation: class KeywordName in module jedi.api.keywords

class KeywordName(jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      KeywordName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'keyword'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, evaluator, name)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.api.classes.KeywordName,api.classes,KeywordName,"Python Library Documentation: class KeywordName in module jedi.api.keywords

class KeywordName(jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      KeywordName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'keyword'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, evaluator, name)',)",self,,,arg_info
jedi,0.12.0,jedi.api.classes._Help,api.classes,_Help,"Python Library Documentation: class _Help in module jedi.api.classes

class _Help(builtins.object)
 |  Temporary implementation, will be used as `Script.help() or something in
 |  the future.
 |  
 |  Methods defined here:
 |  
 |  __init__(self, definition)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  docstring(self, fast=True, raw=True)
 |      The docstring ``__doc__`` for any object.
 |      
 |      See :attr:`doc` for example.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, definition)',)",definition,,,arg_info
jedi,0.12.0,jedi.api.classes._Help,api.classes,_Help,"Python Library Documentation: class _Help in module jedi.api.classes

class _Help(builtins.object)
 |  Temporary implementation, will be used as `Script.help() or something in
 |  the future.
 |  
 |  Methods defined here:
 |  
 |  __init__(self, definition)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  docstring(self, fast=True, raw=True)
 |      The docstring ``__doc__`` for any object.
 |      
 |      See :attr:`doc` for example.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, definition)',)",self,,,arg_info
jedi,0.12.0,jedi.api.classes._sort_names_by_start_pos,api.classes,_sort_names_by_start_pos,"Python Library Documentation: function _sort_names_by_start_pos in module jedi.api.classes

_sort_names_by_start_pos(names)
",function,"('(names)',)",names,,,arg_info
jedi,0.12.0,jedi.api.classes.defined_names,api.classes,defined_names,"Python Library Documentation: function defined_names in module jedi.api.classes

defined_names(evaluator, context)
    List sub-definitions (e.g., methods in class).
    
    :type scope: Scope
    :rtype: list of Definition
",function,"('(evaluator, context)',)",context,,,arg_info
jedi,0.12.0,jedi.api.classes.defined_names,api.classes,defined_names,"Python Library Documentation: function defined_names in module jedi.api.classes

defined_names(evaluator, context)
    List sub-definitions (e.g., methods in class).
    
    :type scope: Scope
    :rtype: list of Definition
",function,"('(evaluator, context)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.api.classes.memoize_method,api.classes,memoize_method,"Python Library Documentation: function memoize_method in module jedi.cache

memoize_method(method)
    A normal memoize function.
",function,"('(method)',)",method,,,arg_info
jedi,0.12.0,jedi.api.classes.search_ancestor,api.classes,search_ancestor,"Python Library Documentation: function search_ancestor in module parso.tree

search_ancestor(node, *node_types)
    Recursively looks at the parents of a node and returns the first found node
    that matches node_types. Returns ``None`` if no matching node is found.
    
    :param node: The ancestors of this node will be checked.
    :param node_types: type names that are searched for.
    :type node_types: tuple of str
",function,"('(node, *node_types)',)",node,,,arg_info
jedi,0.12.0,jedi.api.classes.unite,api.classes,unite,"Python Library Documentation: function unite in module jedi.evaluate.utils

unite(iterable)
    Turns a two dimensional array into a one dimensional.
",function,"('(iterable)',)",iterable,,,arg_info
jedi,0.12.0,jedi.api.completion.Completion,api.completion,Completion,"Python Library Documentation: class Completion in module jedi.api.completion

class Completion(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module, code_lines, position, call_signatures_method)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  completions(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module, code_lines, position, call_signatures_method)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.api.completion.Completion,api.completion,Completion,"Python Library Documentation: class Completion in module jedi.api.completion

class Completion(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module, code_lines, position, call_signatures_method)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  completions(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module, code_lines, position, call_signatures_method)',)",self,,,arg_info
jedi,0.12.0,jedi.api.completion.Completion,api.completion,Completion,"Python Library Documentation: class Completion in module jedi.api.completion

class Completion(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module, code_lines, position, call_signatures_method)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  completions(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module, code_lines, position, call_signatures_method)',)",position,,,arg_info
jedi,0.12.0,jedi.api.completion.Completion,api.completion,Completion,"Python Library Documentation: class Completion in module jedi.api.completion

class Completion(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module, code_lines, position, call_signatures_method)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  completions(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module, code_lines, position, call_signatures_method)',)",code_lines,,,arg_info
jedi,0.12.0,jedi.api.completion.Completion,api.completion,Completion,"Python Library Documentation: class Completion in module jedi.api.completion

class Completion(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module, code_lines, position, call_signatures_method)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  completions(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module, code_lines, position, call_signatures_method)',)",module,,,arg_info
jedi,0.12.0,jedi.api.completion.Completion,api.completion,Completion,"Python Library Documentation: class Completion in module jedi.api.completion

class Completion(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module, code_lines, position, call_signatures_method)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  completions(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module, code_lines, position, call_signatures_method)',)",call_signatures_method,,,arg_info
jedi,0.12.0,jedi.api.completion.Leaf,api.completion,Leaf,"Python Library Documentation: class Leaf in module parso.tree

class Leaf(NodeOrLeaf)
 |  Leafs are basically tokens with a better API. Leafs exactly know where they
 |  were defined and what text preceeds them.
 |  
 |  Method resolution order:
 |      Leaf
 |      NodeOrLeaf
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, value, start_pos, prefix='')
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_code(self, include_prefix=True)
 |      Returns the code that was input the input for the parser for this node.
 |      
 |      :param include_prefix: Removes the prefix (whitespace and comments) of
 |          e.g. a statement.
 |  
 |  get_first_leaf(self)
 |      Returns the first leaf of a node or itself if this is a leaf.
 |  
 |  get_last_leaf(self)
 |      Returns the last leaf of a node or itself if this is a leaf.
 |  
 |  get_start_pos_of_prefix(self)
 |      Returns the start_pos of the prefix. This means basically it returns
 |      the end_pos of the last prefix. The `get_start_pos_of_prefix()` of the
 |      prefix `+` in `2 + 1` would be `(1, 1)`, while the start_pos is
 |      `(1, 2)`.
 |      
 |      :return tuple of int: (line, column)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  column
 |  
 |  end_pos
 |      Returns the end position of the prefix as a tuple, e.g. `(3, 4)`.
 |      
 |      :return tuple of int: (line, column)
 |  
 |  line
 |  
 |  parent
 |  
 |  prefix
 |  
 |  start_pos
 |      Returns the starting position of the prefix as a tuple, e.g. `(3, 4)`.
 |      
 |      :return tuple of int: (line, column)
 |  
 |  value
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from NodeOrLeaf:
 |  
 |  get_next_leaf(self)
 |      Returns the next leaf in the parser tree.
 |      Returns None if this is the last element in the parser tree.
 |  
 |  get_next_sibling(self)
 |      Returns the node immediately following this node in this parent's
 |      children list. If this node does not have a next sibling, it is None
 |  
 |  get_previous_leaf(self)
 |      Returns the previous leaf in the parser tree.
 |      Returns `None` if this is the first element in the parser tree.
 |  
 |  get_previous_sibling(self)
 |      Returns the node immediately preceding this node in this parent's
 |      children list. If this node does not have a previous sibling, it is
 |      None.
 |  
 |  get_root_node(self)
 |      Returns the root node of a parser tree. The returned node doesn't have
 |      a parent node like all the other nodes/leaves.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from NodeOrLeaf:
 |  
 |  type = None
",class,"(""(self, value, start_pos, prefix='')"",)",prefix,,,arg_info
jedi,0.12.0,jedi.api.completion.Leaf,api.completion,Leaf,"Python Library Documentation: class Leaf in module parso.tree

class Leaf(NodeOrLeaf)
 |  Leafs are basically tokens with a better API. Leafs exactly know where they
 |  were defined and what text preceeds them.
 |  
 |  Method resolution order:
 |      Leaf
 |      NodeOrLeaf
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, value, start_pos, prefix='')
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_code(self, include_prefix=True)
 |      Returns the code that was input the input for the parser for this node.
 |      
 |      :param include_prefix: Removes the prefix (whitespace and comments) of
 |          e.g. a statement.
 |  
 |  get_first_leaf(self)
 |      Returns the first leaf of a node or itself if this is a leaf.
 |  
 |  get_last_leaf(self)
 |      Returns the last leaf of a node or itself if this is a leaf.
 |  
 |  get_start_pos_of_prefix(self)
 |      Returns the start_pos of the prefix. This means basically it returns
 |      the end_pos of the last prefix. The `get_start_pos_of_prefix()` of the
 |      prefix `+` in `2 + 1` would be `(1, 1)`, while the start_pos is
 |      `(1, 2)`.
 |      
 |      :return tuple of int: (line, column)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  column
 |  
 |  end_pos
 |      Returns the end position of the prefix as a tuple, e.g. `(3, 4)`.
 |      
 |      :return tuple of int: (line, column)
 |  
 |  line
 |  
 |  parent
 |  
 |  prefix
 |  
 |  start_pos
 |      Returns the starting position of the prefix as a tuple, e.g. `(3, 4)`.
 |      
 |      :return tuple of int: (line, column)
 |  
 |  value
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from NodeOrLeaf:
 |  
 |  get_next_leaf(self)
 |      Returns the next leaf in the parser tree.
 |      Returns None if this is the last element in the parser tree.
 |  
 |  get_next_sibling(self)
 |      Returns the node immediately following this node in this parent's
 |      children list. If this node does not have a next sibling, it is None
 |  
 |  get_previous_leaf(self)
 |      Returns the previous leaf in the parser tree.
 |      Returns `None` if this is the first element in the parser tree.
 |  
 |  get_previous_sibling(self)
 |      Returns the node immediately preceding this node in this parent's
 |      children list. If this node does not have a previous sibling, it is
 |      None.
 |  
 |  get_root_node(self)
 |      Returns the root node of a parser tree. The returned node doesn't have
 |      a parent node like all the other nodes/leaves.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from NodeOrLeaf:
 |  
 |  type = None
",class,"(""(self, value, start_pos, prefix='')"",)",start_pos,,,arg_info
jedi,0.12.0,jedi.api.completion.Leaf,api.completion,Leaf,"Python Library Documentation: class Leaf in module parso.tree

class Leaf(NodeOrLeaf)
 |  Leafs are basically tokens with a better API. Leafs exactly know where they
 |  were defined and what text preceeds them.
 |  
 |  Method resolution order:
 |      Leaf
 |      NodeOrLeaf
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, value, start_pos, prefix='')
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_code(self, include_prefix=True)
 |      Returns the code that was input the input for the parser for this node.
 |      
 |      :param include_prefix: Removes the prefix (whitespace and comments) of
 |          e.g. a statement.
 |  
 |  get_first_leaf(self)
 |      Returns the first leaf of a node or itself if this is a leaf.
 |  
 |  get_last_leaf(self)
 |      Returns the last leaf of a node or itself if this is a leaf.
 |  
 |  get_start_pos_of_prefix(self)
 |      Returns the start_pos of the prefix. This means basically it returns
 |      the end_pos of the last prefix. The `get_start_pos_of_prefix()` of the
 |      prefix `+` in `2 + 1` would be `(1, 1)`, while the start_pos is
 |      `(1, 2)`.
 |      
 |      :return tuple of int: (line, column)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  column
 |  
 |  end_pos
 |      Returns the end position of the prefix as a tuple, e.g. `(3, 4)`.
 |      
 |      :return tuple of int: (line, column)
 |  
 |  line
 |  
 |  parent
 |  
 |  prefix
 |  
 |  start_pos
 |      Returns the starting position of the prefix as a tuple, e.g. `(3, 4)`.
 |      
 |      :return tuple of int: (line, column)
 |  
 |  value
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from NodeOrLeaf:
 |  
 |  get_next_leaf(self)
 |      Returns the next leaf in the parser tree.
 |      Returns None if this is the last element in the parser tree.
 |  
 |  get_next_sibling(self)
 |      Returns the node immediately following this node in this parent's
 |      children list. If this node does not have a next sibling, it is None
 |  
 |  get_previous_leaf(self)
 |      Returns the previous leaf in the parser tree.
 |      Returns `None` if this is the first element in the parser tree.
 |  
 |  get_previous_sibling(self)
 |      Returns the node immediately preceding this node in this parent's
 |      children list. If this node does not have a previous sibling, it is
 |      None.
 |  
 |  get_root_node(self)
 |      Returns the root node of a parser tree. The returned node doesn't have
 |      a parent node like all the other nodes/leaves.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from NodeOrLeaf:
 |  
 |  type = None
",class,"(""(self, value, start_pos, prefix='')"",)",value,,,arg_info
jedi,0.12.0,jedi.api.completion.Leaf,api.completion,Leaf,"Python Library Documentation: class Leaf in module parso.tree

class Leaf(NodeOrLeaf)
 |  Leafs are basically tokens with a better API. Leafs exactly know where they
 |  were defined and what text preceeds them.
 |  
 |  Method resolution order:
 |      Leaf
 |      NodeOrLeaf
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, value, start_pos, prefix='')
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_code(self, include_prefix=True)
 |      Returns the code that was input the input for the parser for this node.
 |      
 |      :param include_prefix: Removes the prefix (whitespace and comments) of
 |          e.g. a statement.
 |  
 |  get_first_leaf(self)
 |      Returns the first leaf of a node or itself if this is a leaf.
 |  
 |  get_last_leaf(self)
 |      Returns the last leaf of a node or itself if this is a leaf.
 |  
 |  get_start_pos_of_prefix(self)
 |      Returns the start_pos of the prefix. This means basically it returns
 |      the end_pos of the last prefix. The `get_start_pos_of_prefix()` of the
 |      prefix `+` in `2 + 1` would be `(1, 1)`, while the start_pos is
 |      `(1, 2)`.
 |      
 |      :return tuple of int: (line, column)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  column
 |  
 |  end_pos
 |      Returns the end position of the prefix as a tuple, e.g. `(3, 4)`.
 |      
 |      :return tuple of int: (line, column)
 |  
 |  line
 |  
 |  parent
 |  
 |  prefix
 |  
 |  start_pos
 |      Returns the starting position of the prefix as a tuple, e.g. `(3, 4)`.
 |      
 |      :return tuple of int: (line, column)
 |  
 |  value
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from NodeOrLeaf:
 |  
 |  get_next_leaf(self)
 |      Returns the next leaf in the parser tree.
 |      Returns None if this is the last element in the parser tree.
 |  
 |  get_next_sibling(self)
 |      Returns the node immediately following this node in this parent's
 |      children list. If this node does not have a next sibling, it is None
 |  
 |  get_previous_leaf(self)
 |      Returns the previous leaf in the parser tree.
 |      Returns `None` if this is the first element in the parser tree.
 |  
 |  get_previous_sibling(self)
 |      Returns the node immediately preceding this node in this parent's
 |      children list. If this node does not have a previous sibling, it is
 |      None.
 |  
 |  get_root_node(self)
 |      Returns the root node of a parser tree. The returned node doesn't have
 |      a parent node like all the other nodes/leaves.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from NodeOrLeaf:
 |  
 |  type = None
",class,"(""(self, value, start_pos, prefix='')"",)",self,,,arg_info
jedi,0.12.0,jedi.api.completion.Parameter,api.completion,Parameter,"Python Library Documentation: class Parameter in module inspect

class Parameter(builtins.object)
 |  Represents a parameter in a function signature.
 |  
 |  Has the following public attributes:
 |  
 |  * name : str
 |      The name of the parameter as a string.
 |  * default : object
 |      The default value for the parameter if specified.  If the
 |      parameter has no default value, this attribute is set to
 |      `Parameter.empty`.
 |  * annotation
 |      The annotation for the parameter if specified.  If the
 |      parameter has no annotation, this attribute is set to
 |      `Parameter.empty`.
 |  * kind : str
 |      Describes how argument values are bound to the parameter.
 |      Possible values: `Parameter.POSITIONAL_ONLY`,
 |      `Parameter.POSITIONAL_OR_KEYWORD`, `Parameter.VAR_POSITIONAL`,
 |      `Parameter.KEYWORD_ONLY`, `Parameter.VAR_KEYWORD`.
 |  
 |  Methods defined here:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __init__(self, name, kind, *, default, annotation)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __reduce__(self)
 |      helper for pickle
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __setstate__(self, state)
 |  
 |  __str__(self)
 |      Return str(self).
 |  
 |  replace(self, *, name=<class 'inspect._void'>, kind=<class 'inspect._void'>, annotation=<class 'inspect._void'>, default=<class 'inspect._void'>)
 |      Creates a customized copy of the Parameter.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  annotation
 |  
 |  default
 |  
 |  kind
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  KEYWORD_ONLY = <_ParameterKind.KEYWORD_ONLY: 3>
 |  
 |  POSITIONAL_ONLY = <_ParameterKind.POSITIONAL_ONLY: 0>
 |  
 |  POSITIONAL_OR_KEYWORD = <_ParameterKind.POSITIONAL_OR_KEYWORD: 1>
 |  
 |  VAR_KEYWORD = <_ParameterKind.VAR_KEYWORD: 4>
 |  
 |  VAR_POSITIONAL = <_ParameterKind.VAR_POSITIONAL: 2>
 |  
 |  empty = <class 'inspect._empty'>
 |      Marker object for Signature.empty and Parameter.empty.
",class,"('(self, name, kind, *, default, annotation)',)",self,,,arg_info
jedi,0.12.0,jedi.api.completion.Parameter,api.completion,Parameter,"Python Library Documentation: class Parameter in module inspect

class Parameter(builtins.object)
 |  Represents a parameter in a function signature.
 |  
 |  Has the following public attributes:
 |  
 |  * name : str
 |      The name of the parameter as a string.
 |  * default : object
 |      The default value for the parameter if specified.  If the
 |      parameter has no default value, this attribute is set to
 |      `Parameter.empty`.
 |  * annotation
 |      The annotation for the parameter if specified.  If the
 |      parameter has no annotation, this attribute is set to
 |      `Parameter.empty`.
 |  * kind : str
 |      Describes how argument values are bound to the parameter.
 |      Possible values: `Parameter.POSITIONAL_ONLY`,
 |      `Parameter.POSITIONAL_OR_KEYWORD`, `Parameter.VAR_POSITIONAL`,
 |      `Parameter.KEYWORD_ONLY`, `Parameter.VAR_KEYWORD`.
 |  
 |  Methods defined here:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __init__(self, name, kind, *, default, annotation)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __reduce__(self)
 |      helper for pickle
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __setstate__(self, state)
 |  
 |  __str__(self)
 |      Return str(self).
 |  
 |  replace(self, *, name=<class 'inspect._void'>, kind=<class 'inspect._void'>, annotation=<class 'inspect._void'>, default=<class 'inspect._void'>)
 |      Creates a customized copy of the Parameter.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  annotation
 |  
 |  default
 |  
 |  kind
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  KEYWORD_ONLY = <_ParameterKind.KEYWORD_ONLY: 3>
 |  
 |  POSITIONAL_ONLY = <_ParameterKind.POSITIONAL_ONLY: 0>
 |  
 |  POSITIONAL_OR_KEYWORD = <_ParameterKind.POSITIONAL_OR_KEYWORD: 1>
 |  
 |  VAR_KEYWORD = <_ParameterKind.VAR_KEYWORD: 4>
 |  
 |  VAR_POSITIONAL = <_ParameterKind.VAR_POSITIONAL: 2>
 |  
 |  empty = <class 'inspect._empty'>
 |      Marker object for Signature.empty and Parameter.empty.
",class,"('(self, name, kind, *, default, annotation)',)",name,,,arg_info
jedi,0.12.0,jedi.api.completion.Parameter,api.completion,Parameter,"Python Library Documentation: class Parameter in module inspect

class Parameter(builtins.object)
 |  Represents a parameter in a function signature.
 |  
 |  Has the following public attributes:
 |  
 |  * name : str
 |      The name of the parameter as a string.
 |  * default : object
 |      The default value for the parameter if specified.  If the
 |      parameter has no default value, this attribute is set to
 |      `Parameter.empty`.
 |  * annotation
 |      The annotation for the parameter if specified.  If the
 |      parameter has no annotation, this attribute is set to
 |      `Parameter.empty`.
 |  * kind : str
 |      Describes how argument values are bound to the parameter.
 |      Possible values: `Parameter.POSITIONAL_ONLY`,
 |      `Parameter.POSITIONAL_OR_KEYWORD`, `Parameter.VAR_POSITIONAL`,
 |      `Parameter.KEYWORD_ONLY`, `Parameter.VAR_KEYWORD`.
 |  
 |  Methods defined here:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __init__(self, name, kind, *, default, annotation)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __reduce__(self)
 |      helper for pickle
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __setstate__(self, state)
 |  
 |  __str__(self)
 |      Return str(self).
 |  
 |  replace(self, *, name=<class 'inspect._void'>, kind=<class 'inspect._void'>, annotation=<class 'inspect._void'>, default=<class 'inspect._void'>)
 |      Creates a customized copy of the Parameter.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  annotation
 |  
 |  default
 |  
 |  kind
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  KEYWORD_ONLY = <_ParameterKind.KEYWORD_ONLY: 3>
 |  
 |  POSITIONAL_ONLY = <_ParameterKind.POSITIONAL_ONLY: 0>
 |  
 |  POSITIONAL_OR_KEYWORD = <_ParameterKind.POSITIONAL_OR_KEYWORD: 1>
 |  
 |  VAR_KEYWORD = <_ParameterKind.VAR_KEYWORD: 4>
 |  
 |  VAR_POSITIONAL = <_ParameterKind.VAR_POSITIONAL: 2>
 |  
 |  empty = <class 'inspect._empty'>
 |      Marker object for Signature.empty and Parameter.empty.
",class,"('(self, name, kind, *, default, annotation)',)",kind,,,arg_info
jedi,0.12.0,jedi.api.completion.evaluate_call_of_leaf,api.completion,evaluate_call_of_leaf,"Python Library Documentation: function evaluate_call_of_leaf in module jedi.evaluate.helpers

evaluate_call_of_leaf(context, leaf, cut_own_trailer=False)
    Creates a ""call"" node that consist of all ``trailer`` and ``power``
    objects.  E.g. if you call it with ``append``::
    
        list([]).append(3) or None
    
    You would get a node with the content ``list([]).append`` back.
    
    This generates a copy of the original ast node.
    
    If you're using the leaf, e.g. the bracket `)` it will return ``list([])``.
    
    We use this function for two purposes. Given an expression ``bar.foo``,
    we may want to
      - infer the type of ``foo`` to offer completions after foo
      - infer the type of ``bar`` to be able to jump to the definition of foo
    The option ``cut_own_trailer`` must be set to true for the second purpose.
",function,"('(context, leaf, cut_own_trailer=False)',)",cut_own_trailer,False,bool,arg_info
jedi,0.12.0,jedi.api.completion.evaluate_call_of_leaf,api.completion,evaluate_call_of_leaf,"Python Library Documentation: function evaluate_call_of_leaf in module jedi.evaluate.helpers

evaluate_call_of_leaf(context, leaf, cut_own_trailer=False)
    Creates a ""call"" node that consist of all ``trailer`` and ``power``
    objects.  E.g. if you call it with ``append``::
    
        list([]).append(3) or None
    
    You would get a node with the content ``list([]).append`` back.
    
    This generates a copy of the original ast node.
    
    If you're using the leaf, e.g. the bracket `)` it will return ``list([])``.
    
    We use this function for two purposes. Given an expression ``bar.foo``,
    we may want to
      - infer the type of ``foo`` to offer completions after foo
      - infer the type of ``bar`` to be able to jump to the definition of foo
    The option ``cut_own_trailer`` must be set to true for the second purpose.
",function,"('(context, leaf, cut_own_trailer=False)',)",leaf,,,arg_info
jedi,0.12.0,jedi.api.completion.evaluate_call_of_leaf,api.completion,evaluate_call_of_leaf,"Python Library Documentation: function evaluate_call_of_leaf in module jedi.evaluate.helpers

evaluate_call_of_leaf(context, leaf, cut_own_trailer=False)
    Creates a ""call"" node that consist of all ``trailer`` and ``power``
    objects.  E.g. if you call it with ``append``::
    
        list([]).append(3) or None
    
    You would get a node with the content ``list([]).append`` back.
    
    This generates a copy of the original ast node.
    
    If you're using the leaf, e.g. the bracket `)` it will return ``list([])``.
    
    We use this function for two purposes. Given an expression ``bar.foo``,
    we may want to
      - infer the type of ``foo`` to offer completions after foo
      - infer the type of ``bar`` to be able to jump to the definition of foo
    The option ``cut_own_trailer`` must be set to true for the second purpose.
",function,"('(context, leaf, cut_own_trailer=False)',)",context,,,arg_info
jedi,0.12.0,jedi.api.completion.filter_names,api.completion,filter_names,"Python Library Documentation: function filter_names in module jedi.api.completion

filter_names(evaluator, completion_names, stack, like_name)
",function,"('(evaluator, completion_names, stack, like_name)',)",stack,,,arg_info
jedi,0.12.0,jedi.api.completion.filter_names,api.completion,filter_names,"Python Library Documentation: function filter_names in module jedi.api.completion

filter_names(evaluator, completion_names, stack, like_name)
",function,"('(evaluator, completion_names, stack, like_name)',)",completion_names,,,arg_info
jedi,0.12.0,jedi.api.completion.filter_names,api.completion,filter_names,"Python Library Documentation: function filter_names in module jedi.api.completion

filter_names(evaluator, completion_names, stack, like_name)
",function,"('(evaluator, completion_names, stack, like_name)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.api.completion.filter_names,api.completion,filter_names,"Python Library Documentation: function filter_names in module jedi.api.completion

filter_names(evaluator, completion_names, stack, like_name)
",function,"('(evaluator, completion_names, stack, like_name)',)",like_name,,,arg_info
jedi,0.12.0,jedi.api.completion.get_call_signature_param_names,api.completion,get_call_signature_param_names,"Python Library Documentation: function get_call_signature_param_names in module jedi.api.completion

get_call_signature_param_names(call_signatures)
",function,"('(call_signatures)',)",call_signatures,,,arg_info
jedi,0.12.0,jedi.api.completion.get_flow_scope_node,api.completion,get_flow_scope_node,"Python Library Documentation: function get_flow_scope_node in module jedi.api.completion

get_flow_scope_node(module_node, position)
",function,"('(module_node, position)',)",position,,,arg_info
jedi,0.12.0,jedi.api.completion.get_flow_scope_node,api.completion,get_flow_scope_node,"Python Library Documentation: function get_flow_scope_node in module jedi.api.completion

get_flow_scope_node(module_node, position)
",function,"('(module_node, position)',)",module_node,,,arg_info
jedi,0.12.0,jedi.api.completion.get_global_filters,api.completion,get_global_filters,"Python Library Documentation: function get_global_filters in module jedi.evaluate.filters

get_global_filters(evaluator, context, until_position, origin_scope)
    Returns all filters in order of priority for name resolution.
    
    For global name lookups. The filters will handle name resolution
    themselves, but here we gather possible filters downwards.
    
    >>> from jedi._compatibility import u, no_unicode_pprint
    >>> from jedi import Script
    >>> script = Script(u('''
    ... x = ['a', 'b', 'c']
    ... def func():
    ...     y = None
    ... '''))
    >>> module_node = script._module_node
    >>> scope = next(module_node.iter_funcdefs())
    >>> scope
    <Function: func@3-5>
    >>> context = script._get_module().create_context(scope)
    >>> filters = list(get_global_filters(context.evaluator, context, (4, 0), None))
    
    First we get the names from the function scope.
    
    >>> no_unicode_pprint(filters[0])                    #doctest: +ELLIPSIS
    MergedFilter(<ParserTreeFilter: ...>, <GlobalNameFilter: ...>)
    >>> sorted(str(n) for n in filters[0].values())
    ['<TreeNameDefinition: func@(3, 4)>', '<TreeNameDefinition: x@(2, 0)>']
    >>> filters[0]._filters[0]._until_position
    (4, 0)
    >>> filters[0]._filters[1]._until_position
    
    Then it yields the names from one level ""lower"". In this example, this is
    the module scope (including globals).
    As a side note, you can see, that the position in the filter is None on the
    globals filter, because there the whole module is searched.
    
    >>> list(filters[1].values())  # package modules -> Also empty.
    []
    >>> sorted(name.string_name for name in filters[2].values())  # Module attributes
    ['__doc__', '__file__', '__name__', '__package__']
    
    Finally, it yields the builtin filter, if `include_builtin` is
    true (default).
    
    >>> filters[3].values()                              #doctest: +ELLIPSIS
    [<CompiledName: ...>, ...]
",function,"('(evaluator, context, until_position, origin_scope)',)",origin_scope,,,arg_info
jedi,0.12.0,jedi.api.completion.get_global_filters,api.completion,get_global_filters,"Python Library Documentation: function get_global_filters in module jedi.evaluate.filters

get_global_filters(evaluator, context, until_position, origin_scope)
    Returns all filters in order of priority for name resolution.
    
    For global name lookups. The filters will handle name resolution
    themselves, but here we gather possible filters downwards.
    
    >>> from jedi._compatibility import u, no_unicode_pprint
    >>> from jedi import Script
    >>> script = Script(u('''
    ... x = ['a', 'b', 'c']
    ... def func():
    ...     y = None
    ... '''))
    >>> module_node = script._module_node
    >>> scope = next(module_node.iter_funcdefs())
    >>> scope
    <Function: func@3-5>
    >>> context = script._get_module().create_context(scope)
    >>> filters = list(get_global_filters(context.evaluator, context, (4, 0), None))
    
    First we get the names from the function scope.
    
    >>> no_unicode_pprint(filters[0])                    #doctest: +ELLIPSIS
    MergedFilter(<ParserTreeFilter: ...>, <GlobalNameFilter: ...>)
    >>> sorted(str(n) for n in filters[0].values())
    ['<TreeNameDefinition: func@(3, 4)>', '<TreeNameDefinition: x@(2, 0)>']
    >>> filters[0]._filters[0]._until_position
    (4, 0)
    >>> filters[0]._filters[1]._until_position
    
    Then it yields the names from one level ""lower"". In this example, this is
    the module scope (including globals).
    As a side note, you can see, that the position in the filter is None on the
    globals filter, because there the whole module is searched.
    
    >>> list(filters[1].values())  # package modules -> Also empty.
    []
    >>> sorted(name.string_name for name in filters[2].values())  # Module attributes
    ['__doc__', '__file__', '__name__', '__package__']
    
    Finally, it yields the builtin filter, if `include_builtin` is
    true (default).
    
    >>> filters[3].values()                              #doctest: +ELLIPSIS
    [<CompiledName: ...>, ...]
",function,"('(evaluator, context, until_position, origin_scope)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.api.completion.get_global_filters,api.completion,get_global_filters,"Python Library Documentation: function get_global_filters in module jedi.evaluate.filters

get_global_filters(evaluator, context, until_position, origin_scope)
    Returns all filters in order of priority for name resolution.
    
    For global name lookups. The filters will handle name resolution
    themselves, but here we gather possible filters downwards.
    
    >>> from jedi._compatibility import u, no_unicode_pprint
    >>> from jedi import Script
    >>> script = Script(u('''
    ... x = ['a', 'b', 'c']
    ... def func():
    ...     y = None
    ... '''))
    >>> module_node = script._module_node
    >>> scope = next(module_node.iter_funcdefs())
    >>> scope
    <Function: func@3-5>
    >>> context = script._get_module().create_context(scope)
    >>> filters = list(get_global_filters(context.evaluator, context, (4, 0), None))
    
    First we get the names from the function scope.
    
    >>> no_unicode_pprint(filters[0])                    #doctest: +ELLIPSIS
    MergedFilter(<ParserTreeFilter: ...>, <GlobalNameFilter: ...>)
    >>> sorted(str(n) for n in filters[0].values())
    ['<TreeNameDefinition: func@(3, 4)>', '<TreeNameDefinition: x@(2, 0)>']
    >>> filters[0]._filters[0]._until_position
    (4, 0)
    >>> filters[0]._filters[1]._until_position
    
    Then it yields the names from one level ""lower"". In this example, this is
    the module scope (including globals).
    As a side note, you can see, that the position in the filter is None on the
    globals filter, because there the whole module is searched.
    
    >>> list(filters[1].values())  # package modules -> Also empty.
    []
    >>> sorted(name.string_name for name in filters[2].values())  # Module attributes
    ['__doc__', '__file__', '__name__', '__package__']
    
    Finally, it yields the builtin filter, if `include_builtin` is
    true (default).
    
    >>> filters[3].values()                              #doctest: +ELLIPSIS
    [<CompiledName: ...>, ...]
",function,"('(evaluator, context, until_position, origin_scope)',)",context,,,arg_info
jedi,0.12.0,jedi.api.completion.get_global_filters,api.completion,get_global_filters,"Python Library Documentation: function get_global_filters in module jedi.evaluate.filters

get_global_filters(evaluator, context, until_position, origin_scope)
    Returns all filters in order of priority for name resolution.
    
    For global name lookups. The filters will handle name resolution
    themselves, but here we gather possible filters downwards.
    
    >>> from jedi._compatibility import u, no_unicode_pprint
    >>> from jedi import Script
    >>> script = Script(u('''
    ... x = ['a', 'b', 'c']
    ... def func():
    ...     y = None
    ... '''))
    >>> module_node = script._module_node
    >>> scope = next(module_node.iter_funcdefs())
    >>> scope
    <Function: func@3-5>
    >>> context = script._get_module().create_context(scope)
    >>> filters = list(get_global_filters(context.evaluator, context, (4, 0), None))
    
    First we get the names from the function scope.
    
    >>> no_unicode_pprint(filters[0])                    #doctest: +ELLIPSIS
    MergedFilter(<ParserTreeFilter: ...>, <GlobalNameFilter: ...>)
    >>> sorted(str(n) for n in filters[0].values())
    ['<TreeNameDefinition: func@(3, 4)>', '<TreeNameDefinition: x@(2, 0)>']
    >>> filters[0]._filters[0]._until_position
    (4, 0)
    >>> filters[0]._filters[1]._until_position
    
    Then it yields the names from one level ""lower"". In this example, this is
    the module scope (including globals).
    As a side note, you can see, that the position in the filter is None on the
    globals filter, because there the whole module is searched.
    
    >>> list(filters[1].values())  # package modules -> Also empty.
    []
    >>> sorted(name.string_name for name in filters[2].values())  # Module attributes
    ['__doc__', '__file__', '__name__', '__package__']
    
    Finally, it yields the builtin filter, if `include_builtin` is
    true (default).
    
    >>> filters[3].values()                              #doctest: +ELLIPSIS
    [<CompiledName: ...>, ...]
",function,"('(evaluator, context, until_position, origin_scope)',)",until_position,,,arg_info
jedi,0.12.0,jedi.api.completion.get_statement_of_position,api.completion,get_statement_of_position,"Python Library Documentation: function get_statement_of_position in module jedi.parser_utils

get_statement_of_position(node, pos)
",function,"('(node, pos)',)",pos,,,arg_info
jedi,0.12.0,jedi.api.completion.get_statement_of_position,api.completion,get_statement_of_position,"Python Library Documentation: function get_statement_of_position in module jedi.parser_utils

get_statement_of_position(node, pos)
",function,"('(node, pos)',)",node,,,arg_info
jedi,0.12.0,jedi.api.completion.get_user_scope,api.completion,get_user_scope,"Python Library Documentation: function get_user_scope in module jedi.api.completion

get_user_scope(module_context, position)
    Returns the scope in which the user resides. This includes flows.
",function,"('(module_context, position)',)",position,,,arg_info
jedi,0.12.0,jedi.api.completion.get_user_scope,api.completion,get_user_scope,"Python Library Documentation: function get_user_scope in module jedi.api.completion

get_user_scope(module_context, position)
    Returns the scope in which the user resides. This includes flows.
",function,"('(module_context, position)',)",module_context,,,arg_info
jedi,0.12.0,jedi.api.completion.search_ancestor,api.completion,search_ancestor,"Python Library Documentation: function search_ancestor in module parso.tree

search_ancestor(node, *node_types)
    Recursively looks at the parents of a node and returns the first found node
    that matches node_types. Returns ``None`` if no matching node is found.
    
    :param node: The ancestors of this node will be checked.
    :param node_types: type names that are searched for.
    :type node_types: tuple of str
",function,"('(node, *node_types)',)",node,,,arg_info
jedi,0.12.0,jedi.api.dotted_path_in_sys_path,api,dotted_path_in_sys_path,"Python Library Documentation: function dotted_path_in_sys_path in module jedi.evaluate.sys_path

dotted_path_in_sys_path(sys_path, module_path)
    Returns the dotted path inside a sys.path.
",function,"('(sys_path, module_path)',)",module_path,,,arg_info
jedi,0.12.0,jedi.api.dotted_path_in_sys_path,api,dotted_path_in_sys_path,"Python Library Documentation: function dotted_path_in_sys_path in module jedi.evaluate.sys_path

dotted_path_in_sys_path(sys_path, module_path)
    Returns the dotted path inside a sys.path.
",function,"('(sys_path, module_path)',)",sys_path,,,arg_info
jedi,0.12.0,jedi.api.environment.Environment,api.environment,Environment,"Python Library Documentation: class Environment in module jedi.api.environment

class Environment(_BaseEnvironment)
 |  This class is supposed to be created by internal Jedi architecture. You
 |  should not create it directly. Please use create_environment or the other
 |  functions instead. It is then returned by that function.
 |  
 |  Method resolution order:
 |      Environment
 |      _BaseEnvironment
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, path, executable)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_evaluator_subprocess(self, evaluator)
 |  
 |  get_sys_path(self)
 |      The sys path for this environment. Does not include potential
 |      modifications like ``sys.path.append``.
 |      
 |      :returns: list of str
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from _BaseEnvironment:
 |  
 |  get_grammar(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from _BaseEnvironment:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, path, executable)',)",executable,,,arg_info
jedi,0.12.0,jedi.api.environment.Environment,api.environment,Environment,"Python Library Documentation: class Environment in module jedi.api.environment

class Environment(_BaseEnvironment)
 |  This class is supposed to be created by internal Jedi architecture. You
 |  should not create it directly. Please use create_environment or the other
 |  functions instead. It is then returned by that function.
 |  
 |  Method resolution order:
 |      Environment
 |      _BaseEnvironment
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, path, executable)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_evaluator_subprocess(self, evaluator)
 |  
 |  get_sys_path(self)
 |      The sys path for this environment. Does not include potential
 |      modifications like ``sys.path.append``.
 |      
 |      :returns: list of str
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from _BaseEnvironment:
 |  
 |  get_grammar(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from _BaseEnvironment:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, path, executable)',)",self,,,arg_info
jedi,0.12.0,jedi.api.environment.Environment,api.environment,Environment,"Python Library Documentation: class Environment in module jedi.api.environment

class Environment(_BaseEnvironment)
 |  This class is supposed to be created by internal Jedi architecture. You
 |  should not create it directly. Please use create_environment or the other
 |  functions instead. It is then returned by that function.
 |  
 |  Method resolution order:
 |      Environment
 |      _BaseEnvironment
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, path, executable)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_evaluator_subprocess(self, evaluator)
 |  
 |  get_sys_path(self)
 |      The sys path for this environment. Does not include potential
 |      modifications like ``sys.path.append``.
 |      
 |      :returns: list of str
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from _BaseEnvironment:
 |  
 |  get_grammar(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from _BaseEnvironment:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, path, executable)',)",path,,,arg_info
jedi,0.12.0,jedi.api.environment.EvaluatorSameProcess,api.environment,EvaluatorSameProcess,"Python Library Documentation: class EvaluatorSameProcess in module jedi.evaluate.compiled.subprocess

class EvaluatorSameProcess(_EvaluatorProcess)
 |  Basically just an easy access to functions.py. It has the same API
 |  as EvaluatorSubprocess and does the same thing without using a subprocess.
 |  This is necessary for the Interpreter process.
 |  
 |  Method resolution order:
 |      EvaluatorSameProcess
 |      _EvaluatorProcess
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getattr__(self, name)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from _EvaluatorProcess:
 |  
 |  __init__(self, evaluator)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_access_handle(self, id_)
 |  
 |  get_or_create_access_handle(self, obj)
 |  
 |  set_access_handle(self, handle)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from _EvaluatorProcess:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator)',)",self,,,arg_info
jedi,0.12.0,jedi.api.environment.EvaluatorSameProcess,api.environment,EvaluatorSameProcess,"Python Library Documentation: class EvaluatorSameProcess in module jedi.evaluate.compiled.subprocess

class EvaluatorSameProcess(_EvaluatorProcess)
 |  Basically just an easy access to functions.py. It has the same API
 |  as EvaluatorSubprocess and does the same thing without using a subprocess.
 |  This is necessary for the Interpreter process.
 |  
 |  Method resolution order:
 |      EvaluatorSameProcess
 |      _EvaluatorProcess
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getattr__(self, name)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from _EvaluatorProcess:
 |  
 |  __init__(self, evaluator)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_access_handle(self, id_)
 |  
 |  get_or_create_access_handle(self, obj)
 |  
 |  set_access_handle(self, handle)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from _EvaluatorProcess:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.api.environment.EvaluatorSubprocess,api.environment,EvaluatorSubprocess,"Python Library Documentation: class EvaluatorSubprocess in module jedi.evaluate.compiled.subprocess

class EvaluatorSubprocess(_EvaluatorProcess)
 |  Method resolution order:
 |      EvaluatorSubprocess
 |      _EvaluatorProcess
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __del__(self)
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, evaluator, compiled_subprocess)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from _EvaluatorProcess:
 |  
 |  get_access_handle(self, id_)
 |  
 |  get_or_create_access_handle(self, obj)
 |  
 |  set_access_handle(self, handle)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from _EvaluatorProcess:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, compiled_subprocess)',)",self,,,arg_info
jedi,0.12.0,jedi.api.environment.EvaluatorSubprocess,api.environment,EvaluatorSubprocess,"Python Library Documentation: class EvaluatorSubprocess in module jedi.evaluate.compiled.subprocess

class EvaluatorSubprocess(_EvaluatorProcess)
 |  Method resolution order:
 |      EvaluatorSubprocess
 |      _EvaluatorProcess
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __del__(self)
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, evaluator, compiled_subprocess)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from _EvaluatorProcess:
 |  
 |  get_access_handle(self, id_)
 |  
 |  get_or_create_access_handle(self, obj)
 |  
 |  set_access_handle(self, handle)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from _EvaluatorProcess:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, compiled_subprocess)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.api.environment.EvaluatorSubprocess,api.environment,EvaluatorSubprocess,"Python Library Documentation: class EvaluatorSubprocess in module jedi.evaluate.compiled.subprocess

class EvaluatorSubprocess(_EvaluatorProcess)
 |  Method resolution order:
 |      EvaluatorSubprocess
 |      _EvaluatorProcess
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __del__(self)
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, evaluator, compiled_subprocess)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from _EvaluatorProcess:
 |  
 |  get_access_handle(self, id_)
 |  
 |  get_or_create_access_handle(self, obj)
 |  
 |  set_access_handle(self, handle)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from _EvaluatorProcess:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, compiled_subprocess)',)",compiled_subprocess,,,arg_info
jedi,0.12.0,jedi.api.environment.GeneralizedPopen,api.environment,GeneralizedPopen,"Python Library Documentation: class GeneralizedPopen in module jedi._compatibility

class GeneralizedPopen(subprocess.Popen)
 |  Execute a child program in a new process.
 |  
 |  For a complete description of the arguments see the Python documentation.
 |  
 |  Arguments:
 |    args: A string, or a sequence of program arguments.
 |  
 |    bufsize: supplied as the buffering argument to the open() function when
 |        creating the stdin/stdout/stderr pipe file objects
 |  
 |    executable: A replacement program to execute.
 |  
 |    stdin, stdout and stderr: These specify the executed programs' standard
 |        input, standard output and standard error file handles, respectively.
 |  
 |    preexec_fn: (POSIX only) An object to be called in the child process
 |        just before the child is executed.
 |  
 |    close_fds: Controls closing or inheriting of file descriptors.
 |  
 |    shell: If true, the command will be executed through the shell.
 |  
 |    cwd: Sets the current directory before the child is executed.
 |  
 |    env: Defines the environment variables for the new process.
 |  
 |    universal_newlines: If true, use universal line endings for file
 |        objects stdin, stdout and stderr.
 |  
 |    startupinfo and creationflags (Windows only)
 |  
 |    restore_signals (POSIX only)
 |  
 |    start_new_session (POSIX only)
 |  
 |    pass_fds (POSIX only)
 |  
 |    encoding and errors: Text mode encoding and error handling to use for
 |        file objects stdin, stdout and stderr.
 |  
 |  Attributes:
 |      stdin, stdout, stderr, pid, returncode
 |  
 |  Method resolution order:
 |      GeneralizedPopen
 |      subprocess.Popen
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, *args, **kwargs)
 |      Create new Popen instance.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from subprocess.Popen:
 |  
 |  __del__(self, _maxsize=9223372036854775807, _warn=<built-in function warn>)
 |  
 |  __enter__(self)
 |  
 |  __exit__(self, type, value, traceback)
 |  
 |  communicate(self, input=None, timeout=None)
 |      Interact with process: Send data to stdin.  Read data from
 |      stdout and stderr, until end-of-file is reached.  Wait for
 |      process to terminate.
 |      
 |      The optional ""input"" argument should be data to be sent to the
 |      child process (if self.universal_newlines is True, this should
 |      be a string; if it is False, ""input"" should be bytes), or
 |      None, if no data should be sent to the child.
 |      
 |      communicate() returns a tuple (stdout, stderr).  These will be
 |      bytes or, if self.universal_newlines was True, a string.
 |  
 |  kill = terminate(self)
 |      Terminates the process.
 |  
 |  poll(self)
 |      Check if child process has terminated. Set and return returncode
 |      attribute.
 |  
 |  send_signal(self, sig)
 |      Send a signal to the process.
 |  
 |  terminate(self)
 |      Terminates the process.
 |  
 |  wait(self, timeout=None, endtime=None)
 |      Wait for child process to terminate.  Returns returncode
 |      attribute.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from subprocess.Popen:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.api.environment.InterpreterEnvironment,api.environment,InterpreterEnvironment,"Python Library Documentation: class InterpreterEnvironment in module jedi.api.environment

class InterpreterEnvironment(_BaseEnvironment)
 |  Method resolution order:
 |      InterpreterEnvironment
 |      _BaseEnvironment
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_evaluator_subprocess(self, evaluator)
 |  
 |  get_sys_path(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from _BaseEnvironment:
 |  
 |  get_grammar(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from _BaseEnvironment:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self)',)",self,,,arg_info
jedi,0.12.0,jedi.api.environment.InvalidPythonEnvironment,api.environment,InvalidPythonEnvironment,"Python Library Documentation: class InvalidPythonEnvironment in module jedi.api.environment

class InvalidPythonEnvironment(builtins.Exception)
 |  If you see this exception, the Python executable or Virtualenv you have
 |  been trying to use is probably not a correct Python version.
 |  
 |  Method resolution order:
 |      InvalidPythonEnvironment
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Data descriptors defined here:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.api.environment.SameEnvironment,api.environment,SameEnvironment,"Python Library Documentation: class SameEnvironment in module jedi.api.environment

class SameEnvironment(Environment)
 |  This class is supposed to be created by internal Jedi architecture. You
 |  should not create it directly. Please use create_environment or the other
 |  functions instead. It is then returned by that function.
 |  
 |  Method resolution order:
 |      SameEnvironment
 |      Environment
 |      _BaseEnvironment
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Environment:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_evaluator_subprocess(self, evaluator)
 |  
 |  get_sys_path(self)
 |      The sys path for this environment. Does not include potential
 |      modifications like ``sys.path.append``.
 |      
 |      :returns: list of str
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from _BaseEnvironment:
 |  
 |  get_grammar(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from _BaseEnvironment:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self)',)",self,,,arg_info
jedi,0.12.0,jedi.api.environment._BaseEnvironment,api.environment,_BaseEnvironment,"Python Library Documentation: class _BaseEnvironment in module jedi.api.environment

class _BaseEnvironment(builtins.object)
 |  Methods defined here:
 |  
 |  get_grammar(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.api.environment._VersionInfo,api.environment,VersionInfo,"Python Library Documentation: class VersionInfo in module jedi.api.environment

class VersionInfo(builtins.tuple)
 |  VersionInfo(major, minor, micro)
 |  
 |  Method resolution order:
 |      VersionInfo
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new VersionInfo object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new VersionInfo object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, major, minor, micro)
 |      Create new instance of VersionInfo(major, minor, micro)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  major
 |      Alias for field number 0
 |  
 |  minor
 |      Alias for field number 1
 |  
 |  micro
 |      Alias for field number 2
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('major', 'minor', 'micro')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.api.environment._VersionInfo._make,api.environment._VersionInfo,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new VersionInfo object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>)',)",cls,,,arg_info
jedi,0.12.0,jedi.api.environment._VersionInfo._make,api.environment._VersionInfo,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new VersionInfo object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>)',)",iterable,,,arg_info
jedi,0.12.0,jedi.api.environment._VersionInfo._make,api.environment._VersionInfo,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new VersionInfo object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>)',)",new,<built-in method __new__ of type object at 0x000000005A0FC0D0>,builtin_function_or_method,arg_info
jedi,0.12.0,jedi.api.environment._VersionInfo._make,api.environment._VersionInfo,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new VersionInfo object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>)',)",len,<built-in function len>,builtin_function_or_method,arg_info
jedi,0.12.0,jedi.api.environment._calculate_sha256_for_file,api.environment,_calculate_sha256_for_file,"Python Library Documentation: function _calculate_sha256_for_file in module jedi.api.environment

_calculate_sha256_for_file(path)
",function,"('(path)',)",path,,,arg_info
jedi,0.12.0,jedi.api.environment._get_executable_path,api.environment,_get_executable_path,"Python Library Documentation: function _get_executable_path in module jedi.api.environment

_get_executable_path(path, safe=True)
    Returns None if it's not actually a virtual env.
",function,"('(path, safe=True)',)",safe,True,bool,arg_info
jedi,0.12.0,jedi.api.environment._get_executable_path,api.environment,_get_executable_path,"Python Library Documentation: function _get_executable_path in module jedi.api.environment

_get_executable_path(path, safe=True)
    Returns None if it's not actually a virtual env.
",function,"('(path, safe=True)',)",path,,,arg_info
jedi,0.12.0,jedi.api.environment._get_executables_from_windows_registry,api.environment,_get_executables_from_windows_registry,"Python Library Documentation: function _get_executables_from_windows_registry in module jedi.api.environment

_get_executables_from_windows_registry(version)
",function,"('(version)',)",version,,,arg_info
jedi,0.12.0,jedi.api.environment._get_python_prefix,api.environment,_get_python_prefix,"Python Library Documentation: function _get_python_prefix in module jedi.api.environment

_get_python_prefix(executable)
    # TODO: the logic to find the Python prefix is much more complicated than that.
    # See Modules/getpath.c for UNIX and PC/getpathp.c for Windows in CPython's
    # source code. A solution would be to deduce it by running the Python
    # interpreter and printing the value of sys.prefix.
",function,"('(executable)',)",executable,,,arg_info
jedi,0.12.0,jedi.api.environment._is_safe,api.environment,_is_safe,"Python Library Documentation: function _is_safe in module jedi.api.environment

_is_safe(executable_path)
",function,"('(executable_path)',)",executable_path,,,arg_info
jedi,0.12.0,jedi.api.environment._is_unix_safe_simple,api.environment,_is_unix_safe_simple,"Python Library Documentation: function _is_unix_safe_simple in module jedi.api.environment

_is_unix_safe_simple(real_path)
",function,"('(real_path)',)",real_path,,,arg_info
jedi,0.12.0,jedi.api.environment.create_environment,api.environment,create_environment,"Python Library Documentation: function create_environment in module jedi.api.environment

create_environment(path, safe=True)
    Make it possible to create an environment by hand.
    
    :raises: :exc:`.InvalidPythonEnvironment`
    :returns: :class:`Environment`
",function,"('(path, safe=True)',)",safe,True,bool,arg_info
jedi,0.12.0,jedi.api.environment.create_environment,api.environment,create_environment,"Python Library Documentation: function create_environment in module jedi.api.environment

create_environment(path, safe=True)
    Make it possible to create an environment by hand.
    
    :raises: :exc:`.InvalidPythonEnvironment`
    :returns: :class:`Environment`
",function,"('(path, safe=True)',)",path,,,arg_info
jedi,0.12.0,jedi.api.environment.find_executable,api.environment,find_executable,"Python Library Documentation: function find_executable in module distutils.spawn

find_executable(executable, path=None)
    Tries to find 'executable' in the directories listed in 'path'.
    
    A string listing directories separated by 'os.pathsep'; defaults to
    os.environ['PATH'].  Returns the complete filename or None if not found.
",function,"('(executable, path=None)',)",path,,NoneType,arg_info
jedi,0.12.0,jedi.api.environment.find_executable,api.environment,find_executable,"Python Library Documentation: function find_executable in module distutils.spawn

find_executable(executable, path=None)
    Tries to find 'executable' in the directories listed in 'path'.
    
    A string listing directories separated by 'os.pathsep'; defaults to
    os.environ['PATH'].  Returns the complete filename or None if not found.
",function,"('(executable, path=None)',)",executable,,,arg_info
jedi,0.12.0,jedi.api.environment.find_virtualenvs,api.environment,find_virtualenvs,"Python Library Documentation: function find_virtualenvs in module jedi.api.environment

find_virtualenvs(paths=None, **kwargs)
    :param paths: A list of paths in your file system to be scanned for
        Virtualenvs. It will search in these paths and potentially execute the
        Python binaries. Also the VIRTUAL_ENV variable will be checked if it
        contains a valid Virtualenv.
    :param safe: Default True. In case this is False, it will allow this
        function to execute potential `python` environments. An attacker might
        be able to drop an executable in a path this function is searching by
        default. If the executable has not been installed by root, it will not
        be executed.
    
    :yields: :class:`Environment`
",function,"('(paths=None, **kwargs)',)",paths,,NoneType,arg_info
jedi,0.12.0,jedi.api.environment.get_subprocess,api.environment,get_subprocess,"Python Library Documentation: function get_subprocess in module jedi.evaluate.compiled.subprocess

get_subprocess(executable)
",function,"('(executable)',)",executable,,,arg_info
jedi,0.12.0,jedi.api.environment.get_system_environment,api.environment,get_system_environment,"Python Library Documentation: function get_system_environment in module jedi.api.environment

get_system_environment(version)
    Return the first Python environment found for a string of the form 'X.Y'
    where X and Y are the major and minor versions of Python.
    
    :raises: :exc:`.InvalidPythonEnvironment`
    :returns: :class:`Environment`
",function,"('(version)',)",version,,,arg_info
jedi,0.12.0,jedi.api.environment.memoize_method,api.environment,memoize_method,"Python Library Documentation: function memoize_method in module jedi.cache

memoize_method(method)
    A normal memoize function.
",function,"('(method)',)",method,,,arg_info
jedi,0.12.0,jedi.api.environment.namedtuple,api.environment,namedtuple,"Python Library Documentation: function namedtuple in module collections

namedtuple(typename, field_names, *, verbose=False, rename=False, module=None)
    Returns a new subclass of tuple with named fields.
    
    >>> Point = namedtuple('Point', ['x', 'y'])
    >>> Point.__doc__                   # docstring for the new class
    'Point(x, y)'
    >>> p = Point(11, y=22)             # instantiate with positional args or keywords
    >>> p[0] + p[1]                     # indexable like a plain tuple
    33
    >>> x, y = p                        # unpack like a regular tuple
    >>> x, y
    (11, 22)
    >>> p.x + p.y                       # fields also accessible by name
    33
    >>> d = p._asdict()                 # convert to a dictionary
    >>> d['x']
    11
    >>> Point(**d)                      # convert from a dictionary
    Point(x=11, y=22)
    >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields
    Point(x=100, y=22)
",function,"('(typename, field_names, *, verbose=False, rename=False, module=None)',)",typename,,,arg_info
jedi,0.12.0,jedi.api.environment.namedtuple,api.environment,namedtuple,"Python Library Documentation: function namedtuple in module collections

namedtuple(typename, field_names, *, verbose=False, rename=False, module=None)
    Returns a new subclass of tuple with named fields.
    
    >>> Point = namedtuple('Point', ['x', 'y'])
    >>> Point.__doc__                   # docstring for the new class
    'Point(x, y)'
    >>> p = Point(11, y=22)             # instantiate with positional args or keywords
    >>> p[0] + p[1]                     # indexable like a plain tuple
    33
    >>> x, y = p                        # unpack like a regular tuple
    >>> x, y
    (11, 22)
    >>> p.x + p.y                       # fields also accessible by name
    33
    >>> d = p._asdict()                 # convert to a dictionary
    >>> d['x']
    11
    >>> Point(**d)                      # convert from a dictionary
    Point(x=11, y=22)
    >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields
    Point(x=100, y=22)
",function,"('(typename, field_names, *, verbose=False, rename=False, module=None)',)",field_names,,,arg_info
jedi,0.12.0,jedi.api.environment.time_cache,api.environment,time_cache,"Python Library Documentation: function time_cache in module jedi.cache

time_cache(seconds)
",function,"('(seconds)',)",seconds,,,arg_info
jedi,0.12.0,jedi.api.evaluate_call_of_leaf,api,evaluate_call_of_leaf,"Python Library Documentation: function evaluate_call_of_leaf in module jedi.evaluate.helpers

evaluate_call_of_leaf(context, leaf, cut_own_trailer=False)
    Creates a ""call"" node that consist of all ``trailer`` and ``power``
    objects.  E.g. if you call it with ``append``::
    
        list([]).append(3) or None
    
    You would get a node with the content ``list([]).append`` back.
    
    This generates a copy of the original ast node.
    
    If you're using the leaf, e.g. the bracket `)` it will return ``list([])``.
    
    We use this function for two purposes. Given an expression ``bar.foo``,
    we may want to
      - infer the type of ``foo`` to offer completions after foo
      - infer the type of ``bar`` to be able to jump to the definition of foo
    The option ``cut_own_trailer`` must be set to true for the second purpose.
",function,"('(context, leaf, cut_own_trailer=False)',)",leaf,,,arg_info
jedi,0.12.0,jedi.api.evaluate_call_of_leaf,api,evaluate_call_of_leaf,"Python Library Documentation: function evaluate_call_of_leaf in module jedi.evaluate.helpers

evaluate_call_of_leaf(context, leaf, cut_own_trailer=False)
    Creates a ""call"" node that consist of all ``trailer`` and ``power``
    objects.  E.g. if you call it with ``append``::
    
        list([]).append(3) or None
    
    You would get a node with the content ``list([]).append`` back.
    
    This generates a copy of the original ast node.
    
    If you're using the leaf, e.g. the bracket `)` it will return ``list([])``.
    
    We use this function for two purposes. Given an expression ``bar.foo``,
    we may want to
      - infer the type of ``foo`` to offer completions after foo
      - infer the type of ``bar`` to be able to jump to the definition of foo
    The option ``cut_own_trailer`` must be set to true for the second purpose.
",function,"('(context, leaf, cut_own_trailer=False)',)",cut_own_trailer,False,bool,arg_info
jedi,0.12.0,jedi.api.evaluate_call_of_leaf,api,evaluate_call_of_leaf,"Python Library Documentation: function evaluate_call_of_leaf in module jedi.evaluate.helpers

evaluate_call_of_leaf(context, leaf, cut_own_trailer=False)
    Creates a ""call"" node that consist of all ``trailer`` and ``power``
    objects.  E.g. if you call it with ``append``::
    
        list([]).append(3) or None
    
    You would get a node with the content ``list([]).append`` back.
    
    This generates a copy of the original ast node.
    
    If you're using the leaf, e.g. the bracket `)` it will return ``list([])``.
    
    We use this function for two purposes. Given an expression ``bar.foo``,
    we may want to
      - infer the type of ``foo`` to offer completions after foo
      - infer the type of ``bar`` to be able to jump to the definition of foo
    The option ``cut_own_trailer`` must be set to true for the second purpose.
",function,"('(context, leaf, cut_own_trailer=False)',)",context,,,arg_info
jedi,0.12.0,jedi.api.exceptions.InternalError,api.exceptions,InternalError,"Python Library Documentation: class InternalError in module jedi.api.exceptions

class InternalError(_JediError)
 |  Common base class for all non-exit exceptions.
 |  
 |  Method resolution order:
 |      InternalError
 |      _JediError
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Data descriptors inherited from _JediError:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.api.exceptions.WrongVersion,api.exceptions,WrongVersion,"Python Library Documentation: class WrongVersion in module jedi.api.exceptions

class WrongVersion(_JediError)
 |  Common base class for all non-exit exceptions.
 |  
 |  Method resolution order:
 |      WrongVersion
 |      _JediError
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Data descriptors inherited from _JediError:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.api.exceptions._JediError,api.exceptions,_JediError,"Python Library Documentation: class _JediError in module jedi.api.exceptions

class _JediError(builtins.Exception)
 |  Common base class for all non-exit exceptions.
 |  
 |  Method resolution order:
 |      _JediError
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Data descriptors defined here:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.api.force_unicode,api,force_unicode,"Python Library Documentation: function force_unicode in module jedi._compatibility

force_unicode(obj)
",function,"('(obj)',)",obj,,,arg_info
jedi,0.12.0,jedi.api.get_default_project,api,get_default_project,"Python Library Documentation: function get_default_project in module jedi.api.project

get_default_project(path=None)
",function,"('(path=None)',)",path,,NoneType,arg_info
jedi,0.12.0,jedi.api.get_executable_nodes,api,get_executable_nodes,"Python Library Documentation: function get_executable_nodes in module jedi.parser_utils

get_executable_nodes(node, last_added=False)
    For static analysis.
",function,"('(node, last_added=False)',)",node,,,arg_info
jedi,0.12.0,jedi.api.get_executable_nodes,api,get_executable_nodes,"Python Library Documentation: function get_executable_nodes in module jedi.parser_utils

get_executable_nodes(node, last_added=False)
    For static analysis.
",function,"('(node, last_added=False)',)",last_added,False,bool,arg_info
jedi,0.12.0,jedi.api.get_module_names,api,get_module_names,"Python Library Documentation: function get_module_names in module jedi.evaluate.helpers

get_module_names(module, all_scopes)
    Returns a dictionary with name parts as keys and their call paths as
    values.
",function,"('(module, all_scopes)',)",all_scopes,,,arg_info
jedi,0.12.0,jedi.api.get_module_names,api,get_module_names,"Python Library Documentation: function get_module_names in module jedi.evaluate.helpers

get_module_names(module, all_scopes)
    Returns a dictionary with name parts as keys and their call paths as
    values.
",function,"('(module, all_scopes)',)",module,,,arg_info
jedi,0.12.0,jedi.api.helpers.CallSignatureDetails,api.helpers,CallSignatureDetails,"Python Library Documentation: class CallSignatureDetails in module jedi.api.helpers

class CallSignatureDetails(builtins.tuple)
 |  CallSignatureDetails(bracket_leaf, call_index, keyword_name_str)
 |  
 |  Method resolution order:
 |      CallSignatureDetails
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new CallSignatureDetails object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new CallSignatureDetails object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, bracket_leaf, call_index, keyword_name_str)
 |      Create new instance of CallSignatureDetails(bracket_leaf, call_index, keyword_name_str)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  bracket_leaf
 |      Alias for field number 0
 |  
 |  call_index
 |      Alias for field number 1
 |  
 |  keyword_name_str
 |      Alias for field number 2
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('bracket_leaf', 'call_index', 'keyword_name_str')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.api.helpers.CallSignatureDetails._make,api.helpers.CallSignatureDetails,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new CallSignatureDetails object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>)',)",iterable,,,arg_info
jedi,0.12.0,jedi.api.helpers.CallSignatureDetails._make,api.helpers.CallSignatureDetails,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new CallSignatureDetails object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>)',)",new,<built-in method __new__ of type object at 0x000000005A0FC0D0>,builtin_function_or_method,arg_info
jedi,0.12.0,jedi.api.helpers.CallSignatureDetails._make,api.helpers.CallSignatureDetails,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new CallSignatureDetails object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>)',)",len,<built-in function len>,builtin_function_or_method,arg_info
jedi,0.12.0,jedi.api.helpers.CallSignatureDetails._make,api.helpers.CallSignatureDetails,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new CallSignatureDetails object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>)',)",cls,,,arg_info
jedi,0.12.0,jedi.api.helpers.CompletionParts,api.helpers,CompletionParts,"Python Library Documentation: class CompletionParts in module jedi.api.helpers

class CompletionParts(builtins.tuple)
 |  CompletionParts(path, has_dot, name)
 |  
 |  Method resolution order:
 |      CompletionParts
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new CompletionParts object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new CompletionParts object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, path, has_dot, name)
 |      Create new instance of CompletionParts(path, has_dot, name)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  path
 |      Alias for field number 0
 |  
 |  has_dot
 |      Alias for field number 1
 |  
 |  name
 |      Alias for field number 2
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('path', 'has_dot', 'name')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.api.helpers.CompletionParts._make,api.helpers.CompletionParts,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new CompletionParts object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>)',)",len,<built-in function len>,builtin_function_or_method,arg_info
jedi,0.12.0,jedi.api.helpers.CompletionParts._make,api.helpers.CompletionParts,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new CompletionParts object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>)',)",iterable,,,arg_info
jedi,0.12.0,jedi.api.helpers.CompletionParts._make,api.helpers.CompletionParts,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new CompletionParts object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>)',)",cls,,,arg_info
jedi,0.12.0,jedi.api.helpers.CompletionParts._make,api.helpers.CompletionParts,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new CompletionParts object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>)',)",new,<built-in method __new__ of type object at 0x000000005A0FC0D0>,builtin_function_or_method,arg_info
jedi,0.12.0,jedi.api.helpers.ContextSet,api.helpers,ContextSet,"Python Library Documentation: class ContextSet in module jedi.evaluate.base_context

class ContextSet(jedi.common.context.BaseContextSet)
 |  Method resolution order:
 |      ContextSet
 |      jedi.common.context.BaseContextSet
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContextSet:
 |  
 |  __bool__(self)
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, *args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self)
 |  
 |  __len__(self)
 |  
 |  __or__(self, other)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  filter(self, filter_func)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from jedi.common.context.BaseContextSet:
 |  
 |  from_iterable(iterable) from builtins.type
 |  
 |  from_set(set_) from builtins.type
 |  
 |  from_sets(sets) from builtins.type
 |      Used to work with an iterable of set.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContextSet:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, *args)',)",self,,,arg_info
jedi,0.12.0,jedi.api.helpers.ContextSet.from_iterable,api.helpers.ContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",cls,,,arg_info
jedi,0.12.0,jedi.api.helpers.ContextSet.from_iterable,api.helpers.ContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",iterable,,,arg_info
jedi,0.12.0,jedi.api.helpers.ContextSet.from_set,api.helpers.ContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",set_,,,arg_info
jedi,0.12.0,jedi.api.helpers.ContextSet.from_set,api.helpers.ContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",cls,,,arg_info
jedi,0.12.0,jedi.api.helpers.ContextSet.from_sets,api.helpers.ContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",sets,,,arg_info
jedi,0.12.0,jedi.api.helpers.ContextSet.from_sets,api.helpers.ContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",cls,,,arg_info
jedi,0.12.0,jedi.api.helpers.OnErrorLeaf,api.helpers,OnErrorLeaf,"Python Library Documentation: class OnErrorLeaf in module jedi.api.helpers

class OnErrorLeaf(builtins.Exception)
 |  Common base class for all non-exit exceptions.
 |  
 |  Method resolution order:
 |      OnErrorLeaf
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Data descriptors defined here:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  error_leaf
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.api.helpers.Parser,api.helpers,Parser,"Python Library Documentation: class Parser in module parso.python.parser

class Parser(parso.parser.BaseParser)
 |  This class is used to parse a Python file, it then divides them into a
 |  class structure of different scopes.
 |  
 |  :param pgen_grammar: The grammar object of pgen2. Loaded by load_grammar.
 |  
 |  Method resolution order:
 |      Parser
 |      parso.parser.BaseParser
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, pgen_grammar, error_recovery=True, start_symbol='file_input')
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  convert_leaf(self, pgen_grammar, type, value, prefix, start_pos)
 |  
 |  convert_node(self, pgen_grammar, type, children)
 |      Convert raw node information to a PythonBaseNode instance.
 |      
 |      This is passed to the parser driver which calls it whenever a reduction of a
 |      grammar rule produces a new complete node, so that the tree is build
 |      strictly bottom-up.
 |  
 |  error_recovery(self, pgen_grammar, stack, arcs, typ, value, start_pos, prefix, add_token_callback)
 |  
 |  parse(self, tokens)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  default_node = <class 'parso.python.tree.PythonNode'>
 |      Some Python specific utitilies.
 |  
 |  node_map = {'assert_stmt': <class 'parso.python.tree.AssertStmt'>, 'br...
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from parso.parser.BaseParser:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from parso.parser.BaseParser:
 |  
 |  default_leaf = <class 'parso.tree.Leaf'>
 |      Leafs are basically tokens with a better API. Leafs exactly know where they
 |      were defined and what text preceeds them.
 |  
 |  leaf_map = {}
",class,"(""(self, pgen_grammar, error_recovery=True, start_symbol='file_input')"",)",self,,,arg_info
jedi,0.12.0,jedi.api.helpers.Parser,api.helpers,Parser,"Python Library Documentation: class Parser in module parso.python.parser

class Parser(parso.parser.BaseParser)
 |  This class is used to parse a Python file, it then divides them into a
 |  class structure of different scopes.
 |  
 |  :param pgen_grammar: The grammar object of pgen2. Loaded by load_grammar.
 |  
 |  Method resolution order:
 |      Parser
 |      parso.parser.BaseParser
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, pgen_grammar, error_recovery=True, start_symbol='file_input')
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  convert_leaf(self, pgen_grammar, type, value, prefix, start_pos)
 |  
 |  convert_node(self, pgen_grammar, type, children)
 |      Convert raw node information to a PythonBaseNode instance.
 |      
 |      This is passed to the parser driver which calls it whenever a reduction of a
 |      grammar rule produces a new complete node, so that the tree is build
 |      strictly bottom-up.
 |  
 |  error_recovery(self, pgen_grammar, stack, arcs, typ, value, start_pos, prefix, add_token_callback)
 |  
 |  parse(self, tokens)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  default_node = <class 'parso.python.tree.PythonNode'>
 |      Some Python specific utitilies.
 |  
 |  node_map = {'assert_stmt': <class 'parso.python.tree.AssertStmt'>, 'br...
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from parso.parser.BaseParser:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from parso.parser.BaseParser:
 |  
 |  default_leaf = <class 'parso.tree.Leaf'>
 |      Leafs are basically tokens with a better API. Leafs exactly know where they
 |      were defined and what text preceeds them.
 |  
 |  leaf_map = {}
",class,"(""(self, pgen_grammar, error_recovery=True, start_symbol='file_input')"",)",error_recovery,True,bool,arg_info
jedi,0.12.0,jedi.api.helpers.Parser,api.helpers,Parser,"Python Library Documentation: class Parser in module parso.python.parser

class Parser(parso.parser.BaseParser)
 |  This class is used to parse a Python file, it then divides them into a
 |  class structure of different scopes.
 |  
 |  :param pgen_grammar: The grammar object of pgen2. Loaded by load_grammar.
 |  
 |  Method resolution order:
 |      Parser
 |      parso.parser.BaseParser
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, pgen_grammar, error_recovery=True, start_symbol='file_input')
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  convert_leaf(self, pgen_grammar, type, value, prefix, start_pos)
 |  
 |  convert_node(self, pgen_grammar, type, children)
 |      Convert raw node information to a PythonBaseNode instance.
 |      
 |      This is passed to the parser driver which calls it whenever a reduction of a
 |      grammar rule produces a new complete node, so that the tree is build
 |      strictly bottom-up.
 |  
 |  error_recovery(self, pgen_grammar, stack, arcs, typ, value, start_pos, prefix, add_token_callback)
 |  
 |  parse(self, tokens)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  default_node = <class 'parso.python.tree.PythonNode'>
 |      Some Python specific utitilies.
 |  
 |  node_map = {'assert_stmt': <class 'parso.python.tree.AssertStmt'>, 'br...
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from parso.parser.BaseParser:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from parso.parser.BaseParser:
 |  
 |  default_leaf = <class 'parso.tree.Leaf'>
 |      Leafs are basically tokens with a better API. Leafs exactly know where they
 |      were defined and what text preceeds them.
 |  
 |  leaf_map = {}
",class,"(""(self, pgen_grammar, error_recovery=True, start_symbol='file_input')"",)",start_symbol,file_input,str,arg_info
jedi,0.12.0,jedi.api.helpers.Parser,api.helpers,Parser,"Python Library Documentation: class Parser in module parso.python.parser

class Parser(parso.parser.BaseParser)
 |  This class is used to parse a Python file, it then divides them into a
 |  class structure of different scopes.
 |  
 |  :param pgen_grammar: The grammar object of pgen2. Loaded by load_grammar.
 |  
 |  Method resolution order:
 |      Parser
 |      parso.parser.BaseParser
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, pgen_grammar, error_recovery=True, start_symbol='file_input')
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  convert_leaf(self, pgen_grammar, type, value, prefix, start_pos)
 |  
 |  convert_node(self, pgen_grammar, type, children)
 |      Convert raw node information to a PythonBaseNode instance.
 |      
 |      This is passed to the parser driver which calls it whenever a reduction of a
 |      grammar rule produces a new complete node, so that the tree is build
 |      strictly bottom-up.
 |  
 |  error_recovery(self, pgen_grammar, stack, arcs, typ, value, start_pos, prefix, add_token_callback)
 |  
 |  parse(self, tokens)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  default_node = <class 'parso.python.tree.PythonNode'>
 |      Some Python specific utitilies.
 |  
 |  node_map = {'assert_stmt': <class 'parso.python.tree.AssertStmt'>, 'br...
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from parso.parser.BaseParser:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from parso.parser.BaseParser:
 |  
 |  default_leaf = <class 'parso.tree.Leaf'>
 |      Leafs are basically tokens with a better API. Leafs exactly know where they
 |      were defined and what text preceeds them.
 |  
 |  leaf_map = {}
",class,"(""(self, pgen_grammar, error_recovery=True, start_symbol='file_input')"",)",pgen_grammar,,,arg_info
jedi,0.12.0,jedi.api.helpers.Stack,api.helpers,Stack,"Python Library Documentation: class Stack in module jedi.api.helpers

class Stack(builtins.list)
 |  list() -> new empty list
 |  list(iterable) -> new list initialized from iterable's items
 |  
 |  Method resolution order:
 |      Stack
 |      builtins.list
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  get_node_names(self, grammar)
 |  
 |  get_nodes(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.list:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __delitem__(self, key, /)
 |      Delete self[key].
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(...)
 |      x.__getitem__(y) <==> x[y]
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __iadd__(self, value, /)
 |      Implement self+=value.
 |  
 |  __imul__(self, value, /)
 |      Implement self*=value.
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __reversed__(...)
 |      L.__reversed__() -- return a reverse iterator over the list
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  __setitem__(self, key, value, /)
 |      Set self[key] to value.
 |  
 |  __sizeof__(...)
 |      L.__sizeof__() -- size of L in memory, in bytes
 |  
 |  append(...)
 |      L.append(object) -> None -- append object to end
 |  
 |  clear(...)
 |      L.clear() -> None -- remove all items from L
 |  
 |  copy(...)
 |      L.copy() -> list -- a shallow copy of L
 |  
 |  count(...)
 |      L.count(value) -> integer -- return number of occurrences of value
 |  
 |  extend(...)
 |      L.extend(iterable) -> None -- extend list by appending elements from the iterable
 |  
 |  index(...)
 |      L.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
 |  
 |  insert(...)
 |      L.insert(index, object) -- insert object before index
 |  
 |  pop(...)
 |      L.pop([index]) -> item -- remove and return item at index (default last).
 |      Raises IndexError if list is empty or index is out of range.
 |  
 |  remove(...)
 |      L.remove(value) -> None -- remove first occurrence of value.
 |      Raises ValueError if the value is not present.
 |  
 |  reverse(...)
 |      L.reverse() -- reverse *IN PLACE*
 |  
 |  sort(...)
 |      L.sort(key=None, reverse=False) -> None -- stable sort *IN PLACE*
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from builtins.list:
 |  
 |  __hash__ = None
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.api.helpers._get_call_signature_details_from_error_node,api.helpers,_get_call_signature_details_from_error_node,"Python Library Documentation: function _get_call_signature_details_from_error_node in module jedi.api.helpers

_get_call_signature_details_from_error_node(node, position)
",function,"('(node, position)',)",node,,,arg_info
jedi,0.12.0,jedi.api.helpers._get_call_signature_details_from_error_node,api.helpers,_get_call_signature_details_from_error_node,"Python Library Documentation: function _get_call_signature_details_from_error_node in module jedi.api.helpers

_get_call_signature_details_from_error_node(node, position)
",function,"('(node, position)',)",position,,,arg_info
jedi,0.12.0,jedi.api.helpers._get_code,api.helpers,_get_code,"Python Library Documentation: function _get_code in module jedi.api.helpers

_get_code(code_lines, start_pos, end_pos)
",function,"('(code_lines, start_pos, end_pos)',)",end_pos,,,arg_info
jedi,0.12.0,jedi.api.helpers._get_code,api.helpers,_get_code,"Python Library Documentation: function _get_code in module jedi.api.helpers

_get_code(code_lines, start_pos, end_pos)
",function,"('(code_lines, start_pos, end_pos)',)",start_pos,,,arg_info
jedi,0.12.0,jedi.api.helpers._get_code,api.helpers,_get_code,"Python Library Documentation: function _get_code in module jedi.api.helpers

_get_code(code_lines, start_pos, end_pos)
",function,"('(code_lines, start_pos, end_pos)',)",code_lines,,,arg_info
jedi,0.12.0,jedi.api.helpers._get_code_for_stack,api.helpers,_get_code_for_stack,"Python Library Documentation: function _get_code_for_stack in module jedi.api.helpers

_get_code_for_stack(code_lines, module_node, position)
",function,"('(code_lines, module_node, position)',)",code_lines,,,arg_info
jedi,0.12.0,jedi.api.helpers._get_code_for_stack,api.helpers,_get_code_for_stack,"Python Library Documentation: function _get_code_for_stack in module jedi.api.helpers

_get_code_for_stack(code_lines, module_node, position)
",function,"('(code_lines, module_node, position)',)",position,,,arg_info
jedi,0.12.0,jedi.api.helpers._get_code_for_stack,api.helpers,_get_code_for_stack,"Python Library Documentation: function _get_code_for_stack in module jedi.api.helpers

_get_code_for_stack(code_lines, module_node, position)
",function,"('(code_lines, module_node, position)',)",module_node,,,arg_info
jedi,0.12.0,jedi.api.helpers._get_index_and_key,api.helpers,_get_index_and_key,"Python Library Documentation: function _get_index_and_key in module jedi.api.helpers

_get_index_and_key(nodes, position)
    Returns the amount of commas and the keyword argument string.
",function,"('(nodes, position)',)",position,,,arg_info
jedi,0.12.0,jedi.api.helpers._get_index_and_key,api.helpers,_get_index_and_key,"Python Library Documentation: function _get_index_and_key in module jedi.api.helpers

_get_index_and_key(nodes, position)
    Returns the amount of commas and the keyword argument string.
",function,"('(nodes, position)',)",nodes,,,arg_info
jedi,0.12.0,jedi.api.helpers.call_signature_time_cache,api.helpers,call_signature_time_cache,"Python Library Documentation: function call_signature_time_cache in module jedi.cache

call_signature_time_cache(time_add_setting)
    This decorator works as follows: Call it with a setting and after that
    use the function with a callable that returns the key.
    But: This function is only called if the key is not available. After a
    certain amount of time (`time_add_setting`) the cache is invalid.
    
    If the given key is None, the function will not be cached.
",function,"('(time_add_setting)',)",time_add_setting,,,arg_info
jedi,0.12.0,jedi.api.helpers.dedent,api.helpers,dedent,"Python Library Documentation: function dedent in module textwrap

dedent(text)
    Remove any common leading whitespace from every line in `text`.
    
    This can be used to make triple-quoted strings line up with the left
    edge of the display, while still presenting them in the source code
    in indented form.
    
    Note that tabs and spaces are both treated as whitespace, but they
    are not equal: the lines ""  hello"" and ""\thello"" are
    considered to have no common leading whitespace.  (This behaviour is
    new in Python 2.5; older versions of this module incorrectly
    expanded tabs before searching for common leading whitespace.)
",function,"('(text)',)",text,,,arg_info
jedi,0.12.0,jedi.api.helpers.eval_atom,api.helpers,eval_atom,"Python Library Documentation: function eval_atom in module jedi.evaluate.syntax_tree

eval_atom(context, atom)
    Basically to process ``atom`` nodes. The parser sometimes doesn't
    generate the node (because it has just one child). In that case an atom
    might be a name or a literal as well.
",function,"('(context, atom)',)",context,,,arg_info
jedi,0.12.0,jedi.api.helpers.eval_atom,api.helpers,eval_atom,"Python Library Documentation: function eval_atom in module jedi.evaluate.syntax_tree

eval_atom(context, atom)
    Basically to process ``atom`` nodes. The parser sometimes doesn't
    generate the node (because it has just one child). In that case an atom
    might be a name or a literal as well.
",function,"('(context, atom)',)",atom,,,arg_info
jedi,0.12.0,jedi.api.helpers.evaluate_call_of_leaf,api.helpers,evaluate_call_of_leaf,"Python Library Documentation: function evaluate_call_of_leaf in module jedi.evaluate.helpers

evaluate_call_of_leaf(context, leaf, cut_own_trailer=False)
    Creates a ""call"" node that consist of all ``trailer`` and ``power``
    objects.  E.g. if you call it with ``append``::
    
        list([]).append(3) or None
    
    You would get a node with the content ``list([]).append`` back.
    
    This generates a copy of the original ast node.
    
    If you're using the leaf, e.g. the bracket `)` it will return ``list([])``.
    
    We use this function for two purposes. Given an expression ``bar.foo``,
    we may want to
      - infer the type of ``foo`` to offer completions after foo
      - infer the type of ``bar`` to be able to jump to the definition of foo
    The option ``cut_own_trailer`` must be set to true for the second purpose.
",function,"('(context, leaf, cut_own_trailer=False)',)",leaf,,,arg_info
jedi,0.12.0,jedi.api.helpers.evaluate_call_of_leaf,api.helpers,evaluate_call_of_leaf,"Python Library Documentation: function evaluate_call_of_leaf in module jedi.evaluate.helpers

evaluate_call_of_leaf(context, leaf, cut_own_trailer=False)
    Creates a ""call"" node that consist of all ``trailer`` and ``power``
    objects.  E.g. if you call it with ``append``::
    
        list([]).append(3) or None
    
    You would get a node with the content ``list([]).append`` back.
    
    This generates a copy of the original ast node.
    
    If you're using the leaf, e.g. the bracket `)` it will return ``list([])``.
    
    We use this function for two purposes. Given an expression ``bar.foo``,
    we may want to
      - infer the type of ``foo`` to offer completions after foo
      - infer the type of ``bar`` to be able to jump to the definition of foo
    The option ``cut_own_trailer`` must be set to true for the second purpose.
",function,"('(context, leaf, cut_own_trailer=False)',)",cut_own_trailer,False,bool,arg_info
jedi,0.12.0,jedi.api.helpers.evaluate_call_of_leaf,api.helpers,evaluate_call_of_leaf,"Python Library Documentation: function evaluate_call_of_leaf in module jedi.evaluate.helpers

evaluate_call_of_leaf(context, leaf, cut_own_trailer=False)
    Creates a ""call"" node that consist of all ``trailer`` and ``power``
    objects.  E.g. if you call it with ``append``::
    
        list([]).append(3) or None
    
    You would get a node with the content ``list([]).append`` back.
    
    This generates a copy of the original ast node.
    
    If you're using the leaf, e.g. the bracket `)` it will return ``list([])``.
    
    We use this function for two purposes. Given an expression ``bar.foo``,
    we may want to
      - infer the type of ``foo`` to offer completions after foo
      - infer the type of ``bar`` to be able to jump to the definition of foo
    The option ``cut_own_trailer`` must be set to true for the second purpose.
",function,"('(context, leaf, cut_own_trailer=False)',)",context,,,arg_info
jedi,0.12.0,jedi.api.helpers.evaluate_goto_definition,api.helpers,evaluate_goto_definition,"Python Library Documentation: function evaluate_goto_definition in module jedi.api.helpers

evaluate_goto_definition(evaluator, context, leaf)
",function,"('(evaluator, context, leaf)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.api.helpers.evaluate_goto_definition,api.helpers,evaluate_goto_definition,"Python Library Documentation: function evaluate_goto_definition in module jedi.api.helpers

evaluate_goto_definition(evaluator, context, leaf)
",function,"('(evaluator, context, leaf)',)",context,,,arg_info
jedi,0.12.0,jedi.api.helpers.evaluate_goto_definition,api.helpers,evaluate_goto_definition,"Python Library Documentation: function evaluate_goto_definition in module jedi.api.helpers

evaluate_goto_definition(evaluator, context, leaf)
",function,"('(evaluator, context, leaf)',)",leaf,,,arg_info
jedi,0.12.0,jedi.api.helpers.get_call_signature_details,api.helpers,get_call_signature_details,"Python Library Documentation: function get_call_signature_details in module jedi.api.helpers

get_call_signature_details(module, position)
",function,"('(module, position)',)",module,,,arg_info
jedi,0.12.0,jedi.api.helpers.get_call_signature_details,api.helpers,get_call_signature_details,"Python Library Documentation: function get_call_signature_details in module jedi.api.helpers

get_call_signature_details(module, position)
",function,"('(module, position)',)",position,,,arg_info
jedi,0.12.0,jedi.api.helpers.get_on_completion_name,api.helpers,get_on_completion_name,"Python Library Documentation: function get_on_completion_name in module jedi.api.helpers

get_on_completion_name(module_node, lines, position)
",function,"('(module_node, lines, position)',)",module_node,,,arg_info
jedi,0.12.0,jedi.api.helpers.get_on_completion_name,api.helpers,get_on_completion_name,"Python Library Documentation: function get_on_completion_name in module jedi.api.helpers

get_on_completion_name(module_node, lines, position)
",function,"('(module_node, lines, position)',)",lines,,,arg_info
jedi,0.12.0,jedi.api.helpers.get_on_completion_name,api.helpers,get_on_completion_name,"Python Library Documentation: function get_on_completion_name in module jedi.api.helpers

get_on_completion_name(module_node, lines, position)
",function,"('(module_node, lines, position)',)",position,,,arg_info
jedi,0.12.0,jedi.api.helpers.get_possible_completion_types,api.helpers,get_possible_completion_types,"Python Library Documentation: function get_possible_completion_types in module jedi.api.helpers

get_possible_completion_types(pgen_grammar, stack)
",function,"('(pgen_grammar, stack)',)",pgen_grammar,,,arg_info
jedi,0.12.0,jedi.api.helpers.get_possible_completion_types,api.helpers,get_possible_completion_types,"Python Library Documentation: function get_possible_completion_types in module jedi.api.helpers

get_possible_completion_types(pgen_grammar, stack)
",function,"('(pgen_grammar, stack)',)",stack,,,arg_info
jedi,0.12.0,jedi.api.helpers.get_stack_at_position,api.helpers,get_stack_at_position,"Python Library Documentation: function get_stack_at_position in module jedi.api.helpers

get_stack_at_position(grammar, code_lines, module_node, pos)
    Returns the possible node names (e.g. import_from, xor_test or yield_stmt).
",function,"('(grammar, code_lines, module_node, pos)',)",grammar,,,arg_info
jedi,0.12.0,jedi.api.helpers.get_stack_at_position,api.helpers,get_stack_at_position,"Python Library Documentation: function get_stack_at_position in module jedi.api.helpers

get_stack_at_position(grammar, code_lines, module_node, pos)
    Returns the possible node names (e.g. import_from, xor_test or yield_stmt).
",function,"('(grammar, code_lines, module_node, pos)',)",code_lines,,,arg_info
jedi,0.12.0,jedi.api.helpers.get_stack_at_position,api.helpers,get_stack_at_position,"Python Library Documentation: function get_stack_at_position in module jedi.api.helpers

get_stack_at_position(grammar, code_lines, module_node, pos)
    Returns the possible node names (e.g. import_from, xor_test or yield_stmt).
",function,"('(grammar, code_lines, module_node, pos)',)",module_node,,,arg_info
jedi,0.12.0,jedi.api.helpers.get_stack_at_position,api.helpers,get_stack_at_position,"Python Library Documentation: function get_stack_at_position in module jedi.api.helpers

get_stack_at_position(grammar, code_lines, module_node, pos)
    Returns the possible node names (e.g. import_from, xor_test or yield_stmt).
",function,"('(grammar, code_lines, module_node, pos)',)",pos,,,arg_info
jedi,0.12.0,jedi.api.helpers.get_string_context_set,api.helpers,get_string_context_set,"Python Library Documentation: function get_string_context_set in module jedi.evaluate.compiled

get_string_context_set(evaluator)
",function,"('(evaluator)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.api.helpers.namedtuple,api.helpers,namedtuple,"Python Library Documentation: function namedtuple in module collections

namedtuple(typename, field_names, *, verbose=False, rename=False, module=None)
    Returns a new subclass of tuple with named fields.
    
    >>> Point = namedtuple('Point', ['x', 'y'])
    >>> Point.__doc__                   # docstring for the new class
    'Point(x, y)'
    >>> p = Point(11, y=22)             # instantiate with positional args or keywords
    >>> p[0] + p[1]                     # indexable like a plain tuple
    33
    >>> x, y = p                        # unpack like a regular tuple
    >>> x, y
    (11, 22)
    >>> p.x + p.y                       # fields also accessible by name
    33
    >>> d = p._asdict()                 # convert to a dictionary
    >>> d['x']
    11
    >>> Point(**d)                      # convert from a dictionary
    Point(x=11, y=22)
    >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields
    Point(x=100, y=22)
",function,"('(typename, field_names, *, verbose=False, rename=False, module=None)',)",typename,,,arg_info
jedi,0.12.0,jedi.api.helpers.namedtuple,api.helpers,namedtuple,"Python Library Documentation: function namedtuple in module collections

namedtuple(typename, field_names, *, verbose=False, rename=False, module=None)
    Returns a new subclass of tuple with named fields.
    
    >>> Point = namedtuple('Point', ['x', 'y'])
    >>> Point.__doc__                   # docstring for the new class
    'Point(x, y)'
    >>> p = Point(11, y=22)             # instantiate with positional args or keywords
    >>> p[0] + p[1]                     # indexable like a plain tuple
    33
    >>> x, y = p                        # unpack like a regular tuple
    >>> x, y
    (11, 22)
    >>> p.x + p.y                       # fields also accessible by name
    33
    >>> d = p._asdict()                 # convert to a dictionary
    >>> d['x']
    11
    >>> Point(**d)                      # convert from a dictionary
    Point(x=11, y=22)
    >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields
    Point(x=100, y=22)
",function,"('(typename, field_names, *, verbose=False, rename=False, module=None)',)",field_names,,,arg_info
jedi,0.12.0,jedi.api.helpers.sorted_definitions,api.helpers,sorted_definitions,"Python Library Documentation: function sorted_definitions in module jedi.api.helpers

sorted_definitions(defs)
",function,"('(defs)',)",defs,,,arg_info
jedi,0.12.0,jedi.api.helpers.u,api.helpers,u,"Python Library Documentation: function u in module jedi._compatibility

u(string, errors='strict')
    Cast to unicode DAMMIT!
    Written because Python2 repr always implicitly casts to a string, so we
    have to cast back to a unicode (and we now that we always deal with valid
    unicode, because we check that in the beginning).
",function,"(""(string, errors='strict')"",)",string,,,arg_info
jedi,0.12.0,jedi.api.helpers.u,api.helpers,u,"Python Library Documentation: function u in module jedi._compatibility

u(string, errors='strict')
    Cast to unicode DAMMIT!
    Written because Python2 repr always implicitly casts to a string, so we
    have to cast back to a unicode (and we now that we always deal with valid
    unicode, because we check that in the beginning).
",function,"(""(string, errors='strict')"",)",errors,strict,str,arg_info
jedi,0.12.0,jedi.api.interpreter.Context,api.interpreter,Context,"Python Library Documentation: class Context in module jedi.evaluate.base_context

class Context(jedi.common.context.BaseContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",parent_context,,NoneType,arg_info
jedi,0.12.0,jedi.api.interpreter.Context,api.interpreter,Context,"Python Library Documentation: class Context in module jedi.evaluate.base_context

class Context(jedi.common.context.BaseContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",self,,,arg_info
jedi,0.12.0,jedi.api.interpreter.Context,api.interpreter,Context,"Python Library Documentation: class Context in module jedi.evaluate.base_context

class Context(jedi.common.context.BaseContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.api.interpreter.MixedModuleContext,api.interpreter,MixedModuleContext,"Python Library Documentation: class MixedModuleContext in module jedi.api.interpreter

class MixedModuleContext(jedi.evaluate.base_context.Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      MixedModuleContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, evaluator, tree_module, namespaces, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, *args, **kwargs)
 |  
 |  get_node(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  code_lines
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  type = 'mixed_module'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, tree_module, namespaces, path, code_lines)',)",code_lines,,,arg_info
jedi,0.12.0,jedi.api.interpreter.MixedModuleContext,api.interpreter,MixedModuleContext,"Python Library Documentation: class MixedModuleContext in module jedi.api.interpreter

class MixedModuleContext(jedi.evaluate.base_context.Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      MixedModuleContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, evaluator, tree_module, namespaces, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, *args, **kwargs)
 |  
 |  get_node(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  code_lines
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  type = 'mixed_module'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, tree_module, namespaces, path, code_lines)',)",path,,,arg_info
jedi,0.12.0,jedi.api.interpreter.MixedModuleContext,api.interpreter,MixedModuleContext,"Python Library Documentation: class MixedModuleContext in module jedi.api.interpreter

class MixedModuleContext(jedi.evaluate.base_context.Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      MixedModuleContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, evaluator, tree_module, namespaces, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, *args, **kwargs)
 |  
 |  get_node(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  code_lines
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  type = 'mixed_module'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, tree_module, namespaces, path, code_lines)',)",namespaces,,,arg_info
jedi,0.12.0,jedi.api.interpreter.MixedModuleContext,api.interpreter,MixedModuleContext,"Python Library Documentation: class MixedModuleContext in module jedi.api.interpreter

class MixedModuleContext(jedi.evaluate.base_context.Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      MixedModuleContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, evaluator, tree_module, namespaces, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, *args, **kwargs)
 |  
 |  get_node(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  code_lines
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  type = 'mixed_module'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, tree_module, namespaces, path, code_lines)',)",tree_module,,,arg_info
jedi,0.12.0,jedi.api.interpreter.MixedModuleContext,api.interpreter,MixedModuleContext,"Python Library Documentation: class MixedModuleContext in module jedi.api.interpreter

class MixedModuleContext(jedi.evaluate.base_context.Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      MixedModuleContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, evaluator, tree_module, namespaces, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, *args, **kwargs)
 |  
 |  get_node(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  code_lines
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  type = 'mixed_module'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, tree_module, namespaces, path, code_lines)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.api.interpreter.MixedModuleContext,api.interpreter,MixedModuleContext,"Python Library Documentation: class MixedModuleContext in module jedi.api.interpreter

class MixedModuleContext(jedi.evaluate.base_context.Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      MixedModuleContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, evaluator, tree_module, namespaces, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, *args, **kwargs)
 |  
 |  get_node(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  code_lines
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  type = 'mixed_module'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, tree_module, namespaces, path, code_lines)',)",self,,,arg_info
jedi,0.12.0,jedi.api.interpreter.ModuleContext,api.interpreter,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",self,,,arg_info
jedi,0.12.0,jedi.api.interpreter.ModuleContext,api.interpreter,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",code_lines,,,arg_info
jedi,0.12.0,jedi.api.interpreter.ModuleContext,api.interpreter,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",path,,,arg_info
jedi,0.12.0,jedi.api.interpreter.ModuleContext,api.interpreter,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",module_node,,,arg_info
jedi,0.12.0,jedi.api.interpreter.ModuleContext,api.interpreter,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.api.interpreter.NamespaceObject,api.interpreter,NamespaceObject,"Python Library Documentation: class NamespaceObject in module jedi.api.interpreter

class NamespaceObject(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, dct)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, dct)',)",dct,,,arg_info
jedi,0.12.0,jedi.api.interpreter.NamespaceObject,api.interpreter,NamespaceObject,"Python Library Documentation: class NamespaceObject in module jedi.api.interpreter

class NamespaceObject(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, dct)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, dct)',)",self,,,arg_info
jedi,0.12.0,jedi.api.interpreter._create,api.interpreter,_create,"Python Library Documentation: function _create in module jedi.api.interpreter

_create(evaluator, obj)
",function,"('(evaluator, obj)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.api.interpreter._create,api.interpreter,_create,"Python Library Documentation: function _create in module jedi.api.interpreter

_create(evaluator, obj)
",function,"('(evaluator, obj)',)",obj,,,arg_info
jedi,0.12.0,jedi.api.interpreter.create_access_path,api.interpreter,create_access_path,"Python Library Documentation: function create_access_path in module jedi.evaluate.compiled.access

create_access_path(evaluator, obj)
",function,"('(evaluator, obj)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.api.interpreter.create_access_path,api.interpreter,create_access_path,"Python Library Documentation: function create_access_path in module jedi.evaluate.compiled.access

create_access_path(evaluator, obj)
",function,"('(evaluator, obj)',)",obj,,,arg_info
jedi,0.12.0,jedi.api.keywords.AbstractNameDefinition,api.keywords,AbstractNameDefinition,"Python Library Documentation: class AbstractNameDefinition in module jedi.evaluate.filters

class AbstractNameDefinition(builtins.object)
 |  Methods defined here:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  infer(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.api.keywords.Keyword,api.keywords,Keyword,"Python Library Documentation: class Keyword in module jedi.api.keywords

class Keyword(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, name, pos)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  names
 |      For a `parsing.Name` like comparision
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'keyword'
",class,"('(self, evaluator, name, pos)',)",pos,,,arg_info
jedi,0.12.0,jedi.api.keywords.Keyword,api.keywords,Keyword,"Python Library Documentation: class Keyword in module jedi.api.keywords

class Keyword(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, name, pos)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  names
 |      For a `parsing.Name` like comparision
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'keyword'
",class,"('(self, evaluator, name, pos)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.api.keywords.Keyword,api.keywords,Keyword,"Python Library Documentation: class Keyword in module jedi.api.keywords

class Keyword(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, name, pos)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  names
 |      For a `parsing.Name` like comparision
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'keyword'
",class,"('(self, evaluator, name, pos)',)",name,,,arg_info
jedi,0.12.0,jedi.api.keywords.Keyword,api.keywords,Keyword,"Python Library Documentation: class Keyword in module jedi.api.keywords

class Keyword(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, name, pos)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  names
 |      For a `parsing.Name` like comparision
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'keyword'
",class,"('(self, evaluator, name, pos)',)",self,,,arg_info
jedi,0.12.0,jedi.api.keywords.KeywordName,api.keywords,KeywordName,"Python Library Documentation: class KeywordName in module jedi.api.keywords

class KeywordName(jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      KeywordName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'keyword'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, evaluator, name)',)",self,,,arg_info
jedi,0.12.0,jedi.api.keywords.KeywordName,api.keywords,KeywordName,"Python Library Documentation: class KeywordName in module jedi.api.keywords

class KeywordName(jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      KeywordName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'keyword'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, evaluator, name)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.api.keywords.KeywordName,api.keywords,KeywordName,"Python Library Documentation: class KeywordName in module jedi.api.keywords

class KeywordName(jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      KeywordName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'keyword'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, evaluator, name)',)",name,,,arg_info
jedi,0.12.0,jedi.api.keywords.get_operator,api.keywords,get_operator,"Python Library Documentation: function get_operator in module jedi.api.keywords

get_operator(evaluator, string, pos)
",function,"('(evaluator, string, pos)',)",pos,,,arg_info
jedi,0.12.0,jedi.api.keywords.get_operator,api.keywords,get_operator,"Python Library Documentation: function get_operator in module jedi.api.keywords

get_operator(evaluator, string, pos)
",function,"('(evaluator, string, pos)',)",string,,,arg_info
jedi,0.12.0,jedi.api.keywords.get_operator,api.keywords,get_operator,"Python Library Documentation: function get_operator in module jedi.api.keywords

get_operator(evaluator, string, pos)
",function,"('(evaluator, string, pos)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.api.keywords.imitate_pydoc,api.keywords,imitate_pydoc,"Python Library Documentation: function imitate_pydoc in module jedi.api.keywords

imitate_pydoc(string)
    It's not possible to get the pydoc's without starting the annoying pager
    stuff.
",function,"('(string)',)",string,,,arg_info
jedi,0.12.0,jedi.api.names,api,names,"Python Library Documentation: function names in module jedi.api

names(source=None, path=None, encoding='utf-8', all_scopes=False, definitions=True, references=False, environment=None)
    Returns a list of `Definition` objects, containing name parts.
    This means you can call ``Definition.goto_assignments()`` and get the
    reference of a name.
    The parameters are the same as in :py:class:`Script`, except or the
    following ones:
    
    :param all_scopes: If True lists the names of all scopes instead of only
        the module namespace.
    :param definitions: If True lists the names that have been defined by a
        class, function or a statement (``a = b`` returns ``a``).
    :param references: If True lists all the names that are not listed by
        ``definitions=True``. E.g. ``a = b`` returns ``b``.
",function,"(""(source=None, path=None, encoding='utf-8', all_scopes=False, definitions=True, references=False, environment=None)"",)",source,,NoneType,arg_info
jedi,0.12.0,jedi.api.names,api,names,"Python Library Documentation: function names in module jedi.api

names(source=None, path=None, encoding='utf-8', all_scopes=False, definitions=True, references=False, environment=None)
    Returns a list of `Definition` objects, containing name parts.
    This means you can call ``Definition.goto_assignments()`` and get the
    reference of a name.
    The parameters are the same as in :py:class:`Script`, except or the
    following ones:
    
    :param all_scopes: If True lists the names of all scopes instead of only
        the module namespace.
    :param definitions: If True lists the names that have been defined by a
        class, function or a statement (``a = b`` returns ``a``).
    :param references: If True lists all the names that are not listed by
        ``definitions=True``. E.g. ``a = b`` returns ``b``.
",function,"(""(source=None, path=None, encoding='utf-8', all_scopes=False, definitions=True, references=False, environment=None)"",)",path,,NoneType,arg_info
jedi,0.12.0,jedi.api.names,api,names,"Python Library Documentation: function names in module jedi.api

names(source=None, path=None, encoding='utf-8', all_scopes=False, definitions=True, references=False, environment=None)
    Returns a list of `Definition` objects, containing name parts.
    This means you can call ``Definition.goto_assignments()`` and get the
    reference of a name.
    The parameters are the same as in :py:class:`Script`, except or the
    following ones:
    
    :param all_scopes: If True lists the names of all scopes instead of only
        the module namespace.
    :param definitions: If True lists the names that have been defined by a
        class, function or a statement (``a = b`` returns ``a``).
    :param references: If True lists all the names that are not listed by
        ``definitions=True``. E.g. ``a = b`` returns ``b``.
",function,"(""(source=None, path=None, encoding='utf-8', all_scopes=False, definitions=True, references=False, environment=None)"",)",encoding,utf-8,str,arg_info
jedi,0.12.0,jedi.api.names,api,names,"Python Library Documentation: function names in module jedi.api

names(source=None, path=None, encoding='utf-8', all_scopes=False, definitions=True, references=False, environment=None)
    Returns a list of `Definition` objects, containing name parts.
    This means you can call ``Definition.goto_assignments()`` and get the
    reference of a name.
    The parameters are the same as in :py:class:`Script`, except or the
    following ones:
    
    :param all_scopes: If True lists the names of all scopes instead of only
        the module namespace.
    :param definitions: If True lists the names that have been defined by a
        class, function or a statement (``a = b`` returns ``a``).
    :param references: If True lists all the names that are not listed by
        ``definitions=True``. E.g. ``a = b`` returns ``b``.
",function,"(""(source=None, path=None, encoding='utf-8', all_scopes=False, definitions=True, references=False, environment=None)"",)",all_scopes,False,bool,arg_info
jedi,0.12.0,jedi.api.names,api,names,"Python Library Documentation: function names in module jedi.api

names(source=None, path=None, encoding='utf-8', all_scopes=False, definitions=True, references=False, environment=None)
    Returns a list of `Definition` objects, containing name parts.
    This means you can call ``Definition.goto_assignments()`` and get the
    reference of a name.
    The parameters are the same as in :py:class:`Script`, except or the
    following ones:
    
    :param all_scopes: If True lists the names of all scopes instead of only
        the module namespace.
    :param definitions: If True lists the names that have been defined by a
        class, function or a statement (``a = b`` returns ``a``).
    :param references: If True lists all the names that are not listed by
        ``definitions=True``. E.g. ``a = b`` returns ``b``.
",function,"(""(source=None, path=None, encoding='utf-8', all_scopes=False, definitions=True, references=False, environment=None)"",)",definitions,True,bool,arg_info
jedi,0.12.0,jedi.api.names,api,names,"Python Library Documentation: function names in module jedi.api

names(source=None, path=None, encoding='utf-8', all_scopes=False, definitions=True, references=False, environment=None)
    Returns a list of `Definition` objects, containing name parts.
    This means you can call ``Definition.goto_assignments()`` and get the
    reference of a name.
    The parameters are the same as in :py:class:`Script`, except or the
    following ones:
    
    :param all_scopes: If True lists the names of all scopes instead of only
        the module namespace.
    :param definitions: If True lists the names that have been defined by a
        class, function or a statement (``a = b`` returns ``a``).
    :param references: If True lists all the names that are not listed by
        ``definitions=True``. E.g. ``a = b`` returns ``b``.
",function,"(""(source=None, path=None, encoding='utf-8', all_scopes=False, definitions=True, references=False, environment=None)"",)",references,False,bool,arg_info
jedi,0.12.0,jedi.api.names,api,names,"Python Library Documentation: function names in module jedi.api

names(source=None, path=None, encoding='utf-8', all_scopes=False, definitions=True, references=False, environment=None)
    Returns a list of `Definition` objects, containing name parts.
    This means you can call ``Definition.goto_assignments()`` and get the
    reference of a name.
    The parameters are the same as in :py:class:`Script`, except or the
    following ones:
    
    :param all_scopes: If True lists the names of all scopes instead of only
        the module namespace.
    :param definitions: If True lists the names that have been defined by a
        class, function or a statement (``a = b`` returns ``a``).
    :param references: If True lists all the names that are not listed by
        ``definitions=True``. E.g. ``a = b`` returns ``b``.
",function,"(""(source=None, path=None, encoding='utf-8', all_scopes=False, definitions=True, references=False, environment=None)"",)",environment,,NoneType,arg_info
jedi,0.12.0,jedi.api.project.FileNotFoundError,api.project,FileNotFoundError,"Python Library Documentation: class FileNotFoundError in module builtins

class FileNotFoundError(OSError)
 |  File not found.
 |  
 |  Method resolution order:
 |      FileNotFoundError
 |      OSError
 |      Exception
 |      BaseException
 |      object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from OSError:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from OSError:
 |  
 |  characters_written
 |  
 |  errno
 |      POSIX exception code
 |  
 |  filename
 |      exception filename
 |  
 |  filename2
 |      second exception filename
 |  
 |  strerror
 |      exception strerror
 |  
 |  winerror
 |      Win32 exception code
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.api.project.NotADirectoryError,api.project,NotADirectoryError,"Python Library Documentation: class NotADirectoryError in module builtins

class NotADirectoryError(OSError)
 |  Operation only works on directories.
 |  
 |  Method resolution order:
 |      NotADirectoryError
 |      OSError
 |      Exception
 |      BaseException
 |      object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from OSError:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from OSError:
 |  
 |  characters_written
 |  
 |  errno
 |      POSIX exception code
 |  
 |  filename
 |      exception filename
 |  
 |  filename2
 |      second exception filename
 |  
 |  strerror
 |      exception strerror
 |  
 |  winerror
 |      Win32 exception code
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.api.project.Project,api.project,Project,"Python Library Documentation: class Project in module jedi.api.project

class Project(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, path, **kwargs)
 |      :param path: The base path for this project.
 |      :param sys_path: list of str. You can override the sys path if you
 |          want. By default the ``sys.path.`` is generated from the
 |          environment (virtualenvs, etc).
 |      :param smart_sys_path: If this is enabled (default), adds paths from
 |          local directories. Otherwise you will have to rely on your packages
 |          being properly configured on the ``sys.path``.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_environment(self)
 |  
 |  save(self)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  load(path) from builtins.type
 |      :param path: The path of the directory you want to use as a project.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, path, **kwargs)',)",path,,,arg_info
jedi,0.12.0,jedi.api.project.Project,api.project,Project,"Python Library Documentation: class Project in module jedi.api.project

class Project(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, path, **kwargs)
 |      :param path: The base path for this project.
 |      :param sys_path: list of str. You can override the sys path if you
 |          want. By default the ``sys.path.`` is generated from the
 |          environment (virtualenvs, etc).
 |      :param smart_sys_path: If this is enabled (default), adds paths from
 |          local directories. Otherwise you will have to rely on your packages
 |          being properly configured on the ``sys.path``.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_environment(self)
 |  
 |  save(self)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  load(path) from builtins.type
 |      :param path: The path of the directory you want to use as a project.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, path, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.api.project.Project.load,api.project.Project,load,"Python Library Documentation: method load in module jedi.api.project

load(path) method of builtins.type instance
    :param path: The path of the directory you want to use as a project.
",method,"('(path)',)",path,,,arg_info
jedi,0.12.0,jedi.api.project.Project.load,api.project.Project,load,"Python Library Documentation: method load in module jedi.api.project

load(path) method of builtins.type instance
    :param path: The path of the directory you want to use as a project.
",method,"('(path)',)",cls,,,arg_info
jedi,0.12.0,jedi.api.project.SameEnvironment,api.project,SameEnvironment,"Python Library Documentation: class SameEnvironment in module jedi.api.environment

class SameEnvironment(Environment)
 |  This class is supposed to be created by internal Jedi architecture. You
 |  should not create it directly. Please use create_environment or the other
 |  functions instead. It is then returned by that function.
 |  
 |  Method resolution order:
 |      SameEnvironment
 |      Environment
 |      _BaseEnvironment
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Environment:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_evaluator_subprocess(self, evaluator)
 |  
 |  get_sys_path(self)
 |      The sys path for this environment. Does not include potential
 |      modifications like ``sys.path.append``.
 |      
 |      :returns: list of str
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from _BaseEnvironment:
 |  
 |  get_grammar(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from _BaseEnvironment:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self)',)",self,,,arg_info
jedi,0.12.0,jedi.api.project.WrongVersion,api.project,WrongVersion,"Python Library Documentation: class WrongVersion in module jedi.api.exceptions

class WrongVersion(_JediError)
 |  Common base class for all non-exit exceptions.
 |  
 |  Method resolution order:
 |      WrongVersion
 |      _JediError
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Data descriptors inherited from _JediError:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.api.project._force_unicode_list,api.project,_force_unicode_list,"Python Library Documentation: function _force_unicode_list in module jedi.api.project

_force_unicode_list(lst)
",function,"('(lst)',)",lst,,,arg_info
jedi,0.12.0,jedi.api.project._is_django_path,api.project,_is_django_path,"Python Library Documentation: function _is_django_path in module jedi.api.project

_is_django_path(directory)
    Detects the path of the very well known Django library (if used)
",function,"('(directory)',)",directory,,,arg_info
jedi,0.12.0,jedi.api.project._is_potential_project,api.project,_is_potential_project,"Python Library Documentation: function _is_potential_project in module jedi.api.project

_is_potential_project(path)
",function,"('(path)',)",path,,,arg_info
jedi,0.12.0,jedi.api.project._remove_duplicates_from_path,api.project,_remove_duplicates_from_path,"Python Library Documentation: function _remove_duplicates_from_path in module jedi.api.project

_remove_duplicates_from_path(path)
",function,"('(path)',)",path,,,arg_info
jedi,0.12.0,jedi.api.project.discover_buildout_paths,api.project,discover_buildout_paths,"Python Library Documentation: function discover_buildout_paths in module jedi.evaluate.sys_path

discover_buildout_paths(evaluator, script_path)
",function,"('(evaluator, script_path)',)",script_path,,,arg_info
jedi,0.12.0,jedi.api.project.discover_buildout_paths,api.project,discover_buildout_paths,"Python Library Documentation: function discover_buildout_paths in module jedi.evaluate.sys_path

discover_buildout_paths(evaluator, script_path)
",function,"('(evaluator, script_path)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.api.project.force_unicode,api.project,force_unicode,"Python Library Documentation: function force_unicode in module jedi._compatibility

force_unicode(obj)
",function,"('(obj)',)",obj,,,arg_info
jedi,0.12.0,jedi.api.project.get_default_project,api.project,get_default_project,"Python Library Documentation: function get_default_project in module jedi.api.project

get_default_project(path=None)
",function,"('(path=None)',)",path,,NoneType,arg_info
jedi,0.12.0,jedi.api.project.traverse_parents,api.project,traverse_parents,"Python Library Documentation: function traverse_parents in module jedi.common.utils

traverse_parents(path, include_current=False)
",function,"('(path, include_current=False)',)",include_current,False,bool,arg_info
jedi,0.12.0,jedi.api.project.traverse_parents,api.project,traverse_parents,"Python Library Documentation: function traverse_parents in module jedi.common.utils

traverse_parents(path, include_current=False)
",function,"('(path, include_current=False)',)",path,,,arg_info
jedi,0.12.0,jedi.api.set_debug_function,api,set_debug_function,"Python Library Documentation: function set_debug_function in module jedi.api

set_debug_function(func_cb=<function print_to_stdout at 0x0000000005718D08>, warnings=True, notices=True, speed=True)
    Define a callback debug function to get all the debug messages.
    
    If you don't specify any arguments, debug messages will be printed to stdout.
    
    :param func_cb: The callback function for debug messages, with n params.
",function,"('(func_cb=<function print_to_stdout at 0x0000000005718D08>, warnings=True, notices=True, speed=True)',)",notices,True,bool,arg_info
jedi,0.12.0,jedi.api.set_debug_function,api,set_debug_function,"Python Library Documentation: function set_debug_function in module jedi.api

set_debug_function(func_cb=<function print_to_stdout at 0x0000000005718D08>, warnings=True, notices=True, speed=True)
    Define a callback debug function to get all the debug messages.
    
    If you don't specify any arguments, debug messages will be printed to stdout.
    
    :param func_cb: The callback function for debug messages, with n params.
",function,"('(func_cb=<function print_to_stdout at 0x0000000005718D08>, warnings=True, notices=True, speed=True)',)",speed,True,bool,arg_info
jedi,0.12.0,jedi.api.set_debug_function,api,set_debug_function,"Python Library Documentation: function set_debug_function in module jedi.api

set_debug_function(func_cb=<function print_to_stdout at 0x0000000005718D08>, warnings=True, notices=True, speed=True)
    Define a callback debug function to get all the debug messages.
    
    If you don't specify any arguments, debug messages will be printed to stdout.
    
    :param func_cb: The callback function for debug messages, with n params.
",function,"('(func_cb=<function print_to_stdout at 0x0000000005718D08>, warnings=True, notices=True, speed=True)',)",warnings,True,bool,arg_info
jedi,0.12.0,jedi.api.set_debug_function,api,set_debug_function,"Python Library Documentation: function set_debug_function in module jedi.api

set_debug_function(func_cb=<function print_to_stdout at 0x0000000005718D08>, warnings=True, notices=True, speed=True)
    Define a callback debug function to get all the debug messages.
    
    If you don't specify any arguments, debug messages will be printed to stdout.
    
    :param func_cb: The callback function for debug messages, with n params.
",function,"('(func_cb=<function print_to_stdout at 0x0000000005718D08>, warnings=True, notices=True, speed=True)',)",func_cb,<function print_to_stdout at 0x0000000005718D08>,function,arg_info
jedi,0.12.0,jedi.api.tree_name_to_contexts,api,tree_name_to_contexts,"Python Library Documentation: function tree_name_to_contexts in module jedi.evaluate.syntax_tree

tree_name_to_contexts(evaluator, context, tree_name)
",function,"('(evaluator, context, tree_name)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.api.tree_name_to_contexts,api,tree_name_to_contexts,"Python Library Documentation: function tree_name_to_contexts in module jedi.evaluate.syntax_tree

tree_name_to_contexts(evaluator, context, tree_name)
",function,"('(evaluator, context, tree_name)',)",context,,,arg_info
jedi,0.12.0,jedi.api.tree_name_to_contexts,api,tree_name_to_contexts,"Python Library Documentation: function tree_name_to_contexts in module jedi.evaluate.syntax_tree

tree_name_to_contexts(evaluator, context, tree_name)
",function,"('(evaluator, context, tree_name)',)",tree_name,,,arg_info
jedi,0.12.0,jedi.api.try_iter_content,api,try_iter_content,"Python Library Documentation: function try_iter_content in module jedi.evaluate.arguments

try_iter_content(types, depth=0)
    Helper method for static analysis.
",function,"('(types, depth=0)',)",depth,0,int,arg_info
jedi,0.12.0,jedi.api.try_iter_content,api,try_iter_content,"Python Library Documentation: function try_iter_content in module jedi.evaluate.arguments

try_iter_content(types, depth=0)
    Helper method for static analysis.
",function,"('(types, depth=0)',)",types,,,arg_info
jedi,0.12.0,jedi.api.unpack_tuple_to_dict,api,unpack_tuple_to_dict,"Python Library Documentation: function unpack_tuple_to_dict in module jedi.evaluate.context.iterable

unpack_tuple_to_dict(context, types, exprlist)
    Unpacking tuple assignments in for statements and expr_stmts.
",function,"('(context, types, exprlist)',)",context,,,arg_info
jedi,0.12.0,jedi.api.unpack_tuple_to_dict,api,unpack_tuple_to_dict,"Python Library Documentation: function unpack_tuple_to_dict in module jedi.evaluate.context.iterable

unpack_tuple_to_dict(context, types, exprlist)
    Unpacking tuple assignments in for statements and expr_stmts.
",function,"('(context, types, exprlist)',)",exprlist,,,arg_info
jedi,0.12.0,jedi.api.unpack_tuple_to_dict,api,unpack_tuple_to_dict,"Python Library Documentation: function unpack_tuple_to_dict in module jedi.evaluate.context.iterable

unpack_tuple_to_dict(context, types, exprlist)
    Unpacking tuple assignments in for statements and expr_stmts.
",function,"('(context, types, exprlist)',)",types,,,arg_info
jedi,0.12.0,jedi.cache.call_signature_time_cache,cache,call_signature_time_cache,"Python Library Documentation: function call_signature_time_cache in module jedi.cache

call_signature_time_cache(time_add_setting)
    This decorator works as follows: Call it with a setting and after that
    use the function with a callable that returns the key.
    But: This function is only called if the key is not available. After a
    certain amount of time (`time_add_setting`) the cache is invalid.
    
    If the given key is None, the function will not be cached.
",function,"('(time_add_setting)',)",time_add_setting,,,arg_info
jedi,0.12.0,jedi.cache.clear_time_caches,cache,clear_time_caches,"Python Library Documentation: function clear_time_caches in module jedi.cache

clear_time_caches(delete_all=False)
    Jedi caches many things, that should be completed after each completion
    finishes.
    
    :param delete_all: Deletes also the cache that is normally not deleted,
        like parser cache, which is important for faster parsing.
",function,"('(delete_all=False)',)",delete_all,False,bool,arg_info
jedi,0.12.0,jedi.cache.memoize_method,cache,memoize_method,"Python Library Documentation: function memoize_method in module jedi.cache

memoize_method(method)
    A normal memoize function.
",function,"('(method)',)",method,,,arg_info
jedi,0.12.0,jedi.cache.time_cache,cache,time_cache,"Python Library Documentation: function time_cache in module jedi.cache

time_cache(seconds)
",function,"('(seconds)',)",seconds,,,arg_info
jedi,0.12.0,jedi.cache.underscore_memoization,cache,underscore_memoization,"Python Library Documentation: function underscore_memoization in module jedi.cache

underscore_memoization(func)
    Decorator for methods::
    
        class A(object):
            def x(self):
                if self._x:
                    self._x = 10
                return self._x
    
    Becomes::
    
        class A(object):
            @underscore_memoization
            def x(self):
                return 10
    
    A now has an attribute ``_x`` written by this decorator.
",function,"('(func)',)",func,,,arg_info
jedi,0.12.0,jedi.cache.wraps,cache,wraps,"Python Library Documentation: function wraps in module functools

wraps(wrapped, assigned=('__module__', '__name__', '__qualname__', '__doc__', '__annotations__'), updated=('__dict__',))
    Decorator factory to apply update_wrapper() to a wrapper function
    
    Returns a decorator that invokes update_wrapper() with the decorated
    function as the wrapper argument and the arguments to wraps() as the
    remaining arguments. Default arguments are as for update_wrapper().
    This is a convenience function to simplify applying partial() to
    update_wrapper().
",function,"(""(wrapped, assigned=('__module__', '__name__', '__qualname__', '__doc__', '__annotations__'), updated=('__dict__',))"",)",wrapped,,,arg_info
jedi,0.12.0,jedi.cache.wraps,cache,wraps,"Python Library Documentation: function wraps in module functools

wraps(wrapped, assigned=('__module__', '__name__', '__qualname__', '__doc__', '__annotations__'), updated=('__dict__',))
    Decorator factory to apply update_wrapper() to a wrapper function
    
    Returns a decorator that invokes update_wrapper() with the decorated
    function as the wrapper argument and the arguments to wraps() as the
    remaining arguments. Default arguments are as for update_wrapper().
    This is a convenience function to simplify applying partial() to
    update_wrapper().
",function,"(""(wrapped, assigned=('__module__', '__name__', '__qualname__', '__doc__', '__annotations__'), updated=('__dict__',))"",)",updated,"('__dict__',)",tuple,arg_info
jedi,0.12.0,jedi.cache.wraps,cache,wraps,"Python Library Documentation: function wraps in module functools

wraps(wrapped, assigned=('__module__', '__name__', '__qualname__', '__doc__', '__annotations__'), updated=('__dict__',))
    Decorator factory to apply update_wrapper() to a wrapper function
    
    Returns a decorator that invokes update_wrapper() with the decorated
    function as the wrapper argument and the arguments to wraps() as the
    remaining arguments. Default arguments are as for update_wrapper().
    This is a convenience function to simplify applying partial() to
    update_wrapper().
",function,"(""(wrapped, assigned=('__module__', '__name__', '__qualname__', '__doc__', '__annotations__'), updated=('__dict__',))"",)",assigned,"('__module__', '__name__', '__qualname__', '__doc__', '__annotations__')",tuple,arg_info
jedi,0.12.0,jedi.common.BaseContext,common,BaseContext,"Python Library Documentation: class BaseContext in module jedi.common.context

class BaseContext(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",parent_context,,NoneType,arg_info
jedi,0.12.0,jedi.common.BaseContext,common,BaseContext,"Python Library Documentation: class BaseContext in module jedi.common.context

class BaseContext(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",self,,,arg_info
jedi,0.12.0,jedi.common.BaseContext,common,BaseContext,"Python Library Documentation: class BaseContext in module jedi.common.context

class BaseContext(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.common.BaseContextSet,common,BaseContextSet,"Python Library Documentation: class BaseContextSet in module jedi.common.context

class BaseContextSet(builtins.object)
 |  Methods defined here:
 |  
 |  __bool__(self)
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, *args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self)
 |  
 |  __len__(self)
 |  
 |  __or__(self, other)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  filter(self, filter_func)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  from_iterable(iterable) from builtins.type
 |  
 |  from_set(set_) from builtins.type
 |  
 |  from_sets(sets) from builtins.type
 |      Used to work with an iterable of set.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, *args)',)",self,,,arg_info
jedi,0.12.0,jedi.common.BaseContextSet.from_iterable,common.BaseContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",iterable,,,arg_info
jedi,0.12.0,jedi.common.BaseContextSet.from_iterable,common.BaseContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",cls,,,arg_info
jedi,0.12.0,jedi.common.BaseContextSet.from_set,common.BaseContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",cls,,,arg_info
jedi,0.12.0,jedi.common.BaseContextSet.from_set,common.BaseContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",set_,,,arg_info
jedi,0.12.0,jedi.common.BaseContextSet.from_sets,common.BaseContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",cls,,,arg_info
jedi,0.12.0,jedi.common.BaseContextSet.from_sets,common.BaseContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",sets,,,arg_info
jedi,0.12.0,jedi.common.context.BaseContext,common.context,BaseContext,"Python Library Documentation: class BaseContext in module jedi.common.context

class BaseContext(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",parent_context,,NoneType,arg_info
jedi,0.12.0,jedi.common.context.BaseContext,common.context,BaseContext,"Python Library Documentation: class BaseContext in module jedi.common.context

class BaseContext(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.common.context.BaseContext,common.context,BaseContext,"Python Library Documentation: class BaseContext in module jedi.common.context

class BaseContext(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",self,,,arg_info
jedi,0.12.0,jedi.common.context.BaseContextSet,common.context,BaseContextSet,"Python Library Documentation: class BaseContextSet in module jedi.common.context

class BaseContextSet(builtins.object)
 |  Methods defined here:
 |  
 |  __bool__(self)
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, *args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self)
 |  
 |  __len__(self)
 |  
 |  __or__(self, other)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  filter(self, filter_func)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  from_iterable(iterable) from builtins.type
 |  
 |  from_set(set_) from builtins.type
 |  
 |  from_sets(sets) from builtins.type
 |      Used to work with an iterable of set.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, *args)',)",self,,,arg_info
jedi,0.12.0,jedi.common.context.BaseContextSet.from_iterable,common.context.BaseContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",cls,,,arg_info
jedi,0.12.0,jedi.common.context.BaseContextSet.from_iterable,common.context.BaseContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",iterable,,,arg_info
jedi,0.12.0,jedi.common.context.BaseContextSet.from_set,common.context.BaseContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",cls,,,arg_info
jedi,0.12.0,jedi.common.context.BaseContextSet.from_set,common.context.BaseContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",set_,,,arg_info
jedi,0.12.0,jedi.common.context.BaseContextSet.from_sets,common.context.BaseContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",sets,,,arg_info
jedi,0.12.0,jedi.common.context.BaseContextSet.from_sets,common.context.BaseContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",cls,,,arg_info
jedi,0.12.0,jedi.common.utils.traverse_parents,common.utils,traverse_parents,"Python Library Documentation: function traverse_parents in module jedi.common.utils

traverse_parents(path, include_current=False)
",function,"('(path, include_current=False)',)",include_current,False,bool,arg_info
jedi,0.12.0,jedi.common.utils.traverse_parents,common.utils,traverse_parents,"Python Library Documentation: function traverse_parents in module jedi.common.utils

traverse_parents(path, include_current=False)
",function,"('(path, include_current=False)',)",path,,,arg_info
jedi,0.12.0,jedi.debug.Fore,debug,Fore,"Python Library Documentation: class Fore in module jedi.debug

class Fore(builtins.object)
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  GREEN = ''
 |  
 |  MAGENTA = ''
 |  
 |  RED = ''
 |  
 |  RESET = ''
 |  
 |  YELLOW = ''
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.debug.dbg,debug,dbg,"Python Library Documentation: function dbg in module jedi.debug

dbg(message, *args, **kwargs)
    Looks at the stack, to see if a debug message should be printed.
",function,"('(message, *args, **kwargs)',)",message,,,arg_info
jedi,0.12.0,jedi.debug.increase_indent,debug,increase_indent,"Python Library Documentation: function increase_indent in module jedi.debug

increase_indent(func)
    Decorator for makin
",function,"('(func)',)",func,,,arg_info
jedi,0.12.0,jedi.debug.print_to_stdout,debug,print_to_stdout,"Python Library Documentation: function print_to_stdout in module jedi.debug

print_to_stdout(color, str_out)
    The default debug function that prints to standard out.
    
    :param str color: A string that is an attribute of ``colorama.Fore``.
",function,"('(color, str_out)',)",str_out,,,arg_info
jedi,0.12.0,jedi.debug.print_to_stdout,debug,print_to_stdout,"Python Library Documentation: function print_to_stdout in module jedi.debug

print_to_stdout(color, str_out)
    The default debug function that prints to standard out.
    
    :param str color: A string that is an attribute of ``colorama.Fore``.
",function,"('(color, str_out)',)",color,,,arg_info
jedi,0.12.0,jedi.debug.speed,debug,speed,"Python Library Documentation: function speed in module jedi.debug

speed(name)
",function,"('(name)',)",name,,,arg_info
jedi,0.12.0,jedi.debug.u,debug,u,"Python Library Documentation: function u in module jedi._compatibility

u(string, errors='strict')
    Cast to unicode DAMMIT!
    Written because Python2 repr always implicitly casts to a string, so we
    have to cast back to a unicode (and we now that we always deal with valid
    unicode, because we check that in the beginning).
",function,"(""(string, errors='strict')"",)",string,,,arg_info
jedi,0.12.0,jedi.debug.u,debug,u,"Python Library Documentation: function u in module jedi._compatibility

u(string, errors='strict')
    Cast to unicode DAMMIT!
    Written because Python2 repr always implicitly casts to a string, so we
    have to cast back to a unicode (and we now that we always deal with valid
    unicode, because we check that in the beginning).
",function,"(""(string, errors='strict')"",)",errors,strict,str,arg_info
jedi,0.12.0,jedi.debug.warning,debug,warning,"Python Library Documentation: function warning in module jedi.debug

warning(message, *args, **kwargs)
",function,"('(message, *args, **kwargs)',)",message,,,arg_info
jedi,0.12.0,jedi.evaluate.AnonymousInstance,evaluate,AnonymousInstance,"Python Library Documentation: class AnonymousInstance in module jedi.evaluate.context.instance

class AnonymousInstance(TreeInstance)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      AnonymousInstance
 |      TreeInstance
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Anonym...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from TreeInstance:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractInstanceContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractInstanceContext:
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractInstanceContext:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.AnonymousInstance,evaluate,AnonymousInstance,"Python Library Documentation: class AnonymousInstance in module jedi.evaluate.context.instance

class AnonymousInstance(TreeInstance)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      AnonymousInstance
 |      TreeInstance
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Anonym...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from TreeInstance:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractInstanceContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractInstanceContext:
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractInstanceContext:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.AnonymousInstance,evaluate,AnonymousInstance,"Python Library Documentation: class AnonymousInstance in module jedi.evaluate.context.instance

class AnonymousInstance(TreeInstance)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      AnonymousInstance
 |      TreeInstance
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Anonym...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from TreeInstance:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractInstanceContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractInstanceContext:
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractInstanceContext:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context)',)",class_context,,,arg_info
jedi,0.12.0,jedi.evaluate.AnonymousInstance,evaluate,AnonymousInstance,"Python Library Documentation: class AnonymousInstance in module jedi.evaluate.context.instance

class AnonymousInstance(TreeInstance)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      AnonymousInstance
 |      TreeInstance
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Anonym...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from TreeInstance:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractInstanceContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractInstanceContext:
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractInstanceContext:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.BoundMethod,evaluate,BoundMethod,"Python Library Documentation: class BoundMethod in module jedi.evaluate.context.instance

class BoundMethod(jedi.evaluate.context.function.FunctionContext)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      BoundMethod
 |      jedi.evaluate.context.function.FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, instance, class_context, *args, **kwargs)
 |      This should not be called directly
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, instance, class_context, *args, **kwargs)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.BoundMethod,evaluate,BoundMethod,"Python Library Documentation: class BoundMethod in module jedi.evaluate.context.instance

class BoundMethod(jedi.evaluate.context.function.FunctionContext)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      BoundMethod
 |      jedi.evaluate.context.function.FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, instance, class_context, *args, **kwargs)
 |      This should not be called directly
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, instance, class_context, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.BoundMethod,evaluate,BoundMethod,"Python Library Documentation: class BoundMethod in module jedi.evaluate.context.instance

class BoundMethod(jedi.evaluate.context.function.FunctionContext)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      BoundMethod
 |      jedi.evaluate.context.function.FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, instance, class_context, *args, **kwargs)
 |      This should not be called directly
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, instance, class_context, *args, **kwargs)',)",instance,,,arg_info
jedi,0.12.0,jedi.evaluate.BoundMethod,evaluate,BoundMethod,"Python Library Documentation: class BoundMethod in module jedi.evaluate.context.instance

class BoundMethod(jedi.evaluate.context.function.FunctionContext)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      BoundMethod
 |      jedi.evaluate.context.function.FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, instance, class_context, *args, **kwargs)
 |      This should not be called directly
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, instance, class_context, *args, **kwargs)',)",class_context,,,arg_info
jedi,0.12.0,jedi.evaluate.ClassContext,evaluate,ClassContext,"Python Library Documentation: class ClassContext in module jedi.evaluate.context.klass

class ClassContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  This class is not only important to extend `tree.Class`, it is also a
 |  important for descriptors (if the descriptor methods are evaluated or not).
 |  
 |  Method resolution order:
 |      ClassContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, classdef)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None, is_instance=False)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  get_param_names(self)
 |  
 |  get_params(self)
 |  
 |  is_class(self)
 |  
 |  py__bases__ = wrapper(obj, *args, **kwargs)
 |  
 |  py__call__(self, params)
 |  
 |  py__class__(self)
 |  
 |  py__mro__ = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'class'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, classdef)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.ClassContext,evaluate,ClassContext,"Python Library Documentation: class ClassContext in module jedi.evaluate.context.klass

class ClassContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  This class is not only important to extend `tree.Class`, it is also a
 |  important for descriptors (if the descriptor methods are evaluated or not).
 |  
 |  Method resolution order:
 |      ClassContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, classdef)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None, is_instance=False)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  get_param_names(self)
 |  
 |  get_params(self)
 |  
 |  is_class(self)
 |  
 |  py__bases__ = wrapper(obj, *args, **kwargs)
 |  
 |  py__call__(self, params)
 |  
 |  py__class__(self)
 |  
 |  py__mro__ = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'class'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, classdef)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.ClassContext,evaluate,ClassContext,"Python Library Documentation: class ClassContext in module jedi.evaluate.context.klass

class ClassContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  This class is not only important to extend `tree.Class`, it is also a
 |  important for descriptors (if the descriptor methods are evaluated or not).
 |  
 |  Method resolution order:
 |      ClassContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, classdef)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None, is_instance=False)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  get_param_names(self)
 |  
 |  get_params(self)
 |  
 |  is_class(self)
 |  
 |  py__bases__ = wrapper(obj, *args, **kwargs)
 |  
 |  py__call__(self, params)
 |  
 |  py__class__(self)
 |  
 |  py__mro__ = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'class'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, classdef)',)",classdef,,,arg_info
jedi,0.12.0,jedi.evaluate.ClassContext,evaluate,ClassContext,"Python Library Documentation: class ClassContext in module jedi.evaluate.context.klass

class ClassContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  This class is not only important to extend `tree.Class`, it is also a
 |  important for descriptors (if the descriptor methods are evaluated or not).
 |  
 |  Method resolution order:
 |      ClassContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, classdef)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None, is_instance=False)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  get_param_names(self)
 |  
 |  get_params(self)
 |  
 |  is_class(self)
 |  
 |  py__bases__ = wrapper(obj, *args, **kwargs)
 |  
 |  py__call__(self, params)
 |  
 |  py__class__(self)
 |  
 |  py__mro__ = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'class'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, classdef)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.CompForContext,evaluate,CompForContext,"Python Library Documentation: class CompForContext in module jedi.evaluate.context.iterable

class CompForContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      CompForContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, comp_for)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_node(self)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  from_comp_for(parent_context, comp_for) from builtins.type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, comp_for)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.CompForContext,evaluate,CompForContext,"Python Library Documentation: class CompForContext in module jedi.evaluate.context.iterable

class CompForContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      CompForContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, comp_for)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_node(self)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  from_comp_for(parent_context, comp_for) from builtins.type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, comp_for)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.CompForContext,evaluate,CompForContext,"Python Library Documentation: class CompForContext in module jedi.evaluate.context.iterable

class CompForContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      CompForContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, comp_for)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_node(self)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  from_comp_for(parent_context, comp_for) from builtins.type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, comp_for)',)",comp_for,,,arg_info
jedi,0.12.0,jedi.evaluate.CompForContext,evaluate,CompForContext,"Python Library Documentation: class CompForContext in module jedi.evaluate.context.iterable

class CompForContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      CompForContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, comp_for)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_node(self)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  from_comp_for(parent_context, comp_for) from builtins.type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, comp_for)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.CompForContext.from_comp_for,evaluate.CompForContext,from_comp_for,"Python Library Documentation: method from_comp_for in module jedi.evaluate.context.iterable

from_comp_for(parent_context, comp_for) method of builtins.type instance
",method,"('(parent_context, comp_for)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.CompForContext.from_comp_for,evaluate.CompForContext,from_comp_for,"Python Library Documentation: method from_comp_for in module jedi.evaluate.context.iterable

from_comp_for(parent_context, comp_for) method of builtins.type instance
",method,"('(parent_context, comp_for)',)",comp_for,,,arg_info
jedi,0.12.0,jedi.evaluate.CompForContext.from_comp_for,evaluate.CompForContext,from_comp_for,"Python Library Documentation: method from_comp_for in module jedi.evaluate.context.iterable

from_comp_for(parent_context, comp_for) method of builtins.type instance
",method,"('(parent_context, comp_for)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.ContextSet,evaluate,ContextSet,"Python Library Documentation: class ContextSet in module jedi.evaluate.base_context

class ContextSet(jedi.common.context.BaseContextSet)
 |  Method resolution order:
 |      ContextSet
 |      jedi.common.context.BaseContextSet
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContextSet:
 |  
 |  __bool__(self)
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, *args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self)
 |  
 |  __len__(self)
 |  
 |  __or__(self, other)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  filter(self, filter_func)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from jedi.common.context.BaseContextSet:
 |  
 |  from_iterable(iterable) from builtins.type
 |  
 |  from_set(set_) from builtins.type
 |  
 |  from_sets(sets) from builtins.type
 |      Used to work with an iterable of set.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContextSet:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, *args)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.ContextSet.from_iterable,evaluate.ContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",iterable,,,arg_info
jedi,0.12.0,jedi.evaluate.ContextSet.from_iterable,evaluate.ContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.ContextSet.from_set,evaluate.ContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",set_,,,arg_info
jedi,0.12.0,jedi.evaluate.ContextSet.from_set,evaluate.ContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.ContextSet.from_sets,evaluate.ContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.ContextSet.from_sets,evaluate.ContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",sets,,,arg_info
jedi,0.12.0,jedi.evaluate.ContextualizedName,evaluate,ContextualizedName,"Python Library Documentation: class ContextualizedName in module jedi.evaluate.base_context

class ContextualizedName(ContextualizedNode)
 |  Method resolution order:
 |      ContextualizedName
 |      ContextualizedNode
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  assignment_indexes(self)
 |      Returns an array of tuple(int, node) of the indexes that are used in
 |      tuple assignments.
 |      
 |      For example if the name is ``y`` in the following code::
 |      
 |          x, (y, z) = 2, ''
 |      
 |      would result in ``[(1, xyz_node), (0, yz_node)]``.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ContextualizedNode:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ContextualizedNode:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.ContextualizedName,evaluate,ContextualizedName,"Python Library Documentation: class ContextualizedName in module jedi.evaluate.base_context

class ContextualizedName(ContextualizedNode)
 |  Method resolution order:
 |      ContextualizedName
 |      ContextualizedNode
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  assignment_indexes(self)
 |      Returns an array of tuple(int, node) of the indexes that are used in
 |      tuple assignments.
 |      
 |      For example if the name is ``y`` in the following code::
 |      
 |          x, (y, z) = 2, ''
 |      
 |      would result in ``[(1, xyz_node), (0, yz_node)]``.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ContextualizedNode:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ContextualizedNode:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.ContextualizedName,evaluate,ContextualizedName,"Python Library Documentation: class ContextualizedName in module jedi.evaluate.base_context

class ContextualizedName(ContextualizedNode)
 |  Method resolution order:
 |      ContextualizedName
 |      ContextualizedNode
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  assignment_indexes(self)
 |      Returns an array of tuple(int, node) of the indexes that are used in
 |      tuple assignments.
 |      
 |      For example if the name is ``y`` in the following code::
 |      
 |          x, (y, z) = 2, ''
 |      
 |      would result in ``[(1, xyz_node), (0, yz_node)]``.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ContextualizedNode:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ContextualizedNode:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.ContextualizedNode,evaluate,ContextualizedNode,"Python Library Documentation: class ContextualizedNode in module jedi.evaluate.base_context

class ContextualizedNode(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.ContextualizedNode,evaluate,ContextualizedNode,"Python Library Documentation: class ContextualizedNode in module jedi.evaluate.base_context

class ContextualizedNode(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.ContextualizedNode,evaluate,ContextualizedNode,"Python Library Documentation: class ContextualizedNode in module jedi.evaluate.base_context

class ContextualizedNode(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.Evaluator,evaluate,Evaluator,"Python Library Documentation: class Evaluator in module jedi.evaluate

class Evaluator(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, project, environment=None, script_path=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  create_context(self, base_context, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_element(self, context, element)
 |  
 |  get_sys_path(self)
 |      Convenience function
 |  
 |  goto(self, context, name)
 |  
 |  goto_definitions(self, context, name)
 |  
 |  parse(self, *args, **kwargs)
 |  
 |  parse_and_get_code(self, code=None, path=None, **kwargs)
 |  
 |  reset_recursion_limitations(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  builtins_module
",class,"('(self, project, environment=None, script_path=None)',)",script_path,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.Evaluator,evaluate,Evaluator,"Python Library Documentation: class Evaluator in module jedi.evaluate

class Evaluator(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, project, environment=None, script_path=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  create_context(self, base_context, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_element(self, context, element)
 |  
 |  get_sys_path(self)
 |      Convenience function
 |  
 |  goto(self, context, name)
 |  
 |  goto_definitions(self, context, name)
 |  
 |  parse(self, *args, **kwargs)
 |  
 |  parse_and_get_code(self, code=None, path=None, **kwargs)
 |  
 |  reset_recursion_limitations(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  builtins_module
",class,"('(self, project, environment=None, script_path=None)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.Evaluator,evaluate,Evaluator,"Python Library Documentation: class Evaluator in module jedi.evaluate

class Evaluator(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, project, environment=None, script_path=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  create_context(self, base_context, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_element(self, context, element)
 |  
 |  get_sys_path(self)
 |      Convenience function
 |  
 |  goto(self, context, name)
 |  
 |  goto_definitions(self, context, name)
 |  
 |  parse(self, *args, **kwargs)
 |  
 |  parse_and_get_code(self, code=None, path=None, **kwargs)
 |  
 |  reset_recursion_limitations(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  builtins_module
",class,"('(self, project, environment=None, script_path=None)',)",project,,,arg_info
jedi,0.12.0,jedi.evaluate.Evaluator,evaluate,Evaluator,"Python Library Documentation: class Evaluator in module jedi.evaluate

class Evaluator(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, project, environment=None, script_path=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  create_context(self, base_context, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_element(self, context, element)
 |  
 |  get_sys_path(self)
 |      Convenience function
 |  
 |  goto(self, context, name)
 |  
 |  goto_definitions(self, context, name)
 |  
 |  parse(self, *args, **kwargs)
 |  
 |  parse_and_get_code(self, code=None, path=None, **kwargs)
 |  
 |  reset_recursion_limitations(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  builtins_module
",class,"('(self, project, environment=None, script_path=None)',)",environment,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.FunctionContext,evaluate,FunctionContext,"Python Library Documentation: class FunctionContext in module jedi.evaluate.context.function

class FunctionContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, funcdef)
 |      This should not be called directly
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, funcdef)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.FunctionContext,evaluate,FunctionContext,"Python Library Documentation: class FunctionContext in module jedi.evaluate.context.function

class FunctionContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, funcdef)
 |      This should not be called directly
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, funcdef)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.FunctionContext,evaluate,FunctionContext,"Python Library Documentation: class FunctionContext in module jedi.evaluate.context.function

class FunctionContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, funcdef)
 |      This should not be called directly
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, funcdef)',)",funcdef,,,arg_info
jedi,0.12.0,jedi.evaluate.FunctionContext,evaluate,FunctionContext,"Python Library Documentation: class FunctionContext in module jedi.evaluate.context.function

class FunctionContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, funcdef)
 |      This should not be called directly
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, funcdef)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.ParamName,evaluate,ParamName,"Python Library Documentation: class ParamName in module jedi.evaluate.filters

class ParamName(AbstractTreeName)
 |  Method resolution order:
 |      ParamName
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_kind(self)
 |  
 |  get_param(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'param'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.ParamName,evaluate,ParamName,"Python Library Documentation: class ParamName in module jedi.evaluate.filters

class ParamName(AbstractTreeName)
 |  Method resolution order:
 |      ParamName
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_kind(self)
 |  
 |  get_param(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'param'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.ParamName,evaluate,ParamName,"Python Library Documentation: class ParamName in module jedi.evaluate.filters

class ParamName(AbstractTreeName)
 |  Method resolution order:
 |      ParamName
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_kind(self)
 |  
 |  get_param(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'param'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",tree_name,,,arg_info
jedi,0.12.0,jedi.evaluate.TreeNameDefinition,evaluate,TreeNameDefinition,"Python Library Documentation: class TreeNameDefinition in module jedi.evaluate.filters

class TreeNameDefinition(AbstractTreeName)
 |  Method resolution order:
 |      TreeNameDefinition
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",tree_name,,,arg_info
jedi,0.12.0,jedi.evaluate.TreeNameDefinition,evaluate,TreeNameDefinition,"Python Library Documentation: class TreeNameDefinition in module jedi.evaluate.filters

class TreeNameDefinition(AbstractTreeName)
 |  Method resolution order:
 |      TreeNameDefinition
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.TreeNameDefinition,evaluate,TreeNameDefinition,"Python Library Documentation: class TreeNameDefinition in module jedi.evaluate.filters

class TreeNameDefinition(AbstractTreeName)
 |  Method resolution order:
 |      TreeNameDefinition
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.analysis.CompiledObject,evaluate.analysis,CompiledObject,"Python Library Documentation: class CompiledObject in module jedi.evaluate.compiled.context

class CompiledObject(jedi.evaluate.base_context.Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      CompiledObject
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, access_handle, parent_context=None, faked_class=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  dict_values(self)
 |  
 |  execute_operation(self, other, operator)
 |  
 |  get_filters(self, search_global=False, is_instance=False, until_position=None, origin_scope=None)
 |  
 |  get_param_names(self)
 |  
 |  get_safe_value(self, default=<object object at 0x000000000520FC40>)
 |  
 |  is_class(self)
 |  
 |  is_super_class(self, exception)
 |  
 |  negate(self)
 |  
 |  py__bases__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__call__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__class__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__file__(self)
 |  
 |  py__getitem__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__iter__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__mro__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__name__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, access_handle, parent_context=None, faked_class=None)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.analysis.CompiledObject,evaluate.analysis,CompiledObject,"Python Library Documentation: class CompiledObject in module jedi.evaluate.compiled.context

class CompiledObject(jedi.evaluate.base_context.Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      CompiledObject
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, access_handle, parent_context=None, faked_class=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  dict_values(self)
 |  
 |  execute_operation(self, other, operator)
 |  
 |  get_filters(self, search_global=False, is_instance=False, until_position=None, origin_scope=None)
 |  
 |  get_param_names(self)
 |  
 |  get_safe_value(self, default=<object object at 0x000000000520FC40>)
 |  
 |  is_class(self)
 |  
 |  is_super_class(self, exception)
 |  
 |  negate(self)
 |  
 |  py__bases__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__call__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__class__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__file__(self)
 |  
 |  py__getitem__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__iter__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__mro__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__name__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, access_handle, parent_context=None, faked_class=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.analysis.CompiledObject,evaluate.analysis,CompiledObject,"Python Library Documentation: class CompiledObject in module jedi.evaluate.compiled.context

class CompiledObject(jedi.evaluate.base_context.Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      CompiledObject
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, access_handle, parent_context=None, faked_class=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  dict_values(self)
 |  
 |  execute_operation(self, other, operator)
 |  
 |  get_filters(self, search_global=False, is_instance=False, until_position=None, origin_scope=None)
 |  
 |  get_param_names(self)
 |  
 |  get_safe_value(self, default=<object object at 0x000000000520FC40>)
 |  
 |  is_class(self)
 |  
 |  is_super_class(self, exception)
 |  
 |  negate(self)
 |  
 |  py__bases__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__call__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__class__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__file__(self)
 |  
 |  py__getitem__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__iter__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__mro__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__name__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, access_handle, parent_context=None, faked_class=None)',)",access_handle,,,arg_info
jedi,0.12.0,jedi.evaluate.analysis.CompiledObject,evaluate.analysis,CompiledObject,"Python Library Documentation: class CompiledObject in module jedi.evaluate.compiled.context

class CompiledObject(jedi.evaluate.base_context.Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      CompiledObject
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, access_handle, parent_context=None, faked_class=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  dict_values(self)
 |  
 |  execute_operation(self, other, operator)
 |  
 |  get_filters(self, search_global=False, is_instance=False, until_position=None, origin_scope=None)
 |  
 |  get_param_names(self)
 |  
 |  get_safe_value(self, default=<object object at 0x000000000520FC40>)
 |  
 |  is_class(self)
 |  
 |  is_super_class(self, exception)
 |  
 |  negate(self)
 |  
 |  py__bases__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__call__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__class__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__file__(self)
 |  
 |  py__getitem__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__iter__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__mro__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__name__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, access_handle, parent_context=None, faked_class=None)',)",parent_context,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.analysis.CompiledObject,evaluate.analysis,CompiledObject,"Python Library Documentation: class CompiledObject in module jedi.evaluate.compiled.context

class CompiledObject(jedi.evaluate.base_context.Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      CompiledObject
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, access_handle, parent_context=None, faked_class=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  dict_values(self)
 |  
 |  execute_operation(self, other, operator)
 |  
 |  get_filters(self, search_global=False, is_instance=False, until_position=None, origin_scope=None)
 |  
 |  get_param_names(self)
 |  
 |  get_safe_value(self, default=<object object at 0x000000000520FC40>)
 |  
 |  is_class(self)
 |  
 |  is_super_class(self, exception)
 |  
 |  negate(self)
 |  
 |  py__bases__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__call__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__class__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__file__(self)
 |  
 |  py__getitem__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__iter__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__mro__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__name__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, access_handle, parent_context=None, faked_class=None)',)",faked_class,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.analysis.Error,evaluate.analysis,Error,"Python Library Documentation: class Error in module jedi.evaluate.analysis

class Error(builtins.object)
 |  Methods defined here:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __init__(self, name, module_path, start_pos, message=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __ne__(self, other)
 |      Return self!=value.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __str__(self)
 |      Return str(self).
 |  
 |  __unicode__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  code
 |  
 |  column
 |  
 |  line
",class,"('(self, name, module_path, start_pos, message=None)',)",message,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.analysis.Error,evaluate.analysis,Error,"Python Library Documentation: class Error in module jedi.evaluate.analysis

class Error(builtins.object)
 |  Methods defined here:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __init__(self, name, module_path, start_pos, message=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __ne__(self, other)
 |      Return self!=value.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __str__(self)
 |      Return str(self).
 |  
 |  __unicode__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  code
 |  
 |  column
 |  
 |  line
",class,"('(self, name, module_path, start_pos, message=None)',)",start_pos,,,arg_info
jedi,0.12.0,jedi.evaluate.analysis.Error,evaluate.analysis,Error,"Python Library Documentation: class Error in module jedi.evaluate.analysis

class Error(builtins.object)
 |  Methods defined here:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __init__(self, name, module_path, start_pos, message=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __ne__(self, other)
 |      Return self!=value.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __str__(self)
 |      Return str(self).
 |  
 |  __unicode__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  code
 |  
 |  column
 |  
 |  line
",class,"('(self, name, module_path, start_pos, message=None)',)",module_path,,,arg_info
jedi,0.12.0,jedi.evaluate.analysis.Error,evaluate.analysis,Error,"Python Library Documentation: class Error in module jedi.evaluate.analysis

class Error(builtins.object)
 |  Methods defined here:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __init__(self, name, module_path, start_pos, message=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __ne__(self, other)
 |      Return self!=value.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __str__(self)
 |      Return str(self).
 |  
 |  __unicode__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  code
 |  
 |  column
 |  
 |  line
",class,"('(self, name, module_path, start_pos, message=None)',)",name,,,arg_info
jedi,0.12.0,jedi.evaluate.analysis.Error,evaluate.analysis,Error,"Python Library Documentation: class Error in module jedi.evaluate.analysis

class Error(builtins.object)
 |  Methods defined here:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __init__(self, name, module_path, start_pos, message=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __ne__(self, other)
 |      Return self!=value.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __str__(self)
 |      Return str(self).
 |  
 |  __unicode__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  code
 |  
 |  column
 |  
 |  line
",class,"('(self, name, module_path, start_pos, message=None)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.analysis.Warning,evaluate.analysis,Warning,"Python Library Documentation: class Warning in module jedi.evaluate.analysis

class Warning(Error)
 |  Method resolution order:
 |      Warning
 |      Error
 |      builtins.object
 |  
 |  Methods inherited from Error:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __init__(self, name, module_path, start_pos, message=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __ne__(self, other)
 |      Return self!=value.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __str__(self)
 |      Return str(self).
 |  
 |  __unicode__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Error:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  code
 |  
 |  column
 |  
 |  line
",class,"('(self, name, module_path, start_pos, message=None)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.analysis.Warning,evaluate.analysis,Warning,"Python Library Documentation: class Warning in module jedi.evaluate.analysis

class Warning(Error)
 |  Method resolution order:
 |      Warning
 |      Error
 |      builtins.object
 |  
 |  Methods inherited from Error:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __init__(self, name, module_path, start_pos, message=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __ne__(self, other)
 |      Return self!=value.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __str__(self)
 |      Return str(self).
 |  
 |  __unicode__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Error:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  code
 |  
 |  column
 |  
 |  line
",class,"('(self, name, module_path, start_pos, message=None)',)",module_path,,,arg_info
jedi,0.12.0,jedi.evaluate.analysis.Warning,evaluate.analysis,Warning,"Python Library Documentation: class Warning in module jedi.evaluate.analysis

class Warning(Error)
 |  Method resolution order:
 |      Warning
 |      Error
 |      builtins.object
 |  
 |  Methods inherited from Error:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __init__(self, name, module_path, start_pos, message=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __ne__(self, other)
 |      Return self!=value.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __str__(self)
 |      Return str(self).
 |  
 |  __unicode__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Error:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  code
 |  
 |  column
 |  
 |  line
",class,"('(self, name, module_path, start_pos, message=None)',)",start_pos,,,arg_info
jedi,0.12.0,jedi.evaluate.analysis.Warning,evaluate.analysis,Warning,"Python Library Documentation: class Warning in module jedi.evaluate.analysis

class Warning(Error)
 |  Method resolution order:
 |      Warning
 |      Error
 |      builtins.object
 |  
 |  Methods inherited from Error:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __init__(self, name, module_path, start_pos, message=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __ne__(self, other)
 |      Return self!=value.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __str__(self)
 |      Return str(self).
 |  
 |  __unicode__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Error:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  code
 |  
 |  column
 |  
 |  line
",class,"('(self, name, module_path, start_pos, message=None)',)",message,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.analysis.Warning,evaluate.analysis,Warning,"Python Library Documentation: class Warning in module jedi.evaluate.analysis

class Warning(Error)
 |  Method resolution order:
 |      Warning
 |      Error
 |      builtins.object
 |  
 |  Methods inherited from Error:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __init__(self, name, module_path, start_pos, message=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __ne__(self, other)
 |      Return self!=value.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __str__(self)
 |      Return str(self).
 |  
 |  __unicode__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Error:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  code
 |  
 |  column
 |  
 |  line
",class,"('(self, name, module_path, start_pos, message=None)',)",name,,,arg_info
jedi,0.12.0,jedi.evaluate.analysis._check_for_exception_catch,evaluate.analysis,_check_for_exception_catch,"Python Library Documentation: function _check_for_exception_catch in module jedi.evaluate.analysis

_check_for_exception_catch(node_context, jedi_name, exception, payload=None)
    Checks if a jedi object (e.g. `Statement`) sits inside a try/catch and
    doesn't count as an error (if equal to `exception`).
    Also checks `hasattr` for AttributeErrors and uses the `payload` to compare
    it.
    Returns True if the exception was catched.
",function,"('(node_context, jedi_name, exception, payload=None)',)",exception,,,arg_info
jedi,0.12.0,jedi.evaluate.analysis._check_for_exception_catch,evaluate.analysis,_check_for_exception_catch,"Python Library Documentation: function _check_for_exception_catch in module jedi.evaluate.analysis

_check_for_exception_catch(node_context, jedi_name, exception, payload=None)
    Checks if a jedi object (e.g. `Statement`) sits inside a try/catch and
    doesn't count as an error (if equal to `exception`).
    Also checks `hasattr` for AttributeErrors and uses the `payload` to compare
    it.
    Returns True if the exception was catched.
",function,"('(node_context, jedi_name, exception, payload=None)',)",payload,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.analysis._check_for_exception_catch,evaluate.analysis,_check_for_exception_catch,"Python Library Documentation: function _check_for_exception_catch in module jedi.evaluate.analysis

_check_for_exception_catch(node_context, jedi_name, exception, payload=None)
    Checks if a jedi object (e.g. `Statement`) sits inside a try/catch and
    doesn't count as an error (if equal to `exception`).
    Also checks `hasattr` for AttributeErrors and uses the `payload` to compare
    it.
    Returns True if the exception was catched.
",function,"('(node_context, jedi_name, exception, payload=None)',)",node_context,,,arg_info
jedi,0.12.0,jedi.evaluate.analysis._check_for_exception_catch,evaluate.analysis,_check_for_exception_catch,"Python Library Documentation: function _check_for_exception_catch in module jedi.evaluate.analysis

_check_for_exception_catch(node_context, jedi_name, exception, payload=None)
    Checks if a jedi object (e.g. `Statement`) sits inside a try/catch and
    doesn't count as an error (if equal to `exception`).
    Also checks `hasattr` for AttributeErrors and uses the `payload` to compare
    it.
    Returns True if the exception was catched.
",function,"('(node_context, jedi_name, exception, payload=None)',)",jedi_name,,,arg_info
jedi,0.12.0,jedi.evaluate.analysis._check_for_setattr,evaluate.analysis,_check_for_setattr,"Python Library Documentation: function _check_for_setattr in module jedi.evaluate.analysis

_check_for_setattr(instance)
    Check if there's any setattr method inside an instance. If so, return True.
",function,"('(instance)',)",instance,,,arg_info
jedi,0.12.0,jedi.evaluate.analysis.add,evaluate.analysis,add,"Python Library Documentation: function add in module jedi.evaluate.analysis

add(node_context, error_name, node, message=None, typ=<class 'jedi.evaluate.analysis.Error'>, payload=None)
",function,"(""(node_context, error_name, node, message=None, typ=<class 'jedi.evaluate.analysis.Error'>, payload=None)"",)",typ,<class 'jedi.evaluate.analysis.Error'>,type,arg_info
jedi,0.12.0,jedi.evaluate.analysis.add,evaluate.analysis,add,"Python Library Documentation: function add in module jedi.evaluate.analysis

add(node_context, error_name, node, message=None, typ=<class 'jedi.evaluate.analysis.Error'>, payload=None)
",function,"(""(node_context, error_name, node, message=None, typ=<class 'jedi.evaluate.analysis.Error'>, payload=None)"",)",node_context,,,arg_info
jedi,0.12.0,jedi.evaluate.analysis.add,evaluate.analysis,add,"Python Library Documentation: function add in module jedi.evaluate.analysis

add(node_context, error_name, node, message=None, typ=<class 'jedi.evaluate.analysis.Error'>, payload=None)
",function,"(""(node_context, error_name, node, message=None, typ=<class 'jedi.evaluate.analysis.Error'>, payload=None)"",)",error_name,,,arg_info
jedi,0.12.0,jedi.evaluate.analysis.add,evaluate.analysis,add,"Python Library Documentation: function add in module jedi.evaluate.analysis

add(node_context, error_name, node, message=None, typ=<class 'jedi.evaluate.analysis.Error'>, payload=None)
",function,"(""(node_context, error_name, node, message=None, typ=<class 'jedi.evaluate.analysis.Error'>, payload=None)"",)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.analysis.add,evaluate.analysis,add,"Python Library Documentation: function add in module jedi.evaluate.analysis

add(node_context, error_name, node, message=None, typ=<class 'jedi.evaluate.analysis.Error'>, payload=None)
",function,"(""(node_context, error_name, node, message=None, typ=<class 'jedi.evaluate.analysis.Error'>, payload=None)"",)",message,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.analysis.add,evaluate.analysis,add,"Python Library Documentation: function add in module jedi.evaluate.analysis

add(node_context, error_name, node, message=None, typ=<class 'jedi.evaluate.analysis.Error'>, payload=None)
",function,"(""(node_context, error_name, node, message=None, typ=<class 'jedi.evaluate.analysis.Error'>, payload=None)"",)",payload,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.analysis.add_attribute_error,evaluate.analysis,add_attribute_error,"Python Library Documentation: function add_attribute_error in module jedi.evaluate.analysis

add_attribute_error(name_context, lookup_context, name)
",function,"('(name_context, lookup_context, name)',)",lookup_context,,,arg_info
jedi,0.12.0,jedi.evaluate.analysis.add_attribute_error,evaluate.analysis,add_attribute_error,"Python Library Documentation: function add_attribute_error in module jedi.evaluate.analysis

add_attribute_error(name_context, lookup_context, name)
",function,"('(name_context, lookup_context, name)',)",name_context,,,arg_info
jedi,0.12.0,jedi.evaluate.analysis.add_attribute_error,evaluate.analysis,add_attribute_error,"Python Library Documentation: function add_attribute_error in module jedi.evaluate.analysis

add_attribute_error(name_context, lookup_context, name)
",function,"('(name_context, lookup_context, name)',)",name,,,arg_info
jedi,0.12.0,jedi.evaluate.analysis.force_unicode,evaluate.analysis,force_unicode,"Python Library Documentation: function force_unicode in module jedi._compatibility

force_unicode(obj)
",function,"('(obj)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.analysis.is_string,evaluate.analysis,is_string,"Python Library Documentation: function is_string in module jedi.evaluate.helpers

is_string(context)
",function,"('(context)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.arguments.AbstractArguments,evaluate.arguments,AbstractArguments,"Python Library Documentation: class AbstractArguments in module jedi.evaluate.arguments

class AbstractArguments(builtins.object)
 |  Methods defined here:
 |  
 |  eval_all(self, funcdef=None)
 |      Evaluates all arguments as a support for static analysis
 |      (normally Jedi).
 |  
 |  eval_argument_clinic(self, parameters)
 |      Uses a list with argument clinic information (see PEP 436).
 |  
 |  get_calling_nodes(self)
 |  
 |  get_params(self, execution_context)
 |  
 |  unpack(self, funcdef=None)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  argument_node = None
 |  
 |  context = None
 |  
 |  trailer = None
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.arguments.AnonymousArguments,evaluate.arguments,AnonymousArguments,"Python Library Documentation: class AnonymousArguments in module jedi.evaluate.arguments

class AnonymousArguments(AbstractArguments)
 |  Method resolution order:
 |      AnonymousArguments
 |      AbstractArguments
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  get_params(self, execution_context)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractArguments:
 |  
 |  eval_all(self, funcdef=None)
 |      Evaluates all arguments as a support for static analysis
 |      (normally Jedi).
 |  
 |  eval_argument_clinic(self, parameters)
 |      Uses a list with argument clinic information (see PEP 436).
 |  
 |  get_calling_nodes(self)
 |  
 |  unpack(self, funcdef=None)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractArguments:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractArguments:
 |  
 |  argument_node = None
 |  
 |  context = None
 |  
 |  trailer = None
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.arguments.ExecutedParam,evaluate.arguments,ExecutedParam,"Python Library Documentation: class ExecutedParam in module jedi.evaluate.param

class ExecutedParam(builtins.object)
 |  Fake a param and give it values.
 |  
 |  Methods defined here:
 |  
 |  __init__(self, execution_context, param_node, lazy_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  var_args
",class,"('(self, execution_context, param_node, lazy_context)',)",param_node,,,arg_info
jedi,0.12.0,jedi.evaluate.arguments.ExecutedParam,evaluate.arguments,ExecutedParam,"Python Library Documentation: class ExecutedParam in module jedi.evaluate.param

class ExecutedParam(builtins.object)
 |  Fake a param and give it values.
 |  
 |  Methods defined here:
 |  
 |  __init__(self, execution_context, param_node, lazy_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  var_args
",class,"('(self, execution_context, param_node, lazy_context)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.arguments.ExecutedParam,evaluate.arguments,ExecutedParam,"Python Library Documentation: class ExecutedParam in module jedi.evaluate.param

class ExecutedParam(builtins.object)
 |  Fake a param and give it values.
 |  
 |  Methods defined here:
 |  
 |  __init__(self, execution_context, param_node, lazy_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  var_args
",class,"('(self, execution_context, param_node, lazy_context)',)",execution_context,,,arg_info
jedi,0.12.0,jedi.evaluate.arguments.ExecutedParam,evaluate.arguments,ExecutedParam,"Python Library Documentation: class ExecutedParam in module jedi.evaluate.param

class ExecutedParam(builtins.object)
 |  Fake a param and give it values.
 |  
 |  Methods defined here:
 |  
 |  __init__(self, execution_context, param_node, lazy_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  var_args
",class,"('(self, execution_context, param_node, lazy_context)',)",lazy_context,,,arg_info
jedi,0.12.0,jedi.evaluate.arguments.LazyKnownContext,evaluate.arguments,LazyKnownContext,"Python Library Documentation: class LazyKnownContext in module jedi.evaluate.lazy_context

class LazyKnownContext(AbstractLazyContext)
 |  data is a context.
 |  
 |  Method resolution order:
 |      LazyKnownContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __init__(self, data)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, data)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.arguments.LazyKnownContext,evaluate.arguments,LazyKnownContext,"Python Library Documentation: class LazyKnownContext in module jedi.evaluate.lazy_context

class LazyKnownContext(AbstractLazyContext)
 |  data is a context.
 |  
 |  Method resolution order:
 |      LazyKnownContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __init__(self, data)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, data)',)",data,,,arg_info
jedi,0.12.0,jedi.evaluate.arguments.LazyKnownContexts,evaluate.arguments,LazyKnownContexts,"Python Library Documentation: class LazyKnownContexts in module jedi.evaluate.lazy_context

class LazyKnownContexts(AbstractLazyContext)
 |  data is a ContextSet.
 |  
 |  Method resolution order:
 |      LazyKnownContexts
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __init__(self, data)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, data)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.arguments.LazyKnownContexts,evaluate.arguments,LazyKnownContexts,"Python Library Documentation: class LazyKnownContexts in module jedi.evaluate.lazy_context

class LazyKnownContexts(AbstractLazyContext)
 |  data is a ContextSet.
 |  
 |  Method resolution order:
 |      LazyKnownContexts
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __init__(self, data)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, data)',)",data,,,arg_info
jedi,0.12.0,jedi.evaluate.arguments.LazyTreeContext,evaluate.arguments,LazyTreeContext,"Python Library Documentation: class LazyTreeContext in module jedi.evaluate.lazy_context

class LazyTreeContext(AbstractLazyContext)
 |  Method resolution order:
 |      LazyTreeContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.arguments.LazyTreeContext,evaluate.arguments,LazyTreeContext,"Python Library Documentation: class LazyTreeContext in module jedi.evaluate.lazy_context

class LazyTreeContext(AbstractLazyContext)
 |  Method resolution order:
 |      LazyTreeContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.arguments.LazyTreeContext,evaluate.arguments,LazyTreeContext,"Python Library Documentation: class LazyTreeContext in module jedi.evaluate.lazy_context

class LazyTreeContext(AbstractLazyContext)
 |  Method resolution order:
 |      LazyTreeContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.arguments.ParamName,evaluate.arguments,ParamName,"Python Library Documentation: class ParamName in module jedi.evaluate.filters

class ParamName(AbstractTreeName)
 |  Method resolution order:
 |      ParamName
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_kind(self)
 |  
 |  get_param(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'param'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",tree_name,,,arg_info
jedi,0.12.0,jedi.evaluate.arguments.ParamName,evaluate.arguments,ParamName,"Python Library Documentation: class ParamName in module jedi.evaluate.filters

class ParamName(AbstractTreeName)
 |  Method resolution order:
 |      ParamName
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_kind(self)
 |  
 |  get_param(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'param'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.arguments.ParamName,evaluate.arguments,ParamName,"Python Library Documentation: class ParamName in module jedi.evaluate.filters

class ParamName(AbstractTreeName)
 |  Method resolution order:
 |      ParamName
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_kind(self)
 |  
 |  get_param(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'param'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.arguments.TreeArguments,evaluate.arguments,TreeArguments,"Python Library Documentation: class TreeArguments in module jedi.evaluate.arguments

class TreeArguments(AbstractArguments)
 |  Method resolution order:
 |      TreeArguments
 |      AbstractArguments
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, argument_node, trailer=None)
 |      The argument_node is either a parser node or a list of evaluated
 |      objects. Those evaluated objects may be lists of evaluated objects
 |      themselves (one list for the first argument, one for the second, etc).
 |      
 |      :param argument_node: May be an argument_node or a list of nodes.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  as_tree_tuple_objects(self)
 |  
 |  get_calling_nodes(self)
 |  
 |  unpack(self, funcdef=None)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractArguments:
 |  
 |  eval_all(self, funcdef=None)
 |      Evaluates all arguments as a support for static analysis
 |      (normally Jedi).
 |  
 |  eval_argument_clinic(self, parameters)
 |      Uses a list with argument clinic information (see PEP 436).
 |  
 |  get_params(self, execution_context)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractArguments:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractArguments:
 |  
 |  argument_node = None
 |  
 |  context = None
 |  
 |  trailer = None
",class,"('(self, evaluator, context, argument_node, trailer=None)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.arguments.TreeArguments,evaluate.arguments,TreeArguments,"Python Library Documentation: class TreeArguments in module jedi.evaluate.arguments

class TreeArguments(AbstractArguments)
 |  Method resolution order:
 |      TreeArguments
 |      AbstractArguments
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, argument_node, trailer=None)
 |      The argument_node is either a parser node or a list of evaluated
 |      objects. Those evaluated objects may be lists of evaluated objects
 |      themselves (one list for the first argument, one for the second, etc).
 |      
 |      :param argument_node: May be an argument_node or a list of nodes.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  as_tree_tuple_objects(self)
 |  
 |  get_calling_nodes(self)
 |  
 |  unpack(self, funcdef=None)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractArguments:
 |  
 |  eval_all(self, funcdef=None)
 |      Evaluates all arguments as a support for static analysis
 |      (normally Jedi).
 |  
 |  eval_argument_clinic(self, parameters)
 |      Uses a list with argument clinic information (see PEP 436).
 |  
 |  get_params(self, execution_context)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractArguments:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractArguments:
 |  
 |  argument_node = None
 |  
 |  context = None
 |  
 |  trailer = None
",class,"('(self, evaluator, context, argument_node, trailer=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.arguments.TreeArguments,evaluate.arguments,TreeArguments,"Python Library Documentation: class TreeArguments in module jedi.evaluate.arguments

class TreeArguments(AbstractArguments)
 |  Method resolution order:
 |      TreeArguments
 |      AbstractArguments
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, argument_node, trailer=None)
 |      The argument_node is either a parser node or a list of evaluated
 |      objects. Those evaluated objects may be lists of evaluated objects
 |      themselves (one list for the first argument, one for the second, etc).
 |      
 |      :param argument_node: May be an argument_node or a list of nodes.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  as_tree_tuple_objects(self)
 |  
 |  get_calling_nodes(self)
 |  
 |  unpack(self, funcdef=None)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractArguments:
 |  
 |  eval_all(self, funcdef=None)
 |      Evaluates all arguments as a support for static analysis
 |      (normally Jedi).
 |  
 |  eval_argument_clinic(self, parameters)
 |      Uses a list with argument clinic information (see PEP 436).
 |  
 |  get_params(self, execution_context)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractArguments:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractArguments:
 |  
 |  argument_node = None
 |  
 |  context = None
 |  
 |  trailer = None
",class,"('(self, evaluator, context, argument_node, trailer=None)',)",argument_node,,,arg_info
jedi,0.12.0,jedi.evaluate.arguments.TreeArguments,evaluate.arguments,TreeArguments,"Python Library Documentation: class TreeArguments in module jedi.evaluate.arguments

class TreeArguments(AbstractArguments)
 |  Method resolution order:
 |      TreeArguments
 |      AbstractArguments
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, argument_node, trailer=None)
 |      The argument_node is either a parser node or a list of evaluated
 |      objects. Those evaluated objects may be lists of evaluated objects
 |      themselves (one list for the first argument, one for the second, etc).
 |      
 |      :param argument_node: May be an argument_node or a list of nodes.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  as_tree_tuple_objects(self)
 |  
 |  get_calling_nodes(self)
 |  
 |  unpack(self, funcdef=None)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractArguments:
 |  
 |  eval_all(self, funcdef=None)
 |      Evaluates all arguments as a support for static analysis
 |      (normally Jedi).
 |  
 |  eval_argument_clinic(self, parameters)
 |      Uses a list with argument clinic information (see PEP 436).
 |  
 |  get_params(self, execution_context)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractArguments:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractArguments:
 |  
 |  argument_node = None
 |  
 |  context = None
 |  
 |  trailer = None
",class,"('(self, evaluator, context, argument_node, trailer=None)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.arguments.TreeArguments,evaluate.arguments,TreeArguments,"Python Library Documentation: class TreeArguments in module jedi.evaluate.arguments

class TreeArguments(AbstractArguments)
 |  Method resolution order:
 |      TreeArguments
 |      AbstractArguments
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, argument_node, trailer=None)
 |      The argument_node is either a parser node or a list of evaluated
 |      objects. Those evaluated objects may be lists of evaluated objects
 |      themselves (one list for the first argument, one for the second, etc).
 |      
 |      :param argument_node: May be an argument_node or a list of nodes.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  as_tree_tuple_objects(self)
 |  
 |  get_calling_nodes(self)
 |  
 |  unpack(self, funcdef=None)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractArguments:
 |  
 |  eval_all(self, funcdef=None)
 |      Evaluates all arguments as a support for static analysis
 |      (normally Jedi).
 |  
 |  eval_argument_clinic(self, parameters)
 |      Uses a list with argument clinic information (see PEP 436).
 |  
 |  get_params(self, execution_context)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractArguments:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractArguments:
 |  
 |  argument_node = None
 |  
 |  context = None
 |  
 |  trailer = None
",class,"('(self, evaluator, context, argument_node, trailer=None)',)",trailer,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.arguments.ValuesArguments,evaluate.arguments,ValuesArguments,"Python Library Documentation: class ValuesArguments in module jedi.evaluate.arguments

class ValuesArguments(AbstractArguments)
 |  Method resolution order:
 |      ValuesArguments
 |      AbstractArguments
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, values_list)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_calling_nodes(self)
 |  
 |  unpack(self, funcdef=None)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractArguments:
 |  
 |  eval_all(self, funcdef=None)
 |      Evaluates all arguments as a support for static analysis
 |      (normally Jedi).
 |  
 |  eval_argument_clinic(self, parameters)
 |      Uses a list with argument clinic information (see PEP 436).
 |  
 |  get_params(self, execution_context)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractArguments:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractArguments:
 |  
 |  argument_node = None
 |  
 |  context = None
 |  
 |  trailer = None
",class,"('(self, values_list)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.arguments.ValuesArguments,evaluate.arguments,ValuesArguments,"Python Library Documentation: class ValuesArguments in module jedi.evaluate.arguments

class ValuesArguments(AbstractArguments)
 |  Method resolution order:
 |      ValuesArguments
 |      AbstractArguments
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, values_list)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_calling_nodes(self)
 |  
 |  unpack(self, funcdef=None)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractArguments:
 |  
 |  eval_all(self, funcdef=None)
 |      Evaluates all arguments as a support for static analysis
 |      (normally Jedi).
 |  
 |  eval_argument_clinic(self, parameters)
 |      Uses a list with argument clinic information (see PEP 436).
 |  
 |  get_params(self, execution_context)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractArguments:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractArguments:
 |  
 |  argument_node = None
 |  
 |  context = None
 |  
 |  trailer = None
",class,"('(self, values_list)',)",values_list,,,arg_info
jedi,0.12.0,jedi.evaluate.arguments._iterate_star_args,evaluate.arguments,_iterate_star_args,"Python Library Documentation: function _iterate_star_args in module jedi.evaluate.arguments

_iterate_star_args(context, array, input_node, funcdef=None)
",function,"('(context, array, input_node, funcdef=None)',)",array,,,arg_info
jedi,0.12.0,jedi.evaluate.arguments._iterate_star_args,evaluate.arguments,_iterate_star_args,"Python Library Documentation: function _iterate_star_args in module jedi.evaluate.arguments

_iterate_star_args(context, array, input_node, funcdef=None)
",function,"('(context, array, input_node, funcdef=None)',)",input_node,,,arg_info
jedi,0.12.0,jedi.evaluate.arguments._iterate_star_args,evaluate.arguments,_iterate_star_args,"Python Library Documentation: function _iterate_star_args in module jedi.evaluate.arguments

_iterate_star_args(context, array, input_node, funcdef=None)
",function,"('(context, array, input_node, funcdef=None)',)",funcdef,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.arguments._iterate_star_args,evaluate.arguments,_iterate_star_args,"Python Library Documentation: function _iterate_star_args in module jedi.evaluate.arguments

_iterate_star_args(context, array, input_node, funcdef=None)
",function,"('(context, array, input_node, funcdef=None)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.arguments._star_star_dict,evaluate.arguments,_star_star_dict,"Python Library Documentation: function _star_star_dict in module jedi.evaluate.arguments

_star_star_dict(context, array, input_node, funcdef)
",function,"('(context, array, input_node, funcdef)',)",array,,,arg_info
jedi,0.12.0,jedi.evaluate.arguments._star_star_dict,evaluate.arguments,_star_star_dict,"Python Library Documentation: function _star_star_dict in module jedi.evaluate.arguments

_star_star_dict(context, array, input_node, funcdef)
",function,"('(context, array, input_node, funcdef)',)",input_node,,,arg_info
jedi,0.12.0,jedi.evaluate.arguments._star_star_dict,evaluate.arguments,_star_star_dict,"Python Library Documentation: function _star_star_dict in module jedi.evaluate.arguments

_star_star_dict(context, array, input_node, funcdef)
",function,"('(context, array, input_node, funcdef)',)",funcdef,,,arg_info
jedi,0.12.0,jedi.evaluate.arguments._star_star_dict,evaluate.arguments,_star_star_dict,"Python Library Documentation: function _star_star_dict in module jedi.evaluate.arguments

_star_star_dict(context, array, input_node, funcdef)
",function,"('(context, array, input_node, funcdef)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.arguments.get_merged_lazy_context,evaluate.arguments,get_merged_lazy_context,"Python Library Documentation: function get_merged_lazy_context in module jedi.evaluate.lazy_context

get_merged_lazy_context(lazy_contexts)
",function,"('(lazy_contexts)',)",lazy_contexts,,,arg_info
jedi,0.12.0,jedi.evaluate.arguments.get_params,evaluate.arguments,get_params,"Python Library Documentation: function get_params in module jedi.evaluate.param

get_params(execution_context, var_args)
",function,"('(execution_context, var_args)',)",execution_context,,,arg_info
jedi,0.12.0,jedi.evaluate.arguments.get_params,evaluate.arguments,get_params,"Python Library Documentation: function get_params in module jedi.evaluate.param

get_params(execution_context, var_args)
",function,"('(execution_context, var_args)',)",var_args,,,arg_info
jedi,0.12.0,jedi.evaluate.arguments.try_iter_content,evaluate.arguments,try_iter_content,"Python Library Documentation: function try_iter_content in module jedi.evaluate.arguments

try_iter_content(types, depth=0)
    Helper method for static analysis.
",function,"('(types, depth=0)',)",depth,0,int,arg_info
jedi,0.12.0,jedi.evaluate.arguments.try_iter_content,evaluate.arguments,try_iter_content,"Python Library Documentation: function try_iter_content in module jedi.evaluate.arguments

try_iter_content(types, depth=0)
    Helper method for static analysis.
",function,"('(types, depth=0)',)",types,,,arg_info
jedi,0.12.0,jedi.evaluate.arguments.zip_longest,evaluate.arguments,zip_longest,"Python Library Documentation: class zip_longest in module itertools

class zip_longest(builtins.object)
 |  zip_longest(iter1 [,iter2 [...]], [fillvalue=None]) --> zip_longest object
 |  
 |  Return a zip_longest object whose .__next__() method returns a tuple where
 |  the i-th element comes from the i-th iterable argument.  The .__next__()
 |  method continues until the longest iterable in the argument sequence
 |  is exhausted and then it raises StopIteration.  When the shorter iterables
 |  are exhausted, the fillvalue is substituted in their place.  The fillvalue
 |  defaults to None or can be specified by a keyword argument.
 |  
 |  Methods defined here:
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __next__(self, /)
 |      Implement next(self).
 |  
 |  __reduce__(...)
 |      Return state information for pickling.
 |  
 |  __setstate__(...)
 |      Set state information for unpickling.
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.BaseContext,evaluate.base_context,BaseContext,"Python Library Documentation: class BaseContext in module jedi.common.context

class BaseContext(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",parent_context,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.base_context.BaseContext,evaluate.base_context,BaseContext,"Python Library Documentation: class BaseContext in module jedi.common.context

class BaseContext(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.BaseContext,evaluate.base_context,BaseContext,"Python Library Documentation: class BaseContext in module jedi.common.context

class BaseContext(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.BaseContextSet,evaluate.base_context,BaseContextSet,"Python Library Documentation: class BaseContextSet in module jedi.common.context

class BaseContextSet(builtins.object)
 |  Methods defined here:
 |  
 |  __bool__(self)
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, *args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self)
 |  
 |  __len__(self)
 |  
 |  __or__(self, other)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  filter(self, filter_func)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  from_iterable(iterable) from builtins.type
 |  
 |  from_set(set_) from builtins.type
 |  
 |  from_sets(sets) from builtins.type
 |      Used to work with an iterable of set.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, *args)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.BaseContextSet.from_iterable,evaluate.base_context.BaseContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",iterable,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.BaseContextSet.from_iterable,evaluate.base_context.BaseContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.BaseContextSet.from_set,evaluate.base_context.BaseContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.BaseContextSet.from_set,evaluate.base_context.BaseContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",set_,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.BaseContextSet.from_sets,evaluate.base_context.BaseContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.BaseContextSet.from_sets,evaluate.base_context.BaseContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",sets,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.CompFor,evaluate.base_context,CompFor,"Python Library Documentation: class CompFor in module parso.python.tree

class CompFor(PythonBaseNode)
 |  Some Python specific utitilies.
 |  
 |  Method resolution order:
 |      CompFor
 |      PythonBaseNode
 |      PythonMixin
 |      parso.tree.BaseNode
 |      parso.tree.NodeOrLeaf
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  get_defined_names(self)
 |      Returns the a list of `Name` that the comprehension defines.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  type = 'comp_for'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from PythonMixin:
 |  
 |  get_name_of_position(self, position)
 |      Given a (line, column) tuple, returns a :py:class:`Name` or ``None`` if
 |      there is no name at that position.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from parso.tree.BaseNode:
 |  
 |  __init__(self, children)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_code(self, include_prefix=True)
 |      Returns the code that was input the input for the parser for this node.
 |      
 |      :param include_prefix: Removes the prefix (whitespace and comments) of
 |          e.g. a statement.
 |  
 |  get_first_leaf(self)
 |      Returns the first leaf of a node or itself if this is a leaf.
 |  
 |  get_last_leaf(self)
 |      Returns the last leaf of a node or itself if this is a leaf.
 |  
 |  get_leaf_for_position(self, position, include_prefixes=False)
 |      Get the :py:class:`parso.tree.Leaf` at ``position``
 |      
 |      :param tuple position: A position tuple, row, column. Rows start from 1
 |      :param bool include_prefixes: If ``False``, ``None`` will be returned if ``position`` falls
 |          on whitespace or comments before a leaf
 |      :return: :py:class:`parso.tree.Leaf` at ``position``, or ``None``
 |  
 |  get_start_pos_of_prefix(self)
 |      Returns the start_pos of the prefix. This means basically it returns
 |      the end_pos of the last prefix. The `get_start_pos_of_prefix()` of the
 |      prefix `+` in `2 + 1` would be `(1, 1)`, while the start_pos is
 |      `(1, 2)`.
 |      
 |      :return tuple of int: (line, column)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from parso.tree.BaseNode:
 |  
 |  children
 |  
 |  end_pos
 |      Returns the end position of the prefix as a tuple, e.g. `(3, 4)`.
 |      
 |      :return tuple of int: (line, column)
 |  
 |  parent
 |  
 |  start_pos
 |      Returns the starting position of the prefix as a tuple, e.g. `(3, 4)`.
 |      
 |      :return tuple of int: (line, column)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from parso.tree.NodeOrLeaf:
 |  
 |  get_next_leaf(self)
 |      Returns the next leaf in the parser tree.
 |      Returns None if this is the last element in the parser tree.
 |  
 |  get_next_sibling(self)
 |      Returns the node immediately following this node in this parent's
 |      children list. If this node does not have a next sibling, it is None
 |  
 |  get_previous_leaf(self)
 |      Returns the previous leaf in the parser tree.
 |      Returns `None` if this is the first element in the parser tree.
 |  
 |  get_previous_sibling(self)
 |      Returns the node immediately preceding this node in this parent's
 |      children list. If this node does not have a previous sibling, it is
 |      None.
 |  
 |  get_root_node(self)
 |      Returns the root node of a parser tree. The returned node doesn't have
 |      a parent node like all the other nodes/leaves.
",class,"('(self, children)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.CompFor,evaluate.base_context,CompFor,"Python Library Documentation: class CompFor in module parso.python.tree

class CompFor(PythonBaseNode)
 |  Some Python specific utitilies.
 |  
 |  Method resolution order:
 |      CompFor
 |      PythonBaseNode
 |      PythonMixin
 |      parso.tree.BaseNode
 |      parso.tree.NodeOrLeaf
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  get_defined_names(self)
 |      Returns the a list of `Name` that the comprehension defines.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  type = 'comp_for'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from PythonMixin:
 |  
 |  get_name_of_position(self, position)
 |      Given a (line, column) tuple, returns a :py:class:`Name` or ``None`` if
 |      there is no name at that position.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from parso.tree.BaseNode:
 |  
 |  __init__(self, children)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_code(self, include_prefix=True)
 |      Returns the code that was input the input for the parser for this node.
 |      
 |      :param include_prefix: Removes the prefix (whitespace and comments) of
 |          e.g. a statement.
 |  
 |  get_first_leaf(self)
 |      Returns the first leaf of a node or itself if this is a leaf.
 |  
 |  get_last_leaf(self)
 |      Returns the last leaf of a node or itself if this is a leaf.
 |  
 |  get_leaf_for_position(self, position, include_prefixes=False)
 |      Get the :py:class:`parso.tree.Leaf` at ``position``
 |      
 |      :param tuple position: A position tuple, row, column. Rows start from 1
 |      :param bool include_prefixes: If ``False``, ``None`` will be returned if ``position`` falls
 |          on whitespace or comments before a leaf
 |      :return: :py:class:`parso.tree.Leaf` at ``position``, or ``None``
 |  
 |  get_start_pos_of_prefix(self)
 |      Returns the start_pos of the prefix. This means basically it returns
 |      the end_pos of the last prefix. The `get_start_pos_of_prefix()` of the
 |      prefix `+` in `2 + 1` would be `(1, 1)`, while the start_pos is
 |      `(1, 2)`.
 |      
 |      :return tuple of int: (line, column)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from parso.tree.BaseNode:
 |  
 |  children
 |  
 |  end_pos
 |      Returns the end position of the prefix as a tuple, e.g. `(3, 4)`.
 |      
 |      :return tuple of int: (line, column)
 |  
 |  parent
 |  
 |  start_pos
 |      Returns the starting position of the prefix as a tuple, e.g. `(3, 4)`.
 |      
 |      :return tuple of int: (line, column)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from parso.tree.NodeOrLeaf:
 |  
 |  get_next_leaf(self)
 |      Returns the next leaf in the parser tree.
 |      Returns None if this is the last element in the parser tree.
 |  
 |  get_next_sibling(self)
 |      Returns the node immediately following this node in this parent's
 |      children list. If this node does not have a next sibling, it is None
 |  
 |  get_previous_leaf(self)
 |      Returns the previous leaf in the parser tree.
 |      Returns `None` if this is the first element in the parser tree.
 |  
 |  get_previous_sibling(self)
 |      Returns the node immediately preceding this node in this parent's
 |      children list. If this node does not have a previous sibling, it is
 |      None.
 |  
 |  get_root_node(self)
 |      Returns the root node of a parser tree. The returned node doesn't have
 |      a parent node like all the other nodes/leaves.
",class,"('(self, children)',)",children,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.Context,evaluate.base_context,Context,"Python Library Documentation: class Context in module jedi.evaluate.base_context

class Context(jedi.common.context.BaseContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",parent_context,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.base_context.Context,evaluate.base_context,Context,"Python Library Documentation: class Context in module jedi.evaluate.base_context

class Context(jedi.common.context.BaseContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.Context,evaluate.base_context,Context,"Python Library Documentation: class Context in module jedi.evaluate.base_context

class Context(jedi.common.context.BaseContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.ContextSet,evaluate.base_context,ContextSet,"Python Library Documentation: class ContextSet in module jedi.evaluate.base_context

class ContextSet(jedi.common.context.BaseContextSet)
 |  Method resolution order:
 |      ContextSet
 |      jedi.common.context.BaseContextSet
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContextSet:
 |  
 |  __bool__(self)
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, *args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self)
 |  
 |  __len__(self)
 |  
 |  __or__(self, other)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  filter(self, filter_func)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from jedi.common.context.BaseContextSet:
 |  
 |  from_iterable(iterable) from builtins.type
 |  
 |  from_set(set_) from builtins.type
 |  
 |  from_sets(sets) from builtins.type
 |      Used to work with an iterable of set.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContextSet:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, *args)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.ContextSet.from_iterable,evaluate.base_context.ContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",iterable,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.ContextSet.from_iterable,evaluate.base_context.ContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.ContextSet.from_set,evaluate.base_context.ContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",set_,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.ContextSet.from_set,evaluate.base_context.ContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.ContextSet.from_sets,evaluate.base_context.ContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.ContextSet.from_sets,evaluate.base_context.ContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",sets,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.ContextualizedName,evaluate.base_context,ContextualizedName,"Python Library Documentation: class ContextualizedName in module jedi.evaluate.base_context

class ContextualizedName(ContextualizedNode)
 |  Method resolution order:
 |      ContextualizedName
 |      ContextualizedNode
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  assignment_indexes(self)
 |      Returns an array of tuple(int, node) of the indexes that are used in
 |      tuple assignments.
 |      
 |      For example if the name is ``y`` in the following code::
 |      
 |          x, (y, z) = 2, ''
 |      
 |      would result in ``[(1, xyz_node), (0, yz_node)]``.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ContextualizedNode:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ContextualizedNode:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.ContextualizedName,evaluate.base_context,ContextualizedName,"Python Library Documentation: class ContextualizedName in module jedi.evaluate.base_context

class ContextualizedName(ContextualizedNode)
 |  Method resolution order:
 |      ContextualizedName
 |      ContextualizedNode
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  assignment_indexes(self)
 |      Returns an array of tuple(int, node) of the indexes that are used in
 |      tuple assignments.
 |      
 |      For example if the name is ``y`` in the following code::
 |      
 |          x, (y, z) = 2, ''
 |      
 |      would result in ``[(1, xyz_node), (0, yz_node)]``.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ContextualizedNode:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ContextualizedNode:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.ContextualizedName,evaluate.base_context,ContextualizedName,"Python Library Documentation: class ContextualizedName in module jedi.evaluate.base_context

class ContextualizedName(ContextualizedNode)
 |  Method resolution order:
 |      ContextualizedName
 |      ContextualizedNode
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  assignment_indexes(self)
 |      Returns an array of tuple(int, node) of the indexes that are used in
 |      tuple assignments.
 |      
 |      For example if the name is ``y`` in the following code::
 |      
 |          x, (y, z) = 2, ''
 |      
 |      would result in ``[(1, xyz_node), (0, yz_node)]``.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ContextualizedNode:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ContextualizedNode:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.ContextualizedNode,evaluate.base_context,ContextualizedNode,"Python Library Documentation: class ContextualizedNode in module jedi.evaluate.base_context

class ContextualizedNode(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.ContextualizedNode,evaluate.base_context,ContextualizedNode,"Python Library Documentation: class ContextualizedNode in module jedi.evaluate.base_context

class ContextualizedNode(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.ContextualizedNode,evaluate.base_context,ContextualizedNode,"Python Library Documentation: class ContextualizedNode in module jedi.evaluate.base_context

class ContextualizedNode(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.ExprStmt,evaluate.base_context,ExprStmt,"Python Library Documentation: class ExprStmt in module parso.python.tree

class ExprStmt(PythonBaseNode, DocstringMixin)
 |  Some Python specific utitilies.
 |  
 |  Method resolution order:
 |      ExprStmt
 |      PythonBaseNode
 |      PythonMixin
 |      parso.tree.BaseNode
 |      parso.tree.NodeOrLeaf
 |      DocstringMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  get_defined_names(self)
 |      Returns a list of `Name` defined before the `=` sign.
 |  
 |  get_rhs(self)
 |      Returns the right-hand-side of the equals.
 |  
 |  yield_operators(self)
 |      Returns a generator of `+=`, `=`, etc. or None if there is no operation.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  type = 'expr_stmt'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from PythonMixin:
 |  
 |  get_name_of_position(self, position)
 |      Given a (line, column) tuple, returns a :py:class:`Name` or ``None`` if
 |      there is no name at that position.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from parso.tree.BaseNode:
 |  
 |  __init__(self, children)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_code(self, include_prefix=True)
 |      Returns the code that was input the input for the parser for this node.
 |      
 |      :param include_prefix: Removes the prefix (whitespace and comments) of
 |          e.g. a statement.
 |  
 |  get_first_leaf(self)
 |      Returns the first leaf of a node or itself if this is a leaf.
 |  
 |  get_last_leaf(self)
 |      Returns the last leaf of a node or itself if this is a leaf.
 |  
 |  get_leaf_for_position(self, position, include_prefixes=False)
 |      Get the :py:class:`parso.tree.Leaf` at ``position``
 |      
 |      :param tuple position: A position tuple, row, column. Rows start from 1
 |      :param bool include_prefixes: If ``False``, ``None`` will be returned if ``position`` falls
 |          on whitespace or comments before a leaf
 |      :return: :py:class:`parso.tree.Leaf` at ``position``, or ``None``
 |  
 |  get_start_pos_of_prefix(self)
 |      Returns the start_pos of the prefix. This means basically it returns
 |      the end_pos of the last prefix. The `get_start_pos_of_prefix()` of the
 |      prefix `+` in `2 + 1` would be `(1, 1)`, while the start_pos is
 |      `(1, 2)`.
 |      
 |      :return tuple of int: (line, column)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from parso.tree.BaseNode:
 |  
 |  children
 |  
 |  end_pos
 |      Returns the end position of the prefix as a tuple, e.g. `(3, 4)`.
 |      
 |      :return tuple of int: (line, column)
 |  
 |  parent
 |  
 |  start_pos
 |      Returns the starting position of the prefix as a tuple, e.g. `(3, 4)`.
 |      
 |      :return tuple of int: (line, column)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from parso.tree.NodeOrLeaf:
 |  
 |  get_next_leaf(self)
 |      Returns the next leaf in the parser tree.
 |      Returns None if this is the last element in the parser tree.
 |  
 |  get_next_sibling(self)
 |      Returns the node immediately following this node in this parent's
 |      children list. If this node does not have a next sibling, it is None
 |  
 |  get_previous_leaf(self)
 |      Returns the previous leaf in the parser tree.
 |      Returns `None` if this is the first element in the parser tree.
 |  
 |  get_previous_sibling(self)
 |      Returns the node immediately preceding this node in this parent's
 |      children list. If this node does not have a previous sibling, it is
 |      None.
 |  
 |  get_root_node(self)
 |      Returns the root node of a parser tree. The returned node doesn't have
 |      a parent node like all the other nodes/leaves.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from DocstringMixin:
 |  
 |  get_doc_node(self)
 |      Returns the string leaf of a docstring. e.g. ``r'''foo'''``.
",class,"('(self, children)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.ExprStmt,evaluate.base_context,ExprStmt,"Python Library Documentation: class ExprStmt in module parso.python.tree

class ExprStmt(PythonBaseNode, DocstringMixin)
 |  Some Python specific utitilies.
 |  
 |  Method resolution order:
 |      ExprStmt
 |      PythonBaseNode
 |      PythonMixin
 |      parso.tree.BaseNode
 |      parso.tree.NodeOrLeaf
 |      DocstringMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  get_defined_names(self)
 |      Returns a list of `Name` defined before the `=` sign.
 |  
 |  get_rhs(self)
 |      Returns the right-hand-side of the equals.
 |  
 |  yield_operators(self)
 |      Returns a generator of `+=`, `=`, etc. or None if there is no operation.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  type = 'expr_stmt'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from PythonMixin:
 |  
 |  get_name_of_position(self, position)
 |      Given a (line, column) tuple, returns a :py:class:`Name` or ``None`` if
 |      there is no name at that position.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from parso.tree.BaseNode:
 |  
 |  __init__(self, children)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_code(self, include_prefix=True)
 |      Returns the code that was input the input for the parser for this node.
 |      
 |      :param include_prefix: Removes the prefix (whitespace and comments) of
 |          e.g. a statement.
 |  
 |  get_first_leaf(self)
 |      Returns the first leaf of a node or itself if this is a leaf.
 |  
 |  get_last_leaf(self)
 |      Returns the last leaf of a node or itself if this is a leaf.
 |  
 |  get_leaf_for_position(self, position, include_prefixes=False)
 |      Get the :py:class:`parso.tree.Leaf` at ``position``
 |      
 |      :param tuple position: A position tuple, row, column. Rows start from 1
 |      :param bool include_prefixes: If ``False``, ``None`` will be returned if ``position`` falls
 |          on whitespace or comments before a leaf
 |      :return: :py:class:`parso.tree.Leaf` at ``position``, or ``None``
 |  
 |  get_start_pos_of_prefix(self)
 |      Returns the start_pos of the prefix. This means basically it returns
 |      the end_pos of the last prefix. The `get_start_pos_of_prefix()` of the
 |      prefix `+` in `2 + 1` would be `(1, 1)`, while the start_pos is
 |      `(1, 2)`.
 |      
 |      :return tuple of int: (line, column)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from parso.tree.BaseNode:
 |  
 |  children
 |  
 |  end_pos
 |      Returns the end position of the prefix as a tuple, e.g. `(3, 4)`.
 |      
 |      :return tuple of int: (line, column)
 |  
 |  parent
 |  
 |  start_pos
 |      Returns the starting position of the prefix as a tuple, e.g. `(3, 4)`.
 |      
 |      :return tuple of int: (line, column)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from parso.tree.NodeOrLeaf:
 |  
 |  get_next_leaf(self)
 |      Returns the next leaf in the parser tree.
 |      Returns None if this is the last element in the parser tree.
 |  
 |  get_next_sibling(self)
 |      Returns the node immediately following this node in this parent's
 |      children list. If this node does not have a next sibling, it is None
 |  
 |  get_previous_leaf(self)
 |      Returns the previous leaf in the parser tree.
 |      Returns `None` if this is the first element in the parser tree.
 |  
 |  get_previous_sibling(self)
 |      Returns the node immediately preceding this node in this parent's
 |      children list. If this node does not have a previous sibling, it is
 |      None.
 |  
 |  get_root_node(self)
 |      Returns the root node of a parser tree. The returned node doesn't have
 |      a parent node like all the other nodes/leaves.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from DocstringMixin:
 |  
 |  get_doc_node(self)
 |      Returns the string leaf of a docstring. e.g. ``r'''foo'''``.
",class,"('(self, children)',)",children,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.Python3Method,evaluate.base_context,Python3Method,"Python Library Documentation: class Python3Method in module jedi._compatibility

class Python3Method(builtins.object)
 |  Methods defined here:
 |  
 |  __get__(self, obj, objtype)
 |  
 |  __init__(self, func)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, func)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.Python3Method,evaluate.base_context,Python3Method,"Python Library Documentation: class Python3Method in module jedi._compatibility

class Python3Method(builtins.object)
 |  Methods defined here:
 |  
 |  __get__(self, obj, objtype)
 |  
 |  __init__(self, func)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, func)',)",func,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.TreeContext,evaluate.base_context,TreeContext,"Python Library Documentation: class TreeContext in module jedi.evaluate.base_context

class TreeContext(Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      TreeContext
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.TreeContext,evaluate.base_context,TreeContext,"Python Library Documentation: class TreeContext in module jedi.evaluate.base_context

class TreeContext(Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      TreeContext
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.TreeContext,evaluate.base_context,TreeContext,"Python Library Documentation: class TreeContext in module jedi.evaluate.base_context

class TreeContext(Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      TreeContext
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",parent_context,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.base_context.clean_scope_docstring,evaluate.base_context,clean_scope_docstring,"Python Library Documentation: function clean_scope_docstring in module jedi.parser_utils

clean_scope_docstring(scope_node)
    Returns a cleaned version of the docstring token.
",function,"('(scope_node)',)",scope_node,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.get_doc_with_call_signature,evaluate.base_context,get_doc_with_call_signature,"Python Library Documentation: function get_doc_with_call_signature in module jedi.parser_utils

get_doc_with_call_signature(scope_node)
    Return a document string including call signature.
",function,"('(scope_node)',)",scope_node,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.iterate_contexts,evaluate.base_context,iterate_contexts,"Python Library Documentation: function iterate_contexts in module jedi.evaluate.base_context

iterate_contexts(contexts, contextualized_node=None, is_async=False)
    Calls `iterate`, on all contexts but ignores the ordering and just returns
    all contexts that the iterate functions yield.
",function,"('(contexts, contextualized_node=None, is_async=False)',)",contexts,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.iterate_contexts,evaluate.base_context,iterate_contexts,"Python Library Documentation: function iterate_contexts in module jedi.evaluate.base_context

iterate_contexts(contexts, contextualized_node=None, is_async=False)
    Calls `iterate`, on all contexts but ignores the ordering and just returns
    all contexts that the iterate functions yield.
",function,"('(contexts, contextualized_node=None, is_async=False)',)",contextualized_node,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.base_context.iterate_contexts,evaluate.base_context,iterate_contexts,"Python Library Documentation: function iterate_contexts in module jedi.evaluate.base_context

iterate_contexts(contexts, contextualized_node=None, is_async=False)
    Calls `iterate`, on all contexts but ignores the ordering and just returns
    all contexts that the iterate functions yield.
",function,"('(contexts, contextualized_node=None, is_async=False)',)",is_async,False,bool,arg_info
jedi,0.12.0,jedi.evaluate.base_context.iterator_to_context_set,evaluate.base_context,iterator_to_context_set,"Python Library Documentation: function iterator_to_context_set in module jedi.evaluate.base_context

iterator_to_context_set(func)
",function,"('(func)',)",func,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.unicode,evaluate.base_context,str,"Python Library Documentation: class str in module builtins

class str(object)
 |  str(object='') -> str
 |  str(bytes_or_buffer[, encoding[, errors]]) -> str
 |  
 |  Create a new string object from the given object. If encoding or
 |  errors is specified, then the object must expose a data buffer
 |  that will be decoded using the given encoding and error handler.
 |  Otherwise, returns the result of object.__str__() (if defined)
 |  or repr(object).
 |  encoding defaults to sys.getdefaultencoding().
 |  errors defaults to 'strict'.
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __format__(...)
 |      S.__format__(format_spec) -> str
 |      
 |      Return a formatted version of S as described by format_spec.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __getnewargs__(...)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  __sizeof__(...)
 |      S.__sizeof__() -> size of S in memory, in bytes
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  capitalize(...)
 |      S.capitalize() -> str
 |      
 |      Return a capitalized version of S, i.e. make the first character
 |      have upper case and the rest lower case.
 |  
 |  casefold(...)
 |      S.casefold() -> str
 |      
 |      Return a version of S suitable for caseless comparisons.
 |  
 |  center(...)
 |      S.center(width[, fillchar]) -> str
 |      
 |      Return S centered in a string of length width. Padding is
 |      done using the specified fill character (default is a space)
 |  
 |  count(...)
 |      S.count(sub[, start[, end]]) -> int
 |      
 |      Return the number of non-overlapping occurrences of substring sub in
 |      string S[start:end].  Optional arguments start and end are
 |      interpreted as in slice notation.
 |  
 |  encode(...)
 |      S.encode(encoding='utf-8', errors='strict') -> bytes
 |      
 |      Encode S using the codec registered for encoding. Default encoding
 |      is 'utf-8'. errors may be given to set a different error
 |      handling scheme. Default is 'strict' meaning that encoding errors raise
 |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
 |      'xmlcharrefreplace' as well as any other name registered with
 |      codecs.register_error that can handle UnicodeEncodeErrors.
 |  
 |  endswith(...)
 |      S.endswith(suffix[, start[, end]]) -> bool
 |      
 |      Return True if S ends with the specified suffix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      suffix can also be a tuple of strings to try.
 |  
 |  expandtabs(...)
 |      S.expandtabs(tabsize=8) -> str
 |      
 |      Return a copy of S where all tab characters are expanded using spaces.
 |      If tabsize is not given, a tab size of 8 characters is assumed.
 |  
 |  find(...)
 |      S.find(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  format(...)
 |      S.format(*args, **kwargs) -> str
 |      
 |      Return a formatted version of S, using substitutions from args and kwargs.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  format_map(...)
 |      S.format_map(mapping) -> str
 |      
 |      Return a formatted version of S, using substitutions from mapping.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  index(...)
 |      S.index(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found, 
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  isalnum(...)
 |      S.isalnum() -> bool
 |      
 |      Return True if all characters in S are alphanumeric
 |      and there is at least one character in S, False otherwise.
 |  
 |  isalpha(...)
 |      S.isalpha() -> bool
 |      
 |      Return True if all characters in S are alphabetic
 |      and there is at least one character in S, False otherwise.
 |  
 |  isdecimal(...)
 |      S.isdecimal() -> bool
 |      
 |      Return True if there are only decimal characters in S,
 |      False otherwise.
 |  
 |  isdigit(...)
 |      S.isdigit() -> bool
 |      
 |      Return True if all characters in S are digits
 |      and there is at least one character in S, False otherwise.
 |  
 |  isidentifier(...)
 |      S.isidentifier() -> bool
 |      
 |      Return True if S is a valid identifier according
 |      to the language definition.
 |      
 |      Use keyword.iskeyword() to test for reserved identifiers
 |      such as ""def"" and ""class"".
 |  
 |  islower(...)
 |      S.islower() -> bool
 |      
 |      Return True if all cased characters in S are lowercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  isnumeric(...)
 |      S.isnumeric() -> bool
 |      
 |      Return True if there are only numeric characters in S,
 |      False otherwise.
 |  
 |  isprintable(...)
 |      S.isprintable() -> bool
 |      
 |      Return True if all characters in S are considered
 |      printable in repr() or S is empty, False otherwise.
 |  
 |  isspace(...)
 |      S.isspace() -> bool
 |      
 |      Return True if all characters in S are whitespace
 |      and there is at least one character in S, False otherwise.
 |  
 |  istitle(...)
 |      S.istitle() -> bool
 |      
 |      Return True if S is a titlecased string and there is at least one
 |      character in S, i.e. upper- and titlecase characters may only
 |      follow uncased characters and lowercase characters only cased ones.
 |      Return False otherwise.
 |  
 |  isupper(...)
 |      S.isupper() -> bool
 |      
 |      Return True if all cased characters in S are uppercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  join(...)
 |      S.join(iterable) -> str
 |      
 |      Return a string which is the concatenation of the strings in the
 |      iterable.  The separator between elements is S.
 |  
 |  ljust(...)
 |      S.ljust(width[, fillchar]) -> str
 |      
 |      Return S left-justified in a Unicode string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  lower(...)
 |      S.lower() -> str
 |      
 |      Return a copy of the string S converted to lowercase.
 |  
 |  lstrip(...)
 |      S.lstrip([chars]) -> str
 |      
 |      Return a copy of the string S with leading whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  partition(...)
 |      S.partition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, and return the part before it,
 |      the separator itself, and the part after it.  If the separator is not
 |      found, return S and two empty strings.
 |  
 |  replace(...)
 |      S.replace(old, new[, count]) -> str
 |      
 |      Return a copy of S with all occurrences of substring
 |      old replaced by new.  If the optional argument count is
 |      given, only the first count occurrences are replaced.
 |  
 |  rfind(...)
 |      S.rfind(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  rindex(...)
 |      S.rindex(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  rjust(...)
 |      S.rjust(width[, fillchar]) -> str
 |      
 |      Return S right-justified in a string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  rpartition(...)
 |      S.rpartition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, starting at the end of S, and return
 |      the part before it, the separator itself, and the part after it.  If the
 |      separator is not found, return two empty strings and S.
 |  
 |  rsplit(...)
 |      S.rsplit(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string, starting at the end of the string and
 |      working to the front.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified, any whitespace string
 |      is a separator.
 |  
 |  rstrip(...)
 |      S.rstrip([chars]) -> str
 |      
 |      Return a copy of the string S with trailing whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  split(...)
 |      S.split(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified or is None, any
 |      whitespace string is a separator and empty strings are
 |      removed from the result.
 |  
 |  splitlines(...)
 |      S.splitlines([keepends]) -> list of strings
 |      
 |      Return a list of the lines in S, breaking at line boundaries.
 |      Line breaks are not included in the resulting list unless keepends
 |      is given and true.
 |  
 |  startswith(...)
 |      S.startswith(prefix[, start[, end]]) -> bool
 |      
 |      Return True if S starts with the specified prefix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      prefix can also be a tuple of strings to try.
 |  
 |  strip(...)
 |      S.strip([chars]) -> str
 |      
 |      Return a copy of the string S with leading and trailing
 |      whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  swapcase(...)
 |      S.swapcase() -> str
 |      
 |      Return a copy of S with uppercase characters converted to lowercase
 |      and vice versa.
 |  
 |  title(...)
 |      S.title() -> str
 |      
 |      Return a titlecased version of S, i.e. words start with title case
 |      characters, all remaining cased characters have lower case.
 |  
 |  translate(...)
 |      S.translate(table) -> str
 |      
 |      Return a copy of the string S in which each character has been mapped
 |      through the given translation table. The table must implement
 |      lookup/indexing via __getitem__, for instance a dictionary or list,
 |      mapping Unicode ordinals to Unicode ordinals, strings, or None. If
 |      this operation raises LookupError, the character is left untouched.
 |      Characters mapped to None are deleted.
 |  
 |  upper(...)
 |      S.upper() -> str
 |      
 |      Return a copy of S converted to uppercase.
 |  
 |  zfill(...)
 |      S.zfill(width) -> str
 |      
 |      Pad a numeric string S with zeros on the left, to fill a field
 |      of the specified width. The string S is never truncated.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  maketrans(x, y=None, z=None, /)
 |      Return a translation table usable for str.translate().
 |      
 |      If there is only one argument, it must be a dictionary mapping Unicode
 |      ordinals (integers) or characters to Unicode ordinals, strings or None.
 |      Character keys will be then converted to ordinals.
 |      If there are two arguments, they must be strings of equal length, and
 |      in the resulting dictionary, each character in x will be mapped to the
 |      character at the same position in y. If there is a third argument, it
 |      must be a string, whose characters will be mapped to None in the result.
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.base_context.zip_longest,evaluate.base_context,zip_longest,"Python Library Documentation: class zip_longest in module itertools

class zip_longest(builtins.object)
 |  zip_longest(iter1 [,iter2 [...]], [fillvalue=None]) --> zip_longest object
 |  
 |  Return a zip_longest object whose .__next__() method returns a tuple where
 |  the i-th element comes from the i-th iterable argument.  The .__next__()
 |  method continues until the longest iterable in the argument sequence
 |  is exhausted and then it raises StopIteration.  When the shorter iterables
 |  are exhausted, the fillvalue is substituted in their place.  The fillvalue
 |  defaults to None or can be specified by a keyword argument.
 |  
 |  Methods defined here:
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __next__(self, /)
 |      Implement next(self).
 |  
 |  __reduce__(...)
 |      Return state information for pickling.
 |  
 |  __setstate__(...)
 |      Set state information for unpickling.
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.cache.CachedMetaClass,evaluate.cache,CachedMetaClass,"Python Library Documentation: class CachedMetaClass in module jedi.evaluate.cache

class CachedMetaClass(builtins.type)
 |  This is basically almost the same than the decorator above, it just caches
 |  class initializations. Either you do it this way or with decorators, but
 |  with decorators you lose class access (isinstance, etc).
 |  
 |  Method resolution order:
 |      CachedMetaClass
 |      builtins.type
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __call__ = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.type:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __dir__(...)
 |      __dir__() -> list
 |      specialized __dir__ implementation for types
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __instancecheck__(...)
 |      __instancecheck__() -> bool
 |      check if an object is an instance
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __prepare__(...) from builtins.type
 |      __prepare__() -> dict
 |      used to create the namespace for the class statement
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __sizeof__(...)
 |      __sizeof__() -> int
 |      return memory consumption of the type object
 |  
 |  __subclasscheck__(...)
 |      __subclasscheck__() -> bool
 |      check if a class is a subclass
 |  
 |  __subclasses__(...)
 |      __subclasses__() -> list of immediate subclasses
 |  
 |  mro(...)
 |      mro() -> list
 |      return a type's method resolution order
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.type:
 |  
 |  __abstractmethods__
 |  
 |  __dict__
 |  
 |  __text_signature__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from builtins.type:
 |  
 |  __base__ = <class 'type'>
 |      type(object_or_name, bases, dict)
 |      type(object) -> the object's type
 |      type(name, bases, dict) -> a new type
 |  
 |  __bases__ = (<class 'type'>,)
 |  
 |  __basicsize__ = 864
 |  
 |  __dictoffset__ = 264
 |  
 |  __flags__ = -2146675199
 |  
 |  __itemsize__ = 40
 |  
 |  __mro__ = (<class 'jedi.evaluate.cache.CachedMetaClass'>, <class 'type...
 |  
 |  __weakrefoffset__ = 368
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.cache._memoize_default,evaluate.cache,_memoize_default,"Python Library Documentation: function _memoize_default in module jedi.evaluate.cache

_memoize_default(default=<object object at 0x000000000520FC20>, evaluator_is_first_arg=False, second_arg_is_evaluator=False)
    This is a typical memoization decorator, BUT there is one difference:
    To prevent recursion it sets defaults.
    
    Preventing recursion is in this case the much bigger use than speed. I
    don't think, that there is a big speed difference, but there are many cases
    where recursion could happen (think about a = b; b = a).
",function,"('(default=<object object at 0x000000000520FC20>, evaluator_is_first_arg=False, second_arg_is_evaluator=False)',)",evaluator_is_first_arg,False,bool,arg_info
jedi,0.12.0,jedi.evaluate.cache._memoize_default,evaluate.cache,_memoize_default,"Python Library Documentation: function _memoize_default in module jedi.evaluate.cache

_memoize_default(default=<object object at 0x000000000520FC20>, evaluator_is_first_arg=False, second_arg_is_evaluator=False)
    This is a typical memoization decorator, BUT there is one difference:
    To prevent recursion it sets defaults.
    
    Preventing recursion is in this case the much bigger use than speed. I
    don't think, that there is a big speed difference, but there are many cases
    where recursion could happen (think about a = b; b = a).
",function,"('(default=<object object at 0x000000000520FC20>, evaluator_is_first_arg=False, second_arg_is_evaluator=False)',)",default,<object object at 0x000000000520FC20>,object,arg_info
jedi,0.12.0,jedi.evaluate.cache._memoize_default,evaluate.cache,_memoize_default,"Python Library Documentation: function _memoize_default in module jedi.evaluate.cache

_memoize_default(default=<object object at 0x000000000520FC20>, evaluator_is_first_arg=False, second_arg_is_evaluator=False)
    This is a typical memoization decorator, BUT there is one difference:
    To prevent recursion it sets defaults.
    
    Preventing recursion is in this case the much bigger use than speed. I
    don't think, that there is a big speed difference, but there are many cases
    where recursion could happen (think about a = b; b = a).
",function,"('(default=<object object at 0x000000000520FC20>, evaluator_is_first_arg=False, second_arg_is_evaluator=False)',)",second_arg_is_evaluator,False,bool,arg_info
jedi,0.12.0,jedi.evaluate.cache.evaluator_function_cache,evaluate.cache,evaluator_function_cache,"Python Library Documentation: function evaluator_function_cache in module jedi.evaluate.cache

evaluator_function_cache(default=<object object at 0x000000000520FC20>)
",function,"('(default=<object object at 0x000000000520FC20>)',)",default,<object object at 0x000000000520FC20>,object,arg_info
jedi,0.12.0,jedi.evaluate.cache.evaluator_method_cache,evaluate.cache,evaluator_method_cache,"Python Library Documentation: function evaluator_method_cache in module jedi.evaluate.cache

evaluator_method_cache(default=<object object at 0x000000000520FC20>)
",function,"('(default=<object object at 0x000000000520FC20>)',)",default,<object object at 0x000000000520FC20>,object,arg_info
jedi,0.12.0,jedi.evaluate.check_tuple_assignments,evaluate,check_tuple_assignments,"Python Library Documentation: function check_tuple_assignments in module jedi.evaluate.syntax_tree

check_tuple_assignments(evaluator, contextualized_name, context_set)
    Checks if tuples are assigned.
",function,"('(evaluator, contextualized_name, context_set)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.check_tuple_assignments,evaluate,check_tuple_assignments,"Python Library Documentation: function check_tuple_assignments in module jedi.evaluate.syntax_tree

check_tuple_assignments(evaluator, contextualized_name, context_set)
    Checks if tuples are assigned.
",function,"('(evaluator, contextualized_name, context_set)',)",contextualized_name,,,arg_info
jedi,0.12.0,jedi.evaluate.check_tuple_assignments,evaluate,check_tuple_assignments,"Python Library Documentation: function check_tuple_assignments in module jedi.evaluate.syntax_tree

check_tuple_assignments(evaluator, contextualized_name, context_set)
    Checks if tuples are assigned.
",function,"('(evaluator, contextualized_name, context_set)',)",context_set,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.CompiledContextName,evaluate.compiled,CompiledContextName,"Python Library Documentation: class CompiledContextName in module jedi.evaluate.compiled.context

class CompiledContextName(jedi.evaluate.filters.ContextNameMixin, jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      CompiledContextName
 |      jedi.evaluate.filters.ContextNameMixin
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.ContextNameMixin:
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.ContextNameMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, context, name)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.CompiledContextName,evaluate.compiled,CompiledContextName,"Python Library Documentation: class CompiledContextName in module jedi.evaluate.compiled.context

class CompiledContextName(jedi.evaluate.filters.ContextNameMixin, jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      CompiledContextName
 |      jedi.evaluate.filters.ContextNameMixin
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.ContextNameMixin:
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.ContextNameMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, context, name)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.CompiledContextName,evaluate.compiled,CompiledContextName,"Python Library Documentation: class CompiledContextName in module jedi.evaluate.compiled.context

class CompiledContextName(jedi.evaluate.filters.ContextNameMixin, jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      CompiledContextName
 |      jedi.evaluate.filters.ContextNameMixin
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.ContextNameMixin:
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.ContextNameMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, context, name)',)",name,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.CompiledName,evaluate.compiled,CompiledName,"Python Library Documentation: class CompiledName in module jedi.evaluate.compiled.context

class CompiledName(jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      CompiledName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  infer = wrapper(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, evaluator, parent_context, name)',)",name,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.CompiledName,evaluate.compiled,CompiledName,"Python Library Documentation: class CompiledName in module jedi.evaluate.compiled.context

class CompiledName(jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      CompiledName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  infer = wrapper(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, evaluator, parent_context, name)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.CompiledName,evaluate.compiled,CompiledName,"Python Library Documentation: class CompiledName in module jedi.evaluate.compiled.context

class CompiledName(jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      CompiledName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  infer = wrapper(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, evaluator, parent_context, name)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.CompiledName,evaluate.compiled,CompiledName,"Python Library Documentation: class CompiledName in module jedi.evaluate.compiled.context

class CompiledName(jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      CompiledName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  infer = wrapper(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, evaluator, parent_context, name)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.CompiledObject,evaluate.compiled,CompiledObject,"Python Library Documentation: class CompiledObject in module jedi.evaluate.compiled.context

class CompiledObject(jedi.evaluate.base_context.Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      CompiledObject
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, access_handle, parent_context=None, faked_class=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  dict_values(self)
 |  
 |  execute_operation(self, other, operator)
 |  
 |  get_filters(self, search_global=False, is_instance=False, until_position=None, origin_scope=None)
 |  
 |  get_param_names(self)
 |  
 |  get_safe_value(self, default=<object object at 0x000000000520FC40>)
 |  
 |  is_class(self)
 |  
 |  is_super_class(self, exception)
 |  
 |  negate(self)
 |  
 |  py__bases__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__call__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__class__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__file__(self)
 |  
 |  py__getitem__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__iter__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__mro__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__name__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, access_handle, parent_context=None, faked_class=None)',)",parent_context,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.compiled.CompiledObject,evaluate.compiled,CompiledObject,"Python Library Documentation: class CompiledObject in module jedi.evaluate.compiled.context

class CompiledObject(jedi.evaluate.base_context.Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      CompiledObject
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, access_handle, parent_context=None, faked_class=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  dict_values(self)
 |  
 |  execute_operation(self, other, operator)
 |  
 |  get_filters(self, search_global=False, is_instance=False, until_position=None, origin_scope=None)
 |  
 |  get_param_names(self)
 |  
 |  get_safe_value(self, default=<object object at 0x000000000520FC40>)
 |  
 |  is_class(self)
 |  
 |  is_super_class(self, exception)
 |  
 |  negate(self)
 |  
 |  py__bases__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__call__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__class__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__file__(self)
 |  
 |  py__getitem__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__iter__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__mro__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__name__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, access_handle, parent_context=None, faked_class=None)',)",access_handle,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.CompiledObject,evaluate.compiled,CompiledObject,"Python Library Documentation: class CompiledObject in module jedi.evaluate.compiled.context

class CompiledObject(jedi.evaluate.base_context.Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      CompiledObject
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, access_handle, parent_context=None, faked_class=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  dict_values(self)
 |  
 |  execute_operation(self, other, operator)
 |  
 |  get_filters(self, search_global=False, is_instance=False, until_position=None, origin_scope=None)
 |  
 |  get_param_names(self)
 |  
 |  get_safe_value(self, default=<object object at 0x000000000520FC40>)
 |  
 |  is_class(self)
 |  
 |  is_super_class(self, exception)
 |  
 |  negate(self)
 |  
 |  py__bases__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__call__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__class__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__file__(self)
 |  
 |  py__getitem__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__iter__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__mro__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__name__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, access_handle, parent_context=None, faked_class=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.CompiledObject,evaluate.compiled,CompiledObject,"Python Library Documentation: class CompiledObject in module jedi.evaluate.compiled.context

class CompiledObject(jedi.evaluate.base_context.Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      CompiledObject
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, access_handle, parent_context=None, faked_class=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  dict_values(self)
 |  
 |  execute_operation(self, other, operator)
 |  
 |  get_filters(self, search_global=False, is_instance=False, until_position=None, origin_scope=None)
 |  
 |  get_param_names(self)
 |  
 |  get_safe_value(self, default=<object object at 0x000000000520FC40>)
 |  
 |  is_class(self)
 |  
 |  is_super_class(self, exception)
 |  
 |  negate(self)
 |  
 |  py__bases__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__call__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__class__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__file__(self)
 |  
 |  py__getitem__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__iter__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__mro__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__name__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, access_handle, parent_context=None, faked_class=None)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.CompiledObject,evaluate.compiled,CompiledObject,"Python Library Documentation: class CompiledObject in module jedi.evaluate.compiled.context

class CompiledObject(jedi.evaluate.base_context.Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      CompiledObject
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, access_handle, parent_context=None, faked_class=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  dict_values(self)
 |  
 |  execute_operation(self, other, operator)
 |  
 |  get_filters(self, search_global=False, is_instance=False, until_position=None, origin_scope=None)
 |  
 |  get_param_names(self)
 |  
 |  get_safe_value(self, default=<object object at 0x000000000520FC40>)
 |  
 |  is_class(self)
 |  
 |  is_super_class(self, exception)
 |  
 |  negate(self)
 |  
 |  py__bases__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__call__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__class__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__file__(self)
 |  
 |  py__getitem__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__iter__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__mro__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__name__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, access_handle, parent_context=None, faked_class=None)',)",faked_class,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.compiled.CompiledObjectFilter,evaluate.compiled,CompiledObjectFilter,"Python Library Documentation: class CompiledObjectFilter in module jedi.evaluate.compiled.context

class CompiledObjectFilter(jedi.evaluate.filters.AbstractFilter)
 |  Method resolution order:
 |      CompiledObjectFilter
 |      jedi.evaluate.filters.AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, compiled_object, is_instance=False)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.compiled.context.CompiledName'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, compiled_object, is_instance=False)',)",is_instance,False,bool,arg_info
jedi,0.12.0,jedi.evaluate.compiled.CompiledObjectFilter,evaluate.compiled,CompiledObjectFilter,"Python Library Documentation: class CompiledObjectFilter in module jedi.evaluate.compiled.context

class CompiledObjectFilter(jedi.evaluate.filters.AbstractFilter)
 |  Method resolution order:
 |      CompiledObjectFilter
 |      jedi.evaluate.filters.AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, compiled_object, is_instance=False)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.compiled.context.CompiledName'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, compiled_object, is_instance=False)',)",compiled_object,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.CompiledObjectFilter,evaluate.compiled,CompiledObjectFilter,"Python Library Documentation: class CompiledObjectFilter in module jedi.evaluate.compiled.context

class CompiledObjectFilter(jedi.evaluate.filters.AbstractFilter)
 |  Method resolution order:
 |      CompiledObjectFilter
 |      jedi.evaluate.filters.AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, compiled_object, is_instance=False)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.compiled.context.CompiledName'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, compiled_object, is_instance=False)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.CompiledObjectFilter,evaluate.compiled,CompiledObjectFilter,"Python Library Documentation: class CompiledObjectFilter in module jedi.evaluate.compiled.context

class CompiledObjectFilter(jedi.evaluate.filters.AbstractFilter)
 |  Method resolution order:
 |      CompiledObjectFilter
 |      jedi.evaluate.filters.AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, compiled_object, is_instance=False)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.compiled.context.CompiledName'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, compiled_object, is_instance=False)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.AccessPath,evaluate.compiled.access,AccessPath,"Python Library Documentation: class AccessPath in module jedi.evaluate.compiled.access

class AccessPath(builtins.object)
 |  Methods defined here:
 |  
 |  __getstate__(self)
 |      # Writing both of these methods here looks a bit ridiculous. However with
 |      # the differences of Python 2/3 it's actually necessary, because we will
 |      # otherwise have a accesses attribute that is bytes instead of unicode.
 |  
 |  __init__(self, accesses)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __setstate__(self, value)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, accesses)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.AccessPath,evaluate.compiled.access,AccessPath,"Python Library Documentation: class AccessPath in module jedi.evaluate.compiled.access

class AccessPath(builtins.object)
 |  Methods defined here:
 |  
 |  __getstate__(self)
 |      # Writing both of these methods here looks a bit ridiculous. However with
 |      # the differences of Python 2/3 it's actually necessary, because we will
 |      # otherwise have a accesses attribute that is bytes instead of unicode.
 |  
 |  __init__(self, accesses)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __setstate__(self, value)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, accesses)',)",accesses,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.AsyncGeneratorType,evaluate.compiled.access,async_generator,"Python Library Documentation: class async_generator in module builtins

class async_generator(object)
 |  Methods defined here:
 |  
 |  __aiter__(self, /)
 |      Return an awaitable, that resolves in asynchronous iterator.
 |  
 |  __anext__(self, /)
 |      Return a value or raise StopAsyncIteration.
 |  
 |  __del__(...)
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  aclose(...)
 |      aclose() -> raise GeneratorExit inside generator.
 |  
 |  asend(...)
 |      asend(v) -> send 'v' in generator.
 |  
 |  athrow(...)
 |      athrow(typ[,val[,tb]]) -> raise exception in generator.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  ag_await
 |      object being awaited on, or None
 |  
 |  ag_code
 |  
 |  ag_frame
 |  
 |  ag_running
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.ClassMethodDescriptorType,evaluate.compiled.access,classmethod_descriptor,"Python Library Documentation: class classmethod_descriptor in module builtins

class classmethod_descriptor(object)
 |  Methods defined here:
 |  
 |  __call__(self, /, *args, **kwargs)
 |      Call self as a function.
 |  
 |  __get__(self, instance, owner, /)
 |      Return an attribute of instance, which is of type owner.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __objclass__
 |  
 |  __text_signature__
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.CoroutineType,evaluate.compiled.access,coroutine,"Python Library Documentation: class coroutine in module builtins

class coroutine(object)
 |  Methods defined here:
 |  
 |  __await__(self, /)
 |      Return an iterator to be used in await expression.
 |  
 |  __del__(...)
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  close(...)
 |      close() -> raise GeneratorExit inside coroutine.
 |  
 |  send(...)
 |      send(arg) -> send 'arg' into coroutine,
 |      return next iterated value or raise StopIteration.
 |  
 |  throw(...)
 |      throw(typ[,val[,tb]]) -> raise exception in coroutine,
 |      return next iterated value or raise StopIteration.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  cr_await
 |      object being awaited on, or None
 |  
 |  cr_code
 |  
 |  cr_frame
 |  
 |  cr_running
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.DirectObjectAccess,evaluate.compiled.access,DirectObjectAccess,"Python Library Documentation: class DirectObjectAccess in module jedi.evaluate.compiled.access

class DirectObjectAccess(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, obj)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  dict_values(self)
 |  
 |  dir(self)
 |  
 |  execute_operation(self, other_access_handle, operator)
 |  
 |  get_access_path_tuples(self)
 |  
 |  get_api_type(self)
 |  
 |  get_dir_infos(self)
 |      Used to return a couple of infos that are needed when accessing the sub
 |      objects of an objects
 |  
 |  get_repr lambda *args, **kwargs
 |  
 |  get_safe_value(self)
 |  
 |  get_signature_params(self)
 |  
 |  getattr(self, name, default=<object object at 0x000000000520FC40>)
 |  
 |  has_iter(self)
 |  
 |  is_allowed_getattr(self, name)
 |  
 |  is_class(self)
 |  
 |  is_super_class(self, exception)
 |  
 |  ismethoddescriptor(self)
 |  
 |  needs_type_completions(self)
 |  
 |  negate(self)
 |  
 |  py__bases__(self)
 |  
 |  py__bool__(self)
 |  
 |  py__class__(self)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__file__(self)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__list(self)
 |  
 |  py__mro__accesses(self)
 |  
 |  py__name__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, obj)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.DirectObjectAccess,evaluate.compiled.access,DirectObjectAccess,"Python Library Documentation: class DirectObjectAccess in module jedi.evaluate.compiled.access

class DirectObjectAccess(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, obj)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  dict_values(self)
 |  
 |  dir(self)
 |  
 |  execute_operation(self, other_access_handle, operator)
 |  
 |  get_access_path_tuples(self)
 |  
 |  get_api_type(self)
 |  
 |  get_dir_infos(self)
 |      Used to return a couple of infos that are needed when accessing the sub
 |      objects of an objects
 |  
 |  get_repr lambda *args, **kwargs
 |  
 |  get_safe_value(self)
 |  
 |  get_signature_params(self)
 |  
 |  getattr(self, name, default=<object object at 0x000000000520FC40>)
 |  
 |  has_iter(self)
 |  
 |  is_allowed_getattr(self, name)
 |  
 |  is_class(self)
 |  
 |  is_super_class(self, exception)
 |  
 |  ismethoddescriptor(self)
 |  
 |  needs_type_completions(self)
 |  
 |  negate(self)
 |  
 |  py__bases__(self)
 |  
 |  py__bool__(self)
 |  
 |  py__class__(self)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__file__(self)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__list(self)
 |  
 |  py__mro__accesses(self)
 |  
 |  py__name__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, obj)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.DirectObjectAccess,evaluate.compiled.access,DirectObjectAccess,"Python Library Documentation: class DirectObjectAccess in module jedi.evaluate.compiled.access

class DirectObjectAccess(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, obj)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  dict_values(self)
 |  
 |  dir(self)
 |  
 |  execute_operation(self, other_access_handle, operator)
 |  
 |  get_access_path_tuples(self)
 |  
 |  get_api_type(self)
 |  
 |  get_dir_infos(self)
 |      Used to return a couple of infos that are needed when accessing the sub
 |      objects of an objects
 |  
 |  get_repr lambda *args, **kwargs
 |  
 |  get_safe_value(self)
 |  
 |  get_signature_params(self)
 |  
 |  getattr(self, name, default=<object object at 0x000000000520FC40>)
 |  
 |  has_iter(self)
 |  
 |  is_allowed_getattr(self, name)
 |  
 |  is_class(self)
 |  
 |  is_super_class(self, exception)
 |  
 |  ismethoddescriptor(self)
 |  
 |  needs_type_completions(self)
 |  
 |  negate(self)
 |  
 |  py__bases__(self)
 |  
 |  py__bool__(self)
 |  
 |  py__class__(self)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__file__(self)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__list(self)
 |  
 |  py__mro__accesses(self)
 |  
 |  py__name__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, obj)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.MethodDescriptorType,evaluate.compiled.access,method_descriptor,"Python Library Documentation: class method_descriptor in module builtins

class method_descriptor(object)
 |  Methods defined here:
 |  
 |  __call__(self, /, *args, **kwargs)
 |      Call self as a function.
 |  
 |  __get__(self, instance, owner, /)
 |      Return an attribute of instance, which is of type owner.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __objclass__
 |  
 |  __text_signature__
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.SignatureParam,evaluate.compiled.access,SignatureParam,"Python Library Documentation: class SignatureParam in module jedi.evaluate.compiled.access

class SignatureParam(builtins.tuple)
 |  SignatureParam(name, has_default, default, has_annotation, annotation, kind_name)
 |  
 |  Method resolution order:
 |      SignatureParam
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new SignatureParam object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new SignatureParam object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, name, has_default, default, has_annotation, annotation, kind_name)
 |      Create new instance of SignatureParam(name, has_default, default, has_annotation, annotation, kind_name)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |      Alias for field number 0
 |  
 |  has_default
 |      Alias for field number 1
 |  
 |  default
 |      Alias for field number 2
 |  
 |  has_annotation
 |      Alias for field number 3
 |  
 |  annotation
 |      Alias for field number 4
 |  
 |  kind_name
 |      Alias for field number 5
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('name', 'has_default', 'default', 'has_annotation', 'annota...
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.SignatureParam._make,evaluate.compiled.access.SignatureParam,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new SignatureParam object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>)',)",len,<built-in function len>,builtin_function_or_method,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.SignatureParam._make,evaluate.compiled.access.SignatureParam,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new SignatureParam object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>)',)",new,<built-in method __new__ of type object at 0x000000005A0FC0D0>,builtin_function_or_method,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.SignatureParam._make,evaluate.compiled.access.SignatureParam,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new SignatureParam object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>)',)",iterable,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.SignatureParam._make,evaluate.compiled.access.SignatureParam,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new SignatureParam object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.WrapperDescriptorType,evaluate.compiled.access,wrapper_descriptor,"Python Library Documentation: class wrapper_descriptor in module builtins

class wrapper_descriptor(object)
 |  Methods defined here:
 |  
 |  __call__(self, /, *args, **kwargs)
 |      Call self as a function.
 |  
 |  __get__(self, instance, owner, /)
 |      Return an attribute of instance, which is of type owner.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __objclass__
 |  
 |  __text_signature__
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access._SPECIAL_OBJECTS,evaluate.compiled.access,_SPECIAL_OBJECTS,"Python Library Documentation: class _SPECIAL_OBJECTS in module jedi.evaluate.compiled.access

class _SPECIAL_OBJECTS(builtins.object)
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  ASYNC_GENERATOR = <async_generator object _async_generator>
 |  
 |  BUILTINS = <module 'builtins' (built-in)>
 |  
 |  COROUTINE = <coroutine object _coroutine>
 |  
 |  COROUTINE_WRAPPER = <coroutine_wrapper object>
 |  
 |  FUNCTION_CLASS = <class 'function'>
 |      function(code, globals[, name[, argdefs[, closure]]])
 |      
 |      Create a function object from a code object and a dictionary.
 |      The optional name string overrides the name from the code object.
 |      The optional argdefs tuple specifies the default argument values.
 |      The optional closure tuple supplies the bindings for free variables.
 |  
 |  GENERATOR_OBJECT = <generator object _a_generator>
 |  
 |  METHOD_CLASS = <class 'function'>
 |      function(code, globals[, name[, argdefs[, closure]]])
 |      
 |      Create a function object from a code object and a dictionary.
 |      The optional name string overrides the name from the code object.
 |      The optional argdefs tuple specifies the default argument values.
 |      The optional closure tuple supplies the bindings for free variables.
 |  
 |  MODULE_CLASS = <class 'module'>
 |      module(name[, doc])
 |      
 |      Create a module object.
 |      The name must be a string; the optional doc argument can have any type.
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access._a_generator,evaluate.compiled.access,_a_generator,"Python Library Documentation: function _a_generator in module jedi.evaluate.compiled.access

_a_generator(foo)
    Used to have an object to return for generators.
",function,"('(foo)',)",foo,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access._force_unicode_decorator,evaluate.compiled.access,_force_unicode_decorator,"Python Library Documentation: function _force_unicode_decorator in module jedi.evaluate.compiled.access

_force_unicode_decorator(func)
",function,"('(func)',)",func,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access._is_class_instance,evaluate.compiled.access,_is_class_instance,"Python Library Documentation: function _is_class_instance in module jedi.evaluate.compiled.access

_is_class_instance(obj)
    Like inspect.* methods.
",function,"('(obj)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.compiled_objects_cache,evaluate.compiled.access,compiled_objects_cache,"Python Library Documentation: function compiled_objects_cache in module jedi.evaluate.compiled.access

compiled_objects_cache(attribute_name)
",function,"('(attribute_name)',)",attribute_name,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.create_access,evaluate.compiled.access,create_access,"Python Library Documentation: function create_access in module jedi.evaluate.compiled.access

create_access(evaluator, obj)
",function,"('(evaluator, obj)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.create_access,evaluate.compiled.access,create_access,"Python Library Documentation: function create_access in module jedi.evaluate.compiled.access

create_access(evaluator, obj)
",function,"('(evaluator, obj)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.create_access_path,evaluate.compiled.access,create_access_path,"Python Library Documentation: function create_access_path in module jedi.evaluate.compiled.access

create_access_path(evaluator, obj)
",function,"('(evaluator, obj)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.create_access_path,evaluate.compiled.access,create_access_path,"Python Library Documentation: function create_access_path in module jedi.evaluate.compiled.access

create_access_path(evaluator, obj)
",function,"('(evaluator, obj)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.dedent,evaluate.compiled.access,dedent,"Python Library Documentation: function dedent in module textwrap

dedent(text)
    Remove any common leading whitespace from every line in `text`.
    
    This can be used to make triple-quoted strings line up with the left
    edge of the display, while still presenting them in the source code
    in indented form.
    
    Note that tabs and spaces are both treated as whitespace, but they
    are not equal: the lines ""  hello"" and ""\thello"" are
    considered to have no common leading whitespace.  (This behaviour is
    new in Python 2.5; older versions of this module incorrectly
    expanded tabs before searching for common leading whitespace.)
",function,"('(text)',)",text,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.dotted_from_fs_path,evaluate.compiled.access,dotted_from_fs_path,"Python Library Documentation: function dotted_from_fs_path in module jedi.evaluate.utils

dotted_from_fs_path(fs_path, sys_path)
    Changes `/usr/lib/python3.4/email/utils.py` to `email.utils`.  I.e.
    compares the path with sys.path and then returns the dotted_path. If the
    path is not in the sys.path, just returns None.
",function,"('(fs_path, sys_path)',)",sys_path,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.dotted_from_fs_path,evaluate.compiled.access,dotted_from_fs_path,"Python Library Documentation: function dotted_from_fs_path in module jedi.evaluate.utils

dotted_from_fs_path(fs_path, sys_path)
    Changes `/usr/lib/python3.4/email/utils.py` to `email.utils`.  I.e.
    compares the path with sys.path and then returns the dotted_path. If the
    path is not in the sys.path, just returns None.
",function,"('(fs_path, sys_path)',)",fs_path,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.force_unicode,evaluate.compiled.access,force_unicode,"Python Library Documentation: function force_unicode in module jedi._compatibility

force_unicode(obj)
",function,"('(obj)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.get_special_object,evaluate.compiled.access,get_special_object,"Python Library Documentation: function get_special_object in module jedi.evaluate.compiled.access

get_special_object(evaluator, identifier)
",function,"('(evaluator, identifier)',)",identifier,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.get_special_object,evaluate.compiled.access,get_special_object,"Python Library Documentation: function get_special_object in module jedi.evaluate.compiled.access

get_special_object(evaluator, identifier)
",function,"('(evaluator, identifier)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.getattr_static,evaluate.compiled.access,getattr_static,"Python Library Documentation: function getattr_static in module jedi.evaluate.compiled.getattr_static

getattr_static(obj, attr, default=<object object at 0x000000000520FC30>)
    Retrieve attributes without triggering dynamic lookup via the
    descriptor protocol,  __getattr__ or __getattribute__.
    
    Note: this function may not be able to retrieve all attributes
    that getattr can fetch (like dynamically created attributes)
    and may find attributes that getattr can't (like descriptors
    that raise AttributeError). It can also return descriptor objects
    instead of instance members in some cases. See the
    documentation for details.
    
    Returns a tuple `(attr, is_get_descriptor)`. is_get_descripter means that
    the attribute is a descriptor that has a `__get__` attribute.
",function,"('(obj, attr, default=<object object at 0x000000000520FC30>)',)",default,<object object at 0x000000000520FC30>,object,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.getattr_static,evaluate.compiled.access,getattr_static,"Python Library Documentation: function getattr_static in module jedi.evaluate.compiled.getattr_static

getattr_static(obj, attr, default=<object object at 0x000000000520FC30>)
    Retrieve attributes without triggering dynamic lookup via the
    descriptor protocol,  __getattr__ or __getattribute__.
    
    Note: this function may not be able to retrieve all attributes
    that getattr can fetch (like dynamically created attributes)
    and may find attributes that getattr can't (like descriptors
    that raise AttributeError). It can also return descriptor objects
    instead of instance members in some cases. See the
    documentation for details.
    
    Returns a tuple `(attr, is_get_descriptor)`. is_get_descripter means that
    the attribute is a descriptor that has a `__get__` attribute.
",function,"('(obj, attr, default=<object object at 0x000000000520FC30>)',)",attr,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.getattr_static,evaluate.compiled.access,getattr_static,"Python Library Documentation: function getattr_static in module jedi.evaluate.compiled.getattr_static

getattr_static(obj, attr, default=<object object at 0x000000000520FC30>)
    Retrieve attributes without triggering dynamic lookup via the
    descriptor protocol,  __getattr__ or __getattribute__.
    
    Note: this function may not be able to retrieve all attributes
    that getattr can fetch (like dynamically created attributes)
    and may find attributes that getattr can't (like descriptors
    that raise AttributeError). It can also return descriptor objects
    instead of instance members in some cases. See the
    documentation for details.
    
    Returns a tuple `(attr, is_get_descriptor)`. is_get_descripter means that
    the attribute is a descriptor that has a `__get__` attribute.
",function,"('(obj, attr, default=<object object at 0x000000000520FC30>)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.load_module,evaluate.compiled.access,load_module,"Python Library Documentation: function load_module in module jedi.evaluate.compiled.access

load_module(evaluator, path=None, name=None, sys_path=None)
",function,"('(evaluator, path=None, name=None, sys_path=None)',)",sys_path,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.load_module,evaluate.compiled.access,load_module,"Python Library Documentation: function load_module in module jedi.evaluate.compiled.access

load_module(evaluator, path=None, name=None, sys_path=None)
",function,"('(evaluator, path=None, name=None, sys_path=None)',)",name,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.load_module,evaluate.compiled.access,load_module,"Python Library Documentation: function load_module in module jedi.evaluate.compiled.access

load_module(evaluator, path=None, name=None, sys_path=None)
",function,"('(evaluator, path=None, name=None, sys_path=None)',)",path,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.load_module,evaluate.compiled.access,load_module,"Python Library Documentation: function load_module in module jedi.evaluate.compiled.access

load_module(evaluator, path=None, name=None, sys_path=None)
",function,"('(evaluator, path=None, name=None, sys_path=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.namedtuple,evaluate.compiled.access,namedtuple,"Python Library Documentation: function namedtuple in module collections

namedtuple(typename, field_names, *, verbose=False, rename=False, module=None)
    Returns a new subclass of tuple with named fields.
    
    >>> Point = namedtuple('Point', ['x', 'y'])
    >>> Point.__doc__                   # docstring for the new class
    'Point(x, y)'
    >>> p = Point(11, y=22)             # instantiate with positional args or keywords
    >>> p[0] + p[1]                     # indexable like a plain tuple
    33
    >>> x, y = p                        # unpack like a regular tuple
    >>> x, y
    (11, 22)
    >>> p.x + p.y                       # fields also accessible by name
    33
    >>> d = p._asdict()                 # convert to a dictionary
    >>> d['x']
    11
    >>> Point(**d)                      # convert from a dictionary
    Point(x=11, y=22)
    >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields
    Point(x=100, y=22)
",function,"('(typename, field_names, *, verbose=False, rename=False, module=None)',)",typename,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.namedtuple,evaluate.compiled.access,namedtuple,"Python Library Documentation: function namedtuple in module collections

namedtuple(typename, field_names, *, verbose=False, rename=False, module=None)
    Returns a new subclass of tuple with named fields.
    
    >>> Point = namedtuple('Point', ['x', 'y'])
    >>> Point.__doc__                   # docstring for the new class
    'Point(x, y)'
    >>> p = Point(11, y=22)             # instantiate with positional args or keywords
    >>> p[0] + p[1]                     # indexable like a plain tuple
    33
    >>> x, y = p                        # unpack like a regular tuple
    >>> x, y
    (11, 22)
    >>> p.x + p.y                       # fields also accessible by name
    33
    >>> d = p._asdict()                 # convert to a dictionary
    >>> d['x']
    11
    >>> Point(**d)                      # convert from a dictionary
    Point(x=11, y=22)
    >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields
    Point(x=100, y=22)
",function,"('(typename, field_names, *, verbose=False, rename=False, module=None)',)",field_names,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.safe_getattr,evaluate.compiled.access,safe_getattr,"Python Library Documentation: function safe_getattr in module jedi.evaluate.compiled.access

safe_getattr(obj, name, default=<object object at 0x000000000520FC40>)
",function,"('(obj, name, default=<object object at 0x000000000520FC40>)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.safe_getattr,evaluate.compiled.access,safe_getattr,"Python Library Documentation: function safe_getattr in module jedi.evaluate.compiled.access

safe_getattr(obj, name, default=<object object at 0x000000000520FC40>)
",function,"('(obj, name, default=<object object at 0x000000000520FC40>)',)",default,<object object at 0x000000000520FC40>,object,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.safe_getattr,evaluate.compiled.access,safe_getattr,"Python Library Documentation: function safe_getattr in module jedi.evaluate.compiled.access

safe_getattr(obj, name, default=<object object at 0x000000000520FC40>)
",function,"('(obj, name, default=<object object at 0x000000000520FC40>)',)",name,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.access.unicode,evaluate.compiled.access,str,"Python Library Documentation: class str in module builtins

class str(object)
 |  str(object='') -> str
 |  str(bytes_or_buffer[, encoding[, errors]]) -> str
 |  
 |  Create a new string object from the given object. If encoding or
 |  errors is specified, then the object must expose a data buffer
 |  that will be decoded using the given encoding and error handler.
 |  Otherwise, returns the result of object.__str__() (if defined)
 |  or repr(object).
 |  encoding defaults to sys.getdefaultencoding().
 |  errors defaults to 'strict'.
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __format__(...)
 |      S.__format__(format_spec) -> str
 |      
 |      Return a formatted version of S as described by format_spec.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __getnewargs__(...)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  __sizeof__(...)
 |      S.__sizeof__() -> size of S in memory, in bytes
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  capitalize(...)
 |      S.capitalize() -> str
 |      
 |      Return a capitalized version of S, i.e. make the first character
 |      have upper case and the rest lower case.
 |  
 |  casefold(...)
 |      S.casefold() -> str
 |      
 |      Return a version of S suitable for caseless comparisons.
 |  
 |  center(...)
 |      S.center(width[, fillchar]) -> str
 |      
 |      Return S centered in a string of length width. Padding is
 |      done using the specified fill character (default is a space)
 |  
 |  count(...)
 |      S.count(sub[, start[, end]]) -> int
 |      
 |      Return the number of non-overlapping occurrences of substring sub in
 |      string S[start:end].  Optional arguments start and end are
 |      interpreted as in slice notation.
 |  
 |  encode(...)
 |      S.encode(encoding='utf-8', errors='strict') -> bytes
 |      
 |      Encode S using the codec registered for encoding. Default encoding
 |      is 'utf-8'. errors may be given to set a different error
 |      handling scheme. Default is 'strict' meaning that encoding errors raise
 |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
 |      'xmlcharrefreplace' as well as any other name registered with
 |      codecs.register_error that can handle UnicodeEncodeErrors.
 |  
 |  endswith(...)
 |      S.endswith(suffix[, start[, end]]) -> bool
 |      
 |      Return True if S ends with the specified suffix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      suffix can also be a tuple of strings to try.
 |  
 |  expandtabs(...)
 |      S.expandtabs(tabsize=8) -> str
 |      
 |      Return a copy of S where all tab characters are expanded using spaces.
 |      If tabsize is not given, a tab size of 8 characters is assumed.
 |  
 |  find(...)
 |      S.find(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  format(...)
 |      S.format(*args, **kwargs) -> str
 |      
 |      Return a formatted version of S, using substitutions from args and kwargs.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  format_map(...)
 |      S.format_map(mapping) -> str
 |      
 |      Return a formatted version of S, using substitutions from mapping.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  index(...)
 |      S.index(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found, 
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  isalnum(...)
 |      S.isalnum() -> bool
 |      
 |      Return True if all characters in S are alphanumeric
 |      and there is at least one character in S, False otherwise.
 |  
 |  isalpha(...)
 |      S.isalpha() -> bool
 |      
 |      Return True if all characters in S are alphabetic
 |      and there is at least one character in S, False otherwise.
 |  
 |  isdecimal(...)
 |      S.isdecimal() -> bool
 |      
 |      Return True if there are only decimal characters in S,
 |      False otherwise.
 |  
 |  isdigit(...)
 |      S.isdigit() -> bool
 |      
 |      Return True if all characters in S are digits
 |      and there is at least one character in S, False otherwise.
 |  
 |  isidentifier(...)
 |      S.isidentifier() -> bool
 |      
 |      Return True if S is a valid identifier according
 |      to the language definition.
 |      
 |      Use keyword.iskeyword() to test for reserved identifiers
 |      such as ""def"" and ""class"".
 |  
 |  islower(...)
 |      S.islower() -> bool
 |      
 |      Return True if all cased characters in S are lowercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  isnumeric(...)
 |      S.isnumeric() -> bool
 |      
 |      Return True if there are only numeric characters in S,
 |      False otherwise.
 |  
 |  isprintable(...)
 |      S.isprintable() -> bool
 |      
 |      Return True if all characters in S are considered
 |      printable in repr() or S is empty, False otherwise.
 |  
 |  isspace(...)
 |      S.isspace() -> bool
 |      
 |      Return True if all characters in S are whitespace
 |      and there is at least one character in S, False otherwise.
 |  
 |  istitle(...)
 |      S.istitle() -> bool
 |      
 |      Return True if S is a titlecased string and there is at least one
 |      character in S, i.e. upper- and titlecase characters may only
 |      follow uncased characters and lowercase characters only cased ones.
 |      Return False otherwise.
 |  
 |  isupper(...)
 |      S.isupper() -> bool
 |      
 |      Return True if all cased characters in S are uppercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  join(...)
 |      S.join(iterable) -> str
 |      
 |      Return a string which is the concatenation of the strings in the
 |      iterable.  The separator between elements is S.
 |  
 |  ljust(...)
 |      S.ljust(width[, fillchar]) -> str
 |      
 |      Return S left-justified in a Unicode string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  lower(...)
 |      S.lower() -> str
 |      
 |      Return a copy of the string S converted to lowercase.
 |  
 |  lstrip(...)
 |      S.lstrip([chars]) -> str
 |      
 |      Return a copy of the string S with leading whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  partition(...)
 |      S.partition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, and return the part before it,
 |      the separator itself, and the part after it.  If the separator is not
 |      found, return S and two empty strings.
 |  
 |  replace(...)
 |      S.replace(old, new[, count]) -> str
 |      
 |      Return a copy of S with all occurrences of substring
 |      old replaced by new.  If the optional argument count is
 |      given, only the first count occurrences are replaced.
 |  
 |  rfind(...)
 |      S.rfind(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  rindex(...)
 |      S.rindex(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  rjust(...)
 |      S.rjust(width[, fillchar]) -> str
 |      
 |      Return S right-justified in a string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  rpartition(...)
 |      S.rpartition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, starting at the end of S, and return
 |      the part before it, the separator itself, and the part after it.  If the
 |      separator is not found, return two empty strings and S.
 |  
 |  rsplit(...)
 |      S.rsplit(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string, starting at the end of the string and
 |      working to the front.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified, any whitespace string
 |      is a separator.
 |  
 |  rstrip(...)
 |      S.rstrip([chars]) -> str
 |      
 |      Return a copy of the string S with trailing whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  split(...)
 |      S.split(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified or is None, any
 |      whitespace string is a separator and empty strings are
 |      removed from the result.
 |  
 |  splitlines(...)
 |      S.splitlines([keepends]) -> list of strings
 |      
 |      Return a list of the lines in S, breaking at line boundaries.
 |      Line breaks are not included in the resulting list unless keepends
 |      is given and true.
 |  
 |  startswith(...)
 |      S.startswith(prefix[, start[, end]]) -> bool
 |      
 |      Return True if S starts with the specified prefix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      prefix can also be a tuple of strings to try.
 |  
 |  strip(...)
 |      S.strip([chars]) -> str
 |      
 |      Return a copy of the string S with leading and trailing
 |      whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  swapcase(...)
 |      S.swapcase() -> str
 |      
 |      Return a copy of S with uppercase characters converted to lowercase
 |      and vice versa.
 |  
 |  title(...)
 |      S.title() -> str
 |      
 |      Return a titlecased version of S, i.e. words start with title case
 |      characters, all remaining cased characters have lower case.
 |  
 |  translate(...)
 |      S.translate(table) -> str
 |      
 |      Return a copy of the string S in which each character has been mapped
 |      through the given translation table. The table must implement
 |      lookup/indexing via __getitem__, for instance a dictionary or list,
 |      mapping Unicode ordinals to Unicode ordinals, strings, or None. If
 |      this operation raises LookupError, the character is left untouched.
 |      Characters mapped to None are deleted.
 |  
 |  upper(...)
 |      S.upper() -> str
 |      
 |      Return a copy of S converted to uppercase.
 |  
 |  zfill(...)
 |      S.zfill(width) -> str
 |      
 |      Pad a numeric string S with zeros on the left, to fill a field
 |      of the specified width. The string S is never truncated.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  maketrans(x, y=None, z=None, /)
 |      Return a translation table usable for str.translate().
 |      
 |      If there is only one argument, it must be a dictionary mapping Unicode
 |      ordinals (integers) or characters to Unicode ordinals, strings or None.
 |      Character keys will be then converted to ordinals.
 |      If there are two arguments, they must be strings of equal length, and
 |      in the resulting dictionary, each character in x will be mapped to the
 |      character at the same position in y. If there is a third argument, it
 |      must be a string, whose characters will be mapped to None in the result.
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.builtin_from_name,evaluate.compiled,builtin_from_name,"Python Library Documentation: function builtin_from_name in module jedi.evaluate.compiled

builtin_from_name(evaluator, string)
",function,"('(evaluator, string)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.builtin_from_name,evaluate.compiled,builtin_from_name,"Python Library Documentation: function builtin_from_name in module jedi.evaluate.compiled

builtin_from_name(evaluator, string)
",function,"('(evaluator, string)',)",string,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.AbstractFilter,evaluate.compiled.context,AbstractFilter,"Python Library Documentation: class AbstractFilter in module jedi.evaluate.filters

class AbstractFilter(builtins.object)
 |  Methods defined here:
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.AbstractNameDefinition,evaluate.compiled.context,AbstractNameDefinition,"Python Library Documentation: class AbstractNameDefinition in module jedi.evaluate.filters

class AbstractNameDefinition(builtins.object)
 |  Methods defined here:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  infer(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.CheckAttribute,evaluate.compiled.context,CheckAttribute,"Python Library Documentation: class CheckAttribute in module jedi.evaluate.compiled.context

class CheckAttribute(builtins.object)
 |  Raises an AttributeError if the attribute X isn't available.
 |  
 |  Methods defined here:
 |  
 |  __get__(self, instance, owner)
 |  
 |  __init__(self, func)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, func)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.CheckAttribute,evaluate.compiled.context,CheckAttribute,"Python Library Documentation: class CheckAttribute in module jedi.evaluate.compiled.context

class CheckAttribute(builtins.object)
 |  Raises an AttributeError if the attribute X isn't available.
 |  
 |  Methods defined here:
 |  
 |  __get__(self, instance, owner)
 |  
 |  __init__(self, func)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, func)',)",func,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.CompiledContextName,evaluate.compiled.context,CompiledContextName,"Python Library Documentation: class CompiledContextName in module jedi.evaluate.compiled.context

class CompiledContextName(jedi.evaluate.filters.ContextNameMixin, jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      CompiledContextName
 |      jedi.evaluate.filters.ContextNameMixin
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.ContextNameMixin:
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.ContextNameMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, context, name)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.CompiledContextName,evaluate.compiled.context,CompiledContextName,"Python Library Documentation: class CompiledContextName in module jedi.evaluate.compiled.context

class CompiledContextName(jedi.evaluate.filters.ContextNameMixin, jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      CompiledContextName
 |      jedi.evaluate.filters.ContextNameMixin
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.ContextNameMixin:
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.ContextNameMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, context, name)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.CompiledContextName,evaluate.compiled.context,CompiledContextName,"Python Library Documentation: class CompiledContextName in module jedi.evaluate.compiled.context

class CompiledContextName(jedi.evaluate.filters.ContextNameMixin, jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      CompiledContextName
 |      jedi.evaluate.filters.ContextNameMixin
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.ContextNameMixin:
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.ContextNameMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, context, name)',)",name,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.CompiledName,evaluate.compiled.context,CompiledName,"Python Library Documentation: class CompiledName in module jedi.evaluate.compiled.context

class CompiledName(jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      CompiledName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  infer = wrapper(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, evaluator, parent_context, name)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.CompiledName,evaluate.compiled.context,CompiledName,"Python Library Documentation: class CompiledName in module jedi.evaluate.compiled.context

class CompiledName(jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      CompiledName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  infer = wrapper(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, evaluator, parent_context, name)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.CompiledName,evaluate.compiled.context,CompiledName,"Python Library Documentation: class CompiledName in module jedi.evaluate.compiled.context

class CompiledName(jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      CompiledName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  infer = wrapper(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, evaluator, parent_context, name)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.CompiledName,evaluate.compiled.context,CompiledName,"Python Library Documentation: class CompiledName in module jedi.evaluate.compiled.context

class CompiledName(jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      CompiledName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  infer = wrapper(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, evaluator, parent_context, name)',)",name,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.CompiledObject,evaluate.compiled.context,CompiledObject,"Python Library Documentation: class CompiledObject in module jedi.evaluate.compiled.context

class CompiledObject(jedi.evaluate.base_context.Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      CompiledObject
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, access_handle, parent_context=None, faked_class=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  dict_values(self)
 |  
 |  execute_operation(self, other, operator)
 |  
 |  get_filters(self, search_global=False, is_instance=False, until_position=None, origin_scope=None)
 |  
 |  get_param_names(self)
 |  
 |  get_safe_value(self, default=<object object at 0x000000000520FC40>)
 |  
 |  is_class(self)
 |  
 |  is_super_class(self, exception)
 |  
 |  negate(self)
 |  
 |  py__bases__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__call__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__class__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__file__(self)
 |  
 |  py__getitem__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__iter__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__mro__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__name__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, access_handle, parent_context=None, faked_class=None)',)",parent_context,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.CompiledObject,evaluate.compiled.context,CompiledObject,"Python Library Documentation: class CompiledObject in module jedi.evaluate.compiled.context

class CompiledObject(jedi.evaluate.base_context.Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      CompiledObject
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, access_handle, parent_context=None, faked_class=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  dict_values(self)
 |  
 |  execute_operation(self, other, operator)
 |  
 |  get_filters(self, search_global=False, is_instance=False, until_position=None, origin_scope=None)
 |  
 |  get_param_names(self)
 |  
 |  get_safe_value(self, default=<object object at 0x000000000520FC40>)
 |  
 |  is_class(self)
 |  
 |  is_super_class(self, exception)
 |  
 |  negate(self)
 |  
 |  py__bases__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__call__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__class__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__file__(self)
 |  
 |  py__getitem__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__iter__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__mro__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__name__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, access_handle, parent_context=None, faked_class=None)',)",faked_class,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.CompiledObject,evaluate.compiled.context,CompiledObject,"Python Library Documentation: class CompiledObject in module jedi.evaluate.compiled.context

class CompiledObject(jedi.evaluate.base_context.Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      CompiledObject
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, access_handle, parent_context=None, faked_class=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  dict_values(self)
 |  
 |  execute_operation(self, other, operator)
 |  
 |  get_filters(self, search_global=False, is_instance=False, until_position=None, origin_scope=None)
 |  
 |  get_param_names(self)
 |  
 |  get_safe_value(self, default=<object object at 0x000000000520FC40>)
 |  
 |  is_class(self)
 |  
 |  is_super_class(self, exception)
 |  
 |  negate(self)
 |  
 |  py__bases__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__call__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__class__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__file__(self)
 |  
 |  py__getitem__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__iter__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__mro__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__name__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, access_handle, parent_context=None, faked_class=None)',)",access_handle,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.CompiledObject,evaluate.compiled.context,CompiledObject,"Python Library Documentation: class CompiledObject in module jedi.evaluate.compiled.context

class CompiledObject(jedi.evaluate.base_context.Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      CompiledObject
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, access_handle, parent_context=None, faked_class=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  dict_values(self)
 |  
 |  execute_operation(self, other, operator)
 |  
 |  get_filters(self, search_global=False, is_instance=False, until_position=None, origin_scope=None)
 |  
 |  get_param_names(self)
 |  
 |  get_safe_value(self, default=<object object at 0x000000000520FC40>)
 |  
 |  is_class(self)
 |  
 |  is_super_class(self, exception)
 |  
 |  negate(self)
 |  
 |  py__bases__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__call__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__class__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__file__(self)
 |  
 |  py__getitem__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__iter__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__mro__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__name__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, access_handle, parent_context=None, faked_class=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.CompiledObject,evaluate.compiled.context,CompiledObject,"Python Library Documentation: class CompiledObject in module jedi.evaluate.compiled.context

class CompiledObject(jedi.evaluate.base_context.Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      CompiledObject
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, access_handle, parent_context=None, faked_class=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  dict_values(self)
 |  
 |  execute_operation(self, other, operator)
 |  
 |  get_filters(self, search_global=False, is_instance=False, until_position=None, origin_scope=None)
 |  
 |  get_param_names(self)
 |  
 |  get_safe_value(self, default=<object object at 0x000000000520FC40>)
 |  
 |  is_class(self)
 |  
 |  is_super_class(self, exception)
 |  
 |  negate(self)
 |  
 |  py__bases__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__call__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__class__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__file__(self)
 |  
 |  py__getitem__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__iter__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__mro__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__name__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, access_handle, parent_context=None, faked_class=None)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.CompiledObjectFilter,evaluate.compiled.context,CompiledObjectFilter,"Python Library Documentation: class CompiledObjectFilter in module jedi.evaluate.compiled.context

class CompiledObjectFilter(jedi.evaluate.filters.AbstractFilter)
 |  Method resolution order:
 |      CompiledObjectFilter
 |      jedi.evaluate.filters.AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, compiled_object, is_instance=False)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.compiled.context.CompiledName'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, compiled_object, is_instance=False)',)",compiled_object,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.CompiledObjectFilter,evaluate.compiled.context,CompiledObjectFilter,"Python Library Documentation: class CompiledObjectFilter in module jedi.evaluate.compiled.context

class CompiledObjectFilter(jedi.evaluate.filters.AbstractFilter)
 |  Method resolution order:
 |      CompiledObjectFilter
 |      jedi.evaluate.filters.AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, compiled_object, is_instance=False)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.compiled.context.CompiledName'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, compiled_object, is_instance=False)',)",is_instance,False,bool,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.CompiledObjectFilter,evaluate.compiled.context,CompiledObjectFilter,"Python Library Documentation: class CompiledObjectFilter in module jedi.evaluate.compiled.context

class CompiledObjectFilter(jedi.evaluate.filters.AbstractFilter)
 |  Method resolution order:
 |      CompiledObjectFilter
 |      jedi.evaluate.filters.AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, compiled_object, is_instance=False)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.compiled.context.CompiledName'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, compiled_object, is_instance=False)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.CompiledObjectFilter,evaluate.compiled.context,CompiledObjectFilter,"Python Library Documentation: class CompiledObjectFilter in module jedi.evaluate.compiled.context

class CompiledObjectFilter(jedi.evaluate.filters.AbstractFilter)
 |  Method resolution order:
 |      CompiledObjectFilter
 |      jedi.evaluate.filters.AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, compiled_object, is_instance=False)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.compiled.context.CompiledName'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, compiled_object, is_instance=False)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.Context,evaluate.compiled.context,Context,"Python Library Documentation: class Context in module jedi.evaluate.base_context

class Context(jedi.common.context.BaseContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.Context,evaluate.compiled.context,Context,"Python Library Documentation: class Context in module jedi.evaluate.base_context

class Context(jedi.common.context.BaseContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.Context,evaluate.compiled.context,Context,"Python Library Documentation: class Context in module jedi.evaluate.base_context

class Context(jedi.common.context.BaseContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",parent_context,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.ContextNameMixin,evaluate.compiled.context,ContextNameMixin,"Python Library Documentation: class ContextNameMixin in module jedi.evaluate.filters

class ContextNameMixin(builtins.object)
 |  Methods defined here:
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  api_type
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.ContextSet,evaluate.compiled.context,ContextSet,"Python Library Documentation: class ContextSet in module jedi.evaluate.base_context

class ContextSet(jedi.common.context.BaseContextSet)
 |  Method resolution order:
 |      ContextSet
 |      jedi.common.context.BaseContextSet
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContextSet:
 |  
 |  __bool__(self)
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, *args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self)
 |  
 |  __len__(self)
 |  
 |  __or__(self, other)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  filter(self, filter_func)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from jedi.common.context.BaseContextSet:
 |  
 |  from_iterable(iterable) from builtins.type
 |  
 |  from_set(set_) from builtins.type
 |  
 |  from_sets(sets) from builtins.type
 |      Used to work with an iterable of set.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContextSet:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, *args)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.ContextSet.from_iterable,evaluate.compiled.context.ContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.ContextSet.from_iterable,evaluate.compiled.context.ContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",iterable,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.ContextSet.from_set,evaluate.compiled.context.ContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.ContextSet.from_set,evaluate.compiled.context.ContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",set_,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.ContextSet.from_sets,evaluate.compiled.context.ContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.ContextSet.from_sets,evaluate.compiled.context.ContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",sets,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.EmptyCompiledName,evaluate.compiled.context,EmptyCompiledName,"Python Library Documentation: class EmptyCompiledName in module jedi.evaluate.compiled.context

class EmptyCompiledName(jedi.evaluate.filters.AbstractNameDefinition)
 |  Accessing some names will raise an exception. To avoid not having any
 |  completions, just give Jedi the option to return this object. It infers to
 |  nothing.
 |  
 |  Method resolution order:
 |      EmptyCompiledName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, evaluator, name)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.EmptyCompiledName,evaluate.compiled.context,EmptyCompiledName,"Python Library Documentation: class EmptyCompiledName in module jedi.evaluate.compiled.context

class EmptyCompiledName(jedi.evaluate.filters.AbstractNameDefinition)
 |  Accessing some names will raise an exception. To avoid not having any
 |  completions, just give Jedi the option to return this object. It infers to
 |  nothing.
 |  
 |  Method resolution order:
 |      EmptyCompiledName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, evaluator, name)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.EmptyCompiledName,evaluate.compiled.context,EmptyCompiledName,"Python Library Documentation: class EmptyCompiledName in module jedi.evaluate.compiled.context

class EmptyCompiledName(jedi.evaluate.filters.AbstractNameDefinition)
 |  Accessing some names will raise an exception. To avoid not having any
 |  completions, just give Jedi the option to return this object. It infers to
 |  nothing.
 |  
 |  Method resolution order:
 |      EmptyCompiledName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, evaluator, name)',)",name,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.LazyKnownContext,evaluate.compiled.context,LazyKnownContext,"Python Library Documentation: class LazyKnownContext in module jedi.evaluate.lazy_context

class LazyKnownContext(AbstractLazyContext)
 |  data is a context.
 |  
 |  Method resolution order:
 |      LazyKnownContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __init__(self, data)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, data)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.LazyKnownContext,evaluate.compiled.context,LazyKnownContext,"Python Library Documentation: class LazyKnownContext in module jedi.evaluate.lazy_context

class LazyKnownContext(AbstractLazyContext)
 |  data is a context.
 |  
 |  Method resolution order:
 |      LazyKnownContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __init__(self, data)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, data)',)",data,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.Parameter,evaluate.compiled.context,Parameter,"Python Library Documentation: class Parameter in module inspect

class Parameter(builtins.object)
 |  Represents a parameter in a function signature.
 |  
 |  Has the following public attributes:
 |  
 |  * name : str
 |      The name of the parameter as a string.
 |  * default : object
 |      The default value for the parameter if specified.  If the
 |      parameter has no default value, this attribute is set to
 |      `Parameter.empty`.
 |  * annotation
 |      The annotation for the parameter if specified.  If the
 |      parameter has no annotation, this attribute is set to
 |      `Parameter.empty`.
 |  * kind : str
 |      Describes how argument values are bound to the parameter.
 |      Possible values: `Parameter.POSITIONAL_ONLY`,
 |      `Parameter.POSITIONAL_OR_KEYWORD`, `Parameter.VAR_POSITIONAL`,
 |      `Parameter.KEYWORD_ONLY`, `Parameter.VAR_KEYWORD`.
 |  
 |  Methods defined here:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __init__(self, name, kind, *, default, annotation)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __reduce__(self)
 |      helper for pickle
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __setstate__(self, state)
 |  
 |  __str__(self)
 |      Return str(self).
 |  
 |  replace(self, *, name=<class 'inspect._void'>, kind=<class 'inspect._void'>, annotation=<class 'inspect._void'>, default=<class 'inspect._void'>)
 |      Creates a customized copy of the Parameter.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  annotation
 |  
 |  default
 |  
 |  kind
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  KEYWORD_ONLY = <_ParameterKind.KEYWORD_ONLY: 3>
 |  
 |  POSITIONAL_ONLY = <_ParameterKind.POSITIONAL_ONLY: 0>
 |  
 |  POSITIONAL_OR_KEYWORD = <_ParameterKind.POSITIONAL_OR_KEYWORD: 1>
 |  
 |  VAR_KEYWORD = <_ParameterKind.VAR_KEYWORD: 4>
 |  
 |  VAR_POSITIONAL = <_ParameterKind.VAR_POSITIONAL: 2>
 |  
 |  empty = <class 'inspect._empty'>
 |      Marker object for Signature.empty and Parameter.empty.
",class,"('(self, name, kind, *, default, annotation)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.Parameter,evaluate.compiled.context,Parameter,"Python Library Documentation: class Parameter in module inspect

class Parameter(builtins.object)
 |  Represents a parameter in a function signature.
 |  
 |  Has the following public attributes:
 |  
 |  * name : str
 |      The name of the parameter as a string.
 |  * default : object
 |      The default value for the parameter if specified.  If the
 |      parameter has no default value, this attribute is set to
 |      `Parameter.empty`.
 |  * annotation
 |      The annotation for the parameter if specified.  If the
 |      parameter has no annotation, this attribute is set to
 |      `Parameter.empty`.
 |  * kind : str
 |      Describes how argument values are bound to the parameter.
 |      Possible values: `Parameter.POSITIONAL_ONLY`,
 |      `Parameter.POSITIONAL_OR_KEYWORD`, `Parameter.VAR_POSITIONAL`,
 |      `Parameter.KEYWORD_ONLY`, `Parameter.VAR_KEYWORD`.
 |  
 |  Methods defined here:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __init__(self, name, kind, *, default, annotation)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __reduce__(self)
 |      helper for pickle
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __setstate__(self, state)
 |  
 |  __str__(self)
 |      Return str(self).
 |  
 |  replace(self, *, name=<class 'inspect._void'>, kind=<class 'inspect._void'>, annotation=<class 'inspect._void'>, default=<class 'inspect._void'>)
 |      Creates a customized copy of the Parameter.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  annotation
 |  
 |  default
 |  
 |  kind
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  KEYWORD_ONLY = <_ParameterKind.KEYWORD_ONLY: 3>
 |  
 |  POSITIONAL_ONLY = <_ParameterKind.POSITIONAL_ONLY: 0>
 |  
 |  POSITIONAL_OR_KEYWORD = <_ParameterKind.POSITIONAL_OR_KEYWORD: 1>
 |  
 |  VAR_KEYWORD = <_ParameterKind.VAR_KEYWORD: 4>
 |  
 |  VAR_POSITIONAL = <_ParameterKind.VAR_POSITIONAL: 2>
 |  
 |  empty = <class 'inspect._empty'>
 |      Marker object for Signature.empty and Parameter.empty.
",class,"('(self, name, kind, *, default, annotation)',)",name,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.Parameter,evaluate.compiled.context,Parameter,"Python Library Documentation: class Parameter in module inspect

class Parameter(builtins.object)
 |  Represents a parameter in a function signature.
 |  
 |  Has the following public attributes:
 |  
 |  * name : str
 |      The name of the parameter as a string.
 |  * default : object
 |      The default value for the parameter if specified.  If the
 |      parameter has no default value, this attribute is set to
 |      `Parameter.empty`.
 |  * annotation
 |      The annotation for the parameter if specified.  If the
 |      parameter has no annotation, this attribute is set to
 |      `Parameter.empty`.
 |  * kind : str
 |      Describes how argument values are bound to the parameter.
 |      Possible values: `Parameter.POSITIONAL_ONLY`,
 |      `Parameter.POSITIONAL_OR_KEYWORD`, `Parameter.VAR_POSITIONAL`,
 |      `Parameter.KEYWORD_ONLY`, `Parameter.VAR_KEYWORD`.
 |  
 |  Methods defined here:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __init__(self, name, kind, *, default, annotation)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __reduce__(self)
 |      helper for pickle
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __setstate__(self, state)
 |  
 |  __str__(self)
 |      Return str(self).
 |  
 |  replace(self, *, name=<class 'inspect._void'>, kind=<class 'inspect._void'>, annotation=<class 'inspect._void'>, default=<class 'inspect._void'>)
 |      Creates a customized copy of the Parameter.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  annotation
 |  
 |  default
 |  
 |  kind
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  KEYWORD_ONLY = <_ParameterKind.KEYWORD_ONLY: 3>
 |  
 |  POSITIONAL_ONLY = <_ParameterKind.POSITIONAL_ONLY: 0>
 |  
 |  POSITIONAL_OR_KEYWORD = <_ParameterKind.POSITIONAL_OR_KEYWORD: 1>
 |  
 |  VAR_KEYWORD = <_ParameterKind.VAR_KEYWORD: 4>
 |  
 |  VAR_POSITIONAL = <_ParameterKind.VAR_POSITIONAL: 2>
 |  
 |  empty = <class 'inspect._empty'>
 |      Marker object for Signature.empty and Parameter.empty.
",class,"('(self, name, kind, *, default, annotation)',)",kind,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.SignatureParamName,evaluate.compiled.context,SignatureParamName,"Python Library Documentation: class SignatureParamName in module jedi.evaluate.compiled.context

class SignatureParamName(jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      SignatureParamName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, compiled_obj, signature_param)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_kind(self)
 |  
 |  infer(self)
 |  
 |  is_keyword_param(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'param'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  tree_name = None
",class,"('(self, compiled_obj, signature_param)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.SignatureParamName,evaluate.compiled.context,SignatureParamName,"Python Library Documentation: class SignatureParamName in module jedi.evaluate.compiled.context

class SignatureParamName(jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      SignatureParamName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, compiled_obj, signature_param)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_kind(self)
 |  
 |  infer(self)
 |  
 |  is_keyword_param(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'param'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  tree_name = None
",class,"('(self, compiled_obj, signature_param)',)",signature_param,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.SignatureParamName,evaluate.compiled.context,SignatureParamName,"Python Library Documentation: class SignatureParamName in module jedi.evaluate.compiled.context

class SignatureParamName(jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      SignatureParamName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, compiled_obj, signature_param)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_kind(self)
 |  
 |  infer(self)
 |  
 |  is_keyword_param(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'param'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  tree_name = None
",class,"('(self, compiled_obj, signature_param)',)",compiled_obj,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.UnresolvableParamName,evaluate.compiled.context,UnresolvableParamName,"Python Library Documentation: class UnresolvableParamName in module jedi.evaluate.compiled.context

class UnresolvableParamName(jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      UnresolvableParamName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, compiled_obj, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_kind(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'param'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, compiled_obj, name)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.UnresolvableParamName,evaluate.compiled.context,UnresolvableParamName,"Python Library Documentation: class UnresolvableParamName in module jedi.evaluate.compiled.context

class UnresolvableParamName(jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      UnresolvableParamName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, compiled_obj, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_kind(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'param'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, compiled_obj, name)',)",compiled_obj,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.UnresolvableParamName,evaluate.compiled.context,UnresolvableParamName,"Python Library Documentation: class UnresolvableParamName in module jedi.evaluate.compiled.context

class UnresolvableParamName(jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      UnresolvableParamName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, compiled_obj, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_kind(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'param'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, compiled_obj, name)',)",name,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context._normalize_create_args,evaluate.compiled.context,_normalize_create_args,"Python Library Documentation: function _normalize_create_args in module jedi.evaluate.compiled.context

_normalize_create_args(func)
    The cache doesn't care about keyword vs. normal args.
",function,"('(func)',)",func,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context._parse_function_doc,evaluate.compiled.context,_parse_function_doc,"Python Library Documentation: function _parse_function_doc in module jedi.evaluate.compiled.context

_parse_function_doc(doc)
    Takes a function and returns the params and return value as a tuple.
    This is nothing more than a docstring parser.
    
    TODO docstrings like utime(path, (atime, mtime)) and a(b [, b]) -> None
    TODO docstrings like 'tuple of integers'
",function,"('(doc)',)",doc,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.create_cached_compiled_object,evaluate.compiled.context,wrapper,"Python Library Documentation: function wrapper in module jedi.evaluate.compiled.context

wrapper(evaluator, obj, parent_context=None, faked=None)
",function,"('(evaluator, obj, parent_context=None, faked=None)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.create_cached_compiled_object,evaluate.compiled.context,wrapper,"Python Library Documentation: function wrapper in module jedi.evaluate.compiled.context

wrapper(evaluator, obj, parent_context=None, faked=None)
",function,"('(evaluator, obj, parent_context=None, faked=None)',)",parent_context,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.create_cached_compiled_object,evaluate.compiled.context,wrapper,"Python Library Documentation: function wrapper in module jedi.evaluate.compiled.context

wrapper(evaluator, obj, parent_context=None, faked=None)
",function,"('(evaluator, obj, parent_context=None, faked=None)',)",faked,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.create_cached_compiled_object,evaluate.compiled.context,wrapper,"Python Library Documentation: function wrapper in module jedi.evaluate.compiled.context

wrapper(evaluator, obj, parent_context=None, faked=None)
",function,"('(evaluator, obj, parent_context=None, faked=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.create_from_access_path,evaluate.compiled.context,create_from_access_path,"Python Library Documentation: function create_from_access_path in module jedi.evaluate.compiled.context

create_from_access_path(evaluator, access_path)
",function,"('(evaluator, access_path)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.create_from_access_path,evaluate.compiled.context,create_from_access_path,"Python Library Documentation: function create_from_access_path in module jedi.evaluate.compiled.context

create_from_access_path(evaluator, access_path)
",function,"('(evaluator, access_path)',)",access_path,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.create_from_name,evaluate.compiled.context,create_from_name,"Python Library Documentation: function create_from_name in module jedi.evaluate.compiled.context

create_from_name(evaluator, compiled_object, name)
",function,"('(evaluator, compiled_object, name)',)",compiled_object,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.create_from_name,evaluate.compiled.context,create_from_name,"Python Library Documentation: function create_from_name in module jedi.evaluate.compiled.context

create_from_name(evaluator, compiled_object, name)
",function,"('(evaluator, compiled_object, name)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.create_from_name,evaluate.compiled.context,create_from_name,"Python Library Documentation: function create_from_name in module jedi.evaluate.compiled.context

create_from_name(evaluator, compiled_object, name)
",function,"('(evaluator, compiled_object, name)',)",name,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.evaluator_function_cache,evaluate.compiled.context,evaluator_function_cache,"Python Library Documentation: function evaluator_function_cache in module jedi.evaluate.cache

evaluator_function_cache(default=<object object at 0x000000000520FC20>)
",function,"('(default=<object object at 0x000000000520FC20>)',)",default,<object object at 0x000000000520FC20>,object,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.force_unicode,evaluate.compiled.context,force_unicode,"Python Library Documentation: function force_unicode in module jedi._compatibility

force_unicode(obj)
",function,"('(obj)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.memoize_method,evaluate.compiled.context,memoize_method,"Python Library Documentation: function memoize_method in module jedi.cache

memoize_method(method)
    A normal memoize function.
",function,"('(method)',)",method,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.partial,evaluate.compiled.context,partial,"Python Library Documentation: class partial in module functools

class partial(builtins.object)
 |  partial(func, *args, **keywords) - new function with partial application
 |  of the given arguments and keywords.
 |  
 |  Methods defined here:
 |  
 |  __call__(self, /, *args, **kwargs)
 |      Call self as a function.
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |  
 |  args
 |      tuple of arguments to future partial calls
 |  
 |  func
 |      function object to use in future partial calls
 |  
 |  keywords
 |      dictionary of keyword arguments to future partial calls
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.context.underscore_memoization,evaluate.compiled.context,underscore_memoization,"Python Library Documentation: function underscore_memoization in module jedi.cache

underscore_memoization(func)
    Decorator for methods::
    
        class A(object):
            def x(self):
                if self._x:
                    self._x = 10
                return self._x
    
    Becomes::
    
        class A(object):
            @underscore_memoization
            def x(self):
                return 10
    
    A now has an attribute ``_x`` written by this decorator.
",function,"('(func)',)",func,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.create_from_access_path,evaluate.compiled,create_from_access_path,"Python Library Documentation: function create_from_access_path in module jedi.evaluate.compiled.context

create_from_access_path(evaluator, access_path)
",function,"('(evaluator, access_path)',)",access_path,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.create_from_access_path,evaluate.compiled,create_from_access_path,"Python Library Documentation: function create_from_access_path in module jedi.evaluate.compiled.context

create_from_access_path(evaluator, access_path)
",function,"('(evaluator, access_path)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.create_from_name,evaluate.compiled,create_from_name,"Python Library Documentation: function create_from_name in module jedi.evaluate.compiled.context

create_from_name(evaluator, compiled_object, name)
",function,"('(evaluator, compiled_object, name)',)",name,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.create_from_name,evaluate.compiled,create_from_name,"Python Library Documentation: function create_from_name in module jedi.evaluate.compiled.context

create_from_name(evaluator, compiled_object, name)
",function,"('(evaluator, compiled_object, name)',)",compiled_object,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.create_from_name,evaluate.compiled,create_from_name,"Python Library Documentation: function create_from_name in module jedi.evaluate.compiled.context

create_from_name(evaluator, compiled_object, name)
",function,"('(evaluator, compiled_object, name)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.create_simple_object,evaluate.compiled,create_simple_object,"Python Library Documentation: function create_simple_object in module jedi.evaluate.compiled

create_simple_object(evaluator, obj)
    Only allows creations of objects that are easily picklable across Python
    versions.
",function,"('(evaluator, obj)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.create_simple_object,evaluate.compiled,create_simple_object,"Python Library Documentation: function create_simple_object in module jedi.evaluate.compiled

create_simple_object(evaluator, obj)
    Only allows creations of objects that are easily picklable across Python
    versions.
",function,"('(evaluator, obj)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.fake.FakeDoesNotExist,evaluate.compiled.fake,FakeDoesNotExist,"Python Library Documentation: class FakeDoesNotExist in module jedi.evaluate.compiled.fake

class FakeDoesNotExist(builtins.Exception)
 |  Common base class for all non-exit exceptions.
 |  
 |  Method resolution order:
 |      FakeDoesNotExist
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Data descriptors defined here:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.fake._load_faked_module,evaluate.compiled.fake,_load_faked_module,"Python Library Documentation: function _load_faked_module in module jedi.evaluate.compiled.fake

_load_faked_module(evaluator, module_name)
",function,"('(evaluator, module_name)',)",module_name,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.fake._load_faked_module,evaluate.compiled.fake,_load_faked_module,"Python Library Documentation: function _load_faked_module in module jedi.evaluate.compiled.fake

_load_faked_module(evaluator, module_name)
",function,"('(evaluator, module_name)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.fake._search_scope,evaluate.compiled.fake,_search_scope,"Python Library Documentation: function _search_scope in module jedi.evaluate.compiled.fake

_search_scope(scope, obj_name)
",function,"('(scope, obj_name)',)",obj_name,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.fake._search_scope,evaluate.compiled.fake,_search_scope,"Python Library Documentation: function _search_scope in module jedi.evaluate.compiled.fake

_search_scope(scope, obj_name)
",function,"('(scope, obj_name)',)",scope,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.fake.chain,evaluate.compiled.fake,chain,"Python Library Documentation: class chain in module itertools

class chain(builtins.object)
 |  chain(*iterables) --> chain object
 |  
 |  Return a chain object whose .__next__() method returns elements from the
 |  first iterable until it is exhausted, then elements from the next
 |  iterable, until all of the iterables are exhausted.
 |  
 |  Methods defined here:
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __next__(self, /)
 |      Implement next(self).
 |  
 |  __reduce__(...)
 |      Return state information for pickling.
 |  
 |  __setstate__(...)
 |      Set state information for unpickling.
 |  
 |  from_iterable(...) from builtins.type
 |      chain.from_iterable(iterable) --> chain object
 |      
 |      Alternate chain() constructor taking a single iterable argument
 |      that evaluates lazily.
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.fake.get_faked_module,evaluate.compiled.fake,get_faked_module,"Python Library Documentation: function get_faked_module in module jedi.evaluate.compiled.fake

get_faked_module(evaluator, string_name)
",function,"('(evaluator, string_name)',)",string_name,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.fake.get_faked_module,evaluate.compiled.fake,get_faked_module,"Python Library Documentation: function get_faked_module in module jedi.evaluate.compiled.fake

get_faked_module(evaluator, string_name)
",function,"('(evaluator, string_name)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.fake.get_faked_with_parent_context,evaluate.compiled.fake,get_faked_with_parent_context,"Python Library Documentation: function get_faked_with_parent_context in module jedi.evaluate.compiled.fake

get_faked_with_parent_context(parent_context, name)
",function,"('(parent_context, name)',)",name,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.fake.get_faked_with_parent_context,evaluate.compiled.fake,get_faked_with_parent_context,"Python Library Documentation: function get_faked_with_parent_context in module jedi.evaluate.compiled.fake

get_faked_with_parent_context(parent_context, name)
",function,"('(parent_context, name)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.fake.unicode,evaluate.compiled.fake,str,"Python Library Documentation: class str in module builtins

class str(object)
 |  str(object='') -> str
 |  str(bytes_or_buffer[, encoding[, errors]]) -> str
 |  
 |  Create a new string object from the given object. If encoding or
 |  errors is specified, then the object must expose a data buffer
 |  that will be decoded using the given encoding and error handler.
 |  Otherwise, returns the result of object.__str__() (if defined)
 |  or repr(object).
 |  encoding defaults to sys.getdefaultencoding().
 |  errors defaults to 'strict'.
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __format__(...)
 |      S.__format__(format_spec) -> str
 |      
 |      Return a formatted version of S as described by format_spec.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __getnewargs__(...)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  __sizeof__(...)
 |      S.__sizeof__() -> size of S in memory, in bytes
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  capitalize(...)
 |      S.capitalize() -> str
 |      
 |      Return a capitalized version of S, i.e. make the first character
 |      have upper case and the rest lower case.
 |  
 |  casefold(...)
 |      S.casefold() -> str
 |      
 |      Return a version of S suitable for caseless comparisons.
 |  
 |  center(...)
 |      S.center(width[, fillchar]) -> str
 |      
 |      Return S centered in a string of length width. Padding is
 |      done using the specified fill character (default is a space)
 |  
 |  count(...)
 |      S.count(sub[, start[, end]]) -> int
 |      
 |      Return the number of non-overlapping occurrences of substring sub in
 |      string S[start:end].  Optional arguments start and end are
 |      interpreted as in slice notation.
 |  
 |  encode(...)
 |      S.encode(encoding='utf-8', errors='strict') -> bytes
 |      
 |      Encode S using the codec registered for encoding. Default encoding
 |      is 'utf-8'. errors may be given to set a different error
 |      handling scheme. Default is 'strict' meaning that encoding errors raise
 |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
 |      'xmlcharrefreplace' as well as any other name registered with
 |      codecs.register_error that can handle UnicodeEncodeErrors.
 |  
 |  endswith(...)
 |      S.endswith(suffix[, start[, end]]) -> bool
 |      
 |      Return True if S ends with the specified suffix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      suffix can also be a tuple of strings to try.
 |  
 |  expandtabs(...)
 |      S.expandtabs(tabsize=8) -> str
 |      
 |      Return a copy of S where all tab characters are expanded using spaces.
 |      If tabsize is not given, a tab size of 8 characters is assumed.
 |  
 |  find(...)
 |      S.find(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  format(...)
 |      S.format(*args, **kwargs) -> str
 |      
 |      Return a formatted version of S, using substitutions from args and kwargs.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  format_map(...)
 |      S.format_map(mapping) -> str
 |      
 |      Return a formatted version of S, using substitutions from mapping.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  index(...)
 |      S.index(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found, 
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  isalnum(...)
 |      S.isalnum() -> bool
 |      
 |      Return True if all characters in S are alphanumeric
 |      and there is at least one character in S, False otherwise.
 |  
 |  isalpha(...)
 |      S.isalpha() -> bool
 |      
 |      Return True if all characters in S are alphabetic
 |      and there is at least one character in S, False otherwise.
 |  
 |  isdecimal(...)
 |      S.isdecimal() -> bool
 |      
 |      Return True if there are only decimal characters in S,
 |      False otherwise.
 |  
 |  isdigit(...)
 |      S.isdigit() -> bool
 |      
 |      Return True if all characters in S are digits
 |      and there is at least one character in S, False otherwise.
 |  
 |  isidentifier(...)
 |      S.isidentifier() -> bool
 |      
 |      Return True if S is a valid identifier according
 |      to the language definition.
 |      
 |      Use keyword.iskeyword() to test for reserved identifiers
 |      such as ""def"" and ""class"".
 |  
 |  islower(...)
 |      S.islower() -> bool
 |      
 |      Return True if all cased characters in S are lowercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  isnumeric(...)
 |      S.isnumeric() -> bool
 |      
 |      Return True if there are only numeric characters in S,
 |      False otherwise.
 |  
 |  isprintable(...)
 |      S.isprintable() -> bool
 |      
 |      Return True if all characters in S are considered
 |      printable in repr() or S is empty, False otherwise.
 |  
 |  isspace(...)
 |      S.isspace() -> bool
 |      
 |      Return True if all characters in S are whitespace
 |      and there is at least one character in S, False otherwise.
 |  
 |  istitle(...)
 |      S.istitle() -> bool
 |      
 |      Return True if S is a titlecased string and there is at least one
 |      character in S, i.e. upper- and titlecase characters may only
 |      follow uncased characters and lowercase characters only cased ones.
 |      Return False otherwise.
 |  
 |  isupper(...)
 |      S.isupper() -> bool
 |      
 |      Return True if all cased characters in S are uppercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  join(...)
 |      S.join(iterable) -> str
 |      
 |      Return a string which is the concatenation of the strings in the
 |      iterable.  The separator between elements is S.
 |  
 |  ljust(...)
 |      S.ljust(width[, fillchar]) -> str
 |      
 |      Return S left-justified in a Unicode string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  lower(...)
 |      S.lower() -> str
 |      
 |      Return a copy of the string S converted to lowercase.
 |  
 |  lstrip(...)
 |      S.lstrip([chars]) -> str
 |      
 |      Return a copy of the string S with leading whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  partition(...)
 |      S.partition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, and return the part before it,
 |      the separator itself, and the part after it.  If the separator is not
 |      found, return S and two empty strings.
 |  
 |  replace(...)
 |      S.replace(old, new[, count]) -> str
 |      
 |      Return a copy of S with all occurrences of substring
 |      old replaced by new.  If the optional argument count is
 |      given, only the first count occurrences are replaced.
 |  
 |  rfind(...)
 |      S.rfind(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  rindex(...)
 |      S.rindex(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  rjust(...)
 |      S.rjust(width[, fillchar]) -> str
 |      
 |      Return S right-justified in a string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  rpartition(...)
 |      S.rpartition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, starting at the end of S, and return
 |      the part before it, the separator itself, and the part after it.  If the
 |      separator is not found, return two empty strings and S.
 |  
 |  rsplit(...)
 |      S.rsplit(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string, starting at the end of the string and
 |      working to the front.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified, any whitespace string
 |      is a separator.
 |  
 |  rstrip(...)
 |      S.rstrip([chars]) -> str
 |      
 |      Return a copy of the string S with trailing whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  split(...)
 |      S.split(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified or is None, any
 |      whitespace string is a separator and empty strings are
 |      removed from the result.
 |  
 |  splitlines(...)
 |      S.splitlines([keepends]) -> list of strings
 |      
 |      Return a list of the lines in S, breaking at line boundaries.
 |      Line breaks are not included in the resulting list unless keepends
 |      is given and true.
 |  
 |  startswith(...)
 |      S.startswith(prefix[, start[, end]]) -> bool
 |      
 |      Return True if S starts with the specified prefix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      prefix can also be a tuple of strings to try.
 |  
 |  strip(...)
 |      S.strip([chars]) -> str
 |      
 |      Return a copy of the string S with leading and trailing
 |      whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  swapcase(...)
 |      S.swapcase() -> str
 |      
 |      Return a copy of S with uppercase characters converted to lowercase
 |      and vice versa.
 |  
 |  title(...)
 |      S.title() -> str
 |      
 |      Return a titlecased version of S, i.e. words start with title case
 |      characters, all remaining cased characters have lower case.
 |  
 |  translate(...)
 |      S.translate(table) -> str
 |      
 |      Return a copy of the string S in which each character has been mapped
 |      through the given translation table. The table must implement
 |      lookup/indexing via __getitem__, for instance a dictionary or list,
 |      mapping Unicode ordinals to Unicode ordinals, strings, or None. If
 |      this operation raises LookupError, the character is left untouched.
 |      Characters mapped to None are deleted.
 |  
 |  upper(...)
 |      S.upper() -> str
 |      
 |      Return a copy of S converted to uppercase.
 |  
 |  zfill(...)
 |      S.zfill(width) -> str
 |      
 |      Pad a numeric string S with zeros on the left, to fill a field
 |      of the specified width. The string S is never truncated.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  maketrans(x, y=None, z=None, /)
 |      Return a translation table usable for str.translate().
 |      
 |      If there is only one argument, it must be a dictionary mapping Unicode
 |      ordinals (integers) or characters to Unicode ordinals, strings or None.
 |      Character keys will be then converted to ordinals.
 |      If there are two arguments, they must be strings of equal length, and
 |      in the resulting dictionary, each character in x will be mapped to the
 |      character at the same position in y. If there is a third argument, it
 |      must be a string, whose characters will be mapped to None in the result.
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.get_special_object,evaluate.compiled,get_special_object,"Python Library Documentation: function get_special_object in module jedi.evaluate.compiled

get_special_object(evaluator, identifier)
",function,"('(evaluator, identifier)',)",identifier,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.get_special_object,evaluate.compiled,get_special_object,"Python Library Documentation: function get_special_object in module jedi.evaluate.compiled

get_special_object(evaluator, identifier)
",function,"('(evaluator, identifier)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.get_string_context_set,evaluate.compiled,get_string_context_set,"Python Library Documentation: function get_string_context_set in module jedi.evaluate.compiled

get_string_context_set(evaluator)
",function,"('(evaluator)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.getattr_static._check_class,evaluate.compiled.getattr_static,_check_class,"Python Library Documentation: function _check_class in module jedi.evaluate.compiled.getattr_static

_check_class(klass, attr)
",function,"('(klass, attr)',)",attr,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.getattr_static._check_class,evaluate.compiled.getattr_static,_check_class,"Python Library Documentation: function _check_class in module jedi.evaluate.compiled.getattr_static

_check_class(klass, attr)
",function,"('(klass, attr)',)",klass,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.getattr_static._check_instance,evaluate.compiled.getattr_static,_check_instance,"Python Library Documentation: function _check_instance in module jedi.evaluate.compiled.getattr_static

_check_instance(obj, attr)
",function,"('(obj, attr)',)",attr,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.getattr_static._check_instance,evaluate.compiled.getattr_static,_check_instance,"Python Library Documentation: function _check_instance in module jedi.evaluate.compiled.getattr_static

_check_instance(obj, attr)
",function,"('(obj, attr)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.getattr_static._get_type,evaluate.compiled.getattr_static,type,"Python Library Documentation: class type in module builtins

class type(object)
 |  type(object_or_name, bases, dict)
 |  type(object) -> the object's type
 |  type(name, bases, dict) -> a new type
 |  
 |  Methods defined here:
 |  
 |  __call__(self, /, *args, **kwargs)
 |      Call self as a function.
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __dir__(...)
 |      __dir__() -> list
 |      specialized __dir__ implementation for types
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __instancecheck__(...)
 |      __instancecheck__() -> bool
 |      check if an object is an instance
 |  
 |  __new__(*args, **kwargs)
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __prepare__(...)
 |      __prepare__() -> dict
 |      used to create the namespace for the class statement
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __sizeof__(...)
 |      __sizeof__() -> int
 |      return memory consumption of the type object
 |  
 |  __subclasscheck__(...)
 |      __subclasscheck__() -> bool
 |      check if a class is a subclass
 |  
 |  __subclasses__(...)
 |      __subclasses__() -> list of immediate subclasses
 |  
 |  mro(...)
 |      mro() -> list
 |      return a type's method resolution order
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __abstractmethods__
 |  
 |  __dict__
 |  
 |  __text_signature__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __base__ = <class 'object'>
 |      The most base type
 |  
 |  __bases__ = (<class 'object'>,)
 |  
 |  __basicsize__ = 864
 |  
 |  __dictoffset__ = 264
 |  
 |  __flags__ = -2146675712
 |  
 |  __itemsize__ = 40
 |  
 |  __mro__ = (<class 'type'>, <class 'object'>)
 |  
 |  __weakrefoffset__ = 368
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.getattr_static._is_type,evaluate.compiled.getattr_static,_is_type,"Python Library Documentation: function _is_type in module jedi.evaluate.compiled.getattr_static

_is_type(obj)
",function,"('(obj)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.getattr_static._safe_hasattr,evaluate.compiled.getattr_static,_safe_hasattr,"Python Library Documentation: function _safe_hasattr in module jedi.evaluate.compiled.getattr_static

_safe_hasattr(obj, name)
",function,"('(obj, name)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.getattr_static._safe_hasattr,evaluate.compiled.getattr_static,_safe_hasattr,"Python Library Documentation: function _safe_hasattr in module jedi.evaluate.compiled.getattr_static

_safe_hasattr(obj, name)
",function,"('(obj, name)',)",name,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.getattr_static._safe_is_data_descriptor,evaluate.compiled.getattr_static,_safe_is_data_descriptor,"Python Library Documentation: function _safe_is_data_descriptor in module jedi.evaluate.compiled.getattr_static

_safe_is_data_descriptor(obj)
",function,"('(obj)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.getattr_static._shadowed_dict,evaluate.compiled.getattr_static,_shadowed_dict_newstyle,"Python Library Documentation: function _shadowed_dict_newstyle in module jedi.evaluate.compiled.getattr_static

_shadowed_dict_newstyle(klass)
",function,"('(klass)',)",klass,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.getattr_static._shadowed_dict_newstyle,evaluate.compiled.getattr_static,_shadowed_dict_newstyle,"Python Library Documentation: function _shadowed_dict_newstyle in module jedi.evaluate.compiled.getattr_static

_shadowed_dict_newstyle(klass)
",function,"('(klass)',)",klass,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.getattr_static._static_getmro,evaluate.compiled.getattr_static,_static_getmro_newstyle,"Python Library Documentation: function _static_getmro_newstyle in module jedi.evaluate.compiled.getattr_static

_static_getmro_newstyle(klass)
",function,"('(klass)',)",klass,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.getattr_static._static_getmro_newstyle,evaluate.compiled.getattr_static,_static_getmro_newstyle,"Python Library Documentation: function _static_getmro_newstyle in module jedi.evaluate.compiled.getattr_static

_static_getmro_newstyle(klass)
",function,"('(klass)',)",klass,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.getattr_static.getattr_static,evaluate.compiled.getattr_static,getattr_static,"Python Library Documentation: function getattr_static in module jedi.evaluate.compiled.getattr_static

getattr_static(obj, attr, default=<object object at 0x000000000520FC30>)
    Retrieve attributes without triggering dynamic lookup via the
    descriptor protocol,  __getattr__ or __getattribute__.
    
    Note: this function may not be able to retrieve all attributes
    that getattr can fetch (like dynamically created attributes)
    and may find attributes that getattr can't (like descriptors
    that raise AttributeError). It can also return descriptor objects
    instead of instance members in some cases. See the
    documentation for details.
    
    Returns a tuple `(attr, is_get_descriptor)`. is_get_descripter means that
    the attribute is a descriptor that has a `__get__` attribute.
",function,"('(obj, attr, default=<object object at 0x000000000520FC30>)',)",default,<object object at 0x000000000520FC30>,object,arg_info
jedi,0.12.0,jedi.evaluate.compiled.getattr_static.getattr_static,evaluate.compiled.getattr_static,getattr_static,"Python Library Documentation: function getattr_static in module jedi.evaluate.compiled.getattr_static

getattr_static(obj, attr, default=<object object at 0x000000000520FC30>)
    Retrieve attributes without triggering dynamic lookup via the
    descriptor protocol,  __getattr__ or __getattribute__.
    
    Note: this function may not be able to retrieve all attributes
    that getattr can fetch (like dynamically created attributes)
    and may find attributes that getattr can't (like descriptors
    that raise AttributeError). It can also return descriptor objects
    instead of instance members in some cases. See the
    documentation for details.
    
    Returns a tuple `(attr, is_get_descriptor)`. is_get_descripter means that
    the attribute is a descriptor that has a `__get__` attribute.
",function,"('(obj, attr, default=<object object at 0x000000000520FC30>)',)",attr,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.getattr_static.getattr_static,evaluate.compiled.getattr_static,getattr_static,"Python Library Documentation: function getattr_static in module jedi.evaluate.compiled.getattr_static

getattr_static(obj, attr, default=<object object at 0x000000000520FC30>)
    Retrieve attributes without triggering dynamic lookup via the
    descriptor protocol,  __getattr__ or __getattribute__.
    
    Note: this function may not be able to retrieve all attributes
    that getattr can fetch (like dynamically created attributes)
    and may find attributes that getattr can't (like descriptors
    that raise AttributeError). It can also return descriptor objects
    instead of instance members in some cases. See the
    documentation for details.
    
    Returns a tuple `(attr, is_get_descriptor)`. is_get_descripter means that
    the attribute is a descriptor that has a `__get__` attribute.
",function,"('(obj, attr, default=<object object at 0x000000000520FC30>)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.load_module,evaluate.compiled,load_module,"Python Library Documentation: function load_module in module jedi.evaluate.compiled

load_module(evaluator, **kwargs)
",function,"('(evaluator, **kwargs)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.Context,evaluate.compiled.mixed,Context,"Python Library Documentation: class Context in module jedi.evaluate.base_context

class Context(jedi.common.context.BaseContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.Context,evaluate.compiled.mixed,Context,"Python Library Documentation: class Context in module jedi.evaluate.base_context

class Context(jedi.common.context.BaseContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.Context,evaluate.compiled.mixed,Context,"Python Library Documentation: class Context in module jedi.evaluate.base_context

class Context(jedi.common.context.BaseContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",parent_context,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.ContextSet,evaluate.compiled.mixed,ContextSet,"Python Library Documentation: class ContextSet in module jedi.evaluate.base_context

class ContextSet(jedi.common.context.BaseContextSet)
 |  Method resolution order:
 |      ContextSet
 |      jedi.common.context.BaseContextSet
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContextSet:
 |  
 |  __bool__(self)
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, *args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self)
 |  
 |  __len__(self)
 |  
 |  __or__(self, other)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  filter(self, filter_func)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from jedi.common.context.BaseContextSet:
 |  
 |  from_iterable(iterable) from builtins.type
 |  
 |  from_set(set_) from builtins.type
 |  
 |  from_sets(sets) from builtins.type
 |      Used to work with an iterable of set.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContextSet:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, *args)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.ContextSet.from_iterable,evaluate.compiled.mixed.ContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",iterable,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.ContextSet.from_iterable,evaluate.compiled.mixed.ContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.ContextSet.from_set,evaluate.compiled.mixed.ContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.ContextSet.from_set,evaluate.compiled.mixed.ContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",set_,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.ContextSet.from_sets,evaluate.compiled.mixed.ContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",sets,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.ContextSet.from_sets,evaluate.compiled.mixed.ContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.MixedName,evaluate.compiled.mixed,MixedName,"Python Library Documentation: class MixedName in module jedi.evaluate.compiled.mixed

class MixedName(jedi.evaluate.compiled.context.CompiledName)
 |  The ``CompiledName._compiled_object`` is our MixedObject.
 |  
 |  Method resolution order:
 |      MixedName
 |      jedi.evaluate.compiled.context.CompiledName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer = wrapper(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  start_pos
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.compiled.context.CompiledName:
 |  
 |  __init__(self, evaluator, parent_context, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, evaluator, parent_context, name)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.MixedName,evaluate.compiled.mixed,MixedName,"Python Library Documentation: class MixedName in module jedi.evaluate.compiled.mixed

class MixedName(jedi.evaluate.compiled.context.CompiledName)
 |  The ``CompiledName._compiled_object`` is our MixedObject.
 |  
 |  Method resolution order:
 |      MixedName
 |      jedi.evaluate.compiled.context.CompiledName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer = wrapper(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  start_pos
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.compiled.context.CompiledName:
 |  
 |  __init__(self, evaluator, parent_context, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, evaluator, parent_context, name)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.MixedName,evaluate.compiled.mixed,MixedName,"Python Library Documentation: class MixedName in module jedi.evaluate.compiled.mixed

class MixedName(jedi.evaluate.compiled.context.CompiledName)
 |  The ``CompiledName._compiled_object`` is our MixedObject.
 |  
 |  Method resolution order:
 |      MixedName
 |      jedi.evaluate.compiled.context.CompiledName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer = wrapper(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  start_pos
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.compiled.context.CompiledName:
 |  
 |  __init__(self, evaluator, parent_context, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, evaluator, parent_context, name)',)",name,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.MixedName,evaluate.compiled.mixed,MixedName,"Python Library Documentation: class MixedName in module jedi.evaluate.compiled.mixed

class MixedName(jedi.evaluate.compiled.context.CompiledName)
 |  The ``CompiledName._compiled_object`` is our MixedObject.
 |  
 |  Method resolution order:
 |      MixedName
 |      jedi.evaluate.compiled.context.CompiledName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer = wrapper(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  start_pos
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.compiled.context.CompiledName:
 |  
 |  __init__(self, evaluator, parent_context, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, evaluator, parent_context, name)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.MixedObject,evaluate.compiled.mixed,MixedObject,"Python Library Documentation: class MixedObject in module jedi.evaluate.compiled.mixed

class MixedObject(builtins.object)
 |  A ``MixedObject`` is used in two ways:
 |  
 |  1. It uses the default logic of ``parser.python.tree`` objects,
 |  2. except for getattr calls. The names dicts are generated in a fashion
 |     like ``CompiledObject``.
 |  
 |  This combined logic makes it possible to provide more powerful REPL
 |  completion. It allows side effects that are not noticable with the default
 |  parser structure to still be completeable.
 |  
 |  The biggest difference from CompiledObject to MixedObject is that we are
 |  generally dealing with Python code and not with C code. This will generate
 |  fewer special cases, because we in Python you don't have the same freedoms
 |  to modify the runtime.
 |  
 |  Methods defined here:
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, evaluator, parent_context, compiled_object, tree_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, *args, **kwargs)
 |  
 |  py__getattribute__(*args, **kwargs)
 |      # We have to overwrite everything that has to do with trailers, name
 |      # lookups and filters to make it possible to route name lookups towards
 |      # compiled objects and the rest towards tree node contexts.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, compiled_object, tree_context)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.MixedObject,evaluate.compiled.mixed,MixedObject,"Python Library Documentation: class MixedObject in module jedi.evaluate.compiled.mixed

class MixedObject(builtins.object)
 |  A ``MixedObject`` is used in two ways:
 |  
 |  1. It uses the default logic of ``parser.python.tree`` objects,
 |  2. except for getattr calls. The names dicts are generated in a fashion
 |     like ``CompiledObject``.
 |  
 |  This combined logic makes it possible to provide more powerful REPL
 |  completion. It allows side effects that are not noticable with the default
 |  parser structure to still be completeable.
 |  
 |  The biggest difference from CompiledObject to MixedObject is that we are
 |  generally dealing with Python code and not with C code. This will generate
 |  fewer special cases, because we in Python you don't have the same freedoms
 |  to modify the runtime.
 |  
 |  Methods defined here:
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, evaluator, parent_context, compiled_object, tree_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, *args, **kwargs)
 |  
 |  py__getattribute__(*args, **kwargs)
 |      # We have to overwrite everything that has to do with trailers, name
 |      # lookups and filters to make it possible to route name lookups towards
 |      # compiled objects and the rest towards tree node contexts.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, compiled_object, tree_context)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.MixedObject,evaluate.compiled.mixed,MixedObject,"Python Library Documentation: class MixedObject in module jedi.evaluate.compiled.mixed

class MixedObject(builtins.object)
 |  A ``MixedObject`` is used in two ways:
 |  
 |  1. It uses the default logic of ``parser.python.tree`` objects,
 |  2. except for getattr calls. The names dicts are generated in a fashion
 |     like ``CompiledObject``.
 |  
 |  This combined logic makes it possible to provide more powerful REPL
 |  completion. It allows side effects that are not noticable with the default
 |  parser structure to still be completeable.
 |  
 |  The biggest difference from CompiledObject to MixedObject is that we are
 |  generally dealing with Python code and not with C code. This will generate
 |  fewer special cases, because we in Python you don't have the same freedoms
 |  to modify the runtime.
 |  
 |  Methods defined here:
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, evaluator, parent_context, compiled_object, tree_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, *args, **kwargs)
 |  
 |  py__getattribute__(*args, **kwargs)
 |      # We have to overwrite everything that has to do with trailers, name
 |      # lookups and filters to make it possible to route name lookups towards
 |      # compiled objects and the rest towards tree node contexts.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, compiled_object, tree_context)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.MixedObject,evaluate.compiled.mixed,MixedObject,"Python Library Documentation: class MixedObject in module jedi.evaluate.compiled.mixed

class MixedObject(builtins.object)
 |  A ``MixedObject`` is used in two ways:
 |  
 |  1. It uses the default logic of ``parser.python.tree`` objects,
 |  2. except for getattr calls. The names dicts are generated in a fashion
 |     like ``CompiledObject``.
 |  
 |  This combined logic makes it possible to provide more powerful REPL
 |  completion. It allows side effects that are not noticable with the default
 |  parser structure to still be completeable.
 |  
 |  The biggest difference from CompiledObject to MixedObject is that we are
 |  generally dealing with Python code and not with C code. This will generate
 |  fewer special cases, because we in Python you don't have the same freedoms
 |  to modify the runtime.
 |  
 |  Methods defined here:
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, evaluator, parent_context, compiled_object, tree_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, *args, **kwargs)
 |  
 |  py__getattribute__(*args, **kwargs)
 |      # We have to overwrite everything that has to do with trailers, name
 |      # lookups and filters to make it possible to route name lookups towards
 |      # compiled objects and the rest towards tree node contexts.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, compiled_object, tree_context)',)",compiled_object,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.MixedObject,evaluate.compiled.mixed,MixedObject,"Python Library Documentation: class MixedObject in module jedi.evaluate.compiled.mixed

class MixedObject(builtins.object)
 |  A ``MixedObject`` is used in two ways:
 |  
 |  1. It uses the default logic of ``parser.python.tree`` objects,
 |  2. except for getattr calls. The names dicts are generated in a fashion
 |     like ``CompiledObject``.
 |  
 |  This combined logic makes it possible to provide more powerful REPL
 |  completion. It allows side effects that are not noticable with the default
 |  parser structure to still be completeable.
 |  
 |  The biggest difference from CompiledObject to MixedObject is that we are
 |  generally dealing with Python code and not with C code. This will generate
 |  fewer special cases, because we in Python you don't have the same freedoms
 |  to modify the runtime.
 |  
 |  Methods defined here:
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, evaluator, parent_context, compiled_object, tree_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, *args, **kwargs)
 |  
 |  py__getattribute__(*args, **kwargs)
 |      # We have to overwrite everything that has to do with trailers, name
 |      # lookups and filters to make it possible to route name lookups towards
 |      # compiled objects and the rest towards tree node contexts.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, compiled_object, tree_context)',)",tree_context,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.MixedObjectFilter,evaluate.compiled.mixed,MixedObjectFilter,"Python Library Documentation: class MixedObjectFilter in module jedi.evaluate.compiled.mixed

class MixedObjectFilter(jedi.evaluate.compiled.context.CompiledObjectFilter)
 |  Method resolution order:
 |      MixedObjectFilter
 |      jedi.evaluate.compiled.context.CompiledObjectFilter
 |      jedi.evaluate.filters.AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, mixed_object, is_instance=False)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.compiled.mixed.MixedName'>
 |      The ``CompiledName._compiled_object`` is our MixedObject.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.compiled.context.CompiledObjectFilter:
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, mixed_object, is_instance=False)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.MixedObjectFilter,evaluate.compiled.mixed,MixedObjectFilter,"Python Library Documentation: class MixedObjectFilter in module jedi.evaluate.compiled.mixed

class MixedObjectFilter(jedi.evaluate.compiled.context.CompiledObjectFilter)
 |  Method resolution order:
 |      MixedObjectFilter
 |      jedi.evaluate.compiled.context.CompiledObjectFilter
 |      jedi.evaluate.filters.AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, mixed_object, is_instance=False)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.compiled.mixed.MixedName'>
 |      The ``CompiledName._compiled_object`` is our MixedObject.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.compiled.context.CompiledObjectFilter:
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, mixed_object, is_instance=False)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.MixedObjectFilter,evaluate.compiled.mixed,MixedObjectFilter,"Python Library Documentation: class MixedObjectFilter in module jedi.evaluate.compiled.mixed

class MixedObjectFilter(jedi.evaluate.compiled.context.CompiledObjectFilter)
 |  Method resolution order:
 |      MixedObjectFilter
 |      jedi.evaluate.compiled.context.CompiledObjectFilter
 |      jedi.evaluate.filters.AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, mixed_object, is_instance=False)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.compiled.mixed.MixedName'>
 |      The ``CompiledName._compiled_object`` is our MixedObject.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.compiled.context.CompiledObjectFilter:
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, mixed_object, is_instance=False)',)",is_instance,False,bool,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.MixedObjectFilter,evaluate.compiled.mixed,MixedObjectFilter,"Python Library Documentation: class MixedObjectFilter in module jedi.evaluate.compiled.mixed

class MixedObjectFilter(jedi.evaluate.compiled.context.CompiledObjectFilter)
 |  Method resolution order:
 |      MixedObjectFilter
 |      jedi.evaluate.compiled.context.CompiledObjectFilter
 |      jedi.evaluate.filters.AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, mixed_object, is_instance=False)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.compiled.mixed.MixedName'>
 |      The ``CompiledName._compiled_object`` is our MixedObject.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.compiled.context.CompiledObjectFilter:
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, mixed_object, is_instance=False)',)",mixed_object,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.ModuleContext,evaluate.compiled.mixed,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",path,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.ModuleContext,evaluate.compiled.mixed,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",module_node,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.ModuleContext,evaluate.compiled.mixed,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.ModuleContext,evaluate.compiled.mixed,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",code_lines,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.ModuleContext,evaluate.compiled.mixed,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed._create,evaluate.compiled.mixed,wrapper,"Python Library Documentation: function wrapper in module jedi.evaluate.compiled.access

wrapper(evaluator, obj, parent_context=None)
",function,"('(evaluator, obj, parent_context=None)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed._create,evaluate.compiled.mixed,wrapper,"Python Library Documentation: function wrapper in module jedi.evaluate.compiled.access

wrapper(evaluator, obj, parent_context=None)
",function,"('(evaluator, obj, parent_context=None)',)",parent_context,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed._create,evaluate.compiled.mixed,wrapper,"Python Library Documentation: function wrapper in module jedi.evaluate.compiled.access

wrapper(evaluator, obj, parent_context=None)
",function,"('(evaluator, obj, parent_context=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed._find_syntax_node_name,evaluate.compiled.mixed,_find_syntax_node_name,"Python Library Documentation: function _find_syntax_node_name in module jedi.evaluate.compiled.mixed

_find_syntax_node_name(evaluator, access_handle)
",function,"('(evaluator, access_handle)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed._find_syntax_node_name,evaluate.compiled.mixed,_find_syntax_node_name,"Python Library Documentation: function _find_syntax_node_name in module jedi.evaluate.compiled.mixed

_find_syntax_node_name(evaluator, access_handle)
",function,"('(evaluator, access_handle)',)",access_handle,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed._get_object_to_check,evaluate.compiled.mixed,_get_object_to_check,"Python Library Documentation: function _get_object_to_check in module jedi.evaluate.compiled.mixed

_get_object_to_check(python_object)
    Check if inspect.getfile has a chance to find the source.
",function,"('(python_object)',)",python_object,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed._load_module,evaluate.compiled.mixed,wrapper,"Python Library Documentation: function wrapper in module jedi.evaluate.cache

wrapper(obj, *args, **kwargs)
",function,"('(obj, *args, **kwargs)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.compiled_objects_cache,evaluate.compiled.mixed,compiled_objects_cache,"Python Library Documentation: function compiled_objects_cache in module jedi.evaluate.compiled.access

compiled_objects_cache(attribute_name)
",function,"('(attribute_name)',)",attribute_name,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.create_cached_compiled_object,evaluate.compiled.mixed,wrapper,"Python Library Documentation: function wrapper in module jedi.evaluate.compiled.context

wrapper(evaluator, obj, parent_context=None, faked=None)
",function,"('(evaluator, obj, parent_context=None, faked=None)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.create_cached_compiled_object,evaluate.compiled.mixed,wrapper,"Python Library Documentation: function wrapper in module jedi.evaluate.compiled.context

wrapper(evaluator, obj, parent_context=None, faked=None)
",function,"('(evaluator, obj, parent_context=None, faked=None)',)",faked,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.create_cached_compiled_object,evaluate.compiled.mixed,wrapper,"Python Library Documentation: function wrapper in module jedi.evaluate.compiled.context

wrapper(evaluator, obj, parent_context=None, faked=None)
",function,"('(evaluator, obj, parent_context=None, faked=None)',)",parent_context,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.create_cached_compiled_object,evaluate.compiled.mixed,wrapper,"Python Library Documentation: function wrapper in module jedi.evaluate.compiled.context

wrapper(evaluator, obj, parent_context=None, faked=None)
",function,"('(evaluator, obj, parent_context=None, faked=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.evaluator_function_cache,evaluate.compiled.mixed,evaluator_function_cache,"Python Library Documentation: function evaluator_function_cache in module jedi.evaluate.cache

evaluator_function_cache(default=<object object at 0x000000000520FC20>)
",function,"('(default=<object object at 0x000000000520FC20>)',)",default,<object object at 0x000000000520FC20>,object,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.get_cached_code_lines,evaluate.compiled.mixed,get_cached_code_lines,"Python Library Documentation: function get_cached_code_lines in module jedi.parser_utils

get_cached_code_lines(grammar, path)
    Basically access the cached code lines in parso. This is not the nicest way
    to do this, but we avoid splitting all the lines again.
",function,"('(grammar, path)',)",path,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.get_cached_code_lines,evaluate.compiled.mixed,get_cached_code_lines,"Python Library Documentation: function get_cached_code_lines in module jedi.parser_utils

get_cached_code_lines(grammar, path)
    Basically access the cached code lines in parso. This is not the nicest way
    to do this, but we avoid splitting all the lines again.
",function,"('(grammar, path)',)",grammar,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.getattr_static,evaluate.compiled.mixed,getattr_static,"Python Library Documentation: function getattr_static in module jedi.evaluate.compiled.getattr_static

getattr_static(obj, attr, default=<object object at 0x000000000520FC30>)
    Retrieve attributes without triggering dynamic lookup via the
    descriptor protocol,  __getattr__ or __getattribute__.
    
    Note: this function may not be able to retrieve all attributes
    that getattr can fetch (like dynamically created attributes)
    and may find attributes that getattr can't (like descriptors
    that raise AttributeError). It can also return descriptor objects
    instead of instance members in some cases. See the
    documentation for details.
    
    Returns a tuple `(attr, is_get_descriptor)`. is_get_descripter means that
    the attribute is a descriptor that has a `__get__` attribute.
",function,"('(obj, attr, default=<object object at 0x000000000520FC30>)',)",default,<object object at 0x000000000520FC30>,object,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.getattr_static,evaluate.compiled.mixed,getattr_static,"Python Library Documentation: function getattr_static in module jedi.evaluate.compiled.getattr_static

getattr_static(obj, attr, default=<object object at 0x000000000520FC30>)
    Retrieve attributes without triggering dynamic lookup via the
    descriptor protocol,  __getattr__ or __getattribute__.
    
    Note: this function may not be able to retrieve all attributes
    that getattr can fetch (like dynamically created attributes)
    and may find attributes that getattr can't (like descriptors
    that raise AttributeError). It can also return descriptor objects
    instead of instance members in some cases. See the
    documentation for details.
    
    Returns a tuple `(attr, is_get_descriptor)`. is_get_descripter means that
    the attribute is a descriptor that has a `__get__` attribute.
",function,"('(obj, attr, default=<object object at 0x000000000520FC30>)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.getattr_static,evaluate.compiled.mixed,getattr_static,"Python Library Documentation: function getattr_static in module jedi.evaluate.compiled.getattr_static

getattr_static(obj, attr, default=<object object at 0x000000000520FC30>)
    Retrieve attributes without triggering dynamic lookup via the
    descriptor protocol,  __getattr__ or __getattribute__.
    
    Note: this function may not be able to retrieve all attributes
    that getattr can fetch (like dynamically created attributes)
    and may find attributes that getattr can't (like descriptors
    that raise AttributeError). It can also return descriptor objects
    instead of instance members in some cases. See the
    documentation for details.
    
    Returns a tuple `(attr, is_get_descriptor)`. is_get_descripter means that
    the attribute is a descriptor that has a `__get__` attribute.
",function,"('(obj, attr, default=<object object at 0x000000000520FC30>)',)",attr,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.mixed.underscore_memoization,evaluate.compiled.mixed,underscore_memoization,"Python Library Documentation: function underscore_memoization in module jedi.cache

underscore_memoization(func)
    Decorator for methods::
    
        class A(object):
            def x(self):
                if self._x:
                    self._x = 10
                return self._x
    
    Becomes::
    
        class A(object):
            @underscore_memoization
            def x(self):
                return 10
    
    A now has an attribute ``_x`` written by this decorator.
",function,"('(func)',)",func,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.AccessHandle,evaluate.compiled.subprocess,AccessHandle,"Python Library Documentation: class AccessHandle in module jedi.evaluate.compiled.subprocess

class AccessHandle(builtins.object)
 |  Methods defined here:
 |  
 |  __getattr__(self, name)
 |  
 |  __getstate__(self)
 |  
 |  __init__(self, subprocess, access, id_)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __setstate__(self, state)
 |  
 |  add_subprocess(self, subprocess)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, subprocess, access, id_)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.AccessHandle,evaluate.compiled.subprocess,AccessHandle,"Python Library Documentation: class AccessHandle in module jedi.evaluate.compiled.subprocess

class AccessHandle(builtins.object)
 |  Methods defined here:
 |  
 |  __getattr__(self, name)
 |  
 |  __getstate__(self)
 |  
 |  __init__(self, subprocess, access, id_)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __setstate__(self, state)
 |  
 |  add_subprocess(self, subprocess)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, subprocess, access, id_)',)",subprocess,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.AccessHandle,evaluate.compiled.subprocess,AccessHandle,"Python Library Documentation: class AccessHandle in module jedi.evaluate.compiled.subprocess

class AccessHandle(builtins.object)
 |  Methods defined here:
 |  
 |  __getattr__(self, name)
 |  
 |  __getstate__(self)
 |  
 |  __init__(self, subprocess, access, id_)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __setstate__(self, state)
 |  
 |  add_subprocess(self, subprocess)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, subprocess, access, id_)',)",id_,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.AccessHandle,evaluate.compiled.subprocess,AccessHandle,"Python Library Documentation: class AccessHandle in module jedi.evaluate.compiled.subprocess

class AccessHandle(builtins.object)
 |  Methods defined here:
 |  
 |  __getattr__(self, name)
 |  
 |  __getstate__(self)
 |  
 |  __init__(self, subprocess, access, id_)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __setstate__(self, state)
 |  
 |  add_subprocess(self, subprocess)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, subprocess, access, id_)',)",access,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.AccessPath,evaluate.compiled.subprocess,AccessPath,"Python Library Documentation: class AccessPath in module jedi.evaluate.compiled.access

class AccessPath(builtins.object)
 |  Methods defined here:
 |  
 |  __getstate__(self)
 |      # Writing both of these methods here looks a bit ridiculous. However with
 |      # the differences of Python 2/3 it's actually necessary, because we will
 |      # otherwise have a accesses attribute that is bytes instead of unicode.
 |  
 |  __init__(self, accesses)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __setstate__(self, value)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, accesses)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.AccessPath,evaluate.compiled.subprocess,AccessPath,"Python Library Documentation: class AccessPath in module jedi.evaluate.compiled.access

class AccessPath(builtins.object)
 |  Methods defined here:
 |  
 |  __getstate__(self)
 |      # Writing both of these methods here looks a bit ridiculous. However with
 |      # the differences of Python 2/3 it's actually necessary, because we will
 |      # otherwise have a accesses attribute that is bytes instead of unicode.
 |  
 |  __init__(self, accesses)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __setstate__(self, value)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, accesses)',)",accesses,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.DirectObjectAccess,evaluate.compiled.subprocess,DirectObjectAccess,"Python Library Documentation: class DirectObjectAccess in module jedi.evaluate.compiled.access

class DirectObjectAccess(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, obj)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  dict_values(self)
 |  
 |  dir(self)
 |  
 |  execute_operation(self, other_access_handle, operator)
 |  
 |  get_access_path_tuples(self)
 |  
 |  get_api_type(self)
 |  
 |  get_dir_infos(self)
 |      Used to return a couple of infos that are needed when accessing the sub
 |      objects of an objects
 |  
 |  get_repr lambda *args, **kwargs
 |  
 |  get_safe_value(self)
 |  
 |  get_signature_params(self)
 |  
 |  getattr(self, name, default=<object object at 0x000000000520FC40>)
 |  
 |  has_iter(self)
 |  
 |  is_allowed_getattr(self, name)
 |  
 |  is_class(self)
 |  
 |  is_super_class(self, exception)
 |  
 |  ismethoddescriptor(self)
 |  
 |  needs_type_completions(self)
 |  
 |  negate(self)
 |  
 |  py__bases__(self)
 |  
 |  py__bool__(self)
 |  
 |  py__class__(self)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__file__(self)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__list(self)
 |  
 |  py__mro__accesses(self)
 |  
 |  py__name__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, obj)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.DirectObjectAccess,evaluate.compiled.subprocess,DirectObjectAccess,"Python Library Documentation: class DirectObjectAccess in module jedi.evaluate.compiled.access

class DirectObjectAccess(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, obj)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  dict_values(self)
 |  
 |  dir(self)
 |  
 |  execute_operation(self, other_access_handle, operator)
 |  
 |  get_access_path_tuples(self)
 |  
 |  get_api_type(self)
 |  
 |  get_dir_infos(self)
 |      Used to return a couple of infos that are needed when accessing the sub
 |      objects of an objects
 |  
 |  get_repr lambda *args, **kwargs
 |  
 |  get_safe_value(self)
 |  
 |  get_signature_params(self)
 |  
 |  getattr(self, name, default=<object object at 0x000000000520FC40>)
 |  
 |  has_iter(self)
 |  
 |  is_allowed_getattr(self, name)
 |  
 |  is_class(self)
 |  
 |  is_super_class(self, exception)
 |  
 |  ismethoddescriptor(self)
 |  
 |  needs_type_completions(self)
 |  
 |  negate(self)
 |  
 |  py__bases__(self)
 |  
 |  py__bool__(self)
 |  
 |  py__class__(self)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__file__(self)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__list(self)
 |  
 |  py__mro__accesses(self)
 |  
 |  py__name__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, obj)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.DirectObjectAccess,evaluate.compiled.subprocess,DirectObjectAccess,"Python Library Documentation: class DirectObjectAccess in module jedi.evaluate.compiled.access

class DirectObjectAccess(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, obj)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  dict_values(self)
 |  
 |  dir(self)
 |  
 |  execute_operation(self, other_access_handle, operator)
 |  
 |  get_access_path_tuples(self)
 |  
 |  get_api_type(self)
 |  
 |  get_dir_infos(self)
 |      Used to return a couple of infos that are needed when accessing the sub
 |      objects of an objects
 |  
 |  get_repr lambda *args, **kwargs
 |  
 |  get_safe_value(self)
 |  
 |  get_signature_params(self)
 |  
 |  getattr(self, name, default=<object object at 0x000000000520FC40>)
 |  
 |  has_iter(self)
 |  
 |  is_allowed_getattr(self, name)
 |  
 |  is_class(self)
 |  
 |  is_super_class(self, exception)
 |  
 |  ismethoddescriptor(self)
 |  
 |  needs_type_completions(self)
 |  
 |  negate(self)
 |  
 |  py__bases__(self)
 |  
 |  py__bool__(self)
 |  
 |  py__class__(self)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__file__(self)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__list(self)
 |  
 |  py__mro__accesses(self)
 |  
 |  py__name__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, obj)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.EvaluatorSameProcess,evaluate.compiled.subprocess,EvaluatorSameProcess,"Python Library Documentation: class EvaluatorSameProcess in module jedi.evaluate.compiled.subprocess

class EvaluatorSameProcess(_EvaluatorProcess)
 |  Basically just an easy access to functions.py. It has the same API
 |  as EvaluatorSubprocess and does the same thing without using a subprocess.
 |  This is necessary for the Interpreter process.
 |  
 |  Method resolution order:
 |      EvaluatorSameProcess
 |      _EvaluatorProcess
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getattr__(self, name)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from _EvaluatorProcess:
 |  
 |  __init__(self, evaluator)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_access_handle(self, id_)
 |  
 |  get_or_create_access_handle(self, obj)
 |  
 |  set_access_handle(self, handle)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from _EvaluatorProcess:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.EvaluatorSameProcess,evaluate.compiled.subprocess,EvaluatorSameProcess,"Python Library Documentation: class EvaluatorSameProcess in module jedi.evaluate.compiled.subprocess

class EvaluatorSameProcess(_EvaluatorProcess)
 |  Basically just an easy access to functions.py. It has the same API
 |  as EvaluatorSubprocess and does the same thing without using a subprocess.
 |  This is necessary for the Interpreter process.
 |  
 |  Method resolution order:
 |      EvaluatorSameProcess
 |      _EvaluatorProcess
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getattr__(self, name)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from _EvaluatorProcess:
 |  
 |  __init__(self, evaluator)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_access_handle(self, id_)
 |  
 |  get_or_create_access_handle(self, obj)
 |  
 |  set_access_handle(self, handle)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from _EvaluatorProcess:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.EvaluatorSubprocess,evaluate.compiled.subprocess,EvaluatorSubprocess,"Python Library Documentation: class EvaluatorSubprocess in module jedi.evaluate.compiled.subprocess

class EvaluatorSubprocess(_EvaluatorProcess)
 |  Method resolution order:
 |      EvaluatorSubprocess
 |      _EvaluatorProcess
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __del__(self)
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, evaluator, compiled_subprocess)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from _EvaluatorProcess:
 |  
 |  get_access_handle(self, id_)
 |  
 |  get_or_create_access_handle(self, obj)
 |  
 |  set_access_handle(self, handle)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from _EvaluatorProcess:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, compiled_subprocess)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.EvaluatorSubprocess,evaluate.compiled.subprocess,EvaluatorSubprocess,"Python Library Documentation: class EvaluatorSubprocess in module jedi.evaluate.compiled.subprocess

class EvaluatorSubprocess(_EvaluatorProcess)
 |  Method resolution order:
 |      EvaluatorSubprocess
 |      _EvaluatorProcess
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __del__(self)
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, evaluator, compiled_subprocess)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from _EvaluatorProcess:
 |  
 |  get_access_handle(self, id_)
 |  
 |  get_or_create_access_handle(self, obj)
 |  
 |  set_access_handle(self, handle)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from _EvaluatorProcess:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, compiled_subprocess)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.EvaluatorSubprocess,evaluate.compiled.subprocess,EvaluatorSubprocess,"Python Library Documentation: class EvaluatorSubprocess in module jedi.evaluate.compiled.subprocess

class EvaluatorSubprocess(_EvaluatorProcess)
 |  Method resolution order:
 |      EvaluatorSubprocess
 |      _EvaluatorProcess
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __del__(self)
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, evaluator, compiled_subprocess)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from _EvaluatorProcess:
 |  
 |  get_access_handle(self, id_)
 |  
 |  get_or_create_access_handle(self, obj)
 |  
 |  set_access_handle(self, handle)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from _EvaluatorProcess:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, compiled_subprocess)',)",compiled_subprocess,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.GeneralizedPopen,evaluate.compiled.subprocess,GeneralizedPopen,"Python Library Documentation: class GeneralizedPopen in module jedi._compatibility

class GeneralizedPopen(subprocess.Popen)
 |  Execute a child program in a new process.
 |  
 |  For a complete description of the arguments see the Python documentation.
 |  
 |  Arguments:
 |    args: A string, or a sequence of program arguments.
 |  
 |    bufsize: supplied as the buffering argument to the open() function when
 |        creating the stdin/stdout/stderr pipe file objects
 |  
 |    executable: A replacement program to execute.
 |  
 |    stdin, stdout and stderr: These specify the executed programs' standard
 |        input, standard output and standard error file handles, respectively.
 |  
 |    preexec_fn: (POSIX only) An object to be called in the child process
 |        just before the child is executed.
 |  
 |    close_fds: Controls closing or inheriting of file descriptors.
 |  
 |    shell: If true, the command will be executed through the shell.
 |  
 |    cwd: Sets the current directory before the child is executed.
 |  
 |    env: Defines the environment variables for the new process.
 |  
 |    universal_newlines: If true, use universal line endings for file
 |        objects stdin, stdout and stderr.
 |  
 |    startupinfo and creationflags (Windows only)
 |  
 |    restore_signals (POSIX only)
 |  
 |    start_new_session (POSIX only)
 |  
 |    pass_fds (POSIX only)
 |  
 |    encoding and errors: Text mode encoding and error handling to use for
 |        file objects stdin, stdout and stderr.
 |  
 |  Attributes:
 |      stdin, stdout, stderr, pid, returncode
 |  
 |  Method resolution order:
 |      GeneralizedPopen
 |      subprocess.Popen
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, *args, **kwargs)
 |      Create new Popen instance.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from subprocess.Popen:
 |  
 |  __del__(self, _maxsize=9223372036854775807, _warn=<built-in function warn>)
 |  
 |  __enter__(self)
 |  
 |  __exit__(self, type, value, traceback)
 |  
 |  communicate(self, input=None, timeout=None)
 |      Interact with process: Send data to stdin.  Read data from
 |      stdout and stderr, until end-of-file is reached.  Wait for
 |      process to terminate.
 |      
 |      The optional ""input"" argument should be data to be sent to the
 |      child process (if self.universal_newlines is True, this should
 |      be a string; if it is False, ""input"" should be bytes), or
 |      None, if no data should be sent to the child.
 |      
 |      communicate() returns a tuple (stdout, stderr).  These will be
 |      bytes or, if self.universal_newlines was True, a string.
 |  
 |  kill = terminate(self)
 |      Terminates the process.
 |  
 |  poll(self)
 |      Check if child process has terminated. Set and return returncode
 |      attribute.
 |  
 |  send_signal(self, sig)
 |      Send a signal to the process.
 |  
 |  terminate(self)
 |      Terminates the process.
 |  
 |  wait(self, timeout=None, endtime=None)
 |      Wait for child process to terminate.  Returns returncode
 |      attribute.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from subprocess.Popen:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.InternalError,evaluate.compiled.subprocess,InternalError,"Python Library Documentation: class InternalError in module jedi.api.exceptions

class InternalError(_JediError)
 |  Common base class for all non-exit exceptions.
 |  
 |  Method resolution order:
 |      InternalError
 |      _JediError
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Data descriptors inherited from _JediError:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.Listener,evaluate.compiled.subprocess,Listener,"Python Library Documentation: class Listener in module jedi.evaluate.compiled.subprocess

class Listener(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  listen(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.SignatureParam,evaluate.compiled.subprocess,SignatureParam,"Python Library Documentation: class SignatureParam in module jedi.evaluate.compiled.access

class SignatureParam(builtins.tuple)
 |  SignatureParam(name, has_default, default, has_annotation, annotation, kind_name)
 |  
 |  Method resolution order:
 |      SignatureParam
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new SignatureParam object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new SignatureParam object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, name, has_default, default, has_annotation, annotation, kind_name)
 |      Create new instance of SignatureParam(name, has_default, default, has_annotation, annotation, kind_name)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |      Alias for field number 0
 |  
 |  has_default
 |      Alias for field number 1
 |  
 |  default
 |      Alias for field number 2
 |  
 |  has_annotation
 |      Alias for field number 3
 |  
 |  annotation
 |      Alias for field number 4
 |  
 |  kind_name
 |      Alias for field number 5
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('name', 'has_default', 'default', 'has_annotation', 'annota...
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.SignatureParam._make,evaluate.compiled.subprocess.SignatureParam,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new SignatureParam object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>)',)",iterable,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.SignatureParam._make,evaluate.compiled.subprocess.SignatureParam,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new SignatureParam object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>)',)",len,<built-in function len>,builtin_function_or_method,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.SignatureParam._make,evaluate.compiled.subprocess.SignatureParam,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new SignatureParam object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>)',)",new,<built-in method __new__ of type object at 0x000000005A0FC0D0>,builtin_function_or_method,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.SignatureParam._make,evaluate.compiled.subprocess.SignatureParam,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new SignatureParam object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x000000005A0FC0D0>, len=<built-in function len>)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess._CompiledSubprocess,evaluate.compiled.subprocess,_CompiledSubprocess,"Python Library Documentation: class _CompiledSubprocess in module jedi.evaluate.compiled.subprocess

class _CompiledSubprocess(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, executable)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  delete_evaluator(self, evaluator_id)
 |      Currently we are not deleting evalutors instantly. They only get
 |      deleted once the subprocess is used again. It would probably a better
 |      solution to move all of this into a thread. However, the memory usage
 |      of a single evaluator shouldn't be that high.
 |  
 |  get_sys_path(self)
 |  
 |  kill(self)
 |  
 |  run(self, evaluator, function, args=(), kwargs={})
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, executable)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess._CompiledSubprocess,evaluate.compiled.subprocess,_CompiledSubprocess,"Python Library Documentation: class _CompiledSubprocess in module jedi.evaluate.compiled.subprocess

class _CompiledSubprocess(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, executable)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  delete_evaluator(self, evaluator_id)
 |      Currently we are not deleting evalutors instantly. They only get
 |      deleted once the subprocess is used again. It would probably a better
 |      solution to move all of this into a thread. However, the memory usage
 |      of a single evaluator shouldn't be that high.
 |  
 |  get_sys_path(self)
 |  
 |  kill(self)
 |  
 |  run(self, evaluator, function, args=(), kwargs={})
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, executable)',)",executable,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess._EvaluatorProcess,evaluate.compiled.subprocess,_EvaluatorProcess,"Python Library Documentation: class _EvaluatorProcess in module jedi.evaluate.compiled.subprocess

class _EvaluatorProcess(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_access_handle(self, id_)
 |  
 |  get_or_create_access_handle(self, obj)
 |  
 |  set_access_handle(self, handle)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess._EvaluatorProcess,evaluate.compiled.subprocess,_EvaluatorProcess,"Python Library Documentation: class _EvaluatorProcess in module jedi.evaluate.compiled.subprocess

class _EvaluatorProcess(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_access_handle(self, id_)
 |  
 |  get_or_create_access_handle(self, obj)
 |  
 |  set_access_handle(self, handle)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess._get_function,evaluate.compiled.subprocess,_get_function,"Python Library Documentation: function _get_function in module jedi.evaluate.compiled.subprocess

_get_function(name)
",function,"('(name)',)",name,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.force_unicode,evaluate.compiled.subprocess,force_unicode,"Python Library Documentation: function force_unicode in module jedi._compatibility

force_unicode(obj)
",function,"('(obj)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.functions._get_init_path,evaluate.compiled.subprocess.functions,_get_init_path,"Python Library Documentation: function _get_init_path in module jedi.evaluate.compiled.subprocess.functions

_get_init_path(directory_path)
    The __init__ file can be searched in a directory. If found return it, else
    None.
",function,"('(directory_path)',)",directory_path,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.functions._test_print,evaluate.compiled.subprocess.functions,_test_print,"Python Library Documentation: function _test_print in module jedi.evaluate.compiled.subprocess.functions

_test_print(evaluator, stderr=None, stdout=None)
    Force some prints in the subprocesses. This exists for unit tests.
",function,"('(evaluator, stderr=None, stdout=None)',)",stdout,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.functions._test_print,evaluate.compiled.subprocess.functions,_test_print,"Python Library Documentation: function _test_print in module jedi.evaluate.compiled.subprocess.functions

_test_print(evaluator, stderr=None, stdout=None)
    Force some prints in the subprocesses. This exists for unit tests.
",function,"('(evaluator, stderr=None, stdout=None)',)",stderr,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.functions._test_print,evaluate.compiled.subprocess.functions,_test_print,"Python Library Documentation: function _test_print in module jedi.evaluate.compiled.subprocess.functions

_test_print(evaluator, stderr=None, stdout=None)
    Force some prints in the subprocesses. This exists for unit tests.
",function,"('(evaluator, stderr=None, stdout=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.functions._test_raise_error,evaluate.compiled.subprocess.functions,_test_raise_error,"Python Library Documentation: function _test_raise_error in module jedi.evaluate.compiled.subprocess.functions

_test_raise_error(evaluator, exception_type)
    Raise an error to simulate certain problems for unit tests.
",function,"('(evaluator, exception_type)',)",exception_type,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.functions._test_raise_error,evaluate.compiled.subprocess.functions,_test_raise_error,"Python Library Documentation: function _test_raise_error in module jedi.evaluate.compiled.subprocess.functions

_test_raise_error(evaluator, exception_type)
    Raise an error to simulate certain problems for unit tests.
",function,"('(evaluator, exception_type)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.functions.cast_path,evaluate.compiled.subprocess.functions,cast_path,"Python Library Documentation: function cast_path in module jedi._compatibility

cast_path(obj)
    Take a bytes or str path and cast it to unicode.
    
    Apparently it is perfectly fine to pass both byte and unicode objects into
    the sys.path. This probably means that byte paths are normal at other
    places as well.
    
    Since this just really complicates everything and Python 2.7 will be EOL
    soon anyway, just go with always strings.
",function,"('(obj)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.functions.create_simple_object,evaluate.compiled.subprocess.functions,create_simple_object,"Python Library Documentation: function create_simple_object in module jedi.evaluate.compiled.subprocess.functions

create_simple_object(evaluator, obj)
",function,"('(evaluator, obj)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.functions.create_simple_object,evaluate.compiled.subprocess.functions,create_simple_object,"Python Library Documentation: function create_simple_object in module jedi.evaluate.compiled.subprocess.functions

create_simple_object(evaluator, obj)
",function,"('(evaluator, obj)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.functions.find_module,evaluate.compiled.subprocess.functions,find_module_py34,"Python Library Documentation: function find_module_py34 in module jedi._compatibility

find_module_py34(string, path=None, full_name=None)
    Provides information about a module.
    
    This function isolates the differences in importing libraries introduced with
    python 3.3 on; it gets a module name and optionally a path. It will return a
    tuple containin an open file for the module (if not builtin), the filename
    or the name of the module if it is a builtin one and a boolean indicating
    if the module is contained in a package.
",function,"('(string, path=None, full_name=None)',)",path,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.functions.find_module,evaluate.compiled.subprocess.functions,find_module_py34,"Python Library Documentation: function find_module_py34 in module jedi._compatibility

find_module_py34(string, path=None, full_name=None)
    Provides information about a module.
    
    This function isolates the differences in importing libraries introduced with
    python 3.3 on; it gets a module name and optionally a path. It will return a
    tuple containin an open file for the module (if not builtin), the filename
    or the name of the module if it is a builtin one and a boolean indicating
    if the module is contained in a package.
",function,"('(string, path=None, full_name=None)',)",full_name,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.functions.find_module,evaluate.compiled.subprocess.functions,find_module_py34,"Python Library Documentation: function find_module_py34 in module jedi._compatibility

find_module_py34(string, path=None, full_name=None)
    Provides information about a module.
    
    This function isolates the differences in importing libraries introduced with
    python 3.3 on; it gets a module name and optionally a path. It will return a
    tuple containin an open file for the module (if not builtin), the filename
    or the name of the module if it is a builtin one and a boolean indicating
    if the module is contained in a package.
",function,"('(string, path=None, full_name=None)',)",string,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.functions.force_unicode,evaluate.compiled.subprocess.functions,force_unicode,"Python Library Documentation: function force_unicode in module jedi._compatibility

force_unicode(obj)
",function,"('(obj)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.functions.get_builtin_module_names,evaluate.compiled.subprocess.functions,get_builtin_module_names,"Python Library Documentation: function get_builtin_module_names in module jedi.evaluate.compiled.subprocess.functions

get_builtin_module_names(evaluator)
",function,"('(evaluator)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.functions.get_compiled_method_return,evaluate.compiled.subprocess.functions,get_compiled_method_return,"Python Library Documentation: function get_compiled_method_return in module jedi.evaluate.compiled.subprocess.functions

get_compiled_method_return(evaluator, id, attribute, *args, **kwargs)
",function,"('(evaluator, id, attribute, *args, **kwargs)',)",id,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.functions.get_compiled_method_return,evaluate.compiled.subprocess.functions,get_compiled_method_return,"Python Library Documentation: function get_compiled_method_return in module jedi.evaluate.compiled.subprocess.functions

get_compiled_method_return(evaluator, id, attribute, *args, **kwargs)
",function,"('(evaluator, id, attribute, *args, **kwargs)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.functions.get_compiled_method_return,evaluate.compiled.subprocess.functions,get_compiled_method_return,"Python Library Documentation: function get_compiled_method_return in module jedi.evaluate.compiled.subprocess.functions

get_compiled_method_return(evaluator, id, attribute, *args, **kwargs)
",function,"('(evaluator, id, attribute, *args, **kwargs)',)",attribute,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.functions.get_module_info,evaluate.compiled.subprocess.functions,get_module_info,"Python Library Documentation: function get_module_info in module jedi.evaluate.compiled.subprocess.functions

get_module_info(evaluator, sys_path=None, full_name=None, **kwargs)
",function,"('(evaluator, sys_path=None, full_name=None, **kwargs)',)",sys_path,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.functions.get_module_info,evaluate.compiled.subprocess.functions,get_module_info,"Python Library Documentation: function get_module_info in module jedi.evaluate.compiled.subprocess.functions

get_module_info(evaluator, sys_path=None, full_name=None, **kwargs)
",function,"('(evaluator, sys_path=None, full_name=None, **kwargs)',)",full_name,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.functions.get_module_info,evaluate.compiled.subprocess.functions,get_module_info,"Python Library Documentation: function get_module_info in module jedi.evaluate.compiled.subprocess.functions

get_module_info(evaluator, sys_path=None, full_name=None, **kwargs)
",function,"('(evaluator, sys_path=None, full_name=None, **kwargs)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.functions.get_special_object,evaluate.compiled.subprocess.functions,get_special_object,"Python Library Documentation: function get_special_object in module jedi.evaluate.compiled.subprocess.functions

get_special_object(evaluator, identifier)
",function,"('(evaluator, identifier)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.functions.get_special_object,evaluate.compiled.subprocess.functions,get_special_object,"Python Library Documentation: function get_special_object in module jedi.evaluate.compiled.subprocess.functions

get_special_object(evaluator, identifier)
",function,"('(evaluator, identifier)',)",identifier,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.functions.iter_modules,evaluate.compiled.subprocess.functions,_iter_modules,"Python Library Documentation: function _iter_modules in module jedi._compatibility

_iter_modules(paths, prefix='')
",function,"(""(paths, prefix='')"",)",paths,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.functions.iter_modules,evaluate.compiled.subprocess.functions,_iter_modules,"Python Library Documentation: function _iter_modules in module jedi._compatibility

_iter_modules(paths, prefix='')
",function,"(""(paths, prefix='')"",)",prefix,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.functions.list_module_names,evaluate.compiled.subprocess.functions,list_module_names,"Python Library Documentation: function list_module_names in module jedi.evaluate.compiled.subprocess.functions

list_module_names(evaluator, search_path)
",function,"('(evaluator, search_path)',)",search_path,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.functions.list_module_names,evaluate.compiled.subprocess.functions,list_module_names,"Python Library Documentation: function list_module_names in module jedi.evaluate.compiled.subprocess.functions

list_module_names(evaluator, search_path)
",function,"('(evaluator, search_path)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.functions.load_module,evaluate.compiled.subprocess.functions,load_module,"Python Library Documentation: function load_module in module jedi.evaluate.compiled.subprocess.functions

load_module(evaluator, **kwargs)
",function,"('(evaluator, **kwargs)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.functions.safe_literal_eval,evaluate.compiled.subprocess.functions,safe_literal_eval,"Python Library Documentation: function safe_literal_eval in module jedi.evaluate.compiled.subprocess.functions

safe_literal_eval(evaluator, value)
",function,"('(evaluator, value)',)",value,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.functions.safe_literal_eval,evaluate.compiled.subprocess.functions,safe_literal_eval,"Python Library Documentation: function safe_literal_eval in module jedi.evaluate.compiled.subprocess.functions

safe_literal_eval(evaluator, value)
",function,"('(evaluator, value)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.get_subprocess,evaluate.compiled.subprocess,get_subprocess,"Python Library Documentation: function get_subprocess in module jedi.evaluate.compiled.subprocess

get_subprocess(executable)
",function,"('(executable)',)",executable,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.memoize_method,evaluate.compiled.subprocess,memoize_method,"Python Library Documentation: function memoize_method in module jedi.cache

memoize_method(method)
    A normal memoize function.
",function,"('(method)',)",method,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.partial,evaluate.compiled.subprocess,partial,"Python Library Documentation: class partial in module functools

class partial(builtins.object)
 |  partial(func, *args, **keywords) - new function with partial application
 |  of the given arguments and keywords.
 |  
 |  Methods defined here:
 |  
 |  __call__(self, /, *args, **kwargs)
 |      Call self as a function.
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |  
 |  args
 |      tuple of arguments to future partial calls
 |  
 |  func
 |      function object to use in future partial calls
 |  
 |  keywords
 |      dictionary of keyword arguments to future partial calls
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.pickle_dump,evaluate.compiled.subprocess,pickle_dump,"Python Library Documentation: function pickle_dump in module jedi._compatibility

pickle_dump(data, file)
",function,"('(data, file)',)",data,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.pickle_dump,evaluate.compiled.subprocess,pickle_dump,"Python Library Documentation: function pickle_dump in module jedi._compatibility

pickle_dump(data, file)
",function,"('(data, file)',)",file,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.subprocess.pickle_load,evaluate.compiled.subprocess,pickle_load,"Python Library Documentation: function pickle_load in module jedi._compatibility

pickle_load(file)
",function,"('(file)',)",file,,,arg_info
jedi,0.12.0,jedi.evaluate.compiled.unicode,evaluate.compiled,str,"Python Library Documentation: class str in module builtins

class str(object)
 |  str(object='') -> str
 |  str(bytes_or_buffer[, encoding[, errors]]) -> str
 |  
 |  Create a new string object from the given object. If encoding or
 |  errors is specified, then the object must expose a data buffer
 |  that will be decoded using the given encoding and error handler.
 |  Otherwise, returns the result of object.__str__() (if defined)
 |  or repr(object).
 |  encoding defaults to sys.getdefaultencoding().
 |  errors defaults to 'strict'.
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __format__(...)
 |      S.__format__(format_spec) -> str
 |      
 |      Return a formatted version of S as described by format_spec.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __getnewargs__(...)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  __sizeof__(...)
 |      S.__sizeof__() -> size of S in memory, in bytes
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  capitalize(...)
 |      S.capitalize() -> str
 |      
 |      Return a capitalized version of S, i.e. make the first character
 |      have upper case and the rest lower case.
 |  
 |  casefold(...)
 |      S.casefold() -> str
 |      
 |      Return a version of S suitable for caseless comparisons.
 |  
 |  center(...)
 |      S.center(width[, fillchar]) -> str
 |      
 |      Return S centered in a string of length width. Padding is
 |      done using the specified fill character (default is a space)
 |  
 |  count(...)
 |      S.count(sub[, start[, end]]) -> int
 |      
 |      Return the number of non-overlapping occurrences of substring sub in
 |      string S[start:end].  Optional arguments start and end are
 |      interpreted as in slice notation.
 |  
 |  encode(...)
 |      S.encode(encoding='utf-8', errors='strict') -> bytes
 |      
 |      Encode S using the codec registered for encoding. Default encoding
 |      is 'utf-8'. errors may be given to set a different error
 |      handling scheme. Default is 'strict' meaning that encoding errors raise
 |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
 |      'xmlcharrefreplace' as well as any other name registered with
 |      codecs.register_error that can handle UnicodeEncodeErrors.
 |  
 |  endswith(...)
 |      S.endswith(suffix[, start[, end]]) -> bool
 |      
 |      Return True if S ends with the specified suffix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      suffix can also be a tuple of strings to try.
 |  
 |  expandtabs(...)
 |      S.expandtabs(tabsize=8) -> str
 |      
 |      Return a copy of S where all tab characters are expanded using spaces.
 |      If tabsize is not given, a tab size of 8 characters is assumed.
 |  
 |  find(...)
 |      S.find(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  format(...)
 |      S.format(*args, **kwargs) -> str
 |      
 |      Return a formatted version of S, using substitutions from args and kwargs.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  format_map(...)
 |      S.format_map(mapping) -> str
 |      
 |      Return a formatted version of S, using substitutions from mapping.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  index(...)
 |      S.index(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found, 
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  isalnum(...)
 |      S.isalnum() -> bool
 |      
 |      Return True if all characters in S are alphanumeric
 |      and there is at least one character in S, False otherwise.
 |  
 |  isalpha(...)
 |      S.isalpha() -> bool
 |      
 |      Return True if all characters in S are alphabetic
 |      and there is at least one character in S, False otherwise.
 |  
 |  isdecimal(...)
 |      S.isdecimal() -> bool
 |      
 |      Return True if there are only decimal characters in S,
 |      False otherwise.
 |  
 |  isdigit(...)
 |      S.isdigit() -> bool
 |      
 |      Return True if all characters in S are digits
 |      and there is at least one character in S, False otherwise.
 |  
 |  isidentifier(...)
 |      S.isidentifier() -> bool
 |      
 |      Return True if S is a valid identifier according
 |      to the language definition.
 |      
 |      Use keyword.iskeyword() to test for reserved identifiers
 |      such as ""def"" and ""class"".
 |  
 |  islower(...)
 |      S.islower() -> bool
 |      
 |      Return True if all cased characters in S are lowercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  isnumeric(...)
 |      S.isnumeric() -> bool
 |      
 |      Return True if there are only numeric characters in S,
 |      False otherwise.
 |  
 |  isprintable(...)
 |      S.isprintable() -> bool
 |      
 |      Return True if all characters in S are considered
 |      printable in repr() or S is empty, False otherwise.
 |  
 |  isspace(...)
 |      S.isspace() -> bool
 |      
 |      Return True if all characters in S are whitespace
 |      and there is at least one character in S, False otherwise.
 |  
 |  istitle(...)
 |      S.istitle() -> bool
 |      
 |      Return True if S is a titlecased string and there is at least one
 |      character in S, i.e. upper- and titlecase characters may only
 |      follow uncased characters and lowercase characters only cased ones.
 |      Return False otherwise.
 |  
 |  isupper(...)
 |      S.isupper() -> bool
 |      
 |      Return True if all cased characters in S are uppercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  join(...)
 |      S.join(iterable) -> str
 |      
 |      Return a string which is the concatenation of the strings in the
 |      iterable.  The separator between elements is S.
 |  
 |  ljust(...)
 |      S.ljust(width[, fillchar]) -> str
 |      
 |      Return S left-justified in a Unicode string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  lower(...)
 |      S.lower() -> str
 |      
 |      Return a copy of the string S converted to lowercase.
 |  
 |  lstrip(...)
 |      S.lstrip([chars]) -> str
 |      
 |      Return a copy of the string S with leading whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  partition(...)
 |      S.partition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, and return the part before it,
 |      the separator itself, and the part after it.  If the separator is not
 |      found, return S and two empty strings.
 |  
 |  replace(...)
 |      S.replace(old, new[, count]) -> str
 |      
 |      Return a copy of S with all occurrences of substring
 |      old replaced by new.  If the optional argument count is
 |      given, only the first count occurrences are replaced.
 |  
 |  rfind(...)
 |      S.rfind(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  rindex(...)
 |      S.rindex(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  rjust(...)
 |      S.rjust(width[, fillchar]) -> str
 |      
 |      Return S right-justified in a string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  rpartition(...)
 |      S.rpartition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, starting at the end of S, and return
 |      the part before it, the separator itself, and the part after it.  If the
 |      separator is not found, return two empty strings and S.
 |  
 |  rsplit(...)
 |      S.rsplit(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string, starting at the end of the string and
 |      working to the front.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified, any whitespace string
 |      is a separator.
 |  
 |  rstrip(...)
 |      S.rstrip([chars]) -> str
 |      
 |      Return a copy of the string S with trailing whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  split(...)
 |      S.split(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified or is None, any
 |      whitespace string is a separator and empty strings are
 |      removed from the result.
 |  
 |  splitlines(...)
 |      S.splitlines([keepends]) -> list of strings
 |      
 |      Return a list of the lines in S, breaking at line boundaries.
 |      Line breaks are not included in the resulting list unless keepends
 |      is given and true.
 |  
 |  startswith(...)
 |      S.startswith(prefix[, start[, end]]) -> bool
 |      
 |      Return True if S starts with the specified prefix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      prefix can also be a tuple of strings to try.
 |  
 |  strip(...)
 |      S.strip([chars]) -> str
 |      
 |      Return a copy of the string S with leading and trailing
 |      whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  swapcase(...)
 |      S.swapcase() -> str
 |      
 |      Return a copy of S with uppercase characters converted to lowercase
 |      and vice versa.
 |  
 |  title(...)
 |      S.title() -> str
 |      
 |      Return a titlecased version of S, i.e. words start with title case
 |      characters, all remaining cased characters have lower case.
 |  
 |  translate(...)
 |      S.translate(table) -> str
 |      
 |      Return a copy of the string S in which each character has been mapped
 |      through the given translation table. The table must implement
 |      lookup/indexing via __getitem__, for instance a dictionary or list,
 |      mapping Unicode ordinals to Unicode ordinals, strings, or None. If
 |      this operation raises LookupError, the character is left untouched.
 |      Characters mapped to None are deleted.
 |  
 |  upper(...)
 |      S.upper() -> str
 |      
 |      Return a copy of S converted to uppercase.
 |  
 |  zfill(...)
 |      S.zfill(width) -> str
 |      
 |      Pad a numeric string S with zeros on the left, to fill a field
 |      of the specified width. The string S is never truncated.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  maketrans(x, y=None, z=None, /)
 |      Return a translation table usable for str.translate().
 |      
 |      If there is only one argument, it must be a dictionary mapping Unicode
 |      ordinals (integers) or characters to Unicode ordinals, strings or None.
 |      Character keys will be then converted to ordinals.
 |      If there are two arguments, they must be strings of equal length, and
 |      in the resulting dictionary, each character in x will be mapped to the
 |      character at the same position in y. If there is a third argument, it
 |      must be a string, whose characters will be mapped to None in the result.
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.AbstractInstanceContext,evaluate.context,AbstractInstanceContext,"Python Library Documentation: class AbstractInstanceContext in module jedi.evaluate.context.instance

class AbstractInstanceContext(jedi.evaluate.base_context.Context)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'instance'
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Instan...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context, var_args)',)",var_args,,,arg_info
jedi,0.12.0,jedi.evaluate.context.AbstractInstanceContext,evaluate.context,AbstractInstanceContext,"Python Library Documentation: class AbstractInstanceContext in module jedi.evaluate.context.instance

class AbstractInstanceContext(jedi.evaluate.base_context.Context)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'instance'
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Instan...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context, var_args)',)",class_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.AbstractInstanceContext,evaluate.context,AbstractInstanceContext,"Python Library Documentation: class AbstractInstanceContext in module jedi.evaluate.context.instance

class AbstractInstanceContext(jedi.evaluate.base_context.Context)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'instance'
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Instan...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context, var_args)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.AbstractInstanceContext,evaluate.context,AbstractInstanceContext,"Python Library Documentation: class AbstractInstanceContext in module jedi.evaluate.context.instance

class AbstractInstanceContext(jedi.evaluate.base_context.Context)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'instance'
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Instan...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context, var_args)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.AbstractInstanceContext,evaluate.context,AbstractInstanceContext,"Python Library Documentation: class AbstractInstanceContext in module jedi.evaluate.context.instance

class AbstractInstanceContext(jedi.evaluate.base_context.Context)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'instance'
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Instan...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context, var_args)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.AnonymousInstance,evaluate.context,AnonymousInstance,"Python Library Documentation: class AnonymousInstance in module jedi.evaluate.context.instance

class AnonymousInstance(TreeInstance)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      AnonymousInstance
 |      TreeInstance
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Anonym...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from TreeInstance:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractInstanceContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractInstanceContext:
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractInstanceContext:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context)',)",class_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.AnonymousInstance,evaluate.context,AnonymousInstance,"Python Library Documentation: class AnonymousInstance in module jedi.evaluate.context.instance

class AnonymousInstance(TreeInstance)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      AnonymousInstance
 |      TreeInstance
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Anonym...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from TreeInstance:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractInstanceContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractInstanceContext:
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractInstanceContext:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.AnonymousInstance,evaluate.context,AnonymousInstance,"Python Library Documentation: class AnonymousInstance in module jedi.evaluate.context.instance

class AnonymousInstance(TreeInstance)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      AnonymousInstance
 |      TreeInstance
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Anonym...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from TreeInstance:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractInstanceContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractInstanceContext:
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractInstanceContext:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.AnonymousInstance,evaluate.context,AnonymousInstance,"Python Library Documentation: class AnonymousInstance in module jedi.evaluate.context.instance

class AnonymousInstance(TreeInstance)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      AnonymousInstance
 |      TreeInstance
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Anonym...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from TreeInstance:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractInstanceContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractInstanceContext:
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractInstanceContext:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.BoundMethod,evaluate.context,BoundMethod,"Python Library Documentation: class BoundMethod in module jedi.evaluate.context.instance

class BoundMethod(jedi.evaluate.context.function.FunctionContext)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      BoundMethod
 |      jedi.evaluate.context.function.FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, instance, class_context, *args, **kwargs)
 |      This should not be called directly
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, instance, class_context, *args, **kwargs)',)",instance,,,arg_info
jedi,0.12.0,jedi.evaluate.context.BoundMethod,evaluate.context,BoundMethod,"Python Library Documentation: class BoundMethod in module jedi.evaluate.context.instance

class BoundMethod(jedi.evaluate.context.function.FunctionContext)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      BoundMethod
 |      jedi.evaluate.context.function.FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, instance, class_context, *args, **kwargs)
 |      This should not be called directly
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, instance, class_context, *args, **kwargs)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.BoundMethod,evaluate.context,BoundMethod,"Python Library Documentation: class BoundMethod in module jedi.evaluate.context.instance

class BoundMethod(jedi.evaluate.context.function.FunctionContext)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      BoundMethod
 |      jedi.evaluate.context.function.FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, instance, class_context, *args, **kwargs)
 |      This should not be called directly
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, instance, class_context, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.BoundMethod,evaluate.context,BoundMethod,"Python Library Documentation: class BoundMethod in module jedi.evaluate.context.instance

class BoundMethod(jedi.evaluate.context.function.FunctionContext)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      BoundMethod
 |      jedi.evaluate.context.function.FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, instance, class_context, *args, **kwargs)
 |      This should not be called directly
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, instance, class_context, *args, **kwargs)',)",class_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.ClassContext,evaluate.context,ClassContext,"Python Library Documentation: class ClassContext in module jedi.evaluate.context.klass

class ClassContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  This class is not only important to extend `tree.Class`, it is also a
 |  important for descriptors (if the descriptor methods are evaluated or not).
 |  
 |  Method resolution order:
 |      ClassContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, classdef)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None, is_instance=False)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  get_param_names(self)
 |  
 |  get_params(self)
 |  
 |  is_class(self)
 |  
 |  py__bases__ = wrapper(obj, *args, **kwargs)
 |  
 |  py__call__(self, params)
 |  
 |  py__class__(self)
 |  
 |  py__mro__ = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'class'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, classdef)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.ClassContext,evaluate.context,ClassContext,"Python Library Documentation: class ClassContext in module jedi.evaluate.context.klass

class ClassContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  This class is not only important to extend `tree.Class`, it is also a
 |  important for descriptors (if the descriptor methods are evaluated or not).
 |  
 |  Method resolution order:
 |      ClassContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, classdef)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None, is_instance=False)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  get_param_names(self)
 |  
 |  get_params(self)
 |  
 |  is_class(self)
 |  
 |  py__bases__ = wrapper(obj, *args, **kwargs)
 |  
 |  py__call__(self, params)
 |  
 |  py__class__(self)
 |  
 |  py__mro__ = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'class'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, classdef)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.ClassContext,evaluate.context,ClassContext,"Python Library Documentation: class ClassContext in module jedi.evaluate.context.klass

class ClassContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  This class is not only important to extend `tree.Class`, it is also a
 |  important for descriptors (if the descriptor methods are evaluated or not).
 |  
 |  Method resolution order:
 |      ClassContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, classdef)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None, is_instance=False)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  get_param_names(self)
 |  
 |  get_params(self)
 |  
 |  is_class(self)
 |  
 |  py__bases__ = wrapper(obj, *args, **kwargs)
 |  
 |  py__call__(self, params)
 |  
 |  py__class__(self)
 |  
 |  py__mro__ = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'class'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, classdef)',)",classdef,,,arg_info
jedi,0.12.0,jedi.evaluate.context.ClassContext,evaluate.context,ClassContext,"Python Library Documentation: class ClassContext in module jedi.evaluate.context.klass

class ClassContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  This class is not only important to extend `tree.Class`, it is also a
 |  important for descriptors (if the descriptor methods are evaluated or not).
 |  
 |  Method resolution order:
 |      ClassContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, classdef)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None, is_instance=False)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  get_param_names(self)
 |  
 |  get_params(self)
 |  
 |  is_class(self)
 |  
 |  py__bases__ = wrapper(obj, *args, **kwargs)
 |  
 |  py__call__(self, params)
 |  
 |  py__class__(self)
 |  
 |  py__mro__ = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'class'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, classdef)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.CompiledInstance,evaluate.context,CompiledInstance,"Python Library Documentation: class CompiledInstance in module jedi.evaluate.context.instance

class CompiledInstance(AbstractInstanceContext)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      CompiledInstance
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  create_instance_context(self, class_context, node)
 |  
 |  get_first_non_keyword_argument_contexts(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractInstanceContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractInstanceContext:
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractInstanceContext:
 |  
 |  api_type = 'instance'
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Instan...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.FunctionContext,evaluate.context,FunctionContext,"Python Library Documentation: class FunctionContext in module jedi.evaluate.context.function

class FunctionContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, funcdef)
 |      This should not be called directly
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, funcdef)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.FunctionContext,evaluate.context,FunctionContext,"Python Library Documentation: class FunctionContext in module jedi.evaluate.context.function

class FunctionContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, funcdef)
 |      This should not be called directly
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, funcdef)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.FunctionContext,evaluate.context,FunctionContext,"Python Library Documentation: class FunctionContext in module jedi.evaluate.context.function

class FunctionContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, funcdef)
 |      This should not be called directly
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, funcdef)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.FunctionContext,evaluate.context,FunctionContext,"Python Library Documentation: class FunctionContext in module jedi.evaluate.context.function

class FunctionContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, funcdef)
 |      This should not be called directly
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, funcdef)',)",funcdef,,,arg_info
jedi,0.12.0,jedi.evaluate.context.FunctionExecutionContext,evaluate.context,FunctionExecutionContext,"Python Library Documentation: class FunctionExecutionContext in module jedi.evaluate.context.function

class FunctionExecutionContext(jedi.evaluate.base_context.TreeContext)
 |  This class is used to evaluate functions and their returns.
 |  
 |  This is the most complicated class, because it contains the logic to
 |  transfer parameters. It is even more complicated, because there may be
 |  multiple calls to functions and recursion has to be avoided. But this is
 |  responsibility of the decorators.
 |  
 |  Method resolution order:
 |      FunctionExecutionContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, function_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_params = wrapper(obj, *args, **kwargs)
 |  
 |  get_return_values = wrapper(obj, *args, **kwargs)
 |  
 |  get_yield_lazy_contexts = wrapper(execution, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_filter = <class 'jedi.evaluate.filters.FunctionExec...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, function_context, var_args)',)",function_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.FunctionExecutionContext,evaluate.context,FunctionExecutionContext,"Python Library Documentation: class FunctionExecutionContext in module jedi.evaluate.context.function

class FunctionExecutionContext(jedi.evaluate.base_context.TreeContext)
 |  This class is used to evaluate functions and their returns.
 |  
 |  This is the most complicated class, because it contains the logic to
 |  transfer parameters. It is even more complicated, because there may be
 |  multiple calls to functions and recursion has to be avoided. But this is
 |  responsibility of the decorators.
 |  
 |  Method resolution order:
 |      FunctionExecutionContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, function_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_params = wrapper(obj, *args, **kwargs)
 |  
 |  get_return_values = wrapper(obj, *args, **kwargs)
 |  
 |  get_yield_lazy_contexts = wrapper(execution, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_filter = <class 'jedi.evaluate.filters.FunctionExec...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, function_context, var_args)',)",var_args,,,arg_info
jedi,0.12.0,jedi.evaluate.context.FunctionExecutionContext,evaluate.context,FunctionExecutionContext,"Python Library Documentation: class FunctionExecutionContext in module jedi.evaluate.context.function

class FunctionExecutionContext(jedi.evaluate.base_context.TreeContext)
 |  This class is used to evaluate functions and their returns.
 |  
 |  This is the most complicated class, because it contains the logic to
 |  transfer parameters. It is even more complicated, because there may be
 |  multiple calls to functions and recursion has to be avoided. But this is
 |  responsibility of the decorators.
 |  
 |  Method resolution order:
 |      FunctionExecutionContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, function_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_params = wrapper(obj, *args, **kwargs)
 |  
 |  get_return_values = wrapper(obj, *args, **kwargs)
 |  
 |  get_yield_lazy_contexts = wrapper(execution, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_filter = <class 'jedi.evaluate.filters.FunctionExec...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, function_context, var_args)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.FunctionExecutionContext,evaluate.context,FunctionExecutionContext,"Python Library Documentation: class FunctionExecutionContext in module jedi.evaluate.context.function

class FunctionExecutionContext(jedi.evaluate.base_context.TreeContext)
 |  This class is used to evaluate functions and their returns.
 |  
 |  This is the most complicated class, because it contains the logic to
 |  transfer parameters. It is even more complicated, because there may be
 |  multiple calls to functions and recursion has to be avoided. But this is
 |  responsibility of the decorators.
 |  
 |  Method resolution order:
 |      FunctionExecutionContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, function_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_params = wrapper(obj, *args, **kwargs)
 |  
 |  get_return_values = wrapper(obj, *args, **kwargs)
 |  
 |  get_yield_lazy_contexts = wrapper(execution, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_filter = <class 'jedi.evaluate.filters.FunctionExec...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, function_context, var_args)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.FunctionExecutionContext,evaluate.context,FunctionExecutionContext,"Python Library Documentation: class FunctionExecutionContext in module jedi.evaluate.context.function

class FunctionExecutionContext(jedi.evaluate.base_context.TreeContext)
 |  This class is used to evaluate functions and their returns.
 |  
 |  This is the most complicated class, because it contains the logic to
 |  transfer parameters. It is even more complicated, because there may be
 |  multiple calls to functions and recursion has to be avoided. But this is
 |  responsibility of the decorators.
 |  
 |  Method resolution order:
 |      FunctionExecutionContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, function_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_params = wrapper(obj, *args, **kwargs)
 |  
 |  get_return_values = wrapper(obj, *args, **kwargs)
 |  
 |  get_yield_lazy_contexts = wrapper(execution, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_filter = <class 'jedi.evaluate.filters.FunctionExec...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, function_context, var_args)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.ModuleContext,evaluate.context,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",path,,,arg_info
jedi,0.12.0,jedi.evaluate.context.ModuleContext,evaluate.context,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",module_node,,,arg_info
jedi,0.12.0,jedi.evaluate.context.ModuleContext,evaluate.context,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.ModuleContext,evaluate.context,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.ModuleContext,evaluate.context,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",code_lines,,,arg_info
jedi,0.12.0,jedi.evaluate.context.TreeInstance,evaluate.context,TreeInstance,"Python Library Documentation: class TreeInstance in module jedi.evaluate.context.instance

class TreeInstance(AbstractInstanceContext)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      TreeInstance
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractInstanceContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractInstanceContext:
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractInstanceContext:
 |  
 |  api_type = 'instance'
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Instan...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context, var_args)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.TreeInstance,evaluate.context,TreeInstance,"Python Library Documentation: class TreeInstance in module jedi.evaluate.context.instance

class TreeInstance(AbstractInstanceContext)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      TreeInstance
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractInstanceContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractInstanceContext:
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractInstanceContext:
 |  
 |  api_type = 'instance'
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Instan...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context, var_args)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.TreeInstance,evaluate.context,TreeInstance,"Python Library Documentation: class TreeInstance in module jedi.evaluate.context.instance

class TreeInstance(AbstractInstanceContext)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      TreeInstance
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractInstanceContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractInstanceContext:
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractInstanceContext:
 |  
 |  api_type = 'instance'
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Instan...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context, var_args)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.TreeInstance,evaluate.context,TreeInstance,"Python Library Documentation: class TreeInstance in module jedi.evaluate.context.instance

class TreeInstance(AbstractInstanceContext)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      TreeInstance
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractInstanceContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractInstanceContext:
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractInstanceContext:
 |  
 |  api_type = 'instance'
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Instan...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context, var_args)',)",class_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.TreeInstance,evaluate.context,TreeInstance,"Python Library Documentation: class TreeInstance in module jedi.evaluate.context.instance

class TreeInstance(AbstractInstanceContext)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      TreeInstance
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractInstanceContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractInstanceContext:
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractInstanceContext:
 |  
 |  api_type = 'instance'
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Instan...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context, var_args)',)",var_args,,,arg_info
jedi,0.12.0,jedi.evaluate.context.asynchronous.AsyncBase,evaluate.context.asynchronous,AsyncBase,"Python Library Documentation: class AsyncBase in module jedi.evaluate.context.asynchronous

class AsyncBase(jedi.evaluate.filters.BuiltinOverwrite)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      AsyncBase
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, func_execution_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  get_object(self)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
",class,"('(self, evaluator, func_execution_context)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.asynchronous.AsyncBase,evaluate.context.asynchronous,AsyncBase,"Python Library Documentation: class AsyncBase in module jedi.evaluate.context.asynchronous

class AsyncBase(jedi.evaluate.filters.BuiltinOverwrite)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      AsyncBase
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, func_execution_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  get_object(self)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
",class,"('(self, evaluator, func_execution_context)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.asynchronous.AsyncBase,evaluate.context.asynchronous,AsyncBase,"Python Library Documentation: class AsyncBase in module jedi.evaluate.context.asynchronous

class AsyncBase(jedi.evaluate.filters.BuiltinOverwrite)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      AsyncBase
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, func_execution_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  get_object(self)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
",class,"('(self, evaluator, func_execution_context)',)",func_execution_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.asynchronous.AsyncGenerator,evaluate.context.asynchronous,AsyncGenerator,"Python Library Documentation: class AsyncGenerator in module jedi.evaluate.context.asynchronous

class AsyncGenerator(AsyncBase)
 |  Handling of `yield` functions.
 |  
 |  Method resolution order:
 |      AsyncGenerator
 |      AsyncBase
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  py__aiter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {}
 |  
 |  special_object_identifier = 'ASYNC_GENERATOR'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AsyncBase:
 |  
 |  __init__(self, evaluator, func_execution_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AsyncBase:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  get_object(self)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
",class,"('(self, evaluator, func_execution_context)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.asynchronous.AsyncGenerator,evaluate.context.asynchronous,AsyncGenerator,"Python Library Documentation: class AsyncGenerator in module jedi.evaluate.context.asynchronous

class AsyncGenerator(AsyncBase)
 |  Handling of `yield` functions.
 |  
 |  Method resolution order:
 |      AsyncGenerator
 |      AsyncBase
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  py__aiter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {}
 |  
 |  special_object_identifier = 'ASYNC_GENERATOR'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AsyncBase:
 |  
 |  __init__(self, evaluator, func_execution_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AsyncBase:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  get_object(self)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
",class,"('(self, evaluator, func_execution_context)',)",func_execution_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.asynchronous.AsyncGenerator,evaluate.context.asynchronous,AsyncGenerator,"Python Library Documentation: class AsyncGenerator in module jedi.evaluate.context.asynchronous

class AsyncGenerator(AsyncBase)
 |  Handling of `yield` functions.
 |  
 |  Method resolution order:
 |      AsyncGenerator
 |      AsyncBase
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  py__aiter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {}
 |  
 |  special_object_identifier = 'ASYNC_GENERATOR'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AsyncBase:
 |  
 |  __init__(self, evaluator, func_execution_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AsyncBase:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  get_object(self)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
",class,"('(self, evaluator, func_execution_context)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.asynchronous.BuiltinOverwrite,evaluate.context.asynchronous,BuiltinOverwrite,"Python Library Documentation: class BuiltinOverwrite in module jedi.evaluate.filters

class BuiltinOverwrite(jedi.evaluate.base_context.Context, AbstractObjectOverwrite)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_object(self)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {}
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
",class,"('(self, evaluator)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.asynchronous.BuiltinOverwrite,evaluate.context.asynchronous,BuiltinOverwrite,"Python Library Documentation: class BuiltinOverwrite in module jedi.evaluate.filters

class BuiltinOverwrite(jedi.evaluate.base_context.Context, AbstractObjectOverwrite)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_object(self)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {}
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
",class,"('(self, evaluator)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.asynchronous.ContextSet,evaluate.context.asynchronous,ContextSet,"Python Library Documentation: class ContextSet in module jedi.evaluate.base_context

class ContextSet(jedi.common.context.BaseContextSet)
 |  Method resolution order:
 |      ContextSet
 |      jedi.common.context.BaseContextSet
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContextSet:
 |  
 |  __bool__(self)
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, *args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self)
 |  
 |  __len__(self)
 |  
 |  __or__(self, other)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  filter(self, filter_func)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from jedi.common.context.BaseContextSet:
 |  
 |  from_iterable(iterable) from builtins.type
 |  
 |  from_set(set_) from builtins.type
 |  
 |  from_sets(sets) from builtins.type
 |      Used to work with an iterable of set.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContextSet:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, *args)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.asynchronous.ContextSet.from_iterable,evaluate.context.asynchronous.ContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.context.asynchronous.ContextSet.from_iterable,evaluate.context.asynchronous.ContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",iterable,,,arg_info
jedi,0.12.0,jedi.evaluate.context.asynchronous.ContextSet.from_set,evaluate.context.asynchronous.ContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",set_,,,arg_info
jedi,0.12.0,jedi.evaluate.context.asynchronous.ContextSet.from_set,evaluate.context.asynchronous.ContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.context.asynchronous.ContextSet.from_sets,evaluate.context.asynchronous.ContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",sets,,,arg_info
jedi,0.12.0,jedi.evaluate.context.asynchronous.ContextSet.from_sets,evaluate.context.asynchronous.ContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.context.asynchronous.Coroutine,evaluate.context.asynchronous,Coroutine,"Python Library Documentation: class Coroutine in module jedi.evaluate.context.asynchronous

class Coroutine(AsyncBase)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      Coroutine
 |      AsyncBase
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {'__await__': (<function Coroutine._await>, None...
 |  
 |  special_object_identifier = 'COROUTINE'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AsyncBase:
 |  
 |  __init__(self, evaluator, func_execution_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AsyncBase:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  get_object(self)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
",class,"('(self, evaluator, func_execution_context)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.asynchronous.Coroutine,evaluate.context.asynchronous,Coroutine,"Python Library Documentation: class Coroutine in module jedi.evaluate.context.asynchronous

class Coroutine(AsyncBase)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      Coroutine
 |      AsyncBase
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {'__await__': (<function Coroutine._await>, None...
 |  
 |  special_object_identifier = 'COROUTINE'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AsyncBase:
 |  
 |  __init__(self, evaluator, func_execution_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AsyncBase:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  get_object(self)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
",class,"('(self, evaluator, func_execution_context)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.asynchronous.Coroutine,evaluate.context.asynchronous,Coroutine,"Python Library Documentation: class Coroutine in module jedi.evaluate.context.asynchronous

class Coroutine(AsyncBase)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      Coroutine
 |      AsyncBase
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {'__await__': (<function Coroutine._await>, None...
 |  
 |  special_object_identifier = 'COROUTINE'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AsyncBase:
 |  
 |  __init__(self, evaluator, func_execution_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AsyncBase:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  get_object(self)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
",class,"('(self, evaluator, func_execution_context)',)",func_execution_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.asynchronous.CoroutineWrapper,evaluate.context.asynchronous,CoroutineWrapper,"Python Library Documentation: class CoroutineWrapper in module jedi.evaluate.context.asynchronous

class CoroutineWrapper(AsyncBase)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      CoroutineWrapper
 |      AsyncBase
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  py__stop_iteration_returns(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {}
 |  
 |  special_object_identifier = 'COROUTINE_WRAPPER'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AsyncBase:
 |  
 |  __init__(self, evaluator, func_execution_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AsyncBase:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  get_object(self)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
",class,"('(self, evaluator, func_execution_context)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.asynchronous.CoroutineWrapper,evaluate.context.asynchronous,CoroutineWrapper,"Python Library Documentation: class CoroutineWrapper in module jedi.evaluate.context.asynchronous

class CoroutineWrapper(AsyncBase)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      CoroutineWrapper
 |      AsyncBase
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  py__stop_iteration_returns(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {}
 |  
 |  special_object_identifier = 'COROUTINE_WRAPPER'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AsyncBase:
 |  
 |  __init__(self, evaluator, func_execution_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AsyncBase:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  get_object(self)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
",class,"('(self, evaluator, func_execution_context)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.asynchronous.CoroutineWrapper,evaluate.context.asynchronous,CoroutineWrapper,"Python Library Documentation: class CoroutineWrapper in module jedi.evaluate.context.asynchronous

class CoroutineWrapper(AsyncBase)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      CoroutineWrapper
 |      AsyncBase
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  py__stop_iteration_returns(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {}
 |  
 |  special_object_identifier = 'COROUTINE_WRAPPER'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AsyncBase:
 |  
 |  __init__(self, evaluator, func_execution_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AsyncBase:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  get_object(self)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
",class,"('(self, evaluator, func_execution_context)',)",func_execution_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.asynchronous.publish_method,evaluate.context.asynchronous,publish_method,"Python Library Documentation: function publish_method in module jedi.evaluate.filters

publish_method(method_name, python_version_match=None)
",function,"('(method_name, python_version_match=None)',)",python_version_match,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.context.asynchronous.publish_method,evaluate.context.asynchronous,publish_method,"Python Library Documentation: function publish_method in module jedi.evaluate.filters

publish_method(method_name, python_version_match=None)
",function,"('(method_name, python_version_match=None)',)",method_name,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.AbstractNameDefinition,evaluate.context.function,AbstractNameDefinition,"Python Library Documentation: class AbstractNameDefinition in module jedi.evaluate.filters

class AbstractNameDefinition(builtins.object)
 |  Methods defined here:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  infer(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.AnonymousArguments,evaluate.context.function,AnonymousArguments,"Python Library Documentation: class AnonymousArguments in module jedi.evaluate.arguments

class AnonymousArguments(AbstractArguments)
 |  Method resolution order:
 |      AnonymousArguments
 |      AbstractArguments
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  get_params(self, execution_context)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractArguments:
 |  
 |  eval_all(self, funcdef=None)
 |      Evaluates all arguments as a support for static analysis
 |      (normally Jedi).
 |  
 |  eval_argument_clinic(self, parameters)
 |      Uses a list with argument clinic information (see PEP 436).
 |  
 |  get_calling_nodes(self)
 |  
 |  unpack(self, funcdef=None)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractArguments:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractArguments:
 |  
 |  argument_node = None
 |  
 |  context = None
 |  
 |  trailer = None
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.CachedMetaClass,evaluate.context.function,CachedMetaClass,"Python Library Documentation: class CachedMetaClass in module jedi.evaluate.cache

class CachedMetaClass(builtins.type)
 |  This is basically almost the same than the decorator above, it just caches
 |  class initializations. Either you do it this way or with decorators, but
 |  with decorators you lose class access (isinstance, etc).
 |  
 |  Method resolution order:
 |      CachedMetaClass
 |      builtins.type
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __call__ = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.type:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __dir__(...)
 |      __dir__() -> list
 |      specialized __dir__ implementation for types
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __instancecheck__(...)
 |      __instancecheck__() -> bool
 |      check if an object is an instance
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __prepare__(...) from builtins.type
 |      __prepare__() -> dict
 |      used to create the namespace for the class statement
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __sizeof__(...)
 |      __sizeof__() -> int
 |      return memory consumption of the type object
 |  
 |  __subclasscheck__(...)
 |      __subclasscheck__() -> bool
 |      check if a class is a subclass
 |  
 |  __subclasses__(...)
 |      __subclasses__() -> list of immediate subclasses
 |  
 |  mro(...)
 |      mro() -> list
 |      return a type's method resolution order
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.type:
 |  
 |  __abstractmethods__
 |  
 |  __dict__
 |  
 |  __text_signature__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from builtins.type:
 |  
 |  __base__ = <class 'type'>
 |      type(object_or_name, bases, dict)
 |      type(object) -> the object's type
 |      type(name, bases, dict) -> a new type
 |  
 |  __bases__ = (<class 'type'>,)
 |  
 |  __basicsize__ = 864
 |  
 |  __dictoffset__ = 264
 |  
 |  __flags__ = -2146675199
 |  
 |  __itemsize__ = 40
 |  
 |  __mro__ = (<class 'jedi.evaluate.cache.CachedMetaClass'>, <class 'type...
 |  
 |  __weakrefoffset__ = 368
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.ContextName,evaluate.context.function,ContextName,"Python Library Documentation: class ContextName in module jedi.evaluate.filters

class ContextName(ContextNameMixin, AbstractTreeName)
 |  Method resolution order:
 |      ContextName
 |      ContextNameMixin
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ContextNameMixin:
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ContextNameMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, context, tree_name)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.ContextName,evaluate.context.function,ContextName,"Python Library Documentation: class ContextName in module jedi.evaluate.filters

class ContextName(ContextNameMixin, AbstractTreeName)
 |  Method resolution order:
 |      ContextName
 |      ContextNameMixin
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ContextNameMixin:
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ContextNameMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, context, tree_name)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.ContextName,evaluate.context.function,ContextName,"Python Library Documentation: class ContextName in module jedi.evaluate.filters

class ContextName(ContextNameMixin, AbstractTreeName)
 |  Method resolution order:
 |      ContextName
 |      ContextNameMixin
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ContextNameMixin:
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ContextNameMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, context, tree_name)',)",tree_name,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.ContextSet,evaluate.context.function,ContextSet,"Python Library Documentation: class ContextSet in module jedi.evaluate.base_context

class ContextSet(jedi.common.context.BaseContextSet)
 |  Method resolution order:
 |      ContextSet
 |      jedi.common.context.BaseContextSet
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContextSet:
 |  
 |  __bool__(self)
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, *args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self)
 |  
 |  __len__(self)
 |  
 |  __or__(self, other)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  filter(self, filter_func)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from jedi.common.context.BaseContextSet:
 |  
 |  from_iterable(iterable) from builtins.type
 |  
 |  from_set(set_) from builtins.type
 |  
 |  from_sets(sets) from builtins.type
 |      Used to work with an iterable of set.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContextSet:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, *args)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.ContextSet.from_iterable,evaluate.context.function.ContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.ContextSet.from_iterable,evaluate.context.function.ContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",iterable,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.ContextSet.from_set,evaluate.context.function.ContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.ContextSet.from_set,evaluate.context.function.ContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",set_,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.ContextSet.from_sets,evaluate.context.function.ContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.ContextSet.from_sets,evaluate.context.function.ContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",sets,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.ContextualizedNode,evaluate.context.function,ContextualizedNode,"Python Library Documentation: class ContextualizedNode in module jedi.evaluate.base_context

class ContextualizedNode(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.ContextualizedNode,evaluate.context.function,ContextualizedNode,"Python Library Documentation: class ContextualizedNode in module jedi.evaluate.base_context

class ContextualizedNode(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.ContextualizedNode,evaluate.context.function,ContextualizedNode,"Python Library Documentation: class ContextualizedNode in module jedi.evaluate.base_context

class ContextualizedNode(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.FunctionContext,evaluate.context.function,FunctionContext,"Python Library Documentation: class FunctionContext in module jedi.evaluate.context.function

class FunctionContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, funcdef)
 |      This should not be called directly
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, funcdef)',)",funcdef,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.FunctionContext,evaluate.context.function,FunctionContext,"Python Library Documentation: class FunctionContext in module jedi.evaluate.context.function

class FunctionContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, funcdef)
 |      This should not be called directly
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, funcdef)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.FunctionContext,evaluate.context.function,FunctionContext,"Python Library Documentation: class FunctionContext in module jedi.evaluate.context.function

class FunctionContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, funcdef)
 |      This should not be called directly
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, funcdef)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.FunctionContext,evaluate.context.function,FunctionContext,"Python Library Documentation: class FunctionContext in module jedi.evaluate.context.function

class FunctionContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, funcdef)
 |      This should not be called directly
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, funcdef)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.FunctionExecutionContext,evaluate.context.function,FunctionExecutionContext,"Python Library Documentation: class FunctionExecutionContext in module jedi.evaluate.context.function

class FunctionExecutionContext(jedi.evaluate.base_context.TreeContext)
 |  This class is used to evaluate functions and their returns.
 |  
 |  This is the most complicated class, because it contains the logic to
 |  transfer parameters. It is even more complicated, because there may be
 |  multiple calls to functions and recursion has to be avoided. But this is
 |  responsibility of the decorators.
 |  
 |  Method resolution order:
 |      FunctionExecutionContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, function_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_params = wrapper(obj, *args, **kwargs)
 |  
 |  get_return_values = wrapper(obj, *args, **kwargs)
 |  
 |  get_yield_lazy_contexts = wrapper(execution, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_filter = <class 'jedi.evaluate.filters.FunctionExec...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, function_context, var_args)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.FunctionExecutionContext,evaluate.context.function,FunctionExecutionContext,"Python Library Documentation: class FunctionExecutionContext in module jedi.evaluate.context.function

class FunctionExecutionContext(jedi.evaluate.base_context.TreeContext)
 |  This class is used to evaluate functions and their returns.
 |  
 |  This is the most complicated class, because it contains the logic to
 |  transfer parameters. It is even more complicated, because there may be
 |  multiple calls to functions and recursion has to be avoided. But this is
 |  responsibility of the decorators.
 |  
 |  Method resolution order:
 |      FunctionExecutionContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, function_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_params = wrapper(obj, *args, **kwargs)
 |  
 |  get_return_values = wrapper(obj, *args, **kwargs)
 |  
 |  get_yield_lazy_contexts = wrapper(execution, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_filter = <class 'jedi.evaluate.filters.FunctionExec...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, function_context, var_args)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.FunctionExecutionContext,evaluate.context.function,FunctionExecutionContext,"Python Library Documentation: class FunctionExecutionContext in module jedi.evaluate.context.function

class FunctionExecutionContext(jedi.evaluate.base_context.TreeContext)
 |  This class is used to evaluate functions and their returns.
 |  
 |  This is the most complicated class, because it contains the logic to
 |  transfer parameters. It is even more complicated, because there may be
 |  multiple calls to functions and recursion has to be avoided. But this is
 |  responsibility of the decorators.
 |  
 |  Method resolution order:
 |      FunctionExecutionContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, function_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_params = wrapper(obj, *args, **kwargs)
 |  
 |  get_return_values = wrapper(obj, *args, **kwargs)
 |  
 |  get_yield_lazy_contexts = wrapper(execution, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_filter = <class 'jedi.evaluate.filters.FunctionExec...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, function_context, var_args)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.FunctionExecutionContext,evaluate.context.function,FunctionExecutionContext,"Python Library Documentation: class FunctionExecutionContext in module jedi.evaluate.context.function

class FunctionExecutionContext(jedi.evaluate.base_context.TreeContext)
 |  This class is used to evaluate functions and their returns.
 |  
 |  This is the most complicated class, because it contains the logic to
 |  transfer parameters. It is even more complicated, because there may be
 |  multiple calls to functions and recursion has to be avoided. But this is
 |  responsibility of the decorators.
 |  
 |  Method resolution order:
 |      FunctionExecutionContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, function_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_params = wrapper(obj, *args, **kwargs)
 |  
 |  get_return_values = wrapper(obj, *args, **kwargs)
 |  
 |  get_yield_lazy_contexts = wrapper(execution, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_filter = <class 'jedi.evaluate.filters.FunctionExec...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, function_context, var_args)',)",function_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.FunctionExecutionContext,evaluate.context.function,FunctionExecutionContext,"Python Library Documentation: class FunctionExecutionContext in module jedi.evaluate.context.function

class FunctionExecutionContext(jedi.evaluate.base_context.TreeContext)
 |  This class is used to evaluate functions and their returns.
 |  
 |  This is the most complicated class, because it contains the logic to
 |  transfer parameters. It is even more complicated, because there may be
 |  multiple calls to functions and recursion has to be avoided. But this is
 |  responsibility of the decorators.
 |  
 |  Method resolution order:
 |      FunctionExecutionContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, function_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_params = wrapper(obj, *args, **kwargs)
 |  
 |  get_return_values = wrapper(obj, *args, **kwargs)
 |  
 |  get_yield_lazy_contexts = wrapper(execution, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_filter = <class 'jedi.evaluate.filters.FunctionExec...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, function_context, var_args)',)",var_args,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.FunctionExecutionFilter,evaluate.context.function,FunctionExecutionFilter,"Python Library Documentation: class FunctionExecutionFilter in module jedi.evaluate.filters

class FunctionExecutionFilter(ParserTreeFilter)
 |  Method resolution order:
 |      FunctionExecutionFilter
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  param_name = <class 'jedi.evaluate.filters.ParamName'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",origin_scope,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.context.function.FunctionExecutionFilter,evaluate.context.function,FunctionExecutionFilter,"Python Library Documentation: class FunctionExecutionFilter in module jedi.evaluate.filters

class FunctionExecutionFilter(ParserTreeFilter)
 |  Method resolution order:
 |      FunctionExecutionFilter
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  param_name = <class 'jedi.evaluate.filters.ParamName'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",until_position,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.context.function.FunctionExecutionFilter,evaluate.context.function,FunctionExecutionFilter,"Python Library Documentation: class FunctionExecutionFilter in module jedi.evaluate.filters

class FunctionExecutionFilter(ParserTreeFilter)
 |  Method resolution order:
 |      FunctionExecutionFilter
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  param_name = <class 'jedi.evaluate.filters.ParamName'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",node_context,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.context.function.FunctionExecutionFilter,evaluate.context.function,FunctionExecutionFilter,"Python Library Documentation: class FunctionExecutionFilter in module jedi.evaluate.filters

class FunctionExecutionFilter(ParserTreeFilter)
 |  Method resolution order:
 |      FunctionExecutionFilter
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  param_name = <class 'jedi.evaluate.filters.ParamName'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.FunctionExecutionFilter,evaluate.context.function,FunctionExecutionFilter,"Python Library Documentation: class FunctionExecutionFilter in module jedi.evaluate.filters

class FunctionExecutionFilter(ParserTreeFilter)
 |  Method resolution order:
 |      FunctionExecutionFilter
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  param_name = <class 'jedi.evaluate.filters.ParamName'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.FunctionExecutionFilter,evaluate.context.function,FunctionExecutionFilter,"Python Library Documentation: class FunctionExecutionFilter in module jedi.evaluate.filters

class FunctionExecutionFilter(ParserTreeFilter)
 |  Method resolution order:
 |      FunctionExecutionFilter
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  param_name = <class 'jedi.evaluate.filters.ParamName'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.LambdaName,evaluate.context.function,LambdaName,"Python Library Documentation: class LambdaName in module jedi.evaluate.context.function

class LambdaName(jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      LambdaName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, lambda_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  start_pos
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'function'
 |  
 |  string_name = '<lambda>'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, lambda_context)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.LambdaName,evaluate.context.function,LambdaName,"Python Library Documentation: class LambdaName in module jedi.evaluate.context.function

class LambdaName(jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      LambdaName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, lambda_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  start_pos
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'function'
 |  
 |  string_name = '<lambda>'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, lambda_context)',)",lambda_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.LazyKnownContext,evaluate.context.function,LazyKnownContext,"Python Library Documentation: class LazyKnownContext in module jedi.evaluate.lazy_context

class LazyKnownContext(AbstractLazyContext)
 |  data is a context.
 |  
 |  Method resolution order:
 |      LazyKnownContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __init__(self, data)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, data)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.LazyKnownContext,evaluate.context.function,LazyKnownContext,"Python Library Documentation: class LazyKnownContext in module jedi.evaluate.lazy_context

class LazyKnownContext(AbstractLazyContext)
 |  data is a context.
 |  
 |  Method resolution order:
 |      LazyKnownContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __init__(self, data)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, data)',)",data,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.LazyKnownContexts,evaluate.context.function,LazyKnownContexts,"Python Library Documentation: class LazyKnownContexts in module jedi.evaluate.lazy_context

class LazyKnownContexts(AbstractLazyContext)
 |  data is a ContextSet.
 |  
 |  Method resolution order:
 |      LazyKnownContexts
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __init__(self, data)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, data)',)",data,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.LazyKnownContexts,evaluate.context.function,LazyKnownContexts,"Python Library Documentation: class LazyKnownContexts in module jedi.evaluate.lazy_context

class LazyKnownContexts(AbstractLazyContext)
 |  data is a ContextSet.
 |  
 |  Method resolution order:
 |      LazyKnownContexts
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __init__(self, data)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, data)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.LazyTreeContext,evaluate.context.function,LazyTreeContext,"Python Library Documentation: class LazyTreeContext in module jedi.evaluate.lazy_context

class LazyTreeContext(AbstractLazyContext)
 |  Method resolution order:
 |      LazyTreeContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.LazyTreeContext,evaluate.context.function,LazyTreeContext,"Python Library Documentation: class LazyTreeContext in module jedi.evaluate.lazy_context

class LazyTreeContext(AbstractLazyContext)
 |  Method resolution order:
 |      LazyTreeContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.LazyTreeContext,evaluate.context.function,LazyTreeContext,"Python Library Documentation: class LazyTreeContext in module jedi.evaluate.lazy_context

class LazyTreeContext(AbstractLazyContext)
 |  Method resolution order:
 |      LazyTreeContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.ParamName,evaluate.context.function,ParamName,"Python Library Documentation: class ParamName in module jedi.evaluate.filters

class ParamName(AbstractTreeName)
 |  Method resolution order:
 |      ParamName
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_kind(self)
 |  
 |  get_param(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'param'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.ParamName,evaluate.context.function,ParamName,"Python Library Documentation: class ParamName in module jedi.evaluate.filters

class ParamName(AbstractTreeName)
 |  Method resolution order:
 |      ParamName
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_kind(self)
 |  
 |  get_param(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'param'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.ParamName,evaluate.context.function,ParamName,"Python Library Documentation: class ParamName in module jedi.evaluate.filters

class ParamName(AbstractTreeName)
 |  Method resolution order:
 |      ParamName
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_kind(self)
 |  
 |  get_param(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'param'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",tree_name,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.ParserTreeFilter,evaluate.context.function,ParserTreeFilter,"Python Library Documentation: class ParserTreeFilter in module jedi.evaluate.filters

class ParserTreeFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",origin_scope,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.context.function.ParserTreeFilter,evaluate.context.function,ParserTreeFilter,"Python Library Documentation: class ParserTreeFilter in module jedi.evaluate.filters

class ParserTreeFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",node_context,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.context.function.ParserTreeFilter,evaluate.context.function,ParserTreeFilter,"Python Library Documentation: class ParserTreeFilter in module jedi.evaluate.filters

class ParserTreeFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",until_position,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.context.function.ParserTreeFilter,evaluate.context.function,ParserTreeFilter,"Python Library Documentation: class ParserTreeFilter in module jedi.evaluate.filters

class ParserTreeFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.ParserTreeFilter,evaluate.context.function,ParserTreeFilter,"Python Library Documentation: class ParserTreeFilter in module jedi.evaluate.filters

class ParserTreeFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.ParserTreeFilter,evaluate.context.function,ParserTreeFilter,"Python Library Documentation: class ParserTreeFilter in module jedi.evaluate.filters

class ParserTreeFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.TreeContext,evaluate.context.function,TreeContext,"Python Library Documentation: class TreeContext in module jedi.evaluate.base_context

class TreeContext(Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      TreeContext
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.TreeContext,evaluate.context.function,TreeContext,"Python Library Documentation: class TreeContext in module jedi.evaluate.base_context

class TreeContext(Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      TreeContext
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.TreeContext,evaluate.context.function,TreeContext,"Python Library Documentation: class TreeContext in module jedi.evaluate.base_context

class TreeContext(Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      TreeContext
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",parent_context,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.context.function.evaluator_method_cache,evaluate.context.function,evaluator_method_cache,"Python Library Documentation: function evaluator_method_cache in module jedi.evaluate.cache

evaluator_method_cache(default=<object object at 0x000000000520FC20>)
",function,"('(default=<object object at 0x000000000520FC20>)',)",default,<object object at 0x000000000520FC20>,object,arg_info
jedi,0.12.0,jedi.evaluate.context.function.get_yield_exprs,evaluate.context.function,wrapper,"Python Library Documentation: function wrapper in module jedi.evaluate.cache

wrapper(obj, *args, **kwargs)
",function,"('(obj, *args, **kwargs)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.context.function.use_metaclass,evaluate.context.function,use_metaclass,"Python Library Documentation: function use_metaclass in module jedi._compatibility

use_metaclass(meta, *bases)
    Create a class with a metaclass.
",function,"('(meta, *bases)',)",meta,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.AbstractArguments,evaluate.context.instance,AbstractArguments,"Python Library Documentation: class AbstractArguments in module jedi.evaluate.arguments

class AbstractArguments(builtins.object)
 |  Methods defined here:
 |  
 |  eval_all(self, funcdef=None)
 |      Evaluates all arguments as a support for static analysis
 |      (normally Jedi).
 |  
 |  eval_argument_clinic(self, parameters)
 |      Uses a list with argument clinic information (see PEP 436).
 |  
 |  get_calling_nodes(self)
 |  
 |  get_params(self, execution_context)
 |  
 |  unpack(self, funcdef=None)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  argument_node = None
 |  
 |  context = None
 |  
 |  trailer = None
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.AbstractInstanceContext,evaluate.context.instance,AbstractInstanceContext,"Python Library Documentation: class AbstractInstanceContext in module jedi.evaluate.context.instance

class AbstractInstanceContext(jedi.evaluate.base_context.Context)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'instance'
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Instan...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context, var_args)',)",var_args,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.AbstractInstanceContext,evaluate.context.instance,AbstractInstanceContext,"Python Library Documentation: class AbstractInstanceContext in module jedi.evaluate.context.instance

class AbstractInstanceContext(jedi.evaluate.base_context.Context)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'instance'
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Instan...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context, var_args)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.AbstractInstanceContext,evaluate.context.instance,AbstractInstanceContext,"Python Library Documentation: class AbstractInstanceContext in module jedi.evaluate.context.instance

class AbstractInstanceContext(jedi.evaluate.base_context.Context)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'instance'
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Instan...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context, var_args)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.AbstractInstanceContext,evaluate.context.instance,AbstractInstanceContext,"Python Library Documentation: class AbstractInstanceContext in module jedi.evaluate.context.instance

class AbstractInstanceContext(jedi.evaluate.base_context.Context)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'instance'
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Instan...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context, var_args)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.AbstractInstanceContext,evaluate.context.instance,AbstractInstanceContext,"Python Library Documentation: class AbstractInstanceContext in module jedi.evaluate.context.instance

class AbstractInstanceContext(jedi.evaluate.base_context.Context)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'instance'
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Instan...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context, var_args)',)",class_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.AnonymousArguments,evaluate.context.instance,AnonymousArguments,"Python Library Documentation: class AnonymousArguments in module jedi.evaluate.arguments

class AnonymousArguments(AbstractArguments)
 |  Method resolution order:
 |      AnonymousArguments
 |      AbstractArguments
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  get_params(self, execution_context)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractArguments:
 |  
 |  eval_all(self, funcdef=None)
 |      Evaluates all arguments as a support for static analysis
 |      (normally Jedi).
 |  
 |  eval_argument_clinic(self, parameters)
 |      Uses a list with argument clinic information (see PEP 436).
 |  
 |  get_calling_nodes(self)
 |  
 |  unpack(self, funcdef=None)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractArguments:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractArguments:
 |  
 |  argument_node = None
 |  
 |  context = None
 |  
 |  trailer = None
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.AnonymousInstance,evaluate.context.instance,AnonymousInstance,"Python Library Documentation: class AnonymousInstance in module jedi.evaluate.context.instance

class AnonymousInstance(TreeInstance)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      AnonymousInstance
 |      TreeInstance
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Anonym...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from TreeInstance:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractInstanceContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractInstanceContext:
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractInstanceContext:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.AnonymousInstance,evaluate.context.instance,AnonymousInstance,"Python Library Documentation: class AnonymousInstance in module jedi.evaluate.context.instance

class AnonymousInstance(TreeInstance)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      AnonymousInstance
 |      TreeInstance
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Anonym...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from TreeInstance:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractInstanceContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractInstanceContext:
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractInstanceContext:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.AnonymousInstance,evaluate.context.instance,AnonymousInstance,"Python Library Documentation: class AnonymousInstance in module jedi.evaluate.context.instance

class AnonymousInstance(TreeInstance)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      AnonymousInstance
 |      TreeInstance
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Anonym...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from TreeInstance:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractInstanceContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractInstanceContext:
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractInstanceContext:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context)',)",class_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.AnonymousInstance,evaluate.context.instance,AnonymousInstance,"Python Library Documentation: class AnonymousInstance in module jedi.evaluate.context.instance

class AnonymousInstance(TreeInstance)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      AnonymousInstance
 |      TreeInstance
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Anonym...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from TreeInstance:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractInstanceContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractInstanceContext:
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractInstanceContext:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.AnonymousInstanceFunctionExecution,evaluate.context.instance,AnonymousInstanceFunctionExecution,"Python Library Documentation: class AnonymousInstanceFunctionExecution in module jedi.evaluate.context.instance

class AnonymousInstanceFunctionExecution(BaseInstanceFunctionExecution)
 |  This class is used to evaluate functions and their returns.
 |  
 |  This is the most complicated class, because it contains the logic to
 |  transfer parameters. It is even more complicated, because there may be
 |  multiple calls to functions and recursion has to be avoided. But this is
 |  responsibility of the decorators.
 |  
 |  Method resolution order:
 |      AnonymousInstanceFunctionExecution
 |      BaseInstanceFunctionExecution
 |      jedi.evaluate.context.function.FunctionExecutionContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, instance, parent_context, function_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_filter = <class 'jedi.evaluate.filters.AnonymousIns...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.context.function.FunctionExecutionContext:
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_params = wrapper(obj, *args, **kwargs)
 |  
 |  get_return_values = wrapper(obj, *args, **kwargs)
 |  
 |  get_yield_lazy_contexts = wrapper(execution, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, instance, parent_context, function_context, var_args)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.AnonymousInstanceFunctionExecution,evaluate.context.instance,AnonymousInstanceFunctionExecution,"Python Library Documentation: class AnonymousInstanceFunctionExecution in module jedi.evaluate.context.instance

class AnonymousInstanceFunctionExecution(BaseInstanceFunctionExecution)
 |  This class is used to evaluate functions and their returns.
 |  
 |  This is the most complicated class, because it contains the logic to
 |  transfer parameters. It is even more complicated, because there may be
 |  multiple calls to functions and recursion has to be avoided. But this is
 |  responsibility of the decorators.
 |  
 |  Method resolution order:
 |      AnonymousInstanceFunctionExecution
 |      BaseInstanceFunctionExecution
 |      jedi.evaluate.context.function.FunctionExecutionContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, instance, parent_context, function_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_filter = <class 'jedi.evaluate.filters.AnonymousIns...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.context.function.FunctionExecutionContext:
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_params = wrapper(obj, *args, **kwargs)
 |  
 |  get_return_values = wrapper(obj, *args, **kwargs)
 |  
 |  get_yield_lazy_contexts = wrapper(execution, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, instance, parent_context, function_context, var_args)',)",instance,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.AnonymousInstanceFunctionExecution,evaluate.context.instance,AnonymousInstanceFunctionExecution,"Python Library Documentation: class AnonymousInstanceFunctionExecution in module jedi.evaluate.context.instance

class AnonymousInstanceFunctionExecution(BaseInstanceFunctionExecution)
 |  This class is used to evaluate functions and their returns.
 |  
 |  This is the most complicated class, because it contains the logic to
 |  transfer parameters. It is even more complicated, because there may be
 |  multiple calls to functions and recursion has to be avoided. But this is
 |  responsibility of the decorators.
 |  
 |  Method resolution order:
 |      AnonymousInstanceFunctionExecution
 |      BaseInstanceFunctionExecution
 |      jedi.evaluate.context.function.FunctionExecutionContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, instance, parent_context, function_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_filter = <class 'jedi.evaluate.filters.AnonymousIns...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.context.function.FunctionExecutionContext:
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_params = wrapper(obj, *args, **kwargs)
 |  
 |  get_return_values = wrapper(obj, *args, **kwargs)
 |  
 |  get_yield_lazy_contexts = wrapper(execution, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, instance, parent_context, function_context, var_args)',)",function_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.AnonymousInstanceFunctionExecution,evaluate.context.instance,AnonymousInstanceFunctionExecution,"Python Library Documentation: class AnonymousInstanceFunctionExecution in module jedi.evaluate.context.instance

class AnonymousInstanceFunctionExecution(BaseInstanceFunctionExecution)
 |  This class is used to evaluate functions and their returns.
 |  
 |  This is the most complicated class, because it contains the logic to
 |  transfer parameters. It is even more complicated, because there may be
 |  multiple calls to functions and recursion has to be avoided. But this is
 |  responsibility of the decorators.
 |  
 |  Method resolution order:
 |      AnonymousInstanceFunctionExecution
 |      BaseInstanceFunctionExecution
 |      jedi.evaluate.context.function.FunctionExecutionContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, instance, parent_context, function_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_filter = <class 'jedi.evaluate.filters.AnonymousIns...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.context.function.FunctionExecutionContext:
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_params = wrapper(obj, *args, **kwargs)
 |  
 |  get_return_values = wrapper(obj, *args, **kwargs)
 |  
 |  get_yield_lazy_contexts = wrapper(execution, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, instance, parent_context, function_context, var_args)',)",var_args,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.AnonymousInstanceFunctionExecution,evaluate.context.instance,AnonymousInstanceFunctionExecution,"Python Library Documentation: class AnonymousInstanceFunctionExecution in module jedi.evaluate.context.instance

class AnonymousInstanceFunctionExecution(BaseInstanceFunctionExecution)
 |  This class is used to evaluate functions and their returns.
 |  
 |  This is the most complicated class, because it contains the logic to
 |  transfer parameters. It is even more complicated, because there may be
 |  multiple calls to functions and recursion has to be avoided. But this is
 |  responsibility of the decorators.
 |  
 |  Method resolution order:
 |      AnonymousInstanceFunctionExecution
 |      BaseInstanceFunctionExecution
 |      jedi.evaluate.context.function.FunctionExecutionContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, instance, parent_context, function_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_filter = <class 'jedi.evaluate.filters.AnonymousIns...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.context.function.FunctionExecutionContext:
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_params = wrapper(obj, *args, **kwargs)
 |  
 |  get_return_values = wrapper(obj, *args, **kwargs)
 |  
 |  get_yield_lazy_contexts = wrapper(execution, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, instance, parent_context, function_context, var_args)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.BaseInstanceFunctionExecution,evaluate.context.instance,BaseInstanceFunctionExecution,"Python Library Documentation: class BaseInstanceFunctionExecution in module jedi.evaluate.context.instance

class BaseInstanceFunctionExecution(jedi.evaluate.context.function.FunctionExecutionContext)
 |  This class is used to evaluate functions and their returns.
 |  
 |  This is the most complicated class, because it contains the logic to
 |  transfer parameters. It is even more complicated, because there may be
 |  multiple calls to functions and recursion has to be avoided. But this is
 |  responsibility of the decorators.
 |  
 |  Method resolution order:
 |      BaseInstanceFunctionExecution
 |      jedi.evaluate.context.function.FunctionExecutionContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, instance, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.context.function.FunctionExecutionContext:
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_params = wrapper(obj, *args, **kwargs)
 |  
 |  get_return_values = wrapper(obj, *args, **kwargs)
 |  
 |  get_yield_lazy_contexts = wrapper(execution, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.context.function.FunctionExecutionContext:
 |  
 |  function_execution_filter = <class 'jedi.evaluate.filters.FunctionExec...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, instance, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.BaseInstanceFunctionExecution,evaluate.context.instance,BaseInstanceFunctionExecution,"Python Library Documentation: class BaseInstanceFunctionExecution in module jedi.evaluate.context.instance

class BaseInstanceFunctionExecution(jedi.evaluate.context.function.FunctionExecutionContext)
 |  This class is used to evaluate functions and their returns.
 |  
 |  This is the most complicated class, because it contains the logic to
 |  transfer parameters. It is even more complicated, because there may be
 |  multiple calls to functions and recursion has to be avoided. But this is
 |  responsibility of the decorators.
 |  
 |  Method resolution order:
 |      BaseInstanceFunctionExecution
 |      jedi.evaluate.context.function.FunctionExecutionContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, instance, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.context.function.FunctionExecutionContext:
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_params = wrapper(obj, *args, **kwargs)
 |  
 |  get_return_values = wrapper(obj, *args, **kwargs)
 |  
 |  get_yield_lazy_contexts = wrapper(execution, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.context.function.FunctionExecutionContext:
 |  
 |  function_execution_filter = <class 'jedi.evaluate.filters.FunctionExec...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, instance, *args, **kwargs)',)",instance,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.BoundMethod,evaluate.context.instance,BoundMethod,"Python Library Documentation: class BoundMethod in module jedi.evaluate.context.instance

class BoundMethod(jedi.evaluate.context.function.FunctionContext)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      BoundMethod
 |      jedi.evaluate.context.function.FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, instance, class_context, *args, **kwargs)
 |      This should not be called directly
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, instance, class_context, *args, **kwargs)',)",class_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.BoundMethod,evaluate.context.instance,BoundMethod,"Python Library Documentation: class BoundMethod in module jedi.evaluate.context.instance

class BoundMethod(jedi.evaluate.context.function.FunctionContext)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      BoundMethod
 |      jedi.evaluate.context.function.FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, instance, class_context, *args, **kwargs)
 |      This should not be called directly
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, instance, class_context, *args, **kwargs)',)",instance,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.BoundMethod,evaluate.context.instance,BoundMethod,"Python Library Documentation: class BoundMethod in module jedi.evaluate.context.instance

class BoundMethod(jedi.evaluate.context.function.FunctionContext)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      BoundMethod
 |      jedi.evaluate.context.function.FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, instance, class_context, *args, **kwargs)
 |      This should not be called directly
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, instance, class_context, *args, **kwargs)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.BoundMethod,evaluate.context.instance,BoundMethod,"Python Library Documentation: class BoundMethod in module jedi.evaluate.context.instance

class BoundMethod(jedi.evaluate.context.function.FunctionContext)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      BoundMethod
 |      jedi.evaluate.context.function.FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, instance, class_context, *args, **kwargs)
 |      This should not be called directly
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.context.function.FunctionContext:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, instance, class_context, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.ClassContext,evaluate.context.instance,ClassContext,"Python Library Documentation: class ClassContext in module jedi.evaluate.context.klass

class ClassContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  This class is not only important to extend `tree.Class`, it is also a
 |  important for descriptors (if the descriptor methods are evaluated or not).
 |  
 |  Method resolution order:
 |      ClassContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, classdef)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None, is_instance=False)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  get_param_names(self)
 |  
 |  get_params(self)
 |  
 |  is_class(self)
 |  
 |  py__bases__ = wrapper(obj, *args, **kwargs)
 |  
 |  py__call__(self, params)
 |  
 |  py__class__(self)
 |  
 |  py__mro__ = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'class'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, classdef)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.ClassContext,evaluate.context.instance,ClassContext,"Python Library Documentation: class ClassContext in module jedi.evaluate.context.klass

class ClassContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  This class is not only important to extend `tree.Class`, it is also a
 |  important for descriptors (if the descriptor methods are evaluated or not).
 |  
 |  Method resolution order:
 |      ClassContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, classdef)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None, is_instance=False)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  get_param_names(self)
 |  
 |  get_params(self)
 |  
 |  is_class(self)
 |  
 |  py__bases__ = wrapper(obj, *args, **kwargs)
 |  
 |  py__call__(self, params)
 |  
 |  py__class__(self)
 |  
 |  py__mro__ = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'class'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, classdef)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.ClassContext,evaluate.context.instance,ClassContext,"Python Library Documentation: class ClassContext in module jedi.evaluate.context.klass

class ClassContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  This class is not only important to extend `tree.Class`, it is also a
 |  important for descriptors (if the descriptor methods are evaluated or not).
 |  
 |  Method resolution order:
 |      ClassContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, classdef)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None, is_instance=False)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  get_param_names(self)
 |  
 |  get_params(self)
 |  
 |  is_class(self)
 |  
 |  py__bases__ = wrapper(obj, *args, **kwargs)
 |  
 |  py__call__(self, params)
 |  
 |  py__class__(self)
 |  
 |  py__mro__ = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'class'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, classdef)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.ClassContext,evaluate.context.instance,ClassContext,"Python Library Documentation: class ClassContext in module jedi.evaluate.context.klass

class ClassContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  This class is not only important to extend `tree.Class`, it is also a
 |  important for descriptors (if the descriptor methods are evaluated or not).
 |  
 |  Method resolution order:
 |      ClassContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, classdef)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None, is_instance=False)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  get_param_names(self)
 |  
 |  get_params(self)
 |  
 |  is_class(self)
 |  
 |  py__bases__ = wrapper(obj, *args, **kwargs)
 |  
 |  py__call__(self, params)
 |  
 |  py__class__(self)
 |  
 |  py__mro__ = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'class'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, classdef)',)",classdef,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.CompiledBoundMethod,evaluate.context.instance,CompiledBoundMethod,"Python Library Documentation: class CompiledBoundMethod in module jedi.evaluate.context.instance

class CompiledBoundMethod(jedi.evaluate.compiled.context.CompiledObject)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      CompiledBoundMethod
 |      jedi.evaluate.compiled.context.CompiledObject
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, func)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_param_names(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.compiled.context.CompiledObject:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  dict_values(self)
 |  
 |  execute_operation(self, other, operator)
 |  
 |  get_filters(self, search_global=False, is_instance=False, until_position=None, origin_scope=None)
 |  
 |  get_safe_value(self, default=<object object at 0x000000000520FC40>)
 |  
 |  is_class(self)
 |  
 |  is_super_class(self, exception)
 |  
 |  negate(self)
 |  
 |  py__bases__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__call__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__class__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__file__(self)
 |  
 |  py__getitem__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__iter__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__mro__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__name__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.compiled.context.CompiledObject:
 |  
 |  api_type
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, func)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.CompiledBoundMethod,evaluate.context.instance,CompiledBoundMethod,"Python Library Documentation: class CompiledBoundMethod in module jedi.evaluate.context.instance

class CompiledBoundMethod(jedi.evaluate.compiled.context.CompiledObject)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      CompiledBoundMethod
 |      jedi.evaluate.compiled.context.CompiledObject
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, func)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_param_names(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.compiled.context.CompiledObject:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  dict_values(self)
 |  
 |  execute_operation(self, other, operator)
 |  
 |  get_filters(self, search_global=False, is_instance=False, until_position=None, origin_scope=None)
 |  
 |  get_safe_value(self, default=<object object at 0x000000000520FC40>)
 |  
 |  is_class(self)
 |  
 |  is_super_class(self, exception)
 |  
 |  negate(self)
 |  
 |  py__bases__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__call__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__class__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__file__(self)
 |  
 |  py__getitem__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__iter__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__mro__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__name__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.compiled.context.CompiledObject:
 |  
 |  api_type
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, func)',)",func,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.CompiledInstance,evaluate.context.instance,CompiledInstance,"Python Library Documentation: class CompiledInstance in module jedi.evaluate.context.instance

class CompiledInstance(AbstractInstanceContext)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      CompiledInstance
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  create_instance_context(self, class_context, node)
 |  
 |  get_first_non_keyword_argument_contexts(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractInstanceContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractInstanceContext:
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractInstanceContext:
 |  
 |  api_type = 'instance'
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Instan...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.CompiledInstanceClassFilter,evaluate.context.instance,CompiledInstanceClassFilter,"Python Library Documentation: class CompiledInstanceClassFilter in module jedi.evaluate.context.instance

class CompiledInstanceClassFilter(jedi.evaluate.compiled.context.CompiledObjectFilter)
 |  Method resolution order:
 |      CompiledInstanceClassFilter
 |      jedi.evaluate.compiled.context.CompiledObjectFilter
 |      jedi.evaluate.filters.AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, instance, compiled_object)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.context.instance.CompiledInstanceNa...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.compiled.context.CompiledObjectFilter:
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, instance, compiled_object)',)",compiled_object,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.CompiledInstanceClassFilter,evaluate.context.instance,CompiledInstanceClassFilter,"Python Library Documentation: class CompiledInstanceClassFilter in module jedi.evaluate.context.instance

class CompiledInstanceClassFilter(jedi.evaluate.compiled.context.CompiledObjectFilter)
 |  Method resolution order:
 |      CompiledInstanceClassFilter
 |      jedi.evaluate.compiled.context.CompiledObjectFilter
 |      jedi.evaluate.filters.AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, instance, compiled_object)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.context.instance.CompiledInstanceNa...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.compiled.context.CompiledObjectFilter:
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, instance, compiled_object)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.CompiledInstanceClassFilter,evaluate.context.instance,CompiledInstanceClassFilter,"Python Library Documentation: class CompiledInstanceClassFilter in module jedi.evaluate.context.instance

class CompiledInstanceClassFilter(jedi.evaluate.compiled.context.CompiledObjectFilter)
 |  Method resolution order:
 |      CompiledInstanceClassFilter
 |      jedi.evaluate.compiled.context.CompiledObjectFilter
 |      jedi.evaluate.filters.AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, instance, compiled_object)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.context.instance.CompiledInstanceNa...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.compiled.context.CompiledObjectFilter:
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, instance, compiled_object)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.CompiledInstanceClassFilter,evaluate.context.instance,CompiledInstanceClassFilter,"Python Library Documentation: class CompiledInstanceClassFilter in module jedi.evaluate.context.instance

class CompiledInstanceClassFilter(jedi.evaluate.compiled.context.CompiledObjectFilter)
 |  Method resolution order:
 |      CompiledInstanceClassFilter
 |      jedi.evaluate.compiled.context.CompiledObjectFilter
 |      jedi.evaluate.filters.AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, instance, compiled_object)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.context.instance.CompiledInstanceNa...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.compiled.context.CompiledObjectFilter:
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, instance, compiled_object)',)",instance,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.CompiledInstanceName,evaluate.context.instance,CompiledInstanceName,"Python Library Documentation: class CompiledInstanceName in module jedi.evaluate.context.instance

class CompiledInstanceName(jedi.evaluate.compiled.context.CompiledName)
 |  Method resolution order:
 |      CompiledInstanceName
 |      jedi.evaluate.compiled.context.CompiledName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, instance, parent_context, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer = wrapper(*args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.compiled.context.CompiledName:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.compiled.context.CompiledName:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, evaluator, instance, parent_context, name)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.CompiledInstanceName,evaluate.context.instance,CompiledInstanceName,"Python Library Documentation: class CompiledInstanceName in module jedi.evaluate.context.instance

class CompiledInstanceName(jedi.evaluate.compiled.context.CompiledName)
 |  Method resolution order:
 |      CompiledInstanceName
 |      jedi.evaluate.compiled.context.CompiledName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, instance, parent_context, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer = wrapper(*args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.compiled.context.CompiledName:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.compiled.context.CompiledName:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, evaluator, instance, parent_context, name)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.CompiledInstanceName,evaluate.context.instance,CompiledInstanceName,"Python Library Documentation: class CompiledInstanceName in module jedi.evaluate.context.instance

class CompiledInstanceName(jedi.evaluate.compiled.context.CompiledName)
 |  Method resolution order:
 |      CompiledInstanceName
 |      jedi.evaluate.compiled.context.CompiledName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, instance, parent_context, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer = wrapper(*args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.compiled.context.CompiledName:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.compiled.context.CompiledName:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, evaluator, instance, parent_context, name)',)",instance,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.CompiledInstanceName,evaluate.context.instance,CompiledInstanceName,"Python Library Documentation: class CompiledInstanceName in module jedi.evaluate.context.instance

class CompiledInstanceName(jedi.evaluate.compiled.context.CompiledName)
 |  Method resolution order:
 |      CompiledInstanceName
 |      jedi.evaluate.compiled.context.CompiledName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, instance, parent_context, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer = wrapper(*args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.compiled.context.CompiledName:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.compiled.context.CompiledName:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, evaluator, instance, parent_context, name)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.CompiledInstanceName,evaluate.context.instance,CompiledInstanceName,"Python Library Documentation: class CompiledInstanceName in module jedi.evaluate.context.instance

class CompiledInstanceName(jedi.evaluate.compiled.context.CompiledName)
 |  Method resolution order:
 |      CompiledInstanceName
 |      jedi.evaluate.compiled.context.CompiledName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, instance, parent_context, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer = wrapper(*args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.compiled.context.CompiledName:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.compiled.context.CompiledName:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, evaluator, instance, parent_context, name)',)",name,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.Context,evaluate.context.instance,Context,"Python Library Documentation: class Context in module jedi.evaluate.base_context

class Context(jedi.common.context.BaseContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.Context,evaluate.context.instance,Context,"Python Library Documentation: class Context in module jedi.evaluate.base_context

class Context(jedi.common.context.BaseContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.Context,evaluate.context.instance,Context,"Python Library Documentation: class Context in module jedi.evaluate.base_context

class Context(jedi.common.context.BaseContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",parent_context,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.ContextSet,evaluate.context.instance,ContextSet,"Python Library Documentation: class ContextSet in module jedi.evaluate.base_context

class ContextSet(jedi.common.context.BaseContextSet)
 |  Method resolution order:
 |      ContextSet
 |      jedi.common.context.BaseContextSet
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContextSet:
 |  
 |  __bool__(self)
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, *args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self)
 |  
 |  __len__(self)
 |  
 |  __or__(self, other)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  filter(self, filter_func)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from jedi.common.context.BaseContextSet:
 |  
 |  from_iterable(iterable) from builtins.type
 |  
 |  from_set(set_) from builtins.type
 |  
 |  from_sets(sets) from builtins.type
 |      Used to work with an iterable of set.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContextSet:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, *args)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.ContextSet.from_iterable,evaluate.context.instance.ContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.ContextSet.from_iterable,evaluate.context.instance.ContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",iterable,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.ContextSet.from_set,evaluate.context.instance.ContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",set_,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.ContextSet.from_set,evaluate.context.instance.ContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.ContextSet.from_sets,evaluate.context.instance.ContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",sets,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.ContextSet.from_sets,evaluate.context.instance.ContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.FunctionContext,evaluate.context.instance,FunctionContext,"Python Library Documentation: class FunctionContext in module jedi.evaluate.context.function

class FunctionContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, funcdef)
 |      This should not be called directly
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, funcdef)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.FunctionContext,evaluate.context.instance,FunctionContext,"Python Library Documentation: class FunctionContext in module jedi.evaluate.context.function

class FunctionContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, funcdef)
 |      This should not be called directly
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, funcdef)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.FunctionContext,evaluate.context.instance,FunctionContext,"Python Library Documentation: class FunctionContext in module jedi.evaluate.context.function

class FunctionContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, funcdef)
 |      This should not be called directly
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, funcdef)',)",funcdef,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.FunctionContext,evaluate.context.instance,FunctionContext,"Python Library Documentation: class FunctionContext in module jedi.evaluate.context.function

class FunctionContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, funcdef)
 |      This should not be called directly
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, funcdef)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.FunctionExecutionContext,evaluate.context.instance,FunctionExecutionContext,"Python Library Documentation: class FunctionExecutionContext in module jedi.evaluate.context.function

class FunctionExecutionContext(jedi.evaluate.base_context.TreeContext)
 |  This class is used to evaluate functions and their returns.
 |  
 |  This is the most complicated class, because it contains the logic to
 |  transfer parameters. It is even more complicated, because there may be
 |  multiple calls to functions and recursion has to be avoided. But this is
 |  responsibility of the decorators.
 |  
 |  Method resolution order:
 |      FunctionExecutionContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, function_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_params = wrapper(obj, *args, **kwargs)
 |  
 |  get_return_values = wrapper(obj, *args, **kwargs)
 |  
 |  get_yield_lazy_contexts = wrapper(execution, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_filter = <class 'jedi.evaluate.filters.FunctionExec...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, function_context, var_args)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.FunctionExecutionContext,evaluate.context.instance,FunctionExecutionContext,"Python Library Documentation: class FunctionExecutionContext in module jedi.evaluate.context.function

class FunctionExecutionContext(jedi.evaluate.base_context.TreeContext)
 |  This class is used to evaluate functions and their returns.
 |  
 |  This is the most complicated class, because it contains the logic to
 |  transfer parameters. It is even more complicated, because there may be
 |  multiple calls to functions and recursion has to be avoided. But this is
 |  responsibility of the decorators.
 |  
 |  Method resolution order:
 |      FunctionExecutionContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, function_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_params = wrapper(obj, *args, **kwargs)
 |  
 |  get_return_values = wrapper(obj, *args, **kwargs)
 |  
 |  get_yield_lazy_contexts = wrapper(execution, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_filter = <class 'jedi.evaluate.filters.FunctionExec...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, function_context, var_args)',)",var_args,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.FunctionExecutionContext,evaluate.context.instance,FunctionExecutionContext,"Python Library Documentation: class FunctionExecutionContext in module jedi.evaluate.context.function

class FunctionExecutionContext(jedi.evaluate.base_context.TreeContext)
 |  This class is used to evaluate functions and their returns.
 |  
 |  This is the most complicated class, because it contains the logic to
 |  transfer parameters. It is even more complicated, because there may be
 |  multiple calls to functions and recursion has to be avoided. But this is
 |  responsibility of the decorators.
 |  
 |  Method resolution order:
 |      FunctionExecutionContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, function_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_params = wrapper(obj, *args, **kwargs)
 |  
 |  get_return_values = wrapper(obj, *args, **kwargs)
 |  
 |  get_yield_lazy_contexts = wrapper(execution, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_filter = <class 'jedi.evaluate.filters.FunctionExec...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, function_context, var_args)',)",function_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.FunctionExecutionContext,evaluate.context.instance,FunctionExecutionContext,"Python Library Documentation: class FunctionExecutionContext in module jedi.evaluate.context.function

class FunctionExecutionContext(jedi.evaluate.base_context.TreeContext)
 |  This class is used to evaluate functions and their returns.
 |  
 |  This is the most complicated class, because it contains the logic to
 |  transfer parameters. It is even more complicated, because there may be
 |  multiple calls to functions and recursion has to be avoided. But this is
 |  responsibility of the decorators.
 |  
 |  Method resolution order:
 |      FunctionExecutionContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, function_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_params = wrapper(obj, *args, **kwargs)
 |  
 |  get_return_values = wrapper(obj, *args, **kwargs)
 |  
 |  get_yield_lazy_contexts = wrapper(execution, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_filter = <class 'jedi.evaluate.filters.FunctionExec...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, function_context, var_args)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.FunctionExecutionContext,evaluate.context.instance,FunctionExecutionContext,"Python Library Documentation: class FunctionExecutionContext in module jedi.evaluate.context.function

class FunctionExecutionContext(jedi.evaluate.base_context.TreeContext)
 |  This class is used to evaluate functions and their returns.
 |  
 |  This is the most complicated class, because it contains the logic to
 |  transfer parameters. It is even more complicated, because there may be
 |  multiple calls to functions and recursion has to be avoided. But this is
 |  responsibility of the decorators.
 |  
 |  Method resolution order:
 |      FunctionExecutionContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, function_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_params = wrapper(obj, *args, **kwargs)
 |  
 |  get_return_values = wrapper(obj, *args, **kwargs)
 |  
 |  get_yield_lazy_contexts = wrapper(execution, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  function_execution_filter = <class 'jedi.evaluate.filters.FunctionExec...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, function_context, var_args)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.InstanceClassFilter,evaluate.context.instance,InstanceClassFilter,"Python Library Documentation: class InstanceClassFilter in module jedi.evaluate.context.instance

class InstanceClassFilter(jedi.evaluate.filters.ParserTreeFilter)
 |  Method resolution order:
 |      InstanceClassFilter
 |      jedi.evaluate.filters.ParserTreeFilter
 |      jedi.evaluate.filters.AbstractUsedNamesFilter
 |      jedi.evaluate.filters.AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, class_context, origin_scope)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.context.instance.LazyInstanceClassN...
 |      This name calculates the parent_context lazily.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, class_context, origin_scope)',)",origin_scope,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.InstanceClassFilter,evaluate.context.instance,InstanceClassFilter,"Python Library Documentation: class InstanceClassFilter in module jedi.evaluate.context.instance

class InstanceClassFilter(jedi.evaluate.filters.ParserTreeFilter)
 |  Method resolution order:
 |      InstanceClassFilter
 |      jedi.evaluate.filters.ParserTreeFilter
 |      jedi.evaluate.filters.AbstractUsedNamesFilter
 |      jedi.evaluate.filters.AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, class_context, origin_scope)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.context.instance.LazyInstanceClassN...
 |      This name calculates the parent_context lazily.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, class_context, origin_scope)',)",class_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.InstanceClassFilter,evaluate.context.instance,InstanceClassFilter,"Python Library Documentation: class InstanceClassFilter in module jedi.evaluate.context.instance

class InstanceClassFilter(jedi.evaluate.filters.ParserTreeFilter)
 |  Method resolution order:
 |      InstanceClassFilter
 |      jedi.evaluate.filters.ParserTreeFilter
 |      jedi.evaluate.filters.AbstractUsedNamesFilter
 |      jedi.evaluate.filters.AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, class_context, origin_scope)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.context.instance.LazyInstanceClassN...
 |      This name calculates the parent_context lazily.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, class_context, origin_scope)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.InstanceClassFilter,evaluate.context.instance,InstanceClassFilter,"Python Library Documentation: class InstanceClassFilter in module jedi.evaluate.context.instance

class InstanceClassFilter(jedi.evaluate.filters.ParserTreeFilter)
 |  Method resolution order:
 |      InstanceClassFilter
 |      jedi.evaluate.filters.ParserTreeFilter
 |      jedi.evaluate.filters.AbstractUsedNamesFilter
 |      jedi.evaluate.filters.AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, class_context, origin_scope)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.context.instance.LazyInstanceClassN...
 |      This name calculates the parent_context lazily.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, class_context, origin_scope)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.InstanceClassFilter,evaluate.context.instance,InstanceClassFilter,"Python Library Documentation: class InstanceClassFilter in module jedi.evaluate.context.instance

class InstanceClassFilter(jedi.evaluate.filters.ParserTreeFilter)
 |  Method resolution order:
 |      InstanceClassFilter
 |      jedi.evaluate.filters.ParserTreeFilter
 |      jedi.evaluate.filters.AbstractUsedNamesFilter
 |      jedi.evaluate.filters.AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, class_context, origin_scope)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.context.instance.LazyInstanceClassN...
 |      This name calculates the parent_context lazily.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, class_context, origin_scope)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.InstanceFunctionExecution,evaluate.context.instance,InstanceFunctionExecution,"Python Library Documentation: class InstanceFunctionExecution in module jedi.evaluate.context.instance

class InstanceFunctionExecution(BaseInstanceFunctionExecution)
 |  This class is used to evaluate functions and their returns.
 |  
 |  This is the most complicated class, because it contains the logic to
 |  transfer parameters. It is even more complicated, because there may be
 |  multiple calls to functions and recursion has to be avoided. But this is
 |  responsibility of the decorators.
 |  
 |  Method resolution order:
 |      InstanceFunctionExecution
 |      BaseInstanceFunctionExecution
 |      jedi.evaluate.context.function.FunctionExecutionContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, instance, parent_context, function_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.context.function.FunctionExecutionContext:
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_params = wrapper(obj, *args, **kwargs)
 |  
 |  get_return_values = wrapper(obj, *args, **kwargs)
 |  
 |  get_yield_lazy_contexts = wrapper(execution, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.context.function.FunctionExecutionContext:
 |  
 |  function_execution_filter = <class 'jedi.evaluate.filters.FunctionExec...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, instance, parent_context, function_context, var_args)',)",function_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.InstanceFunctionExecution,evaluate.context.instance,InstanceFunctionExecution,"Python Library Documentation: class InstanceFunctionExecution in module jedi.evaluate.context.instance

class InstanceFunctionExecution(BaseInstanceFunctionExecution)
 |  This class is used to evaluate functions and their returns.
 |  
 |  This is the most complicated class, because it contains the logic to
 |  transfer parameters. It is even more complicated, because there may be
 |  multiple calls to functions and recursion has to be avoided. But this is
 |  responsibility of the decorators.
 |  
 |  Method resolution order:
 |      InstanceFunctionExecution
 |      BaseInstanceFunctionExecution
 |      jedi.evaluate.context.function.FunctionExecutionContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, instance, parent_context, function_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.context.function.FunctionExecutionContext:
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_params = wrapper(obj, *args, **kwargs)
 |  
 |  get_return_values = wrapper(obj, *args, **kwargs)
 |  
 |  get_yield_lazy_contexts = wrapper(execution, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.context.function.FunctionExecutionContext:
 |  
 |  function_execution_filter = <class 'jedi.evaluate.filters.FunctionExec...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, instance, parent_context, function_context, var_args)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.InstanceFunctionExecution,evaluate.context.instance,InstanceFunctionExecution,"Python Library Documentation: class InstanceFunctionExecution in module jedi.evaluate.context.instance

class InstanceFunctionExecution(BaseInstanceFunctionExecution)
 |  This class is used to evaluate functions and their returns.
 |  
 |  This is the most complicated class, because it contains the logic to
 |  transfer parameters. It is even more complicated, because there may be
 |  multiple calls to functions and recursion has to be avoided. But this is
 |  responsibility of the decorators.
 |  
 |  Method resolution order:
 |      InstanceFunctionExecution
 |      BaseInstanceFunctionExecution
 |      jedi.evaluate.context.function.FunctionExecutionContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, instance, parent_context, function_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.context.function.FunctionExecutionContext:
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_params = wrapper(obj, *args, **kwargs)
 |  
 |  get_return_values = wrapper(obj, *args, **kwargs)
 |  
 |  get_yield_lazy_contexts = wrapper(execution, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.context.function.FunctionExecutionContext:
 |  
 |  function_execution_filter = <class 'jedi.evaluate.filters.FunctionExec...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, instance, parent_context, function_context, var_args)',)",instance,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.InstanceFunctionExecution,evaluate.context.instance,InstanceFunctionExecution,"Python Library Documentation: class InstanceFunctionExecution in module jedi.evaluate.context.instance

class InstanceFunctionExecution(BaseInstanceFunctionExecution)
 |  This class is used to evaluate functions and their returns.
 |  
 |  This is the most complicated class, because it contains the logic to
 |  transfer parameters. It is even more complicated, because there may be
 |  multiple calls to functions and recursion has to be avoided. But this is
 |  responsibility of the decorators.
 |  
 |  Method resolution order:
 |      InstanceFunctionExecution
 |      BaseInstanceFunctionExecution
 |      jedi.evaluate.context.function.FunctionExecutionContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, instance, parent_context, function_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.context.function.FunctionExecutionContext:
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_params = wrapper(obj, *args, **kwargs)
 |  
 |  get_return_values = wrapper(obj, *args, **kwargs)
 |  
 |  get_yield_lazy_contexts = wrapper(execution, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.context.function.FunctionExecutionContext:
 |  
 |  function_execution_filter = <class 'jedi.evaluate.filters.FunctionExec...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, instance, parent_context, function_context, var_args)',)",var_args,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.InstanceFunctionExecution,evaluate.context.instance,InstanceFunctionExecution,"Python Library Documentation: class InstanceFunctionExecution in module jedi.evaluate.context.instance

class InstanceFunctionExecution(BaseInstanceFunctionExecution)
 |  This class is used to evaluate functions and their returns.
 |  
 |  This is the most complicated class, because it contains the logic to
 |  transfer parameters. It is even more complicated, because there may be
 |  multiple calls to functions and recursion has to be avoided. But this is
 |  responsibility of the decorators.
 |  
 |  Method resolution order:
 |      InstanceFunctionExecution
 |      BaseInstanceFunctionExecution
 |      jedi.evaluate.context.function.FunctionExecutionContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, instance, parent_context, function_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.context.function.FunctionExecutionContext:
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_params = wrapper(obj, *args, **kwargs)
 |  
 |  get_return_values = wrapper(obj, *args, **kwargs)
 |  
 |  get_yield_lazy_contexts = wrapper(execution, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.context.function.FunctionExecutionContext:
 |  
 |  function_execution_filter = <class 'jedi.evaluate.filters.FunctionExec...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, instance, parent_context, function_context, var_args)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.InstanceNameDefinition,evaluate.context.instance,InstanceNameDefinition,"Python Library Documentation: class InstanceNameDefinition in module jedi.evaluate.context.instance

class InstanceNameDefinition(jedi.evaluate.filters.TreeNameDefinition)
 |  Method resolution order:
 |      InstanceNameDefinition
 |      jedi.evaluate.filters.TreeNameDefinition
 |      jedi.evaluate.filters.AbstractTreeName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.TreeNameDefinition:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractTreeName:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.InstanceNameDefinition,evaluate.context.instance,InstanceNameDefinition,"Python Library Documentation: class InstanceNameDefinition in module jedi.evaluate.context.instance

class InstanceNameDefinition(jedi.evaluate.filters.TreeNameDefinition)
 |  Method resolution order:
 |      InstanceNameDefinition
 |      jedi.evaluate.filters.TreeNameDefinition
 |      jedi.evaluate.filters.AbstractTreeName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.TreeNameDefinition:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractTreeName:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",tree_name,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.InstanceNameDefinition,evaluate.context.instance,InstanceNameDefinition,"Python Library Documentation: class InstanceNameDefinition in module jedi.evaluate.context.instance

class InstanceNameDefinition(jedi.evaluate.filters.TreeNameDefinition)
 |  Method resolution order:
 |      InstanceNameDefinition
 |      jedi.evaluate.filters.TreeNameDefinition
 |      jedi.evaluate.filters.AbstractTreeName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.TreeNameDefinition:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractTreeName:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.InstanceVarArgs,evaluate.context.instance,InstanceVarArgs,"Python Library Documentation: class InstanceVarArgs in module jedi.evaluate.context.instance

class InstanceVarArgs(jedi.evaluate.arguments.AbstractArguments)
 |  Method resolution order:
 |      InstanceVarArgs
 |      jedi.evaluate.arguments.AbstractArguments
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, execution_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_calling_nodes(self)
 |  
 |  unpack(self, func=None)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  argument_node
 |  
 |  trailer
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.arguments.AbstractArguments:
 |  
 |  eval_all(self, funcdef=None)
 |      Evaluates all arguments as a support for static analysis
 |      (normally Jedi).
 |  
 |  eval_argument_clinic(self, parameters)
 |      Uses a list with argument clinic information (see PEP 436).
 |  
 |  get_params(self, execution_context)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.arguments.AbstractArguments:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.arguments.AbstractArguments:
 |  
 |  context = None
",class,"('(self, execution_context, var_args)',)",execution_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.InstanceVarArgs,evaluate.context.instance,InstanceVarArgs,"Python Library Documentation: class InstanceVarArgs in module jedi.evaluate.context.instance

class InstanceVarArgs(jedi.evaluate.arguments.AbstractArguments)
 |  Method resolution order:
 |      InstanceVarArgs
 |      jedi.evaluate.arguments.AbstractArguments
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, execution_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_calling_nodes(self)
 |  
 |  unpack(self, func=None)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  argument_node
 |  
 |  trailer
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.arguments.AbstractArguments:
 |  
 |  eval_all(self, funcdef=None)
 |      Evaluates all arguments as a support for static analysis
 |      (normally Jedi).
 |  
 |  eval_argument_clinic(self, parameters)
 |      Uses a list with argument clinic information (see PEP 436).
 |  
 |  get_params(self, execution_context)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.arguments.AbstractArguments:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.arguments.AbstractArguments:
 |  
 |  context = None
",class,"('(self, execution_context, var_args)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.InstanceVarArgs,evaluate.context.instance,InstanceVarArgs,"Python Library Documentation: class InstanceVarArgs in module jedi.evaluate.context.instance

class InstanceVarArgs(jedi.evaluate.arguments.AbstractArguments)
 |  Method resolution order:
 |      InstanceVarArgs
 |      jedi.evaluate.arguments.AbstractArguments
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, execution_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_calling_nodes(self)
 |  
 |  unpack(self, func=None)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  argument_node
 |  
 |  trailer
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.arguments.AbstractArguments:
 |  
 |  eval_all(self, funcdef=None)
 |      Evaluates all arguments as a support for static analysis
 |      (normally Jedi).
 |  
 |  eval_argument_clinic(self, parameters)
 |      Uses a list with argument clinic information (see PEP 436).
 |  
 |  get_params(self, execution_context)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.arguments.AbstractArguments:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.arguments.AbstractArguments:
 |  
 |  context = None
",class,"('(self, execution_context, var_args)',)",var_args,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.LazyInstanceClassName,evaluate.context.instance,LazyInstanceClassName,"Python Library Documentation: class LazyInstanceClassName in module jedi.evaluate.context.instance

class LazyInstanceClassName(SelfName)
 |  This name calculates the parent_context lazily.
 |  
 |  Method resolution order:
 |      LazyInstanceClassName
 |      SelfName
 |      jedi.evaluate.filters.TreeNameDefinition
 |      jedi.evaluate.filters.AbstractTreeName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer = wrapper(*args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from SelfName:
 |  
 |  __init__(self, instance, class_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from SelfName:
 |  
 |  parent_context
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.TreeNameDefinition:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  tree_name = None
",class,"('(self, instance, class_context, tree_name)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.LazyInstanceClassName,evaluate.context.instance,LazyInstanceClassName,"Python Library Documentation: class LazyInstanceClassName in module jedi.evaluate.context.instance

class LazyInstanceClassName(SelfName)
 |  This name calculates the parent_context lazily.
 |  
 |  Method resolution order:
 |      LazyInstanceClassName
 |      SelfName
 |      jedi.evaluate.filters.TreeNameDefinition
 |      jedi.evaluate.filters.AbstractTreeName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer = wrapper(*args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from SelfName:
 |  
 |  __init__(self, instance, class_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from SelfName:
 |  
 |  parent_context
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.TreeNameDefinition:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  tree_name = None
",class,"('(self, instance, class_context, tree_name)',)",class_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.LazyInstanceClassName,evaluate.context.instance,LazyInstanceClassName,"Python Library Documentation: class LazyInstanceClassName in module jedi.evaluate.context.instance

class LazyInstanceClassName(SelfName)
 |  This name calculates the parent_context lazily.
 |  
 |  Method resolution order:
 |      LazyInstanceClassName
 |      SelfName
 |      jedi.evaluate.filters.TreeNameDefinition
 |      jedi.evaluate.filters.AbstractTreeName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer = wrapper(*args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from SelfName:
 |  
 |  __init__(self, instance, class_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from SelfName:
 |  
 |  parent_context
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.TreeNameDefinition:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  tree_name = None
",class,"('(self, instance, class_context, tree_name)',)",instance,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.LazyInstanceClassName,evaluate.context.instance,LazyInstanceClassName,"Python Library Documentation: class LazyInstanceClassName in module jedi.evaluate.context.instance

class LazyInstanceClassName(SelfName)
 |  This name calculates the parent_context lazily.
 |  
 |  Method resolution order:
 |      LazyInstanceClassName
 |      SelfName
 |      jedi.evaluate.filters.TreeNameDefinition
 |      jedi.evaluate.filters.AbstractTreeName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer = wrapper(*args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from SelfName:
 |  
 |  __init__(self, instance, class_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from SelfName:
 |  
 |  parent_context
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.TreeNameDefinition:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  tree_name = None
",class,"('(self, instance, class_context, tree_name)',)",tree_name,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.LazyKnownContext,evaluate.context.instance,LazyKnownContext,"Python Library Documentation: class LazyKnownContext in module jedi.evaluate.lazy_context

class LazyKnownContext(AbstractLazyContext)
 |  data is a context.
 |  
 |  Method resolution order:
 |      LazyKnownContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __init__(self, data)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, data)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.LazyKnownContext,evaluate.context.instance,LazyKnownContext,"Python Library Documentation: class LazyKnownContext in module jedi.evaluate.lazy_context

class LazyKnownContext(AbstractLazyContext)
 |  data is a context.
 |  
 |  Method resolution order:
 |      LazyKnownContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __init__(self, data)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, data)',)",data,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.LazyKnownContexts,evaluate.context.instance,LazyKnownContexts,"Python Library Documentation: class LazyKnownContexts in module jedi.evaluate.lazy_context

class LazyKnownContexts(AbstractLazyContext)
 |  data is a ContextSet.
 |  
 |  Method resolution order:
 |      LazyKnownContexts
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __init__(self, data)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, data)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.LazyKnownContexts,evaluate.context.instance,LazyKnownContexts,"Python Library Documentation: class LazyKnownContexts in module jedi.evaluate.lazy_context

class LazyKnownContexts(AbstractLazyContext)
 |  data is a ContextSet.
 |  
 |  Method resolution order:
 |      LazyKnownContexts
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __init__(self, data)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, data)',)",data,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.SelfAttributeFilter,evaluate.context.instance,SelfAttributeFilter,"Python Library Documentation: class SelfAttributeFilter in module jedi.evaluate.context.instance

class SelfAttributeFilter(InstanceClassFilter)
 |  This class basically filters all the use cases where `self.*` was assigned.
 |  
 |  Method resolution order:
 |      SelfAttributeFilter
 |      InstanceClassFilter
 |      jedi.evaluate.filters.ParserTreeFilter
 |      jedi.evaluate.filters.AbstractUsedNamesFilter
 |      jedi.evaluate.filters.AbstractFilter
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.context.instance.SelfName'>
 |      This name calculates the parent_context lazily.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from InstanceClassFilter:
 |  
 |  __init__(self, evaluator, context, class_context, origin_scope)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, class_context, origin_scope)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.SelfAttributeFilter,evaluate.context.instance,SelfAttributeFilter,"Python Library Documentation: class SelfAttributeFilter in module jedi.evaluate.context.instance

class SelfAttributeFilter(InstanceClassFilter)
 |  This class basically filters all the use cases where `self.*` was assigned.
 |  
 |  Method resolution order:
 |      SelfAttributeFilter
 |      InstanceClassFilter
 |      jedi.evaluate.filters.ParserTreeFilter
 |      jedi.evaluate.filters.AbstractUsedNamesFilter
 |      jedi.evaluate.filters.AbstractFilter
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.context.instance.SelfName'>
 |      This name calculates the parent_context lazily.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from InstanceClassFilter:
 |  
 |  __init__(self, evaluator, context, class_context, origin_scope)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, class_context, origin_scope)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.SelfAttributeFilter,evaluate.context.instance,SelfAttributeFilter,"Python Library Documentation: class SelfAttributeFilter in module jedi.evaluate.context.instance

class SelfAttributeFilter(InstanceClassFilter)
 |  This class basically filters all the use cases where `self.*` was assigned.
 |  
 |  Method resolution order:
 |      SelfAttributeFilter
 |      InstanceClassFilter
 |      jedi.evaluate.filters.ParserTreeFilter
 |      jedi.evaluate.filters.AbstractUsedNamesFilter
 |      jedi.evaluate.filters.AbstractFilter
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.context.instance.SelfName'>
 |      This name calculates the parent_context lazily.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from InstanceClassFilter:
 |  
 |  __init__(self, evaluator, context, class_context, origin_scope)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, class_context, origin_scope)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.SelfAttributeFilter,evaluate.context.instance,SelfAttributeFilter,"Python Library Documentation: class SelfAttributeFilter in module jedi.evaluate.context.instance

class SelfAttributeFilter(InstanceClassFilter)
 |  This class basically filters all the use cases where `self.*` was assigned.
 |  
 |  Method resolution order:
 |      SelfAttributeFilter
 |      InstanceClassFilter
 |      jedi.evaluate.filters.ParserTreeFilter
 |      jedi.evaluate.filters.AbstractUsedNamesFilter
 |      jedi.evaluate.filters.AbstractFilter
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.context.instance.SelfName'>
 |      This name calculates the parent_context lazily.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from InstanceClassFilter:
 |  
 |  __init__(self, evaluator, context, class_context, origin_scope)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, class_context, origin_scope)',)",class_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.SelfAttributeFilter,evaluate.context.instance,SelfAttributeFilter,"Python Library Documentation: class SelfAttributeFilter in module jedi.evaluate.context.instance

class SelfAttributeFilter(InstanceClassFilter)
 |  This class basically filters all the use cases where `self.*` was assigned.
 |  
 |  Method resolution order:
 |      SelfAttributeFilter
 |      InstanceClassFilter
 |      jedi.evaluate.filters.ParserTreeFilter
 |      jedi.evaluate.filters.AbstractUsedNamesFilter
 |      jedi.evaluate.filters.AbstractFilter
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.context.instance.SelfName'>
 |      This name calculates the parent_context lazily.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from InstanceClassFilter:
 |  
 |  __init__(self, evaluator, context, class_context, origin_scope)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, class_context, origin_scope)',)",origin_scope,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.SelfName,evaluate.context.instance,SelfName,"Python Library Documentation: class SelfName in module jedi.evaluate.context.instance

class SelfName(jedi.evaluate.filters.TreeNameDefinition)
 |  This name calculates the parent_context lazily.
 |  
 |  Method resolution order:
 |      SelfName
 |      jedi.evaluate.filters.TreeNameDefinition
 |      jedi.evaluate.filters.AbstractTreeName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, instance, class_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  parent_context
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.TreeNameDefinition:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.TreeNameDefinition:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  tree_name = None
",class,"('(self, instance, class_context, tree_name)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.SelfName,evaluate.context.instance,SelfName,"Python Library Documentation: class SelfName in module jedi.evaluate.context.instance

class SelfName(jedi.evaluate.filters.TreeNameDefinition)
 |  This name calculates the parent_context lazily.
 |  
 |  Method resolution order:
 |      SelfName
 |      jedi.evaluate.filters.TreeNameDefinition
 |      jedi.evaluate.filters.AbstractTreeName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, instance, class_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  parent_context
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.TreeNameDefinition:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.TreeNameDefinition:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  tree_name = None
",class,"('(self, instance, class_context, tree_name)',)",instance,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.SelfName,evaluate.context.instance,SelfName,"Python Library Documentation: class SelfName in module jedi.evaluate.context.instance

class SelfName(jedi.evaluate.filters.TreeNameDefinition)
 |  This name calculates the parent_context lazily.
 |  
 |  Method resolution order:
 |      SelfName
 |      jedi.evaluate.filters.TreeNameDefinition
 |      jedi.evaluate.filters.AbstractTreeName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, instance, class_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  parent_context
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.TreeNameDefinition:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.TreeNameDefinition:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  tree_name = None
",class,"('(self, instance, class_context, tree_name)',)",tree_name,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.SelfName,evaluate.context.instance,SelfName,"Python Library Documentation: class SelfName in module jedi.evaluate.context.instance

class SelfName(jedi.evaluate.filters.TreeNameDefinition)
 |  This name calculates the parent_context lazily.
 |  
 |  Method resolution order:
 |      SelfName
 |      jedi.evaluate.filters.TreeNameDefinition
 |      jedi.evaluate.filters.AbstractTreeName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, instance, class_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  parent_context
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.TreeNameDefinition:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.TreeNameDefinition:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  tree_name = None
",class,"('(self, instance, class_context, tree_name)',)",class_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.TreeInstance,evaluate.context.instance,TreeInstance,"Python Library Documentation: class TreeInstance in module jedi.evaluate.context.instance

class TreeInstance(AbstractInstanceContext)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      TreeInstance
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractInstanceContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractInstanceContext:
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractInstanceContext:
 |  
 |  api_type = 'instance'
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Instan...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context, var_args)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.TreeInstance,evaluate.context.instance,TreeInstance,"Python Library Documentation: class TreeInstance in module jedi.evaluate.context.instance

class TreeInstance(AbstractInstanceContext)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      TreeInstance
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractInstanceContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractInstanceContext:
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractInstanceContext:
 |  
 |  api_type = 'instance'
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Instan...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context, var_args)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.TreeInstance,evaluate.context.instance,TreeInstance,"Python Library Documentation: class TreeInstance in module jedi.evaluate.context.instance

class TreeInstance(AbstractInstanceContext)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      TreeInstance
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractInstanceContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractInstanceContext:
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractInstanceContext:
 |  
 |  api_type = 'instance'
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Instan...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context, var_args)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.TreeInstance,evaluate.context.instance,TreeInstance,"Python Library Documentation: class TreeInstance in module jedi.evaluate.context.instance

class TreeInstance(AbstractInstanceContext)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      TreeInstance
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractInstanceContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractInstanceContext:
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractInstanceContext:
 |  
 |  api_type = 'instance'
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Instan...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context, var_args)',)",class_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.TreeInstance,evaluate.context.instance,TreeInstance,"Python Library Documentation: class TreeInstance in module jedi.evaluate.context.instance

class TreeInstance(AbstractInstanceContext)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      TreeInstance
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractInstanceContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractInstanceContext:
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractInstanceContext:
 |  
 |  api_type = 'instance'
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Instan...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context, var_args)',)",var_args,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.abstractproperty,evaluate.context.instance,abstractproperty,"Python Library Documentation: class abstractproperty in module abc

class abstractproperty(builtins.property)
 |  A decorator indicating abstract properties.
 |  
 |  Requires that the metaclass is ABCMeta or derived from it.  A
 |  class that has a metaclass derived from ABCMeta cannot be
 |  instantiated unless all of its abstract properties are overridden.
 |  The abstract properties can be called using any of the normal
 |  'super' call mechanisms.
 |  
 |  Usage:
 |  
 |      class C(metaclass=ABCMeta):
 |          @abstractproperty
 |          def my_abstract_property(self):
 |              ...
 |  
 |  This defines a read-only property; you can also define a read-write
 |  abstract property using the 'long' form of property declaration:
 |  
 |      class C(metaclass=ABCMeta):
 |          def getx(self): ...
 |          def setx(self, value): ...
 |          x = abstractproperty(getx, setx)
 |  
 |  'abstractproperty' is deprecated. Use 'property' with 'abstractmethod'
 |  instead.
 |  
 |  Method resolution order:
 |      abstractproperty
 |      builtins.property
 |      builtins.object
 |  
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __isabstractmethod__ = True
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.property:
 |  
 |  __delete__(self, instance, /)
 |      Delete an attribute of instance.
 |  
 |  __get__(self, instance, owner, /)
 |      Return an attribute of instance, which is of type owner.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __set__(self, instance, value, /)
 |      Set an attribute of instance to value.
 |  
 |  deleter(...)
 |      Descriptor to change the deleter on a property.
 |  
 |  getter(...)
 |      Descriptor to change the getter on a property.
 |  
 |  setter(...)
 |      Descriptor to change the setter on a property.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.property:
 |  
 |  fdel
 |  
 |  fget
 |  
 |  fset
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.apply_py__get__,evaluate.context.instance,apply_py__get__,"Python Library Documentation: function apply_py__get__ in module jedi.evaluate.context.klass

apply_py__get__(context, base_context)
",function,"('(context, base_context)',)",base_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.apply_py__get__,evaluate.context.instance,apply_py__get__,"Python Library Documentation: function apply_py__get__ in module jedi.evaluate.context.klass

apply_py__get__(context, base_context)
",function,"('(context, base_context)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.evaluator_method_cache,evaluate.context.instance,evaluator_method_cache,"Python Library Documentation: function evaluator_method_cache in module jedi.evaluate.cache

evaluator_method_cache(default=<object object at 0x000000000520FC20>)
",function,"('(default=<object object at 0x000000000520FC20>)',)",default,<object object at 0x000000000520FC20>,object,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.get_parent_scope,evaluate.context.instance,get_parent_scope,"Python Library Documentation: function get_parent_scope in module jedi.parser_utils

get_parent_scope(node, include_flows=False)
    Returns the underlying scope.
",function,"('(node, include_flows=False)',)",include_flows,False,bool,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.get_parent_scope,evaluate.context.instance,get_parent_scope,"Python Library Documentation: function get_parent_scope in module jedi.parser_utils

get_parent_scope(node, include_flows=False)
    Returns the underlying scope.
",function,"('(node, include_flows=False)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.iterator_to_context_set,evaluate.context.instance,iterator_to_context_set,"Python Library Documentation: function iterator_to_context_set in module jedi.evaluate.base_context

iterator_to_context_set(func)
",function,"('(func)',)",func,,,arg_info
jedi,0.12.0,jedi.evaluate.context.instance.memoize_method,evaluate.context.instance,memoize_method,"Python Library Documentation: function memoize_method in module jedi.cache

memoize_method(method)
    A normal memoize function.
",function,"('(method)',)",method,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.BuiltinOverwrite,evaluate.context.iterable,BuiltinOverwrite,"Python Library Documentation: class BuiltinOverwrite in module jedi.evaluate.filters

class BuiltinOverwrite(jedi.evaluate.base_context.Context, AbstractObjectOverwrite)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_object(self)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {}
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
",class,"('(self, evaluator)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.BuiltinOverwrite,evaluate.context.iterable,BuiltinOverwrite,"Python Library Documentation: class BuiltinOverwrite in module jedi.evaluate.filters

class BuiltinOverwrite(jedi.evaluate.base_context.Context, AbstractObjectOverwrite)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_object(self)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {}
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
",class,"('(self, evaluator)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.CompForContext,evaluate.context.iterable,CompForContext,"Python Library Documentation: class CompForContext in module jedi.evaluate.context.iterable

class CompForContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      CompForContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, comp_for)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_node(self)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  from_comp_for(parent_context, comp_for) from builtins.type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, comp_for)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.CompForContext,evaluate.context.iterable,CompForContext,"Python Library Documentation: class CompForContext in module jedi.evaluate.context.iterable

class CompForContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      CompForContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, comp_for)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_node(self)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  from_comp_for(parent_context, comp_for) from builtins.type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, comp_for)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.CompForContext,evaluate.context.iterable,CompForContext,"Python Library Documentation: class CompForContext in module jedi.evaluate.context.iterable

class CompForContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      CompForContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, comp_for)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_node(self)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  from_comp_for(parent_context, comp_for) from builtins.type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, comp_for)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.CompForContext,evaluate.context.iterable,CompForContext,"Python Library Documentation: class CompForContext in module jedi.evaluate.context.iterable

class CompForContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      CompForContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, comp_for)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_node(self)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  from_comp_for(parent_context, comp_for) from builtins.type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, comp_for)',)",comp_for,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.CompForContext.from_comp_for,evaluate.context.iterable.CompForContext,from_comp_for,"Python Library Documentation: method from_comp_for in module jedi.evaluate.context.iterable

from_comp_for(parent_context, comp_for) method of builtins.type instance
",method,"('(parent_context, comp_for)',)",comp_for,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.CompForContext.from_comp_for,evaluate.context.iterable.CompForContext,from_comp_for,"Python Library Documentation: method from_comp_for in module jedi.evaluate.context.iterable

from_comp_for(parent_context, comp_for) method of builtins.type instance
",method,"('(parent_context, comp_for)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.CompForContext.from_comp_for,evaluate.context.iterable.CompForContext,from_comp_for,"Python Library Documentation: method from_comp_for in module jedi.evaluate.context.iterable

from_comp_for(parent_context, comp_for) method of builtins.type instance
",method,"('(parent_context, comp_for)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.ComprehensionMixin,evaluate.context.iterable,ComprehensionMixin,"Python Library Documentation: class ComprehensionMixin in module jedi.evaluate.context.iterable

class ComprehensionMixin(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, defining_context, atom)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, defining_context, atom)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.ComprehensionMixin,evaluate.context.iterable,ComprehensionMixin,"Python Library Documentation: class ComprehensionMixin in module jedi.evaluate.context.iterable

class ComprehensionMixin(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, defining_context, atom)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, defining_context, atom)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.ComprehensionMixin,evaluate.context.iterable,ComprehensionMixin,"Python Library Documentation: class ComprehensionMixin in module jedi.evaluate.context.iterable

class ComprehensionMixin(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, defining_context, atom)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, defining_context, atom)',)",atom,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.ComprehensionMixin,evaluate.context.iterable,ComprehensionMixin,"Python Library Documentation: class ComprehensionMixin in module jedi.evaluate.context.iterable

class ComprehensionMixin(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, defining_context, atom)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, defining_context, atom)',)",defining_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.Context,evaluate.context.iterable,Context,"Python Library Documentation: class Context in module jedi.evaluate.base_context

class Context(jedi.common.context.BaseContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.Context,evaluate.context.iterable,Context,"Python Library Documentation: class Context in module jedi.evaluate.base_context

class Context(jedi.common.context.BaseContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.Context,evaluate.context.iterable,Context,"Python Library Documentation: class Context in module jedi.evaluate.base_context

class Context(jedi.common.context.BaseContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",parent_context,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.ContextSet,evaluate.context.iterable,ContextSet,"Python Library Documentation: class ContextSet in module jedi.evaluate.base_context

class ContextSet(jedi.common.context.BaseContextSet)
 |  Method resolution order:
 |      ContextSet
 |      jedi.common.context.BaseContextSet
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContextSet:
 |  
 |  __bool__(self)
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, *args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self)
 |  
 |  __len__(self)
 |  
 |  __or__(self, other)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  filter(self, filter_func)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from jedi.common.context.BaseContextSet:
 |  
 |  from_iterable(iterable) from builtins.type
 |  
 |  from_set(set_) from builtins.type
 |  
 |  from_sets(sets) from builtins.type
 |      Used to work with an iterable of set.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContextSet:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, *args)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.ContextSet.from_iterable,evaluate.context.iterable.ContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.ContextSet.from_iterable,evaluate.context.iterable.ContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",iterable,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.ContextSet.from_set,evaluate.context.iterable.ContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.ContextSet.from_set,evaluate.context.iterable.ContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",set_,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.ContextSet.from_sets,evaluate.context.iterable.ContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.ContextSet.from_sets,evaluate.context.iterable.ContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",sets,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.ContextualizedNode,evaluate.context.iterable,ContextualizedNode,"Python Library Documentation: class ContextualizedNode in module jedi.evaluate.base_context

class ContextualizedNode(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.ContextualizedNode,evaluate.context.iterable,ContextualizedNode,"Python Library Documentation: class ContextualizedNode in module jedi.evaluate.base_context

class ContextualizedNode(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.ContextualizedNode,evaluate.context.iterable,ContextualizedNode,"Python Library Documentation: class ContextualizedNode in module jedi.evaluate.base_context

class ContextualizedNode(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.DictComprehension,evaluate.context.iterable,DictComprehension,"Python Library Documentation: class DictComprehension in module jedi.evaluate.context.iterable

class DictComprehension(ComprehensionMixin, Sequence)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      DictComprehension
 |      ComprehensionMixin
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  dict_values(self)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  array_type = 'dict'
 |  
 |  overwritten_methods = {'items': (<function DictComprehension._imitate_...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ComprehensionMixin:
 |  
 |  __init__(self, evaluator, defining_context, atom)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ComprehensionMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Sequence:
 |  
 |  get_object(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Sequence:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Sequence:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, defining_context, atom)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.DictComprehension,evaluate.context.iterable,DictComprehension,"Python Library Documentation: class DictComprehension in module jedi.evaluate.context.iterable

class DictComprehension(ComprehensionMixin, Sequence)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      DictComprehension
 |      ComprehensionMixin
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  dict_values(self)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  array_type = 'dict'
 |  
 |  overwritten_methods = {'items': (<function DictComprehension._imitate_...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ComprehensionMixin:
 |  
 |  __init__(self, evaluator, defining_context, atom)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ComprehensionMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Sequence:
 |  
 |  get_object(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Sequence:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Sequence:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, defining_context, atom)',)",defining_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.DictComprehension,evaluate.context.iterable,DictComprehension,"Python Library Documentation: class DictComprehension in module jedi.evaluate.context.iterable

class DictComprehension(ComprehensionMixin, Sequence)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      DictComprehension
 |      ComprehensionMixin
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  dict_values(self)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  array_type = 'dict'
 |  
 |  overwritten_methods = {'items': (<function DictComprehension._imitate_...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ComprehensionMixin:
 |  
 |  __init__(self, evaluator, defining_context, atom)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ComprehensionMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Sequence:
 |  
 |  get_object(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Sequence:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Sequence:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, defining_context, atom)',)",atom,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.DictComprehension,evaluate.context.iterable,DictComprehension,"Python Library Documentation: class DictComprehension in module jedi.evaluate.context.iterable

class DictComprehension(ComprehensionMixin, Sequence)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      DictComprehension
 |      ComprehensionMixin
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  dict_values(self)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  array_type = 'dict'
 |  
 |  overwritten_methods = {'items': (<function DictComprehension._imitate_...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ComprehensionMixin:
 |  
 |  __init__(self, evaluator, defining_context, atom)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ComprehensionMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Sequence:
 |  
 |  get_object(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Sequence:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Sequence:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, defining_context, atom)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.DictLiteralContext,evaluate.context.iterable,DictLiteralContext,"Python Library Documentation: class DictLiteralContext in module jedi.evaluate.context.iterable

class DictLiteralContext(SequenceLiteralContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      DictLiteralContext
 |      SequenceLiteralContext
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, defining_context, atom)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  array_type = 'dict'
 |  
 |  overwritten_methods = {'items': (<function DictLiteralContext._imitate...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from SequenceLiteralContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  exact_key_items(self)
 |      Returns a generator of tuples like dict.items(), where the key is
 |      resolved (as a string) and the values are still lazy contexts.
 |  
 |  py__getitem__(self, index)
 |      Here the index is an int/str. Raises IndexError/KeyError.
 |  
 |  py__iter__(self)
 |      While values returns the possible values for any array field, this
 |      function returns the value for a certain index.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from SequenceLiteralContext:
 |  
 |  mapping = {'(': 'tuple', '[': 'list', '{': 'set'}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Sequence:
 |  
 |  dict_values(self)
 |  
 |  get_object(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Sequence:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Sequence:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, defining_context, atom)',)",atom,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.DictLiteralContext,evaluate.context.iterable,DictLiteralContext,"Python Library Documentation: class DictLiteralContext in module jedi.evaluate.context.iterable

class DictLiteralContext(SequenceLiteralContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      DictLiteralContext
 |      SequenceLiteralContext
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, defining_context, atom)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  array_type = 'dict'
 |  
 |  overwritten_methods = {'items': (<function DictLiteralContext._imitate...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from SequenceLiteralContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  exact_key_items(self)
 |      Returns a generator of tuples like dict.items(), where the key is
 |      resolved (as a string) and the values are still lazy contexts.
 |  
 |  py__getitem__(self, index)
 |      Here the index is an int/str. Raises IndexError/KeyError.
 |  
 |  py__iter__(self)
 |      While values returns the possible values for any array field, this
 |      function returns the value for a certain index.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from SequenceLiteralContext:
 |  
 |  mapping = {'(': 'tuple', '[': 'list', '{': 'set'}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Sequence:
 |  
 |  dict_values(self)
 |  
 |  get_object(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Sequence:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Sequence:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, defining_context, atom)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.DictLiteralContext,evaluate.context.iterable,DictLiteralContext,"Python Library Documentation: class DictLiteralContext in module jedi.evaluate.context.iterable

class DictLiteralContext(SequenceLiteralContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      DictLiteralContext
 |      SequenceLiteralContext
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, defining_context, atom)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  array_type = 'dict'
 |  
 |  overwritten_methods = {'items': (<function DictLiteralContext._imitate...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from SequenceLiteralContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  exact_key_items(self)
 |      Returns a generator of tuples like dict.items(), where the key is
 |      resolved (as a string) and the values are still lazy contexts.
 |  
 |  py__getitem__(self, index)
 |      Here the index is an int/str. Raises IndexError/KeyError.
 |  
 |  py__iter__(self)
 |      While values returns the possible values for any array field, this
 |      function returns the value for a certain index.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from SequenceLiteralContext:
 |  
 |  mapping = {'(': 'tuple', '[': 'list', '{': 'set'}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Sequence:
 |  
 |  dict_values(self)
 |  
 |  get_object(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Sequence:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Sequence:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, defining_context, atom)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.DictLiteralContext,evaluate.context.iterable,DictLiteralContext,"Python Library Documentation: class DictLiteralContext in module jedi.evaluate.context.iterable

class DictLiteralContext(SequenceLiteralContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      DictLiteralContext
 |      SequenceLiteralContext
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, defining_context, atom)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  array_type = 'dict'
 |  
 |  overwritten_methods = {'items': (<function DictLiteralContext._imitate...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from SequenceLiteralContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  exact_key_items(self)
 |      Returns a generator of tuples like dict.items(), where the key is
 |      resolved (as a string) and the values are still lazy contexts.
 |  
 |  py__getitem__(self, index)
 |      Here the index is an int/str. Raises IndexError/KeyError.
 |  
 |  py__iter__(self)
 |      While values returns the possible values for any array field, this
 |      function returns the value for a certain index.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from SequenceLiteralContext:
 |  
 |  mapping = {'(': 'tuple', '[': 'list', '{': 'set'}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Sequence:
 |  
 |  dict_values(self)
 |  
 |  get_object(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Sequence:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Sequence:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, defining_context, atom)',)",defining_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.FakeDict,evaluate.context.iterable,FakeDict,"Python Library Documentation: class FakeDict in module jedi.evaluate.context.iterable

class FakeDict(_FakeArray)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      FakeDict
 |      _FakeArray
 |      SequenceLiteralContext
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, dct)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  dict_values(self)
 |  
 |  exact_key_items(self)
 |      Returns a generator of tuples like dict.items(), where the key is
 |      resolved (as a string) and the values are still lazy contexts.
 |  
 |  py__getitem__(self, index)
 |      Here the index is an int/str. Raises IndexError/KeyError.
 |  
 |  py__iter__(self)
 |      While values returns the possible values for any array field, this
 |      function returns the value for a certain index.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {'values': (<function FakeDict._values>, None)}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from SequenceLiteralContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from SequenceLiteralContext:
 |  
 |  mapping = {'(': 'tuple', '[': 'list', '{': 'set'}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Sequence:
 |  
 |  get_object(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Sequence:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Sequence:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, dct)',)",dct,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.FakeDict,evaluate.context.iterable,FakeDict,"Python Library Documentation: class FakeDict in module jedi.evaluate.context.iterable

class FakeDict(_FakeArray)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      FakeDict
 |      _FakeArray
 |      SequenceLiteralContext
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, dct)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  dict_values(self)
 |  
 |  exact_key_items(self)
 |      Returns a generator of tuples like dict.items(), where the key is
 |      resolved (as a string) and the values are still lazy contexts.
 |  
 |  py__getitem__(self, index)
 |      Here the index is an int/str. Raises IndexError/KeyError.
 |  
 |  py__iter__(self)
 |      While values returns the possible values for any array field, this
 |      function returns the value for a certain index.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {'values': (<function FakeDict._values>, None)}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from SequenceLiteralContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from SequenceLiteralContext:
 |  
 |  mapping = {'(': 'tuple', '[': 'list', '{': 'set'}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Sequence:
 |  
 |  get_object(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Sequence:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Sequence:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, dct)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.FakeDict,evaluate.context.iterable,FakeDict,"Python Library Documentation: class FakeDict in module jedi.evaluate.context.iterable

class FakeDict(_FakeArray)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      FakeDict
 |      _FakeArray
 |      SequenceLiteralContext
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, dct)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  dict_values(self)
 |  
 |  exact_key_items(self)
 |      Returns a generator of tuples like dict.items(), where the key is
 |      resolved (as a string) and the values are still lazy contexts.
 |  
 |  py__getitem__(self, index)
 |      Here the index is an int/str. Raises IndexError/KeyError.
 |  
 |  py__iter__(self)
 |      While values returns the possible values for any array field, this
 |      function returns the value for a certain index.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {'values': (<function FakeDict._values>, None)}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from SequenceLiteralContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from SequenceLiteralContext:
 |  
 |  mapping = {'(': 'tuple', '[': 'list', '{': 'set'}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Sequence:
 |  
 |  get_object(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Sequence:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Sequence:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, dct)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.FakeSequence,evaluate.context.iterable,FakeSequence,"Python Library Documentation: class FakeSequence in module jedi.evaluate.context.iterable

class FakeSequence(_FakeArray)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      FakeSequence
 |      _FakeArray
 |      SequenceLiteralContext
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, array_type, lazy_context_list)
 |      type should be one of ""tuple"", ""list""
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__getitem__(self, index)
 |      Here the index is an int/str. Raises IndexError/KeyError.
 |  
 |  py__iter__(self)
 |      While values returns the possible values for any array field, this
 |      function returns the value for a certain index.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from SequenceLiteralContext:
 |  
 |  exact_key_items(self)
 |      Returns a generator of tuples like dict.items(), where the key is
 |      resolved (as a string) and the values are still lazy contexts.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from SequenceLiteralContext:
 |  
 |  mapping = {'(': 'tuple', '[': 'list', '{': 'set'}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Sequence:
 |  
 |  dict_values(self)
 |  
 |  get_object(self)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Sequence:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Sequence:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, array_type, lazy_context_list)',)",array_type,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.FakeSequence,evaluate.context.iterable,FakeSequence,"Python Library Documentation: class FakeSequence in module jedi.evaluate.context.iterable

class FakeSequence(_FakeArray)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      FakeSequence
 |      _FakeArray
 |      SequenceLiteralContext
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, array_type, lazy_context_list)
 |      type should be one of ""tuple"", ""list""
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__getitem__(self, index)
 |      Here the index is an int/str. Raises IndexError/KeyError.
 |  
 |  py__iter__(self)
 |      While values returns the possible values for any array field, this
 |      function returns the value for a certain index.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from SequenceLiteralContext:
 |  
 |  exact_key_items(self)
 |      Returns a generator of tuples like dict.items(), where the key is
 |      resolved (as a string) and the values are still lazy contexts.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from SequenceLiteralContext:
 |  
 |  mapping = {'(': 'tuple', '[': 'list', '{': 'set'}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Sequence:
 |  
 |  dict_values(self)
 |  
 |  get_object(self)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Sequence:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Sequence:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, array_type, lazy_context_list)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.FakeSequence,evaluate.context.iterable,FakeSequence,"Python Library Documentation: class FakeSequence in module jedi.evaluate.context.iterable

class FakeSequence(_FakeArray)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      FakeSequence
 |      _FakeArray
 |      SequenceLiteralContext
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, array_type, lazy_context_list)
 |      type should be one of ""tuple"", ""list""
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__getitem__(self, index)
 |      Here the index is an int/str. Raises IndexError/KeyError.
 |  
 |  py__iter__(self)
 |      While values returns the possible values for any array field, this
 |      function returns the value for a certain index.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from SequenceLiteralContext:
 |  
 |  exact_key_items(self)
 |      Returns a generator of tuples like dict.items(), where the key is
 |      resolved (as a string) and the values are still lazy contexts.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from SequenceLiteralContext:
 |  
 |  mapping = {'(': 'tuple', '[': 'list', '{': 'set'}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Sequence:
 |  
 |  dict_values(self)
 |  
 |  get_object(self)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Sequence:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Sequence:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, array_type, lazy_context_list)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.FakeSequence,evaluate.context.iterable,FakeSequence,"Python Library Documentation: class FakeSequence in module jedi.evaluate.context.iterable

class FakeSequence(_FakeArray)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      FakeSequence
 |      _FakeArray
 |      SequenceLiteralContext
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, array_type, lazy_context_list)
 |      type should be one of ""tuple"", ""list""
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__getitem__(self, index)
 |      Here the index is an int/str. Raises IndexError/KeyError.
 |  
 |  py__iter__(self)
 |      While values returns the possible values for any array field, this
 |      function returns the value for a certain index.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from SequenceLiteralContext:
 |  
 |  exact_key_items(self)
 |      Returns a generator of tuples like dict.items(), where the key is
 |      resolved (as a string) and the values are still lazy contexts.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from SequenceLiteralContext:
 |  
 |  mapping = {'(': 'tuple', '[': 'list', '{': 'set'}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Sequence:
 |  
 |  dict_values(self)
 |  
 |  get_object(self)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Sequence:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Sequence:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, array_type, lazy_context_list)',)",lazy_context_list,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.Generator,evaluate.context.iterable,Generator,"Python Library Documentation: class Generator in module jedi.evaluate.context.iterable

class Generator(GeneratorBase)
 |  Handling of `yield` functions.
 |  
 |  Method resolution order:
 |      Generator
 |      GeneratorBase
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, func_execution_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  py__iter__(self)
 |  
 |  py__stop_iteration_returns(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {'__next__': (<function GeneratorBase.py__next__...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from GeneratorBase:
 |  
 |  py__next__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from GeneratorBase:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from GeneratorBase:
 |  
 |  array_type = None
 |  
 |  special_object_identifier = 'GENERATOR_OBJECT'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  get_object(self)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
",class,"('(self, evaluator, func_execution_context)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.Generator,evaluate.context.iterable,Generator,"Python Library Documentation: class Generator in module jedi.evaluate.context.iterable

class Generator(GeneratorBase)
 |  Handling of `yield` functions.
 |  
 |  Method resolution order:
 |      Generator
 |      GeneratorBase
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, func_execution_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  py__iter__(self)
 |  
 |  py__stop_iteration_returns(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {'__next__': (<function GeneratorBase.py__next__...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from GeneratorBase:
 |  
 |  py__next__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from GeneratorBase:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from GeneratorBase:
 |  
 |  array_type = None
 |  
 |  special_object_identifier = 'GENERATOR_OBJECT'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  get_object(self)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
",class,"('(self, evaluator, func_execution_context)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.Generator,evaluate.context.iterable,Generator,"Python Library Documentation: class Generator in module jedi.evaluate.context.iterable

class Generator(GeneratorBase)
 |  Handling of `yield` functions.
 |  
 |  Method resolution order:
 |      Generator
 |      GeneratorBase
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, func_execution_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  py__iter__(self)
 |  
 |  py__stop_iteration_returns(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {'__next__': (<function GeneratorBase.py__next__...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from GeneratorBase:
 |  
 |  py__next__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from GeneratorBase:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from GeneratorBase:
 |  
 |  array_type = None
 |  
 |  special_object_identifier = 'GENERATOR_OBJECT'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  get_object(self)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
",class,"('(self, evaluator, func_execution_context)',)",func_execution_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.GeneratorBase,evaluate.context.iterable,GeneratorBase,"Python Library Documentation: class GeneratorBase in module jedi.evaluate.context.iterable

class GeneratorBase(jedi.evaluate.filters.BuiltinOverwrite, IterableMixin)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      GeneratorBase
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  py__next__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  array_type = None
 |  
 |  overwritten_methods = {'__next__': (<function GeneratorBase.py__next__...
 |  
 |  special_object_identifier = 'GENERATOR_OBJECT'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  __init__(self, evaluator)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_object(self)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.GeneratorBase,evaluate.context.iterable,GeneratorBase,"Python Library Documentation: class GeneratorBase in module jedi.evaluate.context.iterable

class GeneratorBase(jedi.evaluate.filters.BuiltinOverwrite, IterableMixin)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      GeneratorBase
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  py__next__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  array_type = None
 |  
 |  overwritten_methods = {'__next__': (<function GeneratorBase.py__next__...
 |  
 |  special_object_identifier = 'GENERATOR_OBJECT'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  __init__(self, evaluator)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_object(self)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.GeneratorComprehension,evaluate.context.iterable,GeneratorComprehension,"Python Library Documentation: class GeneratorComprehension in module jedi.evaluate.context.iterable

class GeneratorComprehension(ComprehensionMixin, GeneratorBase)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      GeneratorComprehension
 |      ComprehensionMixin
 |      GeneratorBase
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {'__next__': (<function GeneratorBase.py__next__...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ComprehensionMixin:
 |  
 |  __init__(self, evaluator, defining_context, atom)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ComprehensionMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from GeneratorBase:
 |  
 |  py__next__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from GeneratorBase:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from GeneratorBase:
 |  
 |  array_type = None
 |  
 |  special_object_identifier = 'GENERATOR_OBJECT'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  get_object(self)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, defining_context, atom)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.GeneratorComprehension,evaluate.context.iterable,GeneratorComprehension,"Python Library Documentation: class GeneratorComprehension in module jedi.evaluate.context.iterable

class GeneratorComprehension(ComprehensionMixin, GeneratorBase)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      GeneratorComprehension
 |      ComprehensionMixin
 |      GeneratorBase
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {'__next__': (<function GeneratorBase.py__next__...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ComprehensionMixin:
 |  
 |  __init__(self, evaluator, defining_context, atom)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ComprehensionMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from GeneratorBase:
 |  
 |  py__next__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from GeneratorBase:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from GeneratorBase:
 |  
 |  array_type = None
 |  
 |  special_object_identifier = 'GENERATOR_OBJECT'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  get_object(self)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, defining_context, atom)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.GeneratorComprehension,evaluate.context.iterable,GeneratorComprehension,"Python Library Documentation: class GeneratorComprehension in module jedi.evaluate.context.iterable

class GeneratorComprehension(ComprehensionMixin, GeneratorBase)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      GeneratorComprehension
 |      ComprehensionMixin
 |      GeneratorBase
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {'__next__': (<function GeneratorBase.py__next__...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ComprehensionMixin:
 |  
 |  __init__(self, evaluator, defining_context, atom)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ComprehensionMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from GeneratorBase:
 |  
 |  py__next__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from GeneratorBase:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from GeneratorBase:
 |  
 |  array_type = None
 |  
 |  special_object_identifier = 'GENERATOR_OBJECT'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  get_object(self)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, defining_context, atom)',)",defining_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.GeneratorComprehension,evaluate.context.iterable,GeneratorComprehension,"Python Library Documentation: class GeneratorComprehension in module jedi.evaluate.context.iterable

class GeneratorComprehension(ComprehensionMixin, GeneratorBase)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      GeneratorComprehension
 |      ComprehensionMixin
 |      GeneratorBase
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {'__next__': (<function GeneratorBase.py__next__...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ComprehensionMixin:
 |  
 |  __init__(self, evaluator, defining_context, atom)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ComprehensionMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from GeneratorBase:
 |  
 |  py__next__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from GeneratorBase:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from GeneratorBase:
 |  
 |  array_type = None
 |  
 |  special_object_identifier = 'GENERATOR_OBJECT'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  get_object(self)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, defining_context, atom)',)",atom,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.IterableMixin,evaluate.context.iterable,IterableMixin,"Python Library Documentation: class IterableMixin in module jedi.evaluate.context.iterable

class IterableMixin(builtins.object)
 |  Methods defined here:
 |  
 |  py__stop_iteration_returns(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.LazyKnownContext,evaluate.context.iterable,LazyKnownContext,"Python Library Documentation: class LazyKnownContext in module jedi.evaluate.lazy_context

class LazyKnownContext(AbstractLazyContext)
 |  data is a context.
 |  
 |  Method resolution order:
 |      LazyKnownContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __init__(self, data)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, data)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.LazyKnownContext,evaluate.context.iterable,LazyKnownContext,"Python Library Documentation: class LazyKnownContext in module jedi.evaluate.lazy_context

class LazyKnownContext(AbstractLazyContext)
 |  data is a context.
 |  
 |  Method resolution order:
 |      LazyKnownContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __init__(self, data)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, data)',)",data,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.LazyKnownContexts,evaluate.context.iterable,LazyKnownContexts,"Python Library Documentation: class LazyKnownContexts in module jedi.evaluate.lazy_context

class LazyKnownContexts(AbstractLazyContext)
 |  data is a ContextSet.
 |  
 |  Method resolution order:
 |      LazyKnownContexts
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __init__(self, data)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, data)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.LazyKnownContexts,evaluate.context.iterable,LazyKnownContexts,"Python Library Documentation: class LazyKnownContexts in module jedi.evaluate.lazy_context

class LazyKnownContexts(AbstractLazyContext)
 |  data is a ContextSet.
 |  
 |  Method resolution order:
 |      LazyKnownContexts
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __init__(self, data)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, data)',)",data,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.LazyTreeContext,evaluate.context.iterable,LazyTreeContext,"Python Library Documentation: class LazyTreeContext in module jedi.evaluate.lazy_context

class LazyTreeContext(AbstractLazyContext)
 |  Method resolution order:
 |      LazyTreeContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.LazyTreeContext,evaluate.context.iterable,LazyTreeContext,"Python Library Documentation: class LazyTreeContext in module jedi.evaluate.lazy_context

class LazyTreeContext(AbstractLazyContext)
 |  Method resolution order:
 |      LazyTreeContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.LazyTreeContext,evaluate.context.iterable,LazyTreeContext,"Python Library Documentation: class LazyTreeContext in module jedi.evaluate.lazy_context

class LazyTreeContext(AbstractLazyContext)
 |  Method resolution order:
 |      LazyTreeContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.ListComprehension,evaluate.context.iterable,ListComprehension,"Python Library Documentation: class ListComprehension in module jedi.evaluate.context.iterable

class ListComprehension(ComprehensionMixin, Sequence)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ListComprehension
 |      ComprehensionMixin
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  py__getitem__(self, index)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  array_type = 'list'
 |  
 |  overwritten_methods = {}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ComprehensionMixin:
 |  
 |  __init__(self, evaluator, defining_context, atom)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ComprehensionMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Sequence:
 |  
 |  dict_values(self)
 |  
 |  get_object(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Sequence:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Sequence:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, defining_context, atom)',)",atom,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.ListComprehension,evaluate.context.iterable,ListComprehension,"Python Library Documentation: class ListComprehension in module jedi.evaluate.context.iterable

class ListComprehension(ComprehensionMixin, Sequence)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ListComprehension
 |      ComprehensionMixin
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  py__getitem__(self, index)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  array_type = 'list'
 |  
 |  overwritten_methods = {}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ComprehensionMixin:
 |  
 |  __init__(self, evaluator, defining_context, atom)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ComprehensionMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Sequence:
 |  
 |  dict_values(self)
 |  
 |  get_object(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Sequence:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Sequence:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, defining_context, atom)',)",defining_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.ListComprehension,evaluate.context.iterable,ListComprehension,"Python Library Documentation: class ListComprehension in module jedi.evaluate.context.iterable

class ListComprehension(ComprehensionMixin, Sequence)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ListComprehension
 |      ComprehensionMixin
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  py__getitem__(self, index)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  array_type = 'list'
 |  
 |  overwritten_methods = {}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ComprehensionMixin:
 |  
 |  __init__(self, evaluator, defining_context, atom)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ComprehensionMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Sequence:
 |  
 |  dict_values(self)
 |  
 |  get_object(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Sequence:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Sequence:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, defining_context, atom)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.ListComprehension,evaluate.context.iterable,ListComprehension,"Python Library Documentation: class ListComprehension in module jedi.evaluate.context.iterable

class ListComprehension(ComprehensionMixin, Sequence)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ListComprehension
 |      ComprehensionMixin
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  py__getitem__(self, index)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  array_type = 'list'
 |  
 |  overwritten_methods = {}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ComprehensionMixin:
 |  
 |  __init__(self, evaluator, defining_context, atom)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ComprehensionMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Sequence:
 |  
 |  dict_values(self)
 |  
 |  get_object(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Sequence:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Sequence:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, defining_context, atom)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.MergedArray,evaluate.context.iterable,MergedArray,"Python Library Documentation: class MergedArray in module jedi.evaluate.context.iterable

class MergedArray(_FakeArray)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      MergedArray
 |      _FakeArray
 |      SequenceLiteralContext
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, arrays)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __len__(self)
 |  
 |  py__getitem__(self, index)
 |      Here the index is an int/str. Raises IndexError/KeyError.
 |  
 |  py__iter__(self)
 |      While values returns the possible values for any array field, this
 |      function returns the value for a certain index.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from SequenceLiteralContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  exact_key_items(self)
 |      Returns a generator of tuples like dict.items(), where the key is
 |      resolved (as a string) and the values are still lazy contexts.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from SequenceLiteralContext:
 |  
 |  mapping = {'(': 'tuple', '[': 'list', '{': 'set'}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Sequence:
 |  
 |  dict_values(self)
 |  
 |  get_object(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Sequence:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Sequence:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, arrays)',)",arrays,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.MergedArray,evaluate.context.iterable,MergedArray,"Python Library Documentation: class MergedArray in module jedi.evaluate.context.iterable

class MergedArray(_FakeArray)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      MergedArray
 |      _FakeArray
 |      SequenceLiteralContext
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, arrays)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __len__(self)
 |  
 |  py__getitem__(self, index)
 |      Here the index is an int/str. Raises IndexError/KeyError.
 |  
 |  py__iter__(self)
 |      While values returns the possible values for any array field, this
 |      function returns the value for a certain index.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from SequenceLiteralContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  exact_key_items(self)
 |      Returns a generator of tuples like dict.items(), where the key is
 |      resolved (as a string) and the values are still lazy contexts.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from SequenceLiteralContext:
 |  
 |  mapping = {'(': 'tuple', '[': 'list', '{': 'set'}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Sequence:
 |  
 |  dict_values(self)
 |  
 |  get_object(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Sequence:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Sequence:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, arrays)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.MergedArray,evaluate.context.iterable,MergedArray,"Python Library Documentation: class MergedArray in module jedi.evaluate.context.iterable

class MergedArray(_FakeArray)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      MergedArray
 |      _FakeArray
 |      SequenceLiteralContext
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, arrays)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __len__(self)
 |  
 |  py__getitem__(self, index)
 |      Here the index is an int/str. Raises IndexError/KeyError.
 |  
 |  py__iter__(self)
 |      While values returns the possible values for any array field, this
 |      function returns the value for a certain index.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from SequenceLiteralContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  exact_key_items(self)
 |      Returns a generator of tuples like dict.items(), where the key is
 |      resolved (as a string) and the values are still lazy contexts.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from SequenceLiteralContext:
 |  
 |  mapping = {'(': 'tuple', '[': 'list', '{': 'set'}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Sequence:
 |  
 |  dict_values(self)
 |  
 |  get_object(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Sequence:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Sequence:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, arrays)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.ParserTreeFilter,evaluate.context.iterable,ParserTreeFilter,"Python Library Documentation: class ParserTreeFilter in module jedi.evaluate.filters

class ParserTreeFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",node_context,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.ParserTreeFilter,evaluate.context.iterable,ParserTreeFilter,"Python Library Documentation: class ParserTreeFilter in module jedi.evaluate.filters

class ParserTreeFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",origin_scope,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.ParserTreeFilter,evaluate.context.iterable,ParserTreeFilter,"Python Library Documentation: class ParserTreeFilter in module jedi.evaluate.filters

class ParserTreeFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.ParserTreeFilter,evaluate.context.iterable,ParserTreeFilter,"Python Library Documentation: class ParserTreeFilter in module jedi.evaluate.filters

class ParserTreeFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.ParserTreeFilter,evaluate.context.iterable,ParserTreeFilter,"Python Library Documentation: class ParserTreeFilter in module jedi.evaluate.filters

class ParserTreeFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.ParserTreeFilter,evaluate.context.iterable,ParserTreeFilter,"Python Library Documentation: class ParserTreeFilter in module jedi.evaluate.filters

class ParserTreeFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",until_position,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.Sequence,evaluate.context.iterable,Sequence,"Python Library Documentation: class Sequence in module jedi.evaluate.context.iterable

class Sequence(jedi.evaluate.filters.BuiltinOverwrite, IterableMixin)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  dict_values(self)
 |  
 |  get_object(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'instance'
 |  
 |  overwritten_methods = {}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  __init__(self, evaluator)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.Sequence,evaluate.context.iterable,Sequence,"Python Library Documentation: class Sequence in module jedi.evaluate.context.iterable

class Sequence(jedi.evaluate.filters.BuiltinOverwrite, IterableMixin)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  dict_values(self)
 |  
 |  get_object(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'instance'
 |  
 |  overwritten_methods = {}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  __init__(self, evaluator)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.SequenceLiteralContext,evaluate.context.iterable,SequenceLiteralContext,"Python Library Documentation: class SequenceLiteralContext in module jedi.evaluate.context.iterable

class SequenceLiteralContext(Sequence)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      SequenceLiteralContext
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, defining_context, atom)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  exact_key_items(self)
 |      Returns a generator of tuples like dict.items(), where the key is
 |      resolved (as a string) and the values are still lazy contexts.
 |  
 |  py__getitem__(self, index)
 |      Here the index is an int/str. Raises IndexError/KeyError.
 |  
 |  py__iter__(self)
 |      While values returns the possible values for any array field, this
 |      function returns the value for a certain index.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  mapping = {'(': 'tuple', '[': 'list', '{': 'set'}
 |  
 |  overwritten_methods = {}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Sequence:
 |  
 |  dict_values(self)
 |  
 |  get_object(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Sequence:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Sequence:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, defining_context, atom)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.SequenceLiteralContext,evaluate.context.iterable,SequenceLiteralContext,"Python Library Documentation: class SequenceLiteralContext in module jedi.evaluate.context.iterable

class SequenceLiteralContext(Sequence)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      SequenceLiteralContext
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, defining_context, atom)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  exact_key_items(self)
 |      Returns a generator of tuples like dict.items(), where the key is
 |      resolved (as a string) and the values are still lazy contexts.
 |  
 |  py__getitem__(self, index)
 |      Here the index is an int/str. Raises IndexError/KeyError.
 |  
 |  py__iter__(self)
 |      While values returns the possible values for any array field, this
 |      function returns the value for a certain index.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  mapping = {'(': 'tuple', '[': 'list', '{': 'set'}
 |  
 |  overwritten_methods = {}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Sequence:
 |  
 |  dict_values(self)
 |  
 |  get_object(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Sequence:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Sequence:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, defining_context, atom)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.SequenceLiteralContext,evaluate.context.iterable,SequenceLiteralContext,"Python Library Documentation: class SequenceLiteralContext in module jedi.evaluate.context.iterable

class SequenceLiteralContext(Sequence)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      SequenceLiteralContext
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, defining_context, atom)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  exact_key_items(self)
 |      Returns a generator of tuples like dict.items(), where the key is
 |      resolved (as a string) and the values are still lazy contexts.
 |  
 |  py__getitem__(self, index)
 |      Here the index is an int/str. Raises IndexError/KeyError.
 |  
 |  py__iter__(self)
 |      While values returns the possible values for any array field, this
 |      function returns the value for a certain index.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  mapping = {'(': 'tuple', '[': 'list', '{': 'set'}
 |  
 |  overwritten_methods = {}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Sequence:
 |  
 |  dict_values(self)
 |  
 |  get_object(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Sequence:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Sequence:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, defining_context, atom)',)",defining_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.SequenceLiteralContext,evaluate.context.iterable,SequenceLiteralContext,"Python Library Documentation: class SequenceLiteralContext in module jedi.evaluate.context.iterable

class SequenceLiteralContext(Sequence)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      SequenceLiteralContext
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, defining_context, atom)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  exact_key_items(self)
 |      Returns a generator of tuples like dict.items(), where the key is
 |      resolved (as a string) and the values are still lazy contexts.
 |  
 |  py__getitem__(self, index)
 |      Here the index is an int/str. Raises IndexError/KeyError.
 |  
 |  py__iter__(self)
 |      While values returns the possible values for any array field, this
 |      function returns the value for a certain index.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  mapping = {'(': 'tuple', '[': 'list', '{': 'set'}
 |  
 |  overwritten_methods = {}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Sequence:
 |  
 |  dict_values(self)
 |  
 |  get_object(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Sequence:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Sequence:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, defining_context, atom)',)",atom,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.SetComprehension,evaluate.context.iterable,SetComprehension,"Python Library Documentation: class SetComprehension in module jedi.evaluate.context.iterable

class SetComprehension(ComprehensionMixin, Sequence)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      SetComprehension
 |      ComprehensionMixin
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  array_type = 'set'
 |  
 |  overwritten_methods = {}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ComprehensionMixin:
 |  
 |  __init__(self, evaluator, defining_context, atom)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ComprehensionMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Sequence:
 |  
 |  dict_values(self)
 |  
 |  get_object(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Sequence:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Sequence:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, defining_context, atom)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.SetComprehension,evaluate.context.iterable,SetComprehension,"Python Library Documentation: class SetComprehension in module jedi.evaluate.context.iterable

class SetComprehension(ComprehensionMixin, Sequence)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      SetComprehension
 |      ComprehensionMixin
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  array_type = 'set'
 |  
 |  overwritten_methods = {}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ComprehensionMixin:
 |  
 |  __init__(self, evaluator, defining_context, atom)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ComprehensionMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Sequence:
 |  
 |  dict_values(self)
 |  
 |  get_object(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Sequence:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Sequence:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, defining_context, atom)',)",defining_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.SetComprehension,evaluate.context.iterable,SetComprehension,"Python Library Documentation: class SetComprehension in module jedi.evaluate.context.iterable

class SetComprehension(ComprehensionMixin, Sequence)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      SetComprehension
 |      ComprehensionMixin
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  array_type = 'set'
 |  
 |  overwritten_methods = {}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ComprehensionMixin:
 |  
 |  __init__(self, evaluator, defining_context, atom)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ComprehensionMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Sequence:
 |  
 |  dict_values(self)
 |  
 |  get_object(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Sequence:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Sequence:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, defining_context, atom)',)",atom,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.SetComprehension,evaluate.context.iterable,SetComprehension,"Python Library Documentation: class SetComprehension in module jedi.evaluate.context.iterable

class SetComprehension(ComprehensionMixin, Sequence)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      SetComprehension
 |      ComprehensionMixin
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  array_type = 'set'
 |  
 |  overwritten_methods = {}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ComprehensionMixin:
 |  
 |  __init__(self, evaluator, defining_context, atom)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ComprehensionMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Sequence:
 |  
 |  dict_values(self)
 |  
 |  get_object(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Sequence:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Sequence:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, defining_context, atom)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.Slice,evaluate.context.iterable,Slice,"Python Library Documentation: class Slice in module jedi.evaluate.context.iterable

class Slice(jedi.evaluate.base_context.Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      Slice
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, start, stop, step)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  obj
 |      Imitate CompiledObject.obj behavior and return a ``builtin.slice()``
 |      object.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, start, stop, step)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.Slice,evaluate.context.iterable,Slice,"Python Library Documentation: class Slice in module jedi.evaluate.context.iterable

class Slice(jedi.evaluate.base_context.Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      Slice
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, start, stop, step)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  obj
 |      Imitate CompiledObject.obj behavior and return a ``builtin.slice()``
 |      object.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, start, stop, step)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.Slice,evaluate.context.iterable,Slice,"Python Library Documentation: class Slice in module jedi.evaluate.context.iterable

class Slice(jedi.evaluate.base_context.Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      Slice
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, start, stop, step)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  obj
 |      Imitate CompiledObject.obj behavior and return a ``builtin.slice()``
 |      object.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, start, stop, step)',)",step,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.Slice,evaluate.context.iterable,Slice,"Python Library Documentation: class Slice in module jedi.evaluate.context.iterable

class Slice(jedi.evaluate.base_context.Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      Slice
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, start, stop, step)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  obj
 |      Imitate CompiledObject.obj behavior and return a ``builtin.slice()``
 |      object.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, start, stop, step)',)",stop,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.Slice,evaluate.context.iterable,Slice,"Python Library Documentation: class Slice in module jedi.evaluate.context.iterable

class Slice(jedi.evaluate.base_context.Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      Slice
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, start, stop, step)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  obj
 |      Imitate CompiledObject.obj behavior and return a ``builtin.slice()``
 |      object.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, start, stop, step)',)",start,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.TreeContext,evaluate.context.iterable,TreeContext,"Python Library Documentation: class TreeContext in module jedi.evaluate.base_context

class TreeContext(Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      TreeContext
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",parent_context,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.TreeContext,evaluate.context.iterable,TreeContext,"Python Library Documentation: class TreeContext in module jedi.evaluate.base_context

class TreeContext(Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      TreeContext
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.TreeContext,evaluate.context.iterable,TreeContext,"Python Library Documentation: class TreeContext in module jedi.evaluate.base_context

class TreeContext(Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      TreeContext
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable._ArrayInstance,evaluate.context.iterable,_ArrayInstance,"Python Library Documentation: class _ArrayInstance in module jedi.evaluate.context.iterable

class _ArrayInstance(builtins.object)
 |  Used for the usage of set() and list().
 |  This is definitely a hack, but a good one :-)
 |  It makes it possible to use set/list conversions.
 |  
 |  In contrast to Array, ListComprehension and all other iterable types, this
 |  is something that is only used inside `evaluate/compiled/fake/builtins.py`
 |  and therefore doesn't need filters, `py__bool__` and so on, because
 |  we don't use these operations in `builtins.py`.
 |  
 |  Methods defined here:
 |  
 |  __init__(self, instance)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, instance)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable._ArrayInstance,evaluate.context.iterable,_ArrayInstance,"Python Library Documentation: class _ArrayInstance in module jedi.evaluate.context.iterable

class _ArrayInstance(builtins.object)
 |  Used for the usage of set() and list().
 |  This is definitely a hack, but a good one :-)
 |  It makes it possible to use set/list conversions.
 |  
 |  In contrast to Array, ListComprehension and all other iterable types, this
 |  is something that is only used inside `evaluate/compiled/fake/builtins.py`
 |  and therefore doesn't need filters, `py__bool__` and so on, because
 |  we don't use these operations in `builtins.py`.
 |  
 |  Methods defined here:
 |  
 |  __init__(self, instance)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, instance)',)",instance,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable._FakeArray,evaluate.context.iterable,_FakeArray,"Python Library Documentation: class _FakeArray in module jedi.evaluate.context.iterable

class _FakeArray(SequenceLiteralContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      _FakeArray
 |      SequenceLiteralContext
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, container, type)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from SequenceLiteralContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  exact_key_items(self)
 |      Returns a generator of tuples like dict.items(), where the key is
 |      resolved (as a string) and the values are still lazy contexts.
 |  
 |  py__getitem__(self, index)
 |      Here the index is an int/str. Raises IndexError/KeyError.
 |  
 |  py__iter__(self)
 |      While values returns the possible values for any array field, this
 |      function returns the value for a certain index.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from SequenceLiteralContext:
 |  
 |  mapping = {'(': 'tuple', '[': 'list', '{': 'set'}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Sequence:
 |  
 |  dict_values(self)
 |  
 |  get_object(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Sequence:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Sequence:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, container, type)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable._FakeArray,evaluate.context.iterable,_FakeArray,"Python Library Documentation: class _FakeArray in module jedi.evaluate.context.iterable

class _FakeArray(SequenceLiteralContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      _FakeArray
 |      SequenceLiteralContext
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, container, type)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from SequenceLiteralContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  exact_key_items(self)
 |      Returns a generator of tuples like dict.items(), where the key is
 |      resolved (as a string) and the values are still lazy contexts.
 |  
 |  py__getitem__(self, index)
 |      Here the index is an int/str. Raises IndexError/KeyError.
 |  
 |  py__iter__(self)
 |      While values returns the possible values for any array field, this
 |      function returns the value for a certain index.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from SequenceLiteralContext:
 |  
 |  mapping = {'(': 'tuple', '[': 'list', '{': 'set'}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Sequence:
 |  
 |  dict_values(self)
 |  
 |  get_object(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Sequence:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Sequence:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, container, type)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable._FakeArray,evaluate.context.iterable,_FakeArray,"Python Library Documentation: class _FakeArray in module jedi.evaluate.context.iterable

class _FakeArray(SequenceLiteralContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      _FakeArray
 |      SequenceLiteralContext
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, container, type)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from SequenceLiteralContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  exact_key_items(self)
 |      Returns a generator of tuples like dict.items(), where the key is
 |      resolved (as a string) and the values are still lazy contexts.
 |  
 |  py__getitem__(self, index)
 |      Here the index is an int/str. Raises IndexError/KeyError.
 |  
 |  py__iter__(self)
 |      While values returns the possible values for any array field, this
 |      function returns the value for a certain index.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from SequenceLiteralContext:
 |  
 |  mapping = {'(': 'tuple', '[': 'list', '{': 'set'}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Sequence:
 |  
 |  dict_values(self)
 |  
 |  get_object(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Sequence:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Sequence:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, container, type)',)",container,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable._FakeArray,evaluate.context.iterable,_FakeArray,"Python Library Documentation: class _FakeArray in module jedi.evaluate.context.iterable

class _FakeArray(SequenceLiteralContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      _FakeArray
 |      SequenceLiteralContext
 |      Sequence
 |      jedi.evaluate.filters.BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      jedi.evaluate.filters.AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      IterableMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, container, type)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from SequenceLiteralContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  exact_key_items(self)
 |      Returns a generator of tuples like dict.items(), where the key is
 |      resolved (as a string) and the values are still lazy contexts.
 |  
 |  py__getitem__(self, index)
 |      Here the index is an int/str. Raises IndexError/KeyError.
 |  
 |  py__iter__(self)
 |      While values returns the possible values for any array field, this
 |      function returns the value for a certain index.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from SequenceLiteralContext:
 |  
 |  mapping = {'(': 'tuple', '[': 'list', '{': 'set'}
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Sequence:
 |  
 |  dict_values(self)
 |  
 |  get_object(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Sequence:
 |  
 |  name
 |  
 |  parent
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Sequence:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.BuiltinOverwrite:
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from IterableMixin:
 |  
 |  py__stop_iteration_returns(self)
",class,"('(self, evaluator, container, type)',)",type,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable._check_array_additions,evaluate.context.iterable,wrapper,"Python Library Documentation: function wrapper in module jedi.evaluate.cache

wrapper(obj, *args, **kwargs)
",function,"('(obj, *args, **kwargs)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.check_array_additions,evaluate.context.iterable,check_array_additions,"Python Library Documentation: function check_array_additions in module jedi.evaluate.context.iterable

check_array_additions(context, sequence)
    Just a mapper function for the internal _check_array_additions
",function,"('(context, sequence)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.check_array_additions,evaluate.context.iterable,check_array_additions,"Python Library Documentation: function check_array_additions in module jedi.evaluate.context.iterable

check_array_additions(context, sequence)
    Just a mapper function for the internal _check_array_additions
",function,"('(context, sequence)',)",sequence,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.comprehension_from_atom,evaluate.context.iterable,comprehension_from_atom,"Python Library Documentation: function comprehension_from_atom in module jedi.evaluate.context.iterable

comprehension_from_atom(evaluator, context, atom)
",function,"('(evaluator, context, atom)',)",atom,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.comprehension_from_atom,evaluate.context.iterable,comprehension_from_atom,"Python Library Documentation: function comprehension_from_atom in module jedi.evaluate.context.iterable

comprehension_from_atom(evaluator, context, atom)
",function,"('(evaluator, context, atom)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.comprehension_from_atom,evaluate.context.iterable,comprehension_from_atom,"Python Library Documentation: function comprehension_from_atom in module jedi.evaluate.context.iterable

comprehension_from_atom(evaluator, context, atom)
",function,"('(evaluator, context, atom)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.evaluate_call_of_leaf,evaluate.context.iterable,evaluate_call_of_leaf,"Python Library Documentation: function evaluate_call_of_leaf in module jedi.evaluate.helpers

evaluate_call_of_leaf(context, leaf, cut_own_trailer=False)
    Creates a ""call"" node that consist of all ``trailer`` and ``power``
    objects.  E.g. if you call it with ``append``::
    
        list([]).append(3) or None
    
    You would get a node with the content ``list([]).append`` back.
    
    This generates a copy of the original ast node.
    
    If you're using the leaf, e.g. the bracket `)` it will return ``list([])``.
    
    We use this function for two purposes. Given an expression ``bar.foo``,
    we may want to
      - infer the type of ``foo`` to offer completions after foo
      - infer the type of ``bar`` to be able to jump to the definition of foo
    The option ``cut_own_trailer`` must be set to true for the second purpose.
",function,"('(context, leaf, cut_own_trailer=False)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.evaluate_call_of_leaf,evaluate.context.iterable,evaluate_call_of_leaf,"Python Library Documentation: function evaluate_call_of_leaf in module jedi.evaluate.helpers

evaluate_call_of_leaf(context, leaf, cut_own_trailer=False)
    Creates a ""call"" node that consist of all ``trailer`` and ``power``
    objects.  E.g. if you call it with ``append``::
    
        list([]).append(3) or None
    
    You would get a node with the content ``list([]).append`` back.
    
    This generates a copy of the original ast node.
    
    If you're using the leaf, e.g. the bracket `)` it will return ``list([])``.
    
    We use this function for two purposes. Given an expression ``bar.foo``,
    we may want to
      - infer the type of ``foo`` to offer completions after foo
      - infer the type of ``bar`` to be able to jump to the definition of foo
    The option ``cut_own_trailer`` must be set to true for the second purpose.
",function,"('(context, leaf, cut_own_trailer=False)',)",leaf,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.evaluate_call_of_leaf,evaluate.context.iterable,evaluate_call_of_leaf,"Python Library Documentation: function evaluate_call_of_leaf in module jedi.evaluate.helpers

evaluate_call_of_leaf(context, leaf, cut_own_trailer=False)
    Creates a ""call"" node that consist of all ``trailer`` and ``power``
    objects.  E.g. if you call it with ``append``::
    
        list([]).append(3) or None
    
    You would get a node with the content ``list([]).append`` back.
    
    This generates a copy of the original ast node.
    
    If you're using the leaf, e.g. the bracket `)` it will return ``list([])``.
    
    We use this function for two purposes. Given an expression ``bar.foo``,
    we may want to
      - infer the type of ``foo`` to offer completions after foo
      - infer the type of ``bar`` to be able to jump to the definition of foo
    The option ``cut_own_trailer`` must be set to true for the second purpose.
",function,"('(context, leaf, cut_own_trailer=False)',)",cut_own_trailer,False,bool,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.evaluator_method_cache,evaluate.context.iterable,evaluator_method_cache,"Python Library Documentation: function evaluator_method_cache in module jedi.evaluate.cache

evaluator_method_cache(default=<object object at 0x000000000520FC20>)
",function,"('(default=<object object at 0x000000000520FC20>)',)",default,<object object at 0x000000000520FC20>,object,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.force_unicode,evaluate.context.iterable,force_unicode,"Python Library Documentation: function force_unicode in module jedi._compatibility

force_unicode(obj)
",function,"('(obj)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.get_comp_fors,evaluate.context.iterable,get_comp_fors,"Python Library Documentation: function get_comp_fors in module jedi.parser_utils

get_comp_fors(comp_for)
",function,"('(comp_for)',)",comp_for,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.get_dynamic_array_instance,evaluate.context.iterable,get_dynamic_array_instance,"Python Library Documentation: function get_dynamic_array_instance in module jedi.evaluate.context.iterable

get_dynamic_array_instance(instance)
    Used for set() and list() instances.
",function,"('(instance)',)",instance,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.get_int_or_none,evaluate.context.iterable,get_int_or_none,"Python Library Documentation: function get_int_or_none in module jedi.evaluate.helpers

get_int_or_none(context)
",function,"('(context)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.is_string,evaluate.context.iterable,is_string,"Python Library Documentation: function is_string in module jedi.evaluate.helpers

is_string(context)
",function,"('(context)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.memoize_method,evaluate.context.iterable,memoize_method,"Python Library Documentation: function memoize_method in module jedi.cache

memoize_method(method)
    A normal memoize function.
",function,"('(method)',)",method,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.publish_method,evaluate.context.iterable,publish_method,"Python Library Documentation: function publish_method in module jedi.evaluate.filters

publish_method(method_name, python_version_match=None)
",function,"('(method_name, python_version_match=None)',)",python_version_match,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.publish_method,evaluate.context.iterable,publish_method,"Python Library Documentation: function publish_method in module jedi.evaluate.filters

publish_method(method_name, python_version_match=None)
",function,"('(method_name, python_version_match=None)',)",method_name,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.safe_property,evaluate.context.iterable,safe_property,"Python Library Documentation: function safe_property in module jedi.evaluate.utils

safe_property(func)
",function,"('(func)',)",func,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.to_list,evaluate.context.iterable,to_list,"Python Library Documentation: function to_list in module jedi.evaluate.utils

to_list(func)
",function,"('(func)',)",func,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.unpack_tuple_to_dict,evaluate.context.iterable,unpack_tuple_to_dict,"Python Library Documentation: function unpack_tuple_to_dict in module jedi.evaluate.context.iterable

unpack_tuple_to_dict(context, types, exprlist)
    Unpacking tuple assignments in for statements and expr_stmts.
",function,"('(context, types, exprlist)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.unpack_tuple_to_dict,evaluate.context.iterable,unpack_tuple_to_dict,"Python Library Documentation: function unpack_tuple_to_dict in module jedi.evaluate.context.iterable

unpack_tuple_to_dict(context, types, exprlist)
    Unpacking tuple assignments in for statements and expr_stmts.
",function,"('(context, types, exprlist)',)",types,,,arg_info
jedi,0.12.0,jedi.evaluate.context.iterable.unpack_tuple_to_dict,evaluate.context.iterable,unpack_tuple_to_dict,"Python Library Documentation: function unpack_tuple_to_dict in module jedi.evaluate.context.iterable

unpack_tuple_to_dict(context, types, exprlist)
    Unpacking tuple assignments in for statements and expr_stmts.
",function,"('(context, types, exprlist)',)",exprlist,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.AnonymousInstanceParamName,evaluate.context.klass,AnonymousInstanceParamName,"Python Library Documentation: class AnonymousInstanceParamName in module jedi.evaluate.filters

class AnonymousInstanceParamName(ParamName)
 |  Method resolution order:
 |      AnonymousInstanceParamName
 |      ParamName
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ParamName:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_kind(self)
 |  
 |  get_param(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from ParamName:
 |  
 |  api_type = 'param'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",tree_name,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.AnonymousInstanceParamName,evaluate.context.klass,AnonymousInstanceParamName,"Python Library Documentation: class AnonymousInstanceParamName in module jedi.evaluate.filters

class AnonymousInstanceParamName(ParamName)
 |  Method resolution order:
 |      AnonymousInstanceParamName
 |      ParamName
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ParamName:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_kind(self)
 |  
 |  get_param(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from ParamName:
 |  
 |  api_type = 'param'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.AnonymousInstanceParamName,evaluate.context.klass,AnonymousInstanceParamName,"Python Library Documentation: class AnonymousInstanceParamName in module jedi.evaluate.filters

class AnonymousInstanceParamName(ParamName)
 |  Method resolution order:
 |      AnonymousInstanceParamName
 |      ParamName
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ParamName:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_kind(self)
 |  
 |  get_param(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from ParamName:
 |  
 |  api_type = 'param'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.CachedMetaClass,evaluate.context.klass,CachedMetaClass,"Python Library Documentation: class CachedMetaClass in module jedi.evaluate.cache

class CachedMetaClass(builtins.type)
 |  This is basically almost the same than the decorator above, it just caches
 |  class initializations. Either you do it this way or with decorators, but
 |  with decorators you lose class access (isinstance, etc).
 |  
 |  Method resolution order:
 |      CachedMetaClass
 |      builtins.type
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __call__ = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.type:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __dir__(...)
 |      __dir__() -> list
 |      specialized __dir__ implementation for types
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __instancecheck__(...)
 |      __instancecheck__() -> bool
 |      check if an object is an instance
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __prepare__(...) from builtins.type
 |      __prepare__() -> dict
 |      used to create the namespace for the class statement
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __sizeof__(...)
 |      __sizeof__() -> int
 |      return memory consumption of the type object
 |  
 |  __subclasscheck__(...)
 |      __subclasscheck__() -> bool
 |      check if a class is a subclass
 |  
 |  __subclasses__(...)
 |      __subclasses__() -> list of immediate subclasses
 |  
 |  mro(...)
 |      mro() -> list
 |      return a type's method resolution order
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.type:
 |  
 |  __abstractmethods__
 |  
 |  __dict__
 |  
 |  __text_signature__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from builtins.type:
 |  
 |  __base__ = <class 'type'>
 |      type(object_or_name, bases, dict)
 |      type(object) -> the object's type
 |      type(name, bases, dict) -> a new type
 |  
 |  __bases__ = (<class 'type'>,)
 |  
 |  __basicsize__ = 864
 |  
 |  __dictoffset__ = 264
 |  
 |  __flags__ = -2146675199
 |  
 |  __itemsize__ = 40
 |  
 |  __mro__ = (<class 'jedi.evaluate.cache.CachedMetaClass'>, <class 'type...
 |  
 |  __weakrefoffset__ = 368
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.ClassContext,evaluate.context.klass,ClassContext,"Python Library Documentation: class ClassContext in module jedi.evaluate.context.klass

class ClassContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  This class is not only important to extend `tree.Class`, it is also a
 |  important for descriptors (if the descriptor methods are evaluated or not).
 |  
 |  Method resolution order:
 |      ClassContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, classdef)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None, is_instance=False)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  get_param_names(self)
 |  
 |  get_params(self)
 |  
 |  is_class(self)
 |  
 |  py__bases__ = wrapper(obj, *args, **kwargs)
 |  
 |  py__call__(self, params)
 |  
 |  py__class__(self)
 |  
 |  py__mro__ = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'class'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, classdef)',)",classdef,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.ClassContext,evaluate.context.klass,ClassContext,"Python Library Documentation: class ClassContext in module jedi.evaluate.context.klass

class ClassContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  This class is not only important to extend `tree.Class`, it is also a
 |  important for descriptors (if the descriptor methods are evaluated or not).
 |  
 |  Method resolution order:
 |      ClassContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, classdef)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None, is_instance=False)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  get_param_names(self)
 |  
 |  get_params(self)
 |  
 |  is_class(self)
 |  
 |  py__bases__ = wrapper(obj, *args, **kwargs)
 |  
 |  py__call__(self, params)
 |  
 |  py__class__(self)
 |  
 |  py__mro__ = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'class'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, classdef)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.ClassContext,evaluate.context.klass,ClassContext,"Python Library Documentation: class ClassContext in module jedi.evaluate.context.klass

class ClassContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  This class is not only important to extend `tree.Class`, it is also a
 |  important for descriptors (if the descriptor methods are evaluated or not).
 |  
 |  Method resolution order:
 |      ClassContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, classdef)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None, is_instance=False)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  get_param_names(self)
 |  
 |  get_params(self)
 |  
 |  is_class(self)
 |  
 |  py__bases__ = wrapper(obj, *args, **kwargs)
 |  
 |  py__call__(self, params)
 |  
 |  py__class__(self)
 |  
 |  py__mro__ = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'class'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, classdef)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.ClassContext,evaluate.context.klass,ClassContext,"Python Library Documentation: class ClassContext in module jedi.evaluate.context.klass

class ClassContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  This class is not only important to extend `tree.Class`, it is also a
 |  important for descriptors (if the descriptor methods are evaluated or not).
 |  
 |  Method resolution order:
 |      ClassContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, classdef)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None, is_instance=False)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  get_param_names(self)
 |  
 |  get_params(self)
 |  
 |  is_class(self)
 |  
 |  py__bases__ = wrapper(obj, *args, **kwargs)
 |  
 |  py__call__(self, params)
 |  
 |  py__class__(self)
 |  
 |  py__mro__ = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'class'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, classdef)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.ClassFilter,evaluate.context.klass,ClassFilter,"Python Library Documentation: class ClassFilter in module jedi.evaluate.context.klass

class ClassFilter(jedi.evaluate.filters.ParserTreeFilter)
 |  Method resolution order:
 |      ClassFilter
 |      jedi.evaluate.filters.ParserTreeFilter
 |      jedi.evaluate.filters.AbstractUsedNamesFilter
 |      jedi.evaluate.filters.AbstractFilter
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.context.klass.ClassName'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.ParserTreeFilter:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",origin_scope,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.ClassFilter,evaluate.context.klass,ClassFilter,"Python Library Documentation: class ClassFilter in module jedi.evaluate.context.klass

class ClassFilter(jedi.evaluate.filters.ParserTreeFilter)
 |  Method resolution order:
 |      ClassFilter
 |      jedi.evaluate.filters.ParserTreeFilter
 |      jedi.evaluate.filters.AbstractUsedNamesFilter
 |      jedi.evaluate.filters.AbstractFilter
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.context.klass.ClassName'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.ParserTreeFilter:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.ClassFilter,evaluate.context.klass,ClassFilter,"Python Library Documentation: class ClassFilter in module jedi.evaluate.context.klass

class ClassFilter(jedi.evaluate.filters.ParserTreeFilter)
 |  Method resolution order:
 |      ClassFilter
 |      jedi.evaluate.filters.ParserTreeFilter
 |      jedi.evaluate.filters.AbstractUsedNamesFilter
 |      jedi.evaluate.filters.AbstractFilter
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.context.klass.ClassName'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.ParserTreeFilter:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.ClassFilter,evaluate.context.klass,ClassFilter,"Python Library Documentation: class ClassFilter in module jedi.evaluate.context.klass

class ClassFilter(jedi.evaluate.filters.ParserTreeFilter)
 |  Method resolution order:
 |      ClassFilter
 |      jedi.evaluate.filters.ParserTreeFilter
 |      jedi.evaluate.filters.AbstractUsedNamesFilter
 |      jedi.evaluate.filters.AbstractFilter
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.context.klass.ClassName'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.ParserTreeFilter:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.ClassFilter,evaluate.context.klass,ClassFilter,"Python Library Documentation: class ClassFilter in module jedi.evaluate.context.klass

class ClassFilter(jedi.evaluate.filters.ParserTreeFilter)
 |  Method resolution order:
 |      ClassFilter
 |      jedi.evaluate.filters.ParserTreeFilter
 |      jedi.evaluate.filters.AbstractUsedNamesFilter
 |      jedi.evaluate.filters.AbstractFilter
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.context.klass.ClassName'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.ParserTreeFilter:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",node_context,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.ClassFilter,evaluate.context.klass,ClassFilter,"Python Library Documentation: class ClassFilter in module jedi.evaluate.context.klass

class ClassFilter(jedi.evaluate.filters.ParserTreeFilter)
 |  Method resolution order:
 |      ClassFilter
 |      jedi.evaluate.filters.ParserTreeFilter
 |      jedi.evaluate.filters.AbstractUsedNamesFilter
 |      jedi.evaluate.filters.AbstractFilter
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.context.klass.ClassName'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.ParserTreeFilter:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",until_position,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.ClassName,evaluate.context.klass,ClassName,"Python Library Documentation: class ClassName in module jedi.evaluate.context.klass

class ClassName(jedi.evaluate.filters.TreeNameDefinition)
 |  Method resolution order:
 |      ClassName
 |      jedi.evaluate.filters.TreeNameDefinition
 |      jedi.evaluate.filters.AbstractTreeName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, parent_context, tree_name, name_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer = wrapper(*args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.TreeNameDefinition:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name, name_context)',)",name_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.ClassName,evaluate.context.klass,ClassName,"Python Library Documentation: class ClassName in module jedi.evaluate.context.klass

class ClassName(jedi.evaluate.filters.TreeNameDefinition)
 |  Method resolution order:
 |      ClassName
 |      jedi.evaluate.filters.TreeNameDefinition
 |      jedi.evaluate.filters.AbstractTreeName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, parent_context, tree_name, name_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer = wrapper(*args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.TreeNameDefinition:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name, name_context)',)",tree_name,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.ClassName,evaluate.context.klass,ClassName,"Python Library Documentation: class ClassName in module jedi.evaluate.context.klass

class ClassName(jedi.evaluate.filters.TreeNameDefinition)
 |  Method resolution order:
 |      ClassName
 |      jedi.evaluate.filters.TreeNameDefinition
 |      jedi.evaluate.filters.AbstractTreeName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, parent_context, tree_name, name_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer = wrapper(*args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.TreeNameDefinition:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name, name_context)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.ClassName,evaluate.context.klass,ClassName,"Python Library Documentation: class ClassName in module jedi.evaluate.context.klass

class ClassName(jedi.evaluate.filters.TreeNameDefinition)
 |  Method resolution order:
 |      ClassName
 |      jedi.evaluate.filters.TreeNameDefinition
 |      jedi.evaluate.filters.AbstractTreeName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, parent_context, tree_name, name_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer = wrapper(*args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.TreeNameDefinition:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name, name_context)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.ContextName,evaluate.context.klass,ContextName,"Python Library Documentation: class ContextName in module jedi.evaluate.filters

class ContextName(ContextNameMixin, AbstractTreeName)
 |  Method resolution order:
 |      ContextName
 |      ContextNameMixin
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ContextNameMixin:
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ContextNameMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, context, tree_name)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.ContextName,evaluate.context.klass,ContextName,"Python Library Documentation: class ContextName in module jedi.evaluate.filters

class ContextName(ContextNameMixin, AbstractTreeName)
 |  Method resolution order:
 |      ContextName
 |      ContextNameMixin
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ContextNameMixin:
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ContextNameMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, context, tree_name)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.ContextName,evaluate.context.klass,ContextName,"Python Library Documentation: class ContextName in module jedi.evaluate.filters

class ContextName(ContextNameMixin, AbstractTreeName)
 |  Method resolution order:
 |      ContextName
 |      ContextNameMixin
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ContextNameMixin:
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ContextNameMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, context, tree_name)',)",tree_name,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.ContextSet,evaluate.context.klass,ContextSet,"Python Library Documentation: class ContextSet in module jedi.evaluate.base_context

class ContextSet(jedi.common.context.BaseContextSet)
 |  Method resolution order:
 |      ContextSet
 |      jedi.common.context.BaseContextSet
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContextSet:
 |  
 |  __bool__(self)
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, *args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self)
 |  
 |  __len__(self)
 |  
 |  __or__(self, other)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  filter(self, filter_func)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from jedi.common.context.BaseContextSet:
 |  
 |  from_iterable(iterable) from builtins.type
 |  
 |  from_set(set_) from builtins.type
 |  
 |  from_sets(sets) from builtins.type
 |      Used to work with an iterable of set.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContextSet:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, *args)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.ContextSet.from_iterable,evaluate.context.klass.ContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.ContextSet.from_iterable,evaluate.context.klass.ContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",iterable,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.ContextSet.from_set,evaluate.context.klass.ContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.ContextSet.from_set,evaluate.context.klass.ContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",set_,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.ContextSet.from_sets,evaluate.context.klass.ContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.ContextSet.from_sets,evaluate.context.klass.ContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",sets,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.LazyKnownContext,evaluate.context.klass,LazyKnownContext,"Python Library Documentation: class LazyKnownContext in module jedi.evaluate.lazy_context

class LazyKnownContext(AbstractLazyContext)
 |  data is a context.
 |  
 |  Method resolution order:
 |      LazyKnownContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __init__(self, data)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, data)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.LazyKnownContext,evaluate.context.klass,LazyKnownContext,"Python Library Documentation: class LazyKnownContext in module jedi.evaluate.lazy_context

class LazyKnownContext(AbstractLazyContext)
 |  data is a context.
 |  
 |  Method resolution order:
 |      LazyKnownContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __init__(self, data)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, data)',)",data,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.ParserTreeFilter,evaluate.context.klass,ParserTreeFilter,"Python Library Documentation: class ParserTreeFilter in module jedi.evaluate.filters

class ParserTreeFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",origin_scope,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.ParserTreeFilter,evaluate.context.klass,ParserTreeFilter,"Python Library Documentation: class ParserTreeFilter in module jedi.evaluate.filters

class ParserTreeFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",until_position,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.ParserTreeFilter,evaluate.context.klass,ParserTreeFilter,"Python Library Documentation: class ParserTreeFilter in module jedi.evaluate.filters

class ParserTreeFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.ParserTreeFilter,evaluate.context.klass,ParserTreeFilter,"Python Library Documentation: class ParserTreeFilter in module jedi.evaluate.filters

class ParserTreeFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.ParserTreeFilter,evaluate.context.klass,ParserTreeFilter,"Python Library Documentation: class ParserTreeFilter in module jedi.evaluate.filters

class ParserTreeFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.ParserTreeFilter,evaluate.context.klass,ParserTreeFilter,"Python Library Documentation: class ParserTreeFilter in module jedi.evaluate.filters

class ParserTreeFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",node_context,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.TreeContext,evaluate.context.klass,TreeContext,"Python Library Documentation: class TreeContext in module jedi.evaluate.base_context

class TreeContext(Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      TreeContext
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.TreeContext,evaluate.context.klass,TreeContext,"Python Library Documentation: class TreeContext in module jedi.evaluate.base_context

class TreeContext(Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      TreeContext
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.TreeContext,evaluate.context.klass,TreeContext,"Python Library Documentation: class TreeContext in module jedi.evaluate.base_context

class TreeContext(Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      TreeContext
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",parent_context,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.TreeNameDefinition,evaluate.context.klass,TreeNameDefinition,"Python Library Documentation: class TreeNameDefinition in module jedi.evaluate.filters

class TreeNameDefinition(AbstractTreeName)
 |  Method resolution order:
 |      TreeNameDefinition
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.TreeNameDefinition,evaluate.context.klass,TreeNameDefinition,"Python Library Documentation: class TreeNameDefinition in module jedi.evaluate.filters

class TreeNameDefinition(AbstractTreeName)
 |  Method resolution order:
 |      TreeNameDefinition
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.TreeNameDefinition,evaluate.context.klass,TreeNameDefinition,"Python Library Documentation: class TreeNameDefinition in module jedi.evaluate.filters

class TreeNameDefinition(AbstractTreeName)
 |  Method resolution order:
 |      TreeNameDefinition
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",tree_name,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.apply_py__get__,evaluate.context.klass,apply_py__get__,"Python Library Documentation: function apply_py__get__ in module jedi.evaluate.context.klass

apply_py__get__(context, base_context)
",function,"('(context, base_context)',)",base_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.apply_py__get__,evaluate.context.klass,apply_py__get__,"Python Library Documentation: function apply_py__get__ in module jedi.evaluate.context.klass

apply_py__get__(context, base_context)
",function,"('(context, base_context)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.evaluator_method_cache,evaluate.context.klass,evaluator_method_cache,"Python Library Documentation: function evaluator_method_cache in module jedi.evaluate.cache

evaluator_method_cache(default=<object object at 0x000000000520FC20>)
",function,"('(default=<object object at 0x000000000520FC20>)',)",default,<object object at 0x000000000520FC20>,object,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.iterator_to_context_set,evaluate.context.klass,iterator_to_context_set,"Python Library Documentation: function iterator_to_context_set in module jedi.evaluate.base_context

iterator_to_context_set(func)
",function,"('(func)',)",func,,,arg_info
jedi,0.12.0,jedi.evaluate.context.klass.use_metaclass,evaluate.context.klass,use_metaclass,"Python Library Documentation: function use_metaclass in module jedi._compatibility

use_metaclass(meta, *bases)
    Create a class with a metaclass.
",function,"('(meta, *bases)',)",meta,,,arg_info
jedi,0.12.0,jedi.evaluate.context.module.AbstractNameDefinition,evaluate.context.module,AbstractNameDefinition,"Python Library Documentation: class AbstractNameDefinition in module jedi.evaluate.filters

class AbstractNameDefinition(builtins.object)
 |  Methods defined here:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  infer(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.module.ContextNameMixin,evaluate.context.module,ContextNameMixin,"Python Library Documentation: class ContextNameMixin in module jedi.evaluate.filters

class ContextNameMixin(builtins.object)
 |  Methods defined here:
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  api_type
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.module.DictFilter,evaluate.context.module,DictFilter,"Python Library Documentation: class DictFilter in module jedi.evaluate.filters

class DictFilter(AbstractFilter)
 |  Method resolution order:
 |      DictFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, dct)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, dct)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.module.DictFilter,evaluate.context.module,DictFilter,"Python Library Documentation: class DictFilter in module jedi.evaluate.filters

class DictFilter(AbstractFilter)
 |  Method resolution order:
 |      DictFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, dct)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, dct)',)",dct,,,arg_info
jedi,0.12.0,jedi.evaluate.context.module.GlobalNameFilter,evaluate.context.module,GlobalNameFilter,"Python Library Documentation: class GlobalNameFilter in module jedi.evaluate.filters

class GlobalNameFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      GlobalNameFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, parser_scope)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, parser_scope)',)",parser_scope,,,arg_info
jedi,0.12.0,jedi.evaluate.context.module.GlobalNameFilter,evaluate.context.module,GlobalNameFilter,"Python Library Documentation: class GlobalNameFilter in module jedi.evaluate.filters

class GlobalNameFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      GlobalNameFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, parser_scope)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, parser_scope)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.module.GlobalNameFilter,evaluate.context.module,GlobalNameFilter,"Python Library Documentation: class GlobalNameFilter in module jedi.evaluate.filters

class GlobalNameFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      GlobalNameFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, parser_scope)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, parser_scope)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.module.MergedFilter,evaluate.context.module,MergedFilter,"Python Library Documentation: class MergedFilter in module jedi.evaluate.filters

class MergedFilter(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, *filters)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, *filters)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.module.ModuleContext,evaluate.context.module,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",code_lines,,,arg_info
jedi,0.12.0,jedi.evaluate.context.module.ModuleContext,evaluate.context.module,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.module.ModuleContext,evaluate.context.module,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.module.ModuleContext,evaluate.context.module,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",module_node,,,arg_info
jedi,0.12.0,jedi.evaluate.context.module.ModuleContext,evaluate.context.module,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",path,,,arg_info
jedi,0.12.0,jedi.evaluate.context.module.ModuleName,evaluate.context.module,ModuleName,"Python Library Documentation: class ModuleName in module jedi.evaluate.context.module

class ModuleName(jedi.evaluate.filters.ContextNameMixin, jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      ModuleName
 |      jedi.evaluate.filters.ContextNameMixin
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  start_pos = (1, 0)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.ContextNameMixin:
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.ContextNameMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, context, name)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.module.ModuleName,evaluate.context.module,ModuleName,"Python Library Documentation: class ModuleName in module jedi.evaluate.context.module

class ModuleName(jedi.evaluate.filters.ContextNameMixin, jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      ModuleName
 |      jedi.evaluate.filters.ContextNameMixin
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  start_pos = (1, 0)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.ContextNameMixin:
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.ContextNameMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, context, name)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.module.ModuleName,evaluate.context.module,ModuleName,"Python Library Documentation: class ModuleName in module jedi.evaluate.context.module

class ModuleName(jedi.evaluate.filters.ContextNameMixin, jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      ModuleName
 |      jedi.evaluate.filters.ContextNameMixin
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  start_pos = (1, 0)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.ContextNameMixin:
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.ContextNameMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, context, name)',)",name,,,arg_info
jedi,0.12.0,jedi.evaluate.context.module.ParserTreeFilter,evaluate.context.module,ParserTreeFilter,"Python Library Documentation: class ParserTreeFilter in module jedi.evaluate.filters

class ParserTreeFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",origin_scope,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.context.module.ParserTreeFilter,evaluate.context.module,ParserTreeFilter,"Python Library Documentation: class ParserTreeFilter in module jedi.evaluate.filters

class ParserTreeFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",until_position,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.context.module.ParserTreeFilter,evaluate.context.module,ParserTreeFilter,"Python Library Documentation: class ParserTreeFilter in module jedi.evaluate.filters

class ParserTreeFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",node_context,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.context.module.ParserTreeFilter,evaluate.context.module,ParserTreeFilter,"Python Library Documentation: class ParserTreeFilter in module jedi.evaluate.filters

class ParserTreeFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.module.ParserTreeFilter,evaluate.context.module,ParserTreeFilter,"Python Library Documentation: class ParserTreeFilter in module jedi.evaluate.filters

class ParserTreeFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.module.ParserTreeFilter,evaluate.context.module,ParserTreeFilter,"Python Library Documentation: class ParserTreeFilter in module jedi.evaluate.filters

class ParserTreeFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.module.SubModuleName,evaluate.context.module,SubModuleName,"Python Library Documentation: class SubModuleName in module jedi.evaluate.imports

class SubModuleName(ImportName)
 |  Method resolution order:
 |      SubModuleName
 |      ImportName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods inherited from ImportName:
 |  
 |  __init__(self, parent_context, string_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ImportName:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from ImportName:
 |  
 |  start_pos = (1, 0)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, string_name)',)",string_name,,,arg_info
jedi,0.12.0,jedi.evaluate.context.module.SubModuleName,evaluate.context.module,SubModuleName,"Python Library Documentation: class SubModuleName in module jedi.evaluate.imports

class SubModuleName(ImportName)
 |  Method resolution order:
 |      SubModuleName
 |      ImportName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods inherited from ImportName:
 |  
 |  __init__(self, parent_context, string_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ImportName:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from ImportName:
 |  
 |  start_pos = (1, 0)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, string_name)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.context.module.SubModuleName,evaluate.context.module,SubModuleName,"Python Library Documentation: class SubModuleName in module jedi.evaluate.imports

class SubModuleName(ImportName)
 |  Method resolution order:
 |      SubModuleName
 |      ImportName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods inherited from ImportName:
 |  
 |  __init__(self, parent_context, string_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ImportName:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from ImportName:
 |  
 |  start_pos = (1, 0)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, string_name)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.module.TreeContext,evaluate.context.module,TreeContext,"Python Library Documentation: class TreeContext in module jedi.evaluate.base_context

class TreeContext(Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      TreeContext
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",parent_context,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.context.module.TreeContext,evaluate.context.module,TreeContext,"Python Library Documentation: class TreeContext in module jedi.evaluate.base_context

class TreeContext(Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      TreeContext
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.module.TreeContext,evaluate.context.module,TreeContext,"Python Library Documentation: class TreeContext in module jedi.evaluate.base_context

class TreeContext(Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      TreeContext
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.context.module._ModuleAttributeName,evaluate.context.module,_ModuleAttributeName,"Python Library Documentation: class _ModuleAttributeName in module jedi.evaluate.context.module

class _ModuleAttributeName(jedi.evaluate.filters.AbstractNameDefinition)
 |  For module attributes like __file__, __str__ and so on.
 |  
 |  Method resolution order:
 |      _ModuleAttributeName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, parent_module, string_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, parent_module, string_name)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.context.module._ModuleAttributeName,evaluate.context.module,_ModuleAttributeName,"Python Library Documentation: class _ModuleAttributeName in module jedi.evaluate.context.module

class _ModuleAttributeName(jedi.evaluate.filters.AbstractNameDefinition)
 |  For module attributes like __file__, __str__ and so on.
 |  
 |  Method resolution order:
 |      _ModuleAttributeName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, parent_module, string_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, parent_module, string_name)',)",parent_module,,,arg_info
jedi,0.12.0,jedi.evaluate.context.module._ModuleAttributeName,evaluate.context.module,_ModuleAttributeName,"Python Library Documentation: class _ModuleAttributeName in module jedi.evaluate.context.module

class _ModuleAttributeName(jedi.evaluate.filters.AbstractNameDefinition)
 |  For module attributes like __file__, __str__ and so on.
 |  
 |  Method resolution order:
 |      _ModuleAttributeName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, parent_module, string_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'instance'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, parent_module, string_name)',)",string_name,,,arg_info
jedi,0.12.0,jedi.evaluate.context.module.evaluator_method_cache,evaluate.context.module,evaluator_method_cache,"Python Library Documentation: function evaluator_method_cache in module jedi.evaluate.cache

evaluator_method_cache(default=<object object at 0x000000000520FC20>)
",function,"('(default=<object object at 0x000000000520FC20>)',)",default,<object object at 0x000000000520FC20>,object,arg_info
jedi,0.12.0,jedi.evaluate.context.module.infer_import,evaluate.context.module,wrapper,"Python Library Documentation: function wrapper in module jedi.evaluate.cache

wrapper(obj, *args, **kwargs)
",function,"('(obj, *args, **kwargs)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.context.module.iter_modules,evaluate.context.module,_iter_modules,"Python Library Documentation: function _iter_modules in module jedi._compatibility

_iter_modules(paths, prefix='')
",function,"(""(paths, prefix='')"",)",paths,,,arg_info
jedi,0.12.0,jedi.evaluate.context.module.iter_modules,evaluate.context.module,_iter_modules,"Python Library Documentation: function _iter_modules in module jedi._compatibility

_iter_modules(paths, prefix='')
",function,"(""(paths, prefix='')"",)",prefix,,,arg_info
jedi,0.12.0,jedi.evaluate.context.module.python_bytes_to_unicode,evaluate.context.module,python_bytes_to_unicode,"Python Library Documentation: function python_bytes_to_unicode in module parso.utils

python_bytes_to_unicode(source, encoding='utf-8', errors='strict')
    Checks for unicode BOMs and PEP 263 encoding declarations. Then returns a
    unicode object like in :py:meth:`bytes.decode`.
    
    :param encoding: See :py:meth:`bytes.decode` documentation.
    :param errors: See :py:meth:`bytes.decode` documentation. ``errors`` can be
        ``'strict'``, ``'replace'`` or ``'ignore'``.
",function,"(""(source, encoding='utf-8', errors='strict')"",)",source,,,arg_info
jedi,0.12.0,jedi.evaluate.context.module.python_bytes_to_unicode,evaluate.context.module,python_bytes_to_unicode,"Python Library Documentation: function python_bytes_to_unicode in module parso.utils

python_bytes_to_unicode(source, encoding='utf-8', errors='strict')
    Checks for unicode BOMs and PEP 263 encoding declarations. Then returns a
    unicode object like in :py:meth:`bytes.decode`.
    
    :param encoding: See :py:meth:`bytes.decode` documentation.
    :param errors: See :py:meth:`bytes.decode` documentation. ``errors`` can be
        ``'strict'``, ``'replace'`` or ``'ignore'``.
",function,"(""(source, encoding='utf-8', errors='strict')"",)",errors,strict,str,arg_info
jedi,0.12.0,jedi.evaluate.context.module.python_bytes_to_unicode,evaluate.context.module,python_bytes_to_unicode,"Python Library Documentation: function python_bytes_to_unicode in module parso.utils

python_bytes_to_unicode(source, encoding='utf-8', errors='strict')
    Checks for unicode BOMs and PEP 263 encoding declarations. Then returns a
    unicode object like in :py:meth:`bytes.decode`.
    
    :param encoding: See :py:meth:`bytes.decode` documentation.
    :param errors: See :py:meth:`bytes.decode` documentation. ``errors`` can be
        ``'strict'``, ``'replace'`` or ``'ignore'``.
",function,"(""(source, encoding='utf-8', errors='strict')"",)",encoding,utf-8,str,arg_info
jedi,0.12.0,jedi.evaluate.docstrings.ContextSet,evaluate.docstrings,ContextSet,"Python Library Documentation: class ContextSet in module jedi.evaluate.base_context

class ContextSet(jedi.common.context.BaseContextSet)
 |  Method resolution order:
 |      ContextSet
 |      jedi.common.context.BaseContextSet
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContextSet:
 |  
 |  __bool__(self)
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, *args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self)
 |  
 |  __len__(self)
 |  
 |  __or__(self, other)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  filter(self, filter_func)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from jedi.common.context.BaseContextSet:
 |  
 |  from_iterable(iterable) from builtins.type
 |  
 |  from_set(set_) from builtins.type
 |  
 |  from_sets(sets) from builtins.type
 |      Used to work with an iterable of set.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContextSet:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, *args)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.docstrings.ContextSet.from_iterable,evaluate.docstrings.ContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.docstrings.ContextSet.from_iterable,evaluate.docstrings.ContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",iterable,,,arg_info
jedi,0.12.0,jedi.evaluate.docstrings.ContextSet.from_set,evaluate.docstrings.ContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.docstrings.ContextSet.from_set,evaluate.docstrings.ContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",set_,,,arg_info
jedi,0.12.0,jedi.evaluate.docstrings.ContextSet.from_sets,evaluate.docstrings.ContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.docstrings.ContextSet.from_sets,evaluate.docstrings.ContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",sets,,,arg_info
jedi,0.12.0,jedi.evaluate.docstrings.LazyKnownContexts,evaluate.docstrings,LazyKnownContexts,"Python Library Documentation: class LazyKnownContexts in module jedi.evaluate.lazy_context

class LazyKnownContexts(AbstractLazyContext)
 |  data is a ContextSet.
 |  
 |  Method resolution order:
 |      LazyKnownContexts
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __init__(self, data)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, data)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.docstrings.LazyKnownContexts,evaluate.docstrings,LazyKnownContexts,"Python Library Documentation: class LazyKnownContexts in module jedi.evaluate.lazy_context

class LazyKnownContexts(AbstractLazyContext)
 |  data is a ContextSet.
 |  
 |  Method resolution order:
 |      LazyKnownContexts
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __init__(self, data)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, data)',)",data,,,arg_info
jedi,0.12.0,jedi.evaluate.docstrings.ParserSyntaxError,evaluate.docstrings,ParserSyntaxError,"Python Library Documentation: class ParserSyntaxError in module parso.parser

class ParserSyntaxError(builtins.Exception)
 |  Contains error information about the parser tree.
 |  
 |  May be raised as an exception.
 |  
 |  Method resolution order:
 |      ParserSyntaxError
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, message, error_leaf)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, message, error_leaf)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.docstrings.ParserSyntaxError,evaluate.docstrings,ParserSyntaxError,"Python Library Documentation: class ParserSyntaxError in module parso.parser

class ParserSyntaxError(builtins.Exception)
 |  Contains error information about the parser tree.
 |  
 |  May be raised as an exception.
 |  
 |  Method resolution order:
 |      ParserSyntaxError
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, message, error_leaf)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, message, error_leaf)',)",message,,,arg_info
jedi,0.12.0,jedi.evaluate.docstrings.ParserSyntaxError,evaluate.docstrings,ParserSyntaxError,"Python Library Documentation: class ParserSyntaxError in module parso.parser

class ParserSyntaxError(builtins.Exception)
 |  Contains error information about the parser tree.
 |  
 |  May be raised as an exception.
 |  
 |  Method resolution order:
 |      ParserSyntaxError
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, message, error_leaf)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, message, error_leaf)',)",error_leaf,,,arg_info
jedi,0.12.0,jedi.evaluate.docstrings._evaluate_for_statement_string,evaluate.docstrings,_evaluate_for_statement_string,"Python Library Documentation: function _evaluate_for_statement_string in module jedi.evaluate.docstrings

_evaluate_for_statement_string(module_context, string)
",function,"('(module_context, string)',)",string,,,arg_info
jedi,0.12.0,jedi.evaluate.docstrings._evaluate_for_statement_string,evaluate.docstrings,_evaluate_for_statement_string,"Python Library Documentation: function _evaluate_for_statement_string in module jedi.evaluate.docstrings

_evaluate_for_statement_string(module_context, string)
",function,"('(module_context, string)',)",module_context,,,arg_info
jedi,0.12.0,jedi.evaluate.docstrings._execute_array_values,evaluate.docstrings,_execute_array_values,"Python Library Documentation: function _execute_array_values in module jedi.evaluate.docstrings

_execute_array_values(evaluator, array)
    Tuples indicate that there's not just one return value, but the listed
    ones.  `(str, int)` means that it returns a tuple with both types.
",function,"('(evaluator, array)',)",array,,,arg_info
jedi,0.12.0,jedi.evaluate.docstrings._execute_array_values,evaluate.docstrings,_execute_array_values,"Python Library Documentation: function _execute_array_values in module jedi.evaluate.docstrings

_execute_array_values(evaluator, array)
    Tuples indicate that there's not just one return value, but the listed
    ones.  `(str, int)` means that it returns a tuple with both types.
",function,"('(evaluator, array)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.docstrings._execute_types_in_stmt,evaluate.docstrings,_execute_types_in_stmt,"Python Library Documentation: function _execute_types_in_stmt in module jedi.evaluate.docstrings

_execute_types_in_stmt(module_context, stmt)
    Executing all types or general elements that we find in a statement. This
    doesn't include tuple, list and dict literals, because the stuff they
    contain is executed. (Used as type information).
",function,"('(module_context, stmt)',)",module_context,,,arg_info
jedi,0.12.0,jedi.evaluate.docstrings._execute_types_in_stmt,evaluate.docstrings,_execute_types_in_stmt,"Python Library Documentation: function _execute_types_in_stmt in module jedi.evaluate.docstrings

_execute_types_in_stmt(module_context, stmt)
    Executing all types or general elements that we find in a statement. This
    doesn't include tuple, list and dict literals, because the stuff they
    contain is executed. (Used as type information).
",function,"('(module_context, stmt)',)",stmt,,,arg_info
jedi,0.12.0,jedi.evaluate.docstrings._expand_typestr,evaluate.docstrings,_expand_typestr,"Python Library Documentation: function _expand_typestr in module jedi.evaluate.docstrings

_expand_typestr(type_str)
    Attempts to interpret the possible types in `type_str`
",function,"('(type_str)',)",type_str,,,arg_info
jedi,0.12.0,jedi.evaluate.docstrings._search_param_in_docstr,evaluate.docstrings,_search_param_in_docstr,"Python Library Documentation: function _search_param_in_docstr in module jedi.evaluate.docstrings

_search_param_in_docstr(docstr, param_str)
    Search `docstr` for type(-s) of `param_str`.
    
    >>> _search_param_in_docstr(':type param: int', 'param')
    ['int']
    >>> _search_param_in_docstr('@type param: int', 'param')
    ['int']
    >>> _search_param_in_docstr(
    ...   ':type param: :class:`threading.Thread`', 'param')
    ['threading.Thread']
    >>> bool(_search_param_in_docstr('no document', 'param'))
    False
    >>> _search_param_in_docstr(':param int param: some description', 'param')
    ['int']
",function,"('(docstr, param_str)',)",docstr,,,arg_info
jedi,0.12.0,jedi.evaluate.docstrings._search_param_in_docstr,evaluate.docstrings,_search_param_in_docstr,"Python Library Documentation: function _search_param_in_docstr in module jedi.evaluate.docstrings

_search_param_in_docstr(docstr, param_str)
    Search `docstr` for type(-s) of `param_str`.
    
    >>> _search_param_in_docstr(':type param: int', 'param')
    ['int']
    >>> _search_param_in_docstr('@type param: int', 'param')
    ['int']
    >>> _search_param_in_docstr(
    ...   ':type param: :class:`threading.Thread`', 'param')
    ['threading.Thread']
    >>> bool(_search_param_in_docstr('no document', 'param'))
    False
    >>> _search_param_in_docstr(':param int param: some description', 'param')
    ['int']
",function,"('(docstr, param_str)',)",param_str,,,arg_info
jedi,0.12.0,jedi.evaluate.docstrings._search_param_in_numpydocstr,evaluate.docstrings,_search_param_in_numpydocstr,"Python Library Documentation: function _search_param_in_numpydocstr in module jedi.evaluate.docstrings

_search_param_in_numpydocstr(docstr, param_str)
    Search `docstr` (in numpydoc format) for type(-s) of `param_str`.
",function,"('(docstr, param_str)',)",docstr,,,arg_info
jedi,0.12.0,jedi.evaluate.docstrings._search_param_in_numpydocstr,evaluate.docstrings,_search_param_in_numpydocstr,"Python Library Documentation: function _search_param_in_numpydocstr in module jedi.evaluate.docstrings

_search_param_in_numpydocstr(docstr, param_str)
    Search `docstr` (in numpydoc format) for type(-s) of `param_str`.
",function,"('(docstr, param_str)',)",param_str,,,arg_info
jedi,0.12.0,jedi.evaluate.docstrings._search_return_in_numpydocstr,evaluate.docstrings,_search_return_in_numpydocstr,"Python Library Documentation: function _search_return_in_numpydocstr in module jedi.evaluate.docstrings

_search_return_in_numpydocstr(docstr)
    Search `docstr` (in numpydoc format) for type(-s) of function returns.
",function,"('(docstr)',)",docstr,,,arg_info
jedi,0.12.0,jedi.evaluate.docstrings._strip_rst_role,evaluate.docstrings,_strip_rst_role,"Python Library Documentation: function _strip_rst_role in module jedi.evaluate.docstrings

_strip_rst_role(type_str)
    Strip off the part looks like a ReST role in `type_str`.
    
    >>> _strip_rst_role(':class:`ClassName`')  # strip off :class:
    'ClassName'
    >>> _strip_rst_role(':py:obj:`module.Object`')  # works with domain
    'module.Object'
    >>> _strip_rst_role('ClassName')  # do nothing when not ReST role
    'ClassName'
    
    See also:
    http://sphinx-doc.org/domains.html#cross-referencing-python-objects
",function,"('(type_str)',)",type_str,,,arg_info
jedi,0.12.0,jedi.evaluate.docstrings.dedent,evaluate.docstrings,dedent,"Python Library Documentation: function dedent in module textwrap

dedent(text)
    Remove any common leading whitespace from every line in `text`.
    
    This can be used to make triple-quoted strings line up with the left
    edge of the display, while still presenting them in the source code
    in indented form.
    
    Note that tabs and spaces are both treated as whitespace, but they
    are not equal: the lines ""  hello"" and ""\thello"" are
    considered to have no common leading whitespace.  (This behaviour is
    new in Python 2.5; older versions of this module incorrectly
    expanded tabs before searching for common leading whitespace.)
",function,"('(text)',)",text,,,arg_info
jedi,0.12.0,jedi.evaluate.docstrings.evaluator_method_cache,evaluate.docstrings,evaluator_method_cache,"Python Library Documentation: function evaluator_method_cache in module jedi.evaluate.cache

evaluator_method_cache(default=<object object at 0x000000000520FC20>)
",function,"('(default=<object object at 0x000000000520FC20>)',)",default,<object object at 0x000000000520FC20>,object,arg_info
jedi,0.12.0,jedi.evaluate.docstrings.indent_block,evaluate.docstrings,indent_block,"Python Library Documentation: function indent_block in module jedi.evaluate.utils

indent_block(text, indention='    ')
    This function indents a text block with a default of four spaces.
",function,"(""(text, indention='    ')"",)",text,,,arg_info
jedi,0.12.0,jedi.evaluate.docstrings.indent_block,evaluate.docstrings,indent_block,"Python Library Documentation: function indent_block in module jedi.evaluate.utils

indent_block(text, indention='    ')
    This function indents a text block with a default of four spaces.
",function,"(""(text, indention='    ')"",)",indention,    ,,arg_info
jedi,0.12.0,jedi.evaluate.docstrings.infer_param,evaluate.docstrings,wrapper,"Python Library Documentation: function wrapper in module jedi.evaluate.cache

wrapper(obj, *args, **kwargs)
",function,"('(obj, *args, **kwargs)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.docstrings.infer_return_types,evaluate.docstrings,wrapper,"Python Library Documentation: function wrapper in module jedi.evaluate.cache

wrapper(obj, *args, **kwargs)
",function,"('(obj, *args, **kwargs)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.docstrings.iterator_to_context_set,evaluate.docstrings,iterator_to_context_set,"Python Library Documentation: function iterator_to_context_set in module jedi.evaluate.base_context

iterator_to_context_set(func)
",function,"('(func)',)",func,,,arg_info
jedi,0.12.0,jedi.evaluate.docstrings.parse,evaluate.docstrings,parse,"Python Library Documentation: function parse in module parso

parse(code=None, **kwargs)
    A utility function to avoid loading grammars.
    Params are documented in :py:meth:`parso.Grammar.parse`.
    
    :param str version: The version used by :py:func:`parso.load_grammar`.
",function,"('(code=None, **kwargs)',)",code,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.docstrings.u,evaluate.docstrings,u,"Python Library Documentation: function u in module jedi._compatibility

u(string, errors='strict')
    Cast to unicode DAMMIT!
    Written because Python2 repr always implicitly casts to a string, so we
    have to cast back to a unicode (and we now that we always deal with valid
    unicode, because we check that in the beginning).
",function,"(""(string, errors='strict')"",)",string,,,arg_info
jedi,0.12.0,jedi.evaluate.docstrings.u,evaluate.docstrings,u,"Python Library Documentation: function u in module jedi._compatibility

u(string, errors='strict')
    Cast to unicode DAMMIT!
    Written because Python2 repr always implicitly casts to a string, so we
    have to cast back to a unicode (and we now that we always deal with valid
    unicode, because we check that in the beginning).
",function,"(""(string, errors='strict')"",)",errors,strict,str,arg_info
jedi,0.12.0,jedi.evaluate.eval_expr_stmt,evaluate,wrapper,"Python Library Documentation: function wrapper in module jedi.evaluate.syntax_tree

wrapper(context, *args, **kwargs)
",function,"('(context, *args, **kwargs)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.eval_trailer,evaluate,eval_trailer,"Python Library Documentation: function eval_trailer in module jedi.evaluate.syntax_tree

eval_trailer(context, base_contexts, trailer)
",function,"('(context, base_contexts, trailer)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.eval_trailer,evaluate,eval_trailer,"Python Library Documentation: function eval_trailer in module jedi.evaluate.syntax_tree

eval_trailer(context, base_contexts, trailer)
",function,"('(context, base_contexts, trailer)',)",base_contexts,,,arg_info
jedi,0.12.0,jedi.evaluate.eval_trailer,evaluate,eval_trailer,"Python Library Documentation: function eval_trailer in module jedi.evaluate.syntax_tree

eval_trailer(context, base_contexts, trailer)
",function,"('(context, base_contexts, trailer)',)",trailer,,,arg_info
jedi,0.12.0,jedi.evaluate.evaluator_function_cache,evaluate,evaluator_function_cache,"Python Library Documentation: function evaluator_function_cache in module jedi.evaluate.cache

evaluator_function_cache(default=<object object at 0x000000000520FC20>)
",function,"('(default=<object object at 0x000000000520FC20>)',)",default,<object object at 0x000000000520FC20>,object,arg_info
jedi,0.12.0,jedi.evaluate.filters.AbstractFilter,evaluate.filters,AbstractFilter,"Python Library Documentation: class AbstractFilter in module jedi.evaluate.filters

class AbstractFilter(builtins.object)
 |  Methods defined here:
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.AbstractNameDefinition,evaluate.filters,AbstractNameDefinition,"Python Library Documentation: class AbstractNameDefinition in module jedi.evaluate.filters

class AbstractNameDefinition(builtins.object)
 |  Methods defined here:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  infer(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.AbstractObjectOverwrite,evaluate.filters,AbstractObjectOverwrite,"Python Library Documentation: class AbstractObjectOverwrite in module jedi.evaluate.filters

class AbstractObjectOverwrite(jedi._compatibility.Py2CompatibilityMetaClass)
 |  Method resolution order:
 |      AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
 |  
 |  get_object(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {}
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi._compatibility.Py2CompatibilityMetaClass:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.AbstractTreeName,evaluate.filters,AbstractTreeName,"Python Library Documentation: class AbstractTreeName in module jedi.evaluate.filters

class AbstractTreeName(AbstractNameDefinition)
 |  Method resolution order:
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",tree_name,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.AbstractTreeName,evaluate.filters,AbstractTreeName,"Python Library Documentation: class AbstractTreeName in module jedi.evaluate.filters

class AbstractTreeName(AbstractNameDefinition)
 |  Method resolution order:
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.AbstractTreeName,evaluate.filters,AbstractTreeName,"Python Library Documentation: class AbstractTreeName in module jedi.evaluate.filters

class AbstractTreeName(AbstractNameDefinition)
 |  Method resolution order:
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.AbstractUsedNamesFilter,evaluate.filters,AbstractUsedNamesFilter,"Python Library Documentation: class AbstractUsedNamesFilter in module jedi.evaluate.filters

class AbstractUsedNamesFilter(AbstractFilter)
 |  Method resolution order:
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, parser_scope)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, parser_scope)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.AbstractUsedNamesFilter,evaluate.filters,AbstractUsedNamesFilter,"Python Library Documentation: class AbstractUsedNamesFilter in module jedi.evaluate.filters

class AbstractUsedNamesFilter(AbstractFilter)
 |  Method resolution order:
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, parser_scope)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, parser_scope)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.AbstractUsedNamesFilter,evaluate.filters,AbstractUsedNamesFilter,"Python Library Documentation: class AbstractUsedNamesFilter in module jedi.evaluate.filters

class AbstractUsedNamesFilter(AbstractFilter)
 |  Method resolution order:
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, parser_scope)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, parser_scope)',)",parser_scope,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.AnonymousInstanceFunctionExecutionFilter,evaluate.filters,AnonymousInstanceFunctionExecutionFilter,"Python Library Documentation: class AnonymousInstanceFunctionExecutionFilter in module jedi.evaluate.filters

class AnonymousInstanceFunctionExecutionFilter(FunctionExecutionFilter)
 |  Method resolution order:
 |      AnonymousInstanceFunctionExecutionFilter
 |      FunctionExecutionFilter
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  param_name = <class 'jedi.evaluate.filters.AnonymousInstanceParamName'...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from FunctionExecutionFilter:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",node_context,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.filters.AnonymousInstanceFunctionExecutionFilter,evaluate.filters,AnonymousInstanceFunctionExecutionFilter,"Python Library Documentation: class AnonymousInstanceFunctionExecutionFilter in module jedi.evaluate.filters

class AnonymousInstanceFunctionExecutionFilter(FunctionExecutionFilter)
 |  Method resolution order:
 |      AnonymousInstanceFunctionExecutionFilter
 |      FunctionExecutionFilter
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  param_name = <class 'jedi.evaluate.filters.AnonymousInstanceParamName'...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from FunctionExecutionFilter:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",origin_scope,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.filters.AnonymousInstanceFunctionExecutionFilter,evaluate.filters,AnonymousInstanceFunctionExecutionFilter,"Python Library Documentation: class AnonymousInstanceFunctionExecutionFilter in module jedi.evaluate.filters

class AnonymousInstanceFunctionExecutionFilter(FunctionExecutionFilter)
 |  Method resolution order:
 |      AnonymousInstanceFunctionExecutionFilter
 |      FunctionExecutionFilter
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  param_name = <class 'jedi.evaluate.filters.AnonymousInstanceParamName'...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from FunctionExecutionFilter:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",until_position,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.filters.AnonymousInstanceFunctionExecutionFilter,evaluate.filters,AnonymousInstanceFunctionExecutionFilter,"Python Library Documentation: class AnonymousInstanceFunctionExecutionFilter in module jedi.evaluate.filters

class AnonymousInstanceFunctionExecutionFilter(FunctionExecutionFilter)
 |  Method resolution order:
 |      AnonymousInstanceFunctionExecutionFilter
 |      FunctionExecutionFilter
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  param_name = <class 'jedi.evaluate.filters.AnonymousInstanceParamName'...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from FunctionExecutionFilter:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.AnonymousInstanceFunctionExecutionFilter,evaluate.filters,AnonymousInstanceFunctionExecutionFilter,"Python Library Documentation: class AnonymousInstanceFunctionExecutionFilter in module jedi.evaluate.filters

class AnonymousInstanceFunctionExecutionFilter(FunctionExecutionFilter)
 |  Method resolution order:
 |      AnonymousInstanceFunctionExecutionFilter
 |      FunctionExecutionFilter
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  param_name = <class 'jedi.evaluate.filters.AnonymousInstanceParamName'...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from FunctionExecutionFilter:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.AnonymousInstanceFunctionExecutionFilter,evaluate.filters,AnonymousInstanceFunctionExecutionFilter,"Python Library Documentation: class AnonymousInstanceFunctionExecutionFilter in module jedi.evaluate.filters

class AnonymousInstanceFunctionExecutionFilter(FunctionExecutionFilter)
 |  Method resolution order:
 |      AnonymousInstanceFunctionExecutionFilter
 |      FunctionExecutionFilter
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  param_name = <class 'jedi.evaluate.filters.AnonymousInstanceParamName'...
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from FunctionExecutionFilter:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.AnonymousInstanceParamName,evaluate.filters,AnonymousInstanceParamName,"Python Library Documentation: class AnonymousInstanceParamName in module jedi.evaluate.filters

class AnonymousInstanceParamName(ParamName)
 |  Method resolution order:
 |      AnonymousInstanceParamName
 |      ParamName
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ParamName:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_kind(self)
 |  
 |  get_param(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from ParamName:
 |  
 |  api_type = 'param'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.AnonymousInstanceParamName,evaluate.filters,AnonymousInstanceParamName,"Python Library Documentation: class AnonymousInstanceParamName in module jedi.evaluate.filters

class AnonymousInstanceParamName(ParamName)
 |  Method resolution order:
 |      AnonymousInstanceParamName
 |      ParamName
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ParamName:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_kind(self)
 |  
 |  get_param(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from ParamName:
 |  
 |  api_type = 'param'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.AnonymousInstanceParamName,evaluate.filters,AnonymousInstanceParamName,"Python Library Documentation: class AnonymousInstanceParamName in module jedi.evaluate.filters

class AnonymousInstanceParamName(ParamName)
 |  Method resolution order:
 |      AnonymousInstanceParamName
 |      ParamName
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ParamName:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_kind(self)
 |  
 |  get_param(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from ParamName:
 |  
 |  api_type = 'param'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",tree_name,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.BuiltinOverwrite,evaluate.filters,BuiltinOverwrite,"Python Library Documentation: class BuiltinOverwrite in module jedi.evaluate.filters

class BuiltinOverwrite(jedi.evaluate.base_context.Context, AbstractObjectOverwrite)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_object(self)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {}
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
",class,"('(self, evaluator)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.BuiltinOverwrite,evaluate.filters,BuiltinOverwrite,"Python Library Documentation: class BuiltinOverwrite in module jedi.evaluate.filters

class BuiltinOverwrite(jedi.evaluate.base_context.Context, AbstractObjectOverwrite)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      BuiltinOverwrite
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      AbstractObjectOverwrite
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_object(self)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  overwritten_methods = {}
 |  
 |  special_object_identifier = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.base_context.Context:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractObjectOverwrite:
 |  
 |  get_filters(self, search_global, *args, **kwargs)
",class,"('(self, evaluator)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.Context,evaluate.filters,Context,"Python Library Documentation: class Context in module jedi.evaluate.base_context

class Context(jedi.common.context.BaseContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.Context,evaluate.filters,Context,"Python Library Documentation: class Context in module jedi.evaluate.base_context

class Context(jedi.common.context.BaseContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.Context,evaluate.filters,Context,"Python Library Documentation: class Context in module jedi.evaluate.base_context

class Context(jedi.common.context.BaseContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  __init__(self, evaluator, parent_context=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context=None)',)",parent_context,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.filters.ContextName,evaluate.filters,ContextName,"Python Library Documentation: class ContextName in module jedi.evaluate.filters

class ContextName(ContextNameMixin, AbstractTreeName)
 |  Method resolution order:
 |      ContextName
 |      ContextNameMixin
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ContextNameMixin:
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ContextNameMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, context, tree_name)',)",tree_name,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.ContextName,evaluate.filters,ContextName,"Python Library Documentation: class ContextName in module jedi.evaluate.filters

class ContextName(ContextNameMixin, AbstractTreeName)
 |  Method resolution order:
 |      ContextName
 |      ContextNameMixin
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ContextNameMixin:
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ContextNameMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, context, tree_name)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.ContextName,evaluate.filters,ContextName,"Python Library Documentation: class ContextName in module jedi.evaluate.filters

class ContextName(ContextNameMixin, AbstractTreeName)
 |  Method resolution order:
 |      ContextName
 |      ContextNameMixin
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ContextNameMixin:
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ContextNameMixin:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, context, tree_name)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.ContextNameMixin,evaluate.filters,ContextNameMixin,"Python Library Documentation: class ContextNameMixin in module jedi.evaluate.filters

class ContextNameMixin(builtins.object)
 |  Methods defined here:
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  api_type
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.ContextSet,evaluate.filters,ContextSet,"Python Library Documentation: class ContextSet in module jedi.evaluate.base_context

class ContextSet(jedi.common.context.BaseContextSet)
 |  Method resolution order:
 |      ContextSet
 |      jedi.common.context.BaseContextSet
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContextSet:
 |  
 |  __bool__(self)
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, *args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self)
 |  
 |  __len__(self)
 |  
 |  __or__(self, other)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  filter(self, filter_func)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from jedi.common.context.BaseContextSet:
 |  
 |  from_iterable(iterable) from builtins.type
 |  
 |  from_set(set_) from builtins.type
 |  
 |  from_sets(sets) from builtins.type
 |      Used to work with an iterable of set.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContextSet:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, *args)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.ContextSet.from_iterable,evaluate.filters.ContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.ContextSet.from_iterable,evaluate.filters.ContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",iterable,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.ContextSet.from_set,evaluate.filters.ContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",set_,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.ContextSet.from_set,evaluate.filters.ContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.ContextSet.from_sets,evaluate.filters.ContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",sets,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.ContextSet.from_sets,evaluate.filters.ContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.DictFilter,evaluate.filters,DictFilter,"Python Library Documentation: class DictFilter in module jedi.evaluate.filters

class DictFilter(AbstractFilter)
 |  Method resolution order:
 |      DictFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, dct)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, dct)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.DictFilter,evaluate.filters,DictFilter,"Python Library Documentation: class DictFilter in module jedi.evaluate.filters

class DictFilter(AbstractFilter)
 |  Method resolution order:
 |      DictFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, dct)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, dct)',)",dct,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.FunctionExecutionFilter,evaluate.filters,FunctionExecutionFilter,"Python Library Documentation: class FunctionExecutionFilter in module jedi.evaluate.filters

class FunctionExecutionFilter(ParserTreeFilter)
 |  Method resolution order:
 |      FunctionExecutionFilter
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  param_name = <class 'jedi.evaluate.filters.ParamName'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.FunctionExecutionFilter,evaluate.filters,FunctionExecutionFilter,"Python Library Documentation: class FunctionExecutionFilter in module jedi.evaluate.filters

class FunctionExecutionFilter(ParserTreeFilter)
 |  Method resolution order:
 |      FunctionExecutionFilter
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  param_name = <class 'jedi.evaluate.filters.ParamName'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.FunctionExecutionFilter,evaluate.filters,FunctionExecutionFilter,"Python Library Documentation: class FunctionExecutionFilter in module jedi.evaluate.filters

class FunctionExecutionFilter(ParserTreeFilter)
 |  Method resolution order:
 |      FunctionExecutionFilter
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  param_name = <class 'jedi.evaluate.filters.ParamName'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.FunctionExecutionFilter,evaluate.filters,FunctionExecutionFilter,"Python Library Documentation: class FunctionExecutionFilter in module jedi.evaluate.filters

class FunctionExecutionFilter(ParserTreeFilter)
 |  Method resolution order:
 |      FunctionExecutionFilter
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  param_name = <class 'jedi.evaluate.filters.ParamName'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",node_context,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.filters.FunctionExecutionFilter,evaluate.filters,FunctionExecutionFilter,"Python Library Documentation: class FunctionExecutionFilter in module jedi.evaluate.filters

class FunctionExecutionFilter(ParserTreeFilter)
 |  Method resolution order:
 |      FunctionExecutionFilter
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  param_name = <class 'jedi.evaluate.filters.ParamName'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",until_position,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.filters.FunctionExecutionFilter,evaluate.filters,FunctionExecutionFilter,"Python Library Documentation: class FunctionExecutionFilter in module jedi.evaluate.filters

class FunctionExecutionFilter(ParserTreeFilter)
 |  Method resolution order:
 |      FunctionExecutionFilter
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  param_name = <class 'jedi.evaluate.filters.ParamName'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",origin_scope,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.filters.GlobalNameFilter,evaluate.filters,GlobalNameFilter,"Python Library Documentation: class GlobalNameFilter in module jedi.evaluate.filters

class GlobalNameFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      GlobalNameFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, parser_scope)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, parser_scope)',)",parser_scope,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.GlobalNameFilter,evaluate.filters,GlobalNameFilter,"Python Library Documentation: class GlobalNameFilter in module jedi.evaluate.filters

class GlobalNameFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      GlobalNameFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, parser_scope)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, parser_scope)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.GlobalNameFilter,evaluate.filters,GlobalNameFilter,"Python Library Documentation: class GlobalNameFilter in module jedi.evaluate.filters

class GlobalNameFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      GlobalNameFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, parser_scope)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, parser_scope)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.MergedFilter,evaluate.filters,MergedFilter,"Python Library Documentation: class MergedFilter in module jedi.evaluate.filters

class MergedFilter(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, *filters)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, *filters)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.ParamName,evaluate.filters,ParamName,"Python Library Documentation: class ParamName in module jedi.evaluate.filters

class ParamName(AbstractTreeName)
 |  Method resolution order:
 |      ParamName
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_kind(self)
 |  
 |  get_param(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'param'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.ParamName,evaluate.filters,ParamName,"Python Library Documentation: class ParamName in module jedi.evaluate.filters

class ParamName(AbstractTreeName)
 |  Method resolution order:
 |      ParamName
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_kind(self)
 |  
 |  get_param(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'param'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.ParamName,evaluate.filters,ParamName,"Python Library Documentation: class ParamName in module jedi.evaluate.filters

class ParamName(AbstractTreeName)
 |  Method resolution order:
 |      ParamName
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_kind(self)
 |  
 |  get_param(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'param'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",tree_name,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.Parameter,evaluate.filters,Parameter,"Python Library Documentation: class Parameter in module inspect

class Parameter(builtins.object)
 |  Represents a parameter in a function signature.
 |  
 |  Has the following public attributes:
 |  
 |  * name : str
 |      The name of the parameter as a string.
 |  * default : object
 |      The default value for the parameter if specified.  If the
 |      parameter has no default value, this attribute is set to
 |      `Parameter.empty`.
 |  * annotation
 |      The annotation for the parameter if specified.  If the
 |      parameter has no annotation, this attribute is set to
 |      `Parameter.empty`.
 |  * kind : str
 |      Describes how argument values are bound to the parameter.
 |      Possible values: `Parameter.POSITIONAL_ONLY`,
 |      `Parameter.POSITIONAL_OR_KEYWORD`, `Parameter.VAR_POSITIONAL`,
 |      `Parameter.KEYWORD_ONLY`, `Parameter.VAR_KEYWORD`.
 |  
 |  Methods defined here:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __init__(self, name, kind, *, default, annotation)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __reduce__(self)
 |      helper for pickle
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __setstate__(self, state)
 |  
 |  __str__(self)
 |      Return str(self).
 |  
 |  replace(self, *, name=<class 'inspect._void'>, kind=<class 'inspect._void'>, annotation=<class 'inspect._void'>, default=<class 'inspect._void'>)
 |      Creates a customized copy of the Parameter.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  annotation
 |  
 |  default
 |  
 |  kind
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  KEYWORD_ONLY = <_ParameterKind.KEYWORD_ONLY: 3>
 |  
 |  POSITIONAL_ONLY = <_ParameterKind.POSITIONAL_ONLY: 0>
 |  
 |  POSITIONAL_OR_KEYWORD = <_ParameterKind.POSITIONAL_OR_KEYWORD: 1>
 |  
 |  VAR_KEYWORD = <_ParameterKind.VAR_KEYWORD: 4>
 |  
 |  VAR_POSITIONAL = <_ParameterKind.VAR_POSITIONAL: 2>
 |  
 |  empty = <class 'inspect._empty'>
 |      Marker object for Signature.empty and Parameter.empty.
",class,"('(self, name, kind, *, default, annotation)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.Parameter,evaluate.filters,Parameter,"Python Library Documentation: class Parameter in module inspect

class Parameter(builtins.object)
 |  Represents a parameter in a function signature.
 |  
 |  Has the following public attributes:
 |  
 |  * name : str
 |      The name of the parameter as a string.
 |  * default : object
 |      The default value for the parameter if specified.  If the
 |      parameter has no default value, this attribute is set to
 |      `Parameter.empty`.
 |  * annotation
 |      The annotation for the parameter if specified.  If the
 |      parameter has no annotation, this attribute is set to
 |      `Parameter.empty`.
 |  * kind : str
 |      Describes how argument values are bound to the parameter.
 |      Possible values: `Parameter.POSITIONAL_ONLY`,
 |      `Parameter.POSITIONAL_OR_KEYWORD`, `Parameter.VAR_POSITIONAL`,
 |      `Parameter.KEYWORD_ONLY`, `Parameter.VAR_KEYWORD`.
 |  
 |  Methods defined here:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __init__(self, name, kind, *, default, annotation)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __reduce__(self)
 |      helper for pickle
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __setstate__(self, state)
 |  
 |  __str__(self)
 |      Return str(self).
 |  
 |  replace(self, *, name=<class 'inspect._void'>, kind=<class 'inspect._void'>, annotation=<class 'inspect._void'>, default=<class 'inspect._void'>)
 |      Creates a customized copy of the Parameter.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  annotation
 |  
 |  default
 |  
 |  kind
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  KEYWORD_ONLY = <_ParameterKind.KEYWORD_ONLY: 3>
 |  
 |  POSITIONAL_ONLY = <_ParameterKind.POSITIONAL_ONLY: 0>
 |  
 |  POSITIONAL_OR_KEYWORD = <_ParameterKind.POSITIONAL_OR_KEYWORD: 1>
 |  
 |  VAR_KEYWORD = <_ParameterKind.VAR_KEYWORD: 4>
 |  
 |  VAR_POSITIONAL = <_ParameterKind.VAR_POSITIONAL: 2>
 |  
 |  empty = <class 'inspect._empty'>
 |      Marker object for Signature.empty and Parameter.empty.
",class,"('(self, name, kind, *, default, annotation)',)",name,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.Parameter,evaluate.filters,Parameter,"Python Library Documentation: class Parameter in module inspect

class Parameter(builtins.object)
 |  Represents a parameter in a function signature.
 |  
 |  Has the following public attributes:
 |  
 |  * name : str
 |      The name of the parameter as a string.
 |  * default : object
 |      The default value for the parameter if specified.  If the
 |      parameter has no default value, this attribute is set to
 |      `Parameter.empty`.
 |  * annotation
 |      The annotation for the parameter if specified.  If the
 |      parameter has no annotation, this attribute is set to
 |      `Parameter.empty`.
 |  * kind : str
 |      Describes how argument values are bound to the parameter.
 |      Possible values: `Parameter.POSITIONAL_ONLY`,
 |      `Parameter.POSITIONAL_OR_KEYWORD`, `Parameter.VAR_POSITIONAL`,
 |      `Parameter.KEYWORD_ONLY`, `Parameter.VAR_KEYWORD`.
 |  
 |  Methods defined here:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __hash__(self)
 |      Return hash(self).
 |  
 |  __init__(self, name, kind, *, default, annotation)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __reduce__(self)
 |      helper for pickle
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __setstate__(self, state)
 |  
 |  __str__(self)
 |      Return str(self).
 |  
 |  replace(self, *, name=<class 'inspect._void'>, kind=<class 'inspect._void'>, annotation=<class 'inspect._void'>, default=<class 'inspect._void'>)
 |      Creates a customized copy of the Parameter.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  annotation
 |  
 |  default
 |  
 |  kind
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  KEYWORD_ONLY = <_ParameterKind.KEYWORD_ONLY: 3>
 |  
 |  POSITIONAL_ONLY = <_ParameterKind.POSITIONAL_ONLY: 0>
 |  
 |  POSITIONAL_OR_KEYWORD = <_ParameterKind.POSITIONAL_OR_KEYWORD: 1>
 |  
 |  VAR_KEYWORD = <_ParameterKind.VAR_KEYWORD: 4>
 |  
 |  VAR_POSITIONAL = <_ParameterKind.VAR_POSITIONAL: 2>
 |  
 |  empty = <class 'inspect._empty'>
 |      Marker object for Signature.empty and Parameter.empty.
",class,"('(self, name, kind, *, default, annotation)',)",kind,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.ParserTreeFilter,evaluate.filters,ParserTreeFilter,"Python Library Documentation: class ParserTreeFilter in module jedi.evaluate.filters

class ParserTreeFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.ParserTreeFilter,evaluate.filters,ParserTreeFilter,"Python Library Documentation: class ParserTreeFilter in module jedi.evaluate.filters

class ParserTreeFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.ParserTreeFilter,evaluate.filters,ParserTreeFilter,"Python Library Documentation: class ParserTreeFilter in module jedi.evaluate.filters

class ParserTreeFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",node_context,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.filters.ParserTreeFilter,evaluate.filters,ParserTreeFilter,"Python Library Documentation: class ParserTreeFilter in module jedi.evaluate.filters

class ParserTreeFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.ParserTreeFilter,evaluate.filters,ParserTreeFilter,"Python Library Documentation: class ParserTreeFilter in module jedi.evaluate.filters

class ParserTreeFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",origin_scope,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.filters.ParserTreeFilter,evaluate.filters,ParserTreeFilter,"Python Library Documentation: class ParserTreeFilter in module jedi.evaluate.filters

class ParserTreeFilter(AbstractUsedNamesFilter)
 |  Method resolution order:
 |      ParserTreeFilter
 |      AbstractUsedNamesFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)
 |      node_context is an option to specify a second context for use cases
 |      like the class mro where the parent class of a new name would be the
 |      context, but for some type inference it's important to have a local
 |      context of the other classes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractUsedNamesFilter:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractUsedNamesFilter:
 |  
 |  name_class = <class 'jedi.evaluate.filters.TreeNameDefinition'>
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, node_context=None, until_position=None, origin_scope=None)',)",until_position,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.filters.SpecialMethodFilter,evaluate.filters,SpecialMethodFilter,"Python Library Documentation: class SpecialMethodFilter in module jedi.evaluate.filters

class SpecialMethodFilter(DictFilter)
 |  A filter for methods that are defined in this module on the corresponding
 |  classes like Generator (for __next__, etc).
 |  
 |  Method resolution order:
 |      SpecialMethodFilter
 |      DictFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, dct, builtin_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  SpecialMethodName = <class 'jedi.evaluate.filters.SpecialMethodFilter....
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from DictFilter:
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, dct, builtin_context)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.SpecialMethodFilter,evaluate.filters,SpecialMethodFilter,"Python Library Documentation: class SpecialMethodFilter in module jedi.evaluate.filters

class SpecialMethodFilter(DictFilter)
 |  A filter for methods that are defined in this module on the corresponding
 |  classes like Generator (for __next__, etc).
 |  
 |  Method resolution order:
 |      SpecialMethodFilter
 |      DictFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, dct, builtin_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  SpecialMethodName = <class 'jedi.evaluate.filters.SpecialMethodFilter....
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from DictFilter:
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, dct, builtin_context)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.SpecialMethodFilter,evaluate.filters,SpecialMethodFilter,"Python Library Documentation: class SpecialMethodFilter in module jedi.evaluate.filters

class SpecialMethodFilter(DictFilter)
 |  A filter for methods that are defined in this module on the corresponding
 |  classes like Generator (for __next__, etc).
 |  
 |  Method resolution order:
 |      SpecialMethodFilter
 |      DictFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, dct, builtin_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  SpecialMethodName = <class 'jedi.evaluate.filters.SpecialMethodFilter....
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from DictFilter:
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, dct, builtin_context)',)",dct,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.SpecialMethodFilter,evaluate.filters,SpecialMethodFilter,"Python Library Documentation: class SpecialMethodFilter in module jedi.evaluate.filters

class SpecialMethodFilter(DictFilter)
 |  A filter for methods that are defined in this module on the corresponding
 |  classes like Generator (for __next__, etc).
 |  
 |  Method resolution order:
 |      SpecialMethodFilter
 |      DictFilter
 |      AbstractFilter
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, dct, builtin_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  SpecialMethodName = <class 'jedi.evaluate.filters.SpecialMethodFilter....
 |  
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from DictFilter:
 |  
 |  get(self, name)
 |  
 |  values(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractFilter:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, dct, builtin_context)',)",builtin_context,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.TreeNameDefinition,evaluate.filters,TreeNameDefinition,"Python Library Documentation: class TreeNameDefinition in module jedi.evaluate.filters

class TreeNameDefinition(AbstractTreeName)
 |  Method resolution order:
 |      TreeNameDefinition
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.TreeNameDefinition,evaluate.filters,TreeNameDefinition,"Python Library Documentation: class TreeNameDefinition in module jedi.evaluate.filters

class TreeNameDefinition(AbstractTreeName)
 |  Method resolution order:
 |      TreeNameDefinition
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.TreeNameDefinition,evaluate.filters,TreeNameDefinition,"Python Library Documentation: class TreeNameDefinition in module jedi.evaluate.filters

class TreeNameDefinition(AbstractTreeName)
 |  Method resolution order:
 |      TreeNameDefinition
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",tree_name,,,arg_info
jedi,0.12.0,jedi.evaluate.filters._BuiltinMappedMethod,evaluate.filters,_BuiltinMappedMethod,"Python Library Documentation: class _BuiltinMappedMethod in module jedi.evaluate.filters

class _BuiltinMappedMethod(jedi.evaluate.base_context.Context)
 |  ``Generator.__next__`` ``dict.values`` methods and so on.
 |  
 |  Method resolution order:
 |      _BuiltinMappedMethod
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, builtin_context, method, builtin_func)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  py__call__(self, params)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, builtin_context, method, builtin_func)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.filters._BuiltinMappedMethod,evaluate.filters,_BuiltinMappedMethod,"Python Library Documentation: class _BuiltinMappedMethod in module jedi.evaluate.filters

class _BuiltinMappedMethod(jedi.evaluate.base_context.Context)
 |  ``Generator.__next__`` ``dict.values`` methods and so on.
 |  
 |  Method resolution order:
 |      _BuiltinMappedMethod
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, builtin_context, method, builtin_func)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  py__call__(self, params)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, builtin_context, method, builtin_func)',)",builtin_context,,,arg_info
jedi,0.12.0,jedi.evaluate.filters._BuiltinMappedMethod,evaluate.filters,_BuiltinMappedMethod,"Python Library Documentation: class _BuiltinMappedMethod in module jedi.evaluate.filters

class _BuiltinMappedMethod(jedi.evaluate.base_context.Context)
 |  ``Generator.__next__`` ``dict.values`` methods and so on.
 |  
 |  Method resolution order:
 |      _BuiltinMappedMethod
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, builtin_context, method, builtin_func)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  py__call__(self, params)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, builtin_context, method, builtin_func)',)",method,,,arg_info
jedi,0.12.0,jedi.evaluate.filters._BuiltinMappedMethod,evaluate.filters,_BuiltinMappedMethod,"Python Library Documentation: class _BuiltinMappedMethod in module jedi.evaluate.filters

class _BuiltinMappedMethod(jedi.evaluate.base_context.Context)
 |  ``Generator.__next__`` ``dict.values`` methods and so on.
 |  
 |  Method resolution order:
 |      _BuiltinMappedMethod
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, builtin_context, method, builtin_func)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  py__call__(self, params)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, builtin_context, method, builtin_func)',)",builtin_func,,,arg_info
jedi,0.12.0,jedi.evaluate.filters._OverwriteMeta,evaluate.filters,_OverwriteMeta,"Python Library Documentation: class _OverwriteMeta in module jedi.evaluate.filters

class _OverwriteMeta(builtins.type)
 |  type(object_or_name, bases, dict)
 |  type(object) -> the object's type
 |  type(name, bases, dict) -> a new type
 |  
 |  Method resolution order:
 |      _OverwriteMeta
 |      builtins.type
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(cls, name, bases, dct)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.type:
 |  
 |  __call__(self, /, *args, **kwargs)
 |      Call self as a function.
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __dir__(...)
 |      __dir__() -> list
 |      specialized __dir__ implementation for types
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __instancecheck__(...)
 |      __instancecheck__() -> bool
 |      check if an object is an instance
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __prepare__(...) from builtins.type
 |      __prepare__() -> dict
 |      used to create the namespace for the class statement
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __sizeof__(...)
 |      __sizeof__() -> int
 |      return memory consumption of the type object
 |  
 |  __subclasscheck__(...)
 |      __subclasscheck__() -> bool
 |      check if a class is a subclass
 |  
 |  __subclasses__(...)
 |      __subclasses__() -> list of immediate subclasses
 |  
 |  mro(...)
 |      mro() -> list
 |      return a type's method resolution order
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.type:
 |  
 |  __abstractmethods__
 |  
 |  __dict__
 |  
 |  __text_signature__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from builtins.type:
 |  
 |  __base__ = <class 'type'>
 |      type(object_or_name, bases, dict)
 |      type(object) -> the object's type
 |      type(name, bases, dict) -> a new type
 |  
 |  __bases__ = (<class 'type'>,)
 |  
 |  __basicsize__ = 864
 |  
 |  __dictoffset__ = 264
 |  
 |  __flags__ = -2146675199
 |  
 |  __itemsize__ = 40
 |  
 |  __mro__ = (<class 'jedi.evaluate.filters._OverwriteMeta'>, <class 'typ...
 |  
 |  __weakrefoffset__ = 368
",class,"('(cls, name, bases, dct)',)",name,,,arg_info
jedi,0.12.0,jedi.evaluate.filters._OverwriteMeta,evaluate.filters,_OverwriteMeta,"Python Library Documentation: class _OverwriteMeta in module jedi.evaluate.filters

class _OverwriteMeta(builtins.type)
 |  type(object_or_name, bases, dict)
 |  type(object) -> the object's type
 |  type(name, bases, dict) -> a new type
 |  
 |  Method resolution order:
 |      _OverwriteMeta
 |      builtins.type
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(cls, name, bases, dct)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.type:
 |  
 |  __call__(self, /, *args, **kwargs)
 |      Call self as a function.
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __dir__(...)
 |      __dir__() -> list
 |      specialized __dir__ implementation for types
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __instancecheck__(...)
 |      __instancecheck__() -> bool
 |      check if an object is an instance
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __prepare__(...) from builtins.type
 |      __prepare__() -> dict
 |      used to create the namespace for the class statement
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __sizeof__(...)
 |      __sizeof__() -> int
 |      return memory consumption of the type object
 |  
 |  __subclasscheck__(...)
 |      __subclasscheck__() -> bool
 |      check if a class is a subclass
 |  
 |  __subclasses__(...)
 |      __subclasses__() -> list of immediate subclasses
 |  
 |  mro(...)
 |      mro() -> list
 |      return a type's method resolution order
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.type:
 |  
 |  __abstractmethods__
 |  
 |  __dict__
 |  
 |  __text_signature__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from builtins.type:
 |  
 |  __base__ = <class 'type'>
 |      type(object_or_name, bases, dict)
 |      type(object) -> the object's type
 |      type(name, bases, dict) -> a new type
 |  
 |  __bases__ = (<class 'type'>,)
 |  
 |  __basicsize__ = 864
 |  
 |  __dictoffset__ = 264
 |  
 |  __flags__ = -2146675199
 |  
 |  __itemsize__ = 40
 |  
 |  __mro__ = (<class 'jedi.evaluate.filters._OverwriteMeta'>, <class 'typ...
 |  
 |  __weakrefoffset__ = 368
",class,"('(cls, name, bases, dct)',)",dct,,,arg_info
jedi,0.12.0,jedi.evaluate.filters._OverwriteMeta,evaluate.filters,_OverwriteMeta,"Python Library Documentation: class _OverwriteMeta in module jedi.evaluate.filters

class _OverwriteMeta(builtins.type)
 |  type(object_or_name, bases, dict)
 |  type(object) -> the object's type
 |  type(name, bases, dict) -> a new type
 |  
 |  Method resolution order:
 |      _OverwriteMeta
 |      builtins.type
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(cls, name, bases, dct)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.type:
 |  
 |  __call__(self, /, *args, **kwargs)
 |      Call self as a function.
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __dir__(...)
 |      __dir__() -> list
 |      specialized __dir__ implementation for types
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __instancecheck__(...)
 |      __instancecheck__() -> bool
 |      check if an object is an instance
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __prepare__(...) from builtins.type
 |      __prepare__() -> dict
 |      used to create the namespace for the class statement
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __sizeof__(...)
 |      __sizeof__() -> int
 |      return memory consumption of the type object
 |  
 |  __subclasscheck__(...)
 |      __subclasscheck__() -> bool
 |      check if a class is a subclass
 |  
 |  __subclasses__(...)
 |      __subclasses__() -> list of immediate subclasses
 |  
 |  mro(...)
 |      mro() -> list
 |      return a type's method resolution order
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.type:
 |  
 |  __abstractmethods__
 |  
 |  __dict__
 |  
 |  __text_signature__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from builtins.type:
 |  
 |  __base__ = <class 'type'>
 |      type(object_or_name, bases, dict)
 |      type(object) -> the object's type
 |      type(name, bases, dict) -> a new type
 |  
 |  __bases__ = (<class 'type'>,)
 |  
 |  __basicsize__ = 864
 |  
 |  __dictoffset__ = 264
 |  
 |  __flags__ = -2146675199
 |  
 |  __itemsize__ = 40
 |  
 |  __mro__ = (<class 'jedi.evaluate.filters._OverwriteMeta'>, <class 'typ...
 |  
 |  __weakrefoffset__ = 368
",class,"('(cls, name, bases, dct)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.filters._OverwriteMeta,evaluate.filters,_OverwriteMeta,"Python Library Documentation: class _OverwriteMeta in module jedi.evaluate.filters

class _OverwriteMeta(builtins.type)
 |  type(object_or_name, bases, dict)
 |  type(object) -> the object's type
 |  type(name, bases, dict) -> a new type
 |  
 |  Method resolution order:
 |      _OverwriteMeta
 |      builtins.type
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(cls, name, bases, dct)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.type:
 |  
 |  __call__(self, /, *args, **kwargs)
 |      Call self as a function.
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __dir__(...)
 |      __dir__() -> list
 |      specialized __dir__ implementation for types
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __instancecheck__(...)
 |      __instancecheck__() -> bool
 |      check if an object is an instance
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __prepare__(...) from builtins.type
 |      __prepare__() -> dict
 |      used to create the namespace for the class statement
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __sizeof__(...)
 |      __sizeof__() -> int
 |      return memory consumption of the type object
 |  
 |  __subclasscheck__(...)
 |      __subclasscheck__() -> bool
 |      check if a class is a subclass
 |  
 |  __subclasses__(...)
 |      __subclasses__() -> list of immediate subclasses
 |  
 |  mro(...)
 |      mro() -> list
 |      return a type's method resolution order
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.type:
 |  
 |  __abstractmethods__
 |  
 |  __dict__
 |  
 |  __text_signature__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from builtins.type:
 |  
 |  __base__ = <class 'type'>
 |      type(object_or_name, bases, dict)
 |      type(object) -> the object's type
 |      type(name, bases, dict) -> a new type
 |  
 |  __bases__ = (<class 'type'>,)
 |  
 |  __basicsize__ = 864
 |  
 |  __dictoffset__ = 264
 |  
 |  __flags__ = -2146675199
 |  
 |  __itemsize__ = 40
 |  
 |  __mro__ = (<class 'jedi.evaluate.filters._OverwriteMeta'>, <class 'typ...
 |  
 |  __weakrefoffset__ = 368
",class,"('(cls, name, bases, dct)',)",bases,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.abstractmethod,evaluate.filters,abstractmethod,"Python Library Documentation: function abstractmethod in module abc

abstractmethod(funcobj)
    A decorator indicating abstract methods.
    
    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract methods are overridden.
    The abstract methods can be called using any of the normal
    'super' call mechanisms.
    
    Usage:
    
        class C(metaclass=ABCMeta):
            @abstractmethod
            def my_abstract_method(self, ...):
                ...
",function,"('(funcobj)',)",funcobj,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.get_global_filters,evaluate.filters,get_global_filters,"Python Library Documentation: function get_global_filters in module jedi.evaluate.filters

get_global_filters(evaluator, context, until_position, origin_scope)
    Returns all filters in order of priority for name resolution.
    
    For global name lookups. The filters will handle name resolution
    themselves, but here we gather possible filters downwards.
    
    >>> from jedi._compatibility import u, no_unicode_pprint
    >>> from jedi import Script
    >>> script = Script(u('''
    ... x = ['a', 'b', 'c']
    ... def func():
    ...     y = None
    ... '''))
    >>> module_node = script._module_node
    >>> scope = next(module_node.iter_funcdefs())
    >>> scope
    <Function: func@3-5>
    >>> context = script._get_module().create_context(scope)
    >>> filters = list(get_global_filters(context.evaluator, context, (4, 0), None))
    
    First we get the names from the function scope.
    
    >>> no_unicode_pprint(filters[0])                    #doctest: +ELLIPSIS
    MergedFilter(<ParserTreeFilter: ...>, <GlobalNameFilter: ...>)
    >>> sorted(str(n) for n in filters[0].values())
    ['<TreeNameDefinition: func@(3, 4)>', '<TreeNameDefinition: x@(2, 0)>']
    >>> filters[0]._filters[0]._until_position
    (4, 0)
    >>> filters[0]._filters[1]._until_position
    
    Then it yields the names from one level ""lower"". In this example, this is
    the module scope (including globals).
    As a side note, you can see, that the position in the filter is None on the
    globals filter, because there the whole module is searched.
    
    >>> list(filters[1].values())  # package modules -> Also empty.
    []
    >>> sorted(name.string_name for name in filters[2].values())  # Module attributes
    ['__doc__', '__file__', '__name__', '__package__']
    
    Finally, it yields the builtin filter, if `include_builtin` is
    true (default).
    
    >>> filters[3].values()                              #doctest: +ELLIPSIS
    [<CompiledName: ...>, ...]
",function,"('(evaluator, context, until_position, origin_scope)',)",origin_scope,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.get_global_filters,evaluate.filters,get_global_filters,"Python Library Documentation: function get_global_filters in module jedi.evaluate.filters

get_global_filters(evaluator, context, until_position, origin_scope)
    Returns all filters in order of priority for name resolution.
    
    For global name lookups. The filters will handle name resolution
    themselves, but here we gather possible filters downwards.
    
    >>> from jedi._compatibility import u, no_unicode_pprint
    >>> from jedi import Script
    >>> script = Script(u('''
    ... x = ['a', 'b', 'c']
    ... def func():
    ...     y = None
    ... '''))
    >>> module_node = script._module_node
    >>> scope = next(module_node.iter_funcdefs())
    >>> scope
    <Function: func@3-5>
    >>> context = script._get_module().create_context(scope)
    >>> filters = list(get_global_filters(context.evaluator, context, (4, 0), None))
    
    First we get the names from the function scope.
    
    >>> no_unicode_pprint(filters[0])                    #doctest: +ELLIPSIS
    MergedFilter(<ParserTreeFilter: ...>, <GlobalNameFilter: ...>)
    >>> sorted(str(n) for n in filters[0].values())
    ['<TreeNameDefinition: func@(3, 4)>', '<TreeNameDefinition: x@(2, 0)>']
    >>> filters[0]._filters[0]._until_position
    (4, 0)
    >>> filters[0]._filters[1]._until_position
    
    Then it yields the names from one level ""lower"". In this example, this is
    the module scope (including globals).
    As a side note, you can see, that the position in the filter is None on the
    globals filter, because there the whole module is searched.
    
    >>> list(filters[1].values())  # package modules -> Also empty.
    []
    >>> sorted(name.string_name for name in filters[2].values())  # Module attributes
    ['__doc__', '__file__', '__name__', '__package__']
    
    Finally, it yields the builtin filter, if `include_builtin` is
    true (default).
    
    >>> filters[3].values()                              #doctest: +ELLIPSIS
    [<CompiledName: ...>, ...]
",function,"('(evaluator, context, until_position, origin_scope)',)",until_position,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.get_global_filters,evaluate.filters,get_global_filters,"Python Library Documentation: function get_global_filters in module jedi.evaluate.filters

get_global_filters(evaluator, context, until_position, origin_scope)
    Returns all filters in order of priority for name resolution.
    
    For global name lookups. The filters will handle name resolution
    themselves, but here we gather possible filters downwards.
    
    >>> from jedi._compatibility import u, no_unicode_pprint
    >>> from jedi import Script
    >>> script = Script(u('''
    ... x = ['a', 'b', 'c']
    ... def func():
    ...     y = None
    ... '''))
    >>> module_node = script._module_node
    >>> scope = next(module_node.iter_funcdefs())
    >>> scope
    <Function: func@3-5>
    >>> context = script._get_module().create_context(scope)
    >>> filters = list(get_global_filters(context.evaluator, context, (4, 0), None))
    
    First we get the names from the function scope.
    
    >>> no_unicode_pprint(filters[0])                    #doctest: +ELLIPSIS
    MergedFilter(<ParserTreeFilter: ...>, <GlobalNameFilter: ...>)
    >>> sorted(str(n) for n in filters[0].values())
    ['<TreeNameDefinition: func@(3, 4)>', '<TreeNameDefinition: x@(2, 0)>']
    >>> filters[0]._filters[0]._until_position
    (4, 0)
    >>> filters[0]._filters[1]._until_position
    
    Then it yields the names from one level ""lower"". In this example, this is
    the module scope (including globals).
    As a side note, you can see, that the position in the filter is None on the
    globals filter, because there the whole module is searched.
    
    >>> list(filters[1].values())  # package modules -> Also empty.
    []
    >>> sorted(name.string_name for name in filters[2].values())  # Module attributes
    ['__doc__', '__file__', '__name__', '__package__']
    
    Finally, it yields the builtin filter, if `include_builtin` is
    true (default).
    
    >>> filters[3].values()                              #doctest: +ELLIPSIS
    [<CompiledName: ...>, ...]
",function,"('(evaluator, context, until_position, origin_scope)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.get_global_filters,evaluate.filters,get_global_filters,"Python Library Documentation: function get_global_filters in module jedi.evaluate.filters

get_global_filters(evaluator, context, until_position, origin_scope)
    Returns all filters in order of priority for name resolution.
    
    For global name lookups. The filters will handle name resolution
    themselves, but here we gather possible filters downwards.
    
    >>> from jedi._compatibility import u, no_unicode_pprint
    >>> from jedi import Script
    >>> script = Script(u('''
    ... x = ['a', 'b', 'c']
    ... def func():
    ...     y = None
    ... '''))
    >>> module_node = script._module_node
    >>> scope = next(module_node.iter_funcdefs())
    >>> scope
    <Function: func@3-5>
    >>> context = script._get_module().create_context(scope)
    >>> filters = list(get_global_filters(context.evaluator, context, (4, 0), None))
    
    First we get the names from the function scope.
    
    >>> no_unicode_pprint(filters[0])                    #doctest: +ELLIPSIS
    MergedFilter(<ParserTreeFilter: ...>, <GlobalNameFilter: ...>)
    >>> sorted(str(n) for n in filters[0].values())
    ['<TreeNameDefinition: func@(3, 4)>', '<TreeNameDefinition: x@(2, 0)>']
    >>> filters[0]._filters[0]._until_position
    (4, 0)
    >>> filters[0]._filters[1]._until_position
    
    Then it yields the names from one level ""lower"". In this example, this is
    the module scope (including globals).
    As a side note, you can see, that the position in the filter is None on the
    globals filter, because there the whole module is searched.
    
    >>> list(filters[1].values())  # package modules -> Also empty.
    []
    >>> sorted(name.string_name for name in filters[2].values())  # Module attributes
    ['__doc__', '__file__', '__name__', '__package__']
    
    Finally, it yields the builtin filter, if `include_builtin` is
    true (default).
    
    >>> filters[3].values()                              #doctest: +ELLIPSIS
    [<CompiledName: ...>, ...]
",function,"('(evaluator, context, until_position, origin_scope)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.get_parent_scope,evaluate.filters,get_parent_scope,"Python Library Documentation: function get_parent_scope in module jedi.parser_utils

get_parent_scope(node, include_flows=False)
    Returns the underlying scope.
",function,"('(node, include_flows=False)',)",include_flows,False,bool,arg_info
jedi,0.12.0,jedi.evaluate.filters.get_parent_scope,evaluate.filters,get_parent_scope,"Python Library Documentation: function get_parent_scope in module jedi.parser_utils

get_parent_scope(node, include_flows=False)
    Returns the underlying scope.
",function,"('(node, include_flows=False)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.memoize_method,evaluate.filters,memoize_method,"Python Library Documentation: function memoize_method in module jedi.cache

memoize_method(method)
    A normal memoize function.
",function,"('(method)',)",method,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.publish_method,evaluate.filters,publish_method,"Python Library Documentation: function publish_method in module jedi.evaluate.filters

publish_method(method_name, python_version_match=None)
",function,"('(method_name, python_version_match=None)',)",python_version_match,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.filters.publish_method,evaluate.filters,publish_method,"Python Library Documentation: function publish_method in module jedi.evaluate.filters

publish_method(method_name, python_version_match=None)
",function,"('(method_name, python_version_match=None)',)",method_name,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.search_ancestor,evaluate.filters,search_ancestor,"Python Library Documentation: function search_ancestor in module parso.tree

search_ancestor(node, *node_types)
    Recursively looks at the parents of a node and returns the first found node
    that matches node_types. Returns ``None`` if no matching node is found.
    
    :param node: The ancestors of this node will be checked.
    :param node_types: type names that are searched for.
    :type node_types: tuple of str
",function,"('(node, *node_types)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.to_list,evaluate.filters,to_list,"Python Library Documentation: function to_list in module jedi.evaluate.utils

to_list(func)
",function,"('(func)',)",func,,,arg_info
jedi,0.12.0,jedi.evaluate.filters.use_metaclass,evaluate.filters,use_metaclass,"Python Library Documentation: function use_metaclass in module jedi._compatibility

use_metaclass(meta, *bases)
    Create a class with a metaclass.
",function,"('(meta, *bases)',)",meta,,,arg_info
jedi,0.12.0,jedi.evaluate.finder.AbstractInstanceContext,evaluate.finder,AbstractInstanceContext,"Python Library Documentation: class AbstractInstanceContext in module jedi.evaluate.context.instance

class AbstractInstanceContext(jedi.evaluate.base_context.Context)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'instance'
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Instan...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context, var_args)',)",var_args,,,arg_info
jedi,0.12.0,jedi.evaluate.finder.AbstractInstanceContext,evaluate.finder,AbstractInstanceContext,"Python Library Documentation: class AbstractInstanceContext in module jedi.evaluate.context.instance

class AbstractInstanceContext(jedi.evaluate.base_context.Context)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'instance'
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Instan...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context, var_args)',)",class_context,,,arg_info
jedi,0.12.0,jedi.evaluate.finder.AbstractInstanceContext,evaluate.finder,AbstractInstanceContext,"Python Library Documentation: class AbstractInstanceContext in module jedi.evaluate.context.instance

class AbstractInstanceContext(jedi.evaluate.base_context.Context)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'instance'
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Instan...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context, var_args)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.finder.AbstractInstanceContext,evaluate.finder,AbstractInstanceContext,"Python Library Documentation: class AbstractInstanceContext in module jedi.evaluate.context.instance

class AbstractInstanceContext(jedi.evaluate.base_context.Context)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'instance'
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Instan...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context, var_args)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.finder.AbstractInstanceContext,evaluate.finder,AbstractInstanceContext,"Python Library Documentation: class AbstractInstanceContext in module jedi.evaluate.context.instance

class AbstractInstanceContext(jedi.evaluate.base_context.Context)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'instance'
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Instan...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context, var_args)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.finder.ContextSet,evaluate.finder,ContextSet,"Python Library Documentation: class ContextSet in module jedi.evaluate.base_context

class ContextSet(jedi.common.context.BaseContextSet)
 |  Method resolution order:
 |      ContextSet
 |      jedi.common.context.BaseContextSet
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContextSet:
 |  
 |  __bool__(self)
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, *args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self)
 |  
 |  __len__(self)
 |  
 |  __or__(self, other)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  filter(self, filter_func)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from jedi.common.context.BaseContextSet:
 |  
 |  from_iterable(iterable) from builtins.type
 |  
 |  from_set(set_) from builtins.type
 |  
 |  from_sets(sets) from builtins.type
 |      Used to work with an iterable of set.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContextSet:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, *args)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.finder.ContextSet.from_iterable,evaluate.finder.ContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.finder.ContextSet.from_iterable,evaluate.finder.ContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",iterable,,,arg_info
jedi,0.12.0,jedi.evaluate.finder.ContextSet.from_set,evaluate.finder.ContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.finder.ContextSet.from_set,evaluate.finder.ContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",set_,,,arg_info
jedi,0.12.0,jedi.evaluate.finder.ContextSet.from_sets,evaluate.finder.ContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.finder.ContextSet.from_sets,evaluate.finder.ContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",sets,,,arg_info
jedi,0.12.0,jedi.evaluate.finder.NameFinder,evaluate.finder,NameFinder,"Python Library Documentation: class NameFinder in module jedi.evaluate.finder

class NameFinder(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, name_context, name_or_str, position=None, analysis_errors=True)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  filter_name(self, filters)
 |      Searches names that are defined in a scope (the different
 |      ``filters``), until a name fits.
 |  
 |  find = wrapper(*args, **kwargs)
 |  
 |  get_filters(self, search_global=False)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, name_context, name_or_str, position=None, analysis_errors=True)',)",position,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.finder.NameFinder,evaluate.finder,NameFinder,"Python Library Documentation: class NameFinder in module jedi.evaluate.finder

class NameFinder(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, name_context, name_or_str, position=None, analysis_errors=True)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  filter_name(self, filters)
 |      Searches names that are defined in a scope (the different
 |      ``filters``), until a name fits.
 |  
 |  find = wrapper(*args, **kwargs)
 |  
 |  get_filters(self, search_global=False)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, name_context, name_or_str, position=None, analysis_errors=True)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.finder.NameFinder,evaluate.finder,NameFinder,"Python Library Documentation: class NameFinder in module jedi.evaluate.finder

class NameFinder(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, name_context, name_or_str, position=None, analysis_errors=True)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  filter_name(self, filters)
 |      Searches names that are defined in a scope (the different
 |      ``filters``), until a name fits.
 |  
 |  find = wrapper(*args, **kwargs)
 |  
 |  get_filters(self, search_global=False)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, name_context, name_or_str, position=None, analysis_errors=True)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.finder.NameFinder,evaluate.finder,NameFinder,"Python Library Documentation: class NameFinder in module jedi.evaluate.finder

class NameFinder(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, name_context, name_or_str, position=None, analysis_errors=True)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  filter_name(self, filters)
 |      Searches names that are defined in a scope (the different
 |      ``filters``), until a name fits.
 |  
 |  find = wrapper(*args, **kwargs)
 |  
 |  get_filters(self, search_global=False)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, name_context, name_or_str, position=None, analysis_errors=True)',)",name_context,,,arg_info
jedi,0.12.0,jedi.evaluate.finder.NameFinder,evaluate.finder,NameFinder,"Python Library Documentation: class NameFinder in module jedi.evaluate.finder

class NameFinder(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, name_context, name_or_str, position=None, analysis_errors=True)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  filter_name(self, filters)
 |      Searches names that are defined in a scope (the different
 |      ``filters``), until a name fits.
 |  
 |  find = wrapper(*args, **kwargs)
 |  
 |  get_filters(self, search_global=False)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, name_context, name_or_str, position=None, analysis_errors=True)',)",analysis_errors,True,bool,arg_info
jedi,0.12.0,jedi.evaluate.finder.NameFinder,evaluate.finder,NameFinder,"Python Library Documentation: class NameFinder in module jedi.evaluate.finder

class NameFinder(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, name_context, name_or_str, position=None, analysis_errors=True)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  filter_name(self, filters)
 |      Searches names that are defined in a scope (the different
 |      ``filters``), until a name fits.
 |  
 |  find = wrapper(*args, **kwargs)
 |  
 |  get_filters(self, search_global=False)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, name_context, name_or_str, position=None, analysis_errors=True)',)",name_or_str,,,arg_info
jedi,0.12.0,jedi.evaluate.finder.NameFinder,evaluate.finder,NameFinder,"Python Library Documentation: class NameFinder in module jedi.evaluate.finder

class NameFinder(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, name_context, name_or_str, position=None, analysis_errors=True)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  filter_name(self, filters)
 |      Searches names that are defined in a scope (the different
 |      ``filters``), until a name fits.
 |  
 |  find = wrapper(*args, **kwargs)
 |  
 |  get_filters(self, search_global=False)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, name_context, name_or_str, position=None, analysis_errors=True)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.finder.TreeArguments,evaluate.finder,TreeArguments,"Python Library Documentation: class TreeArguments in module jedi.evaluate.arguments

class TreeArguments(AbstractArguments)
 |  Method resolution order:
 |      TreeArguments
 |      AbstractArguments
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, argument_node, trailer=None)
 |      The argument_node is either a parser node or a list of evaluated
 |      objects. Those evaluated objects may be lists of evaluated objects
 |      themselves (one list for the first argument, one for the second, etc).
 |      
 |      :param argument_node: May be an argument_node or a list of nodes.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  as_tree_tuple_objects(self)
 |  
 |  get_calling_nodes(self)
 |  
 |  unpack(self, funcdef=None)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractArguments:
 |  
 |  eval_all(self, funcdef=None)
 |      Evaluates all arguments as a support for static analysis
 |      (normally Jedi).
 |  
 |  eval_argument_clinic(self, parameters)
 |      Uses a list with argument clinic information (see PEP 436).
 |  
 |  get_params(self, execution_context)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractArguments:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractArguments:
 |  
 |  argument_node = None
 |  
 |  context = None
 |  
 |  trailer = None
",class,"('(self, evaluator, context, argument_node, trailer=None)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.finder.TreeArguments,evaluate.finder,TreeArguments,"Python Library Documentation: class TreeArguments in module jedi.evaluate.arguments

class TreeArguments(AbstractArguments)
 |  Method resolution order:
 |      TreeArguments
 |      AbstractArguments
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, argument_node, trailer=None)
 |      The argument_node is either a parser node or a list of evaluated
 |      objects. Those evaluated objects may be lists of evaluated objects
 |      themselves (one list for the first argument, one for the second, etc).
 |      
 |      :param argument_node: May be an argument_node or a list of nodes.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  as_tree_tuple_objects(self)
 |  
 |  get_calling_nodes(self)
 |  
 |  unpack(self, funcdef=None)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractArguments:
 |  
 |  eval_all(self, funcdef=None)
 |      Evaluates all arguments as a support for static analysis
 |      (normally Jedi).
 |  
 |  eval_argument_clinic(self, parameters)
 |      Uses a list with argument clinic information (see PEP 436).
 |  
 |  get_params(self, execution_context)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractArguments:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractArguments:
 |  
 |  argument_node = None
 |  
 |  context = None
 |  
 |  trailer = None
",class,"('(self, evaluator, context, argument_node, trailer=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.finder.TreeArguments,evaluate.finder,TreeArguments,"Python Library Documentation: class TreeArguments in module jedi.evaluate.arguments

class TreeArguments(AbstractArguments)
 |  Method resolution order:
 |      TreeArguments
 |      AbstractArguments
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, argument_node, trailer=None)
 |      The argument_node is either a parser node or a list of evaluated
 |      objects. Those evaluated objects may be lists of evaluated objects
 |      themselves (one list for the first argument, one for the second, etc).
 |      
 |      :param argument_node: May be an argument_node or a list of nodes.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  as_tree_tuple_objects(self)
 |  
 |  get_calling_nodes(self)
 |  
 |  unpack(self, funcdef=None)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractArguments:
 |  
 |  eval_all(self, funcdef=None)
 |      Evaluates all arguments as a support for static analysis
 |      (normally Jedi).
 |  
 |  eval_argument_clinic(self, parameters)
 |      Uses a list with argument clinic information (see PEP 436).
 |  
 |  get_params(self, execution_context)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractArguments:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractArguments:
 |  
 |  argument_node = None
 |  
 |  context = None
 |  
 |  trailer = None
",class,"('(self, evaluator, context, argument_node, trailer=None)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.finder.TreeArguments,evaluate.finder,TreeArguments,"Python Library Documentation: class TreeArguments in module jedi.evaluate.arguments

class TreeArguments(AbstractArguments)
 |  Method resolution order:
 |      TreeArguments
 |      AbstractArguments
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, argument_node, trailer=None)
 |      The argument_node is either a parser node or a list of evaluated
 |      objects. Those evaluated objects may be lists of evaluated objects
 |      themselves (one list for the first argument, one for the second, etc).
 |      
 |      :param argument_node: May be an argument_node or a list of nodes.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  as_tree_tuple_objects(self)
 |  
 |  get_calling_nodes(self)
 |  
 |  unpack(self, funcdef=None)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractArguments:
 |  
 |  eval_all(self, funcdef=None)
 |      Evaluates all arguments as a support for static analysis
 |      (normally Jedi).
 |  
 |  eval_argument_clinic(self, parameters)
 |      Uses a list with argument clinic information (see PEP 436).
 |  
 |  get_params(self, execution_context)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractArguments:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractArguments:
 |  
 |  argument_node = None
 |  
 |  context = None
 |  
 |  trailer = None
",class,"('(self, evaluator, context, argument_node, trailer=None)',)",argument_node,,,arg_info
jedi,0.12.0,jedi.evaluate.finder.TreeArguments,evaluate.finder,TreeArguments,"Python Library Documentation: class TreeArguments in module jedi.evaluate.arguments

class TreeArguments(AbstractArguments)
 |  Method resolution order:
 |      TreeArguments
 |      AbstractArguments
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, argument_node, trailer=None)
 |      The argument_node is either a parser node or a list of evaluated
 |      objects. Those evaluated objects may be lists of evaluated objects
 |      themselves (one list for the first argument, one for the second, etc).
 |      
 |      :param argument_node: May be an argument_node or a list of nodes.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  as_tree_tuple_objects(self)
 |  
 |  get_calling_nodes(self)
 |  
 |  unpack(self, funcdef=None)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractArguments:
 |  
 |  eval_all(self, funcdef=None)
 |      Evaluates all arguments as a support for static analysis
 |      (normally Jedi).
 |  
 |  eval_argument_clinic(self, parameters)
 |      Uses a list with argument clinic information (see PEP 436).
 |  
 |  get_params(self, execution_context)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractArguments:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractArguments:
 |  
 |  argument_node = None
 |  
 |  context = None
 |  
 |  trailer = None
",class,"('(self, evaluator, context, argument_node, trailer=None)',)",trailer,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.finder.TreeNameDefinition,evaluate.finder,TreeNameDefinition,"Python Library Documentation: class TreeNameDefinition in module jedi.evaluate.filters

class TreeNameDefinition(AbstractTreeName)
 |  Method resolution order:
 |      TreeNameDefinition
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.finder.TreeNameDefinition,evaluate.finder,TreeNameDefinition,"Python Library Documentation: class TreeNameDefinition in module jedi.evaluate.filters

class TreeNameDefinition(AbstractTreeName)
 |  Method resolution order:
 |      TreeNameDefinition
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.finder.TreeNameDefinition,evaluate.finder,TreeNameDefinition,"Python Library Documentation: class TreeNameDefinition in module jedi.evaluate.filters

class TreeNameDefinition(AbstractTreeName)
 |  Method resolution order:
 |      TreeNameDefinition
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",tree_name,,,arg_info
jedi,0.12.0,jedi.evaluate.finder._check_flow_information,evaluate.finder,_check_flow_information,"Python Library Documentation: function _check_flow_information in module jedi.evaluate.finder

_check_flow_information(context, flow, search_name, pos)
    Try to find out the type of a variable just with the information that
    is given by the flows: e.g. It is also responsible for assert checks.::
    
        if isinstance(k, str):
            k.  # <- completion here
    
    ensures that `k` is a string.
",function,"('(context, flow, search_name, pos)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.finder._check_flow_information,evaluate.finder,_check_flow_information,"Python Library Documentation: function _check_flow_information in module jedi.evaluate.finder

_check_flow_information(context, flow, search_name, pos)
    Try to find out the type of a variable just with the information that
    is given by the flows: e.g. It is also responsible for assert checks.::
    
        if isinstance(k, str):
            k.  # <- completion here
    
    ensures that `k` is a string.
",function,"('(context, flow, search_name, pos)',)",flow,,,arg_info
jedi,0.12.0,jedi.evaluate.finder._check_flow_information,evaluate.finder,_check_flow_information,"Python Library Documentation: function _check_flow_information in module jedi.evaluate.finder

_check_flow_information(context, flow, search_name, pos)
    Try to find out the type of a variable just with the information that
    is given by the flows: e.g. It is also responsible for assert checks.::
    
        if isinstance(k, str):
            k.  # <- completion here
    
    ensures that `k` is a string.
",function,"('(context, flow, search_name, pos)',)",search_name,,,arg_info
jedi,0.12.0,jedi.evaluate.finder._check_flow_information,evaluate.finder,_check_flow_information,"Python Library Documentation: function _check_flow_information in module jedi.evaluate.finder

_check_flow_information(context, flow, search_name, pos)
    Try to find out the type of a variable just with the information that
    is given by the flows: e.g. It is also responsible for assert checks.::
    
        if isinstance(k, str):
            k.  # <- completion here
    
    ensures that `k` is a string.
",function,"('(context, flow, search_name, pos)',)",pos,,,arg_info
jedi,0.12.0,jedi.evaluate.finder._check_isinstance_type,evaluate.finder,_check_isinstance_type,"Python Library Documentation: function _check_isinstance_type in module jedi.evaluate.finder

_check_isinstance_type(context, element, search_name)
",function,"('(context, element, search_name)',)",element,,,arg_info
jedi,0.12.0,jedi.evaluate.finder._check_isinstance_type,evaluate.finder,_check_isinstance_type,"Python Library Documentation: function _check_isinstance_type in module jedi.evaluate.finder

_check_isinstance_type(context, element, search_name)
",function,"('(context, element, search_name)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.finder._check_isinstance_type,evaluate.finder,_check_isinstance_type,"Python Library Documentation: function _check_isinstance_type in module jedi.evaluate.finder

_check_isinstance_type(context, element, search_name)
",function,"('(context, element, search_name)',)",search_name,,,arg_info
jedi,0.12.0,jedi.evaluate.finder.get_global_filters,evaluate.finder,get_global_filters,"Python Library Documentation: function get_global_filters in module jedi.evaluate.filters

get_global_filters(evaluator, context, until_position, origin_scope)
    Returns all filters in order of priority for name resolution.
    
    For global name lookups. The filters will handle name resolution
    themselves, but here we gather possible filters downwards.
    
    >>> from jedi._compatibility import u, no_unicode_pprint
    >>> from jedi import Script
    >>> script = Script(u('''
    ... x = ['a', 'b', 'c']
    ... def func():
    ...     y = None
    ... '''))
    >>> module_node = script._module_node
    >>> scope = next(module_node.iter_funcdefs())
    >>> scope
    <Function: func@3-5>
    >>> context = script._get_module().create_context(scope)
    >>> filters = list(get_global_filters(context.evaluator, context, (4, 0), None))
    
    First we get the names from the function scope.
    
    >>> no_unicode_pprint(filters[0])                    #doctest: +ELLIPSIS
    MergedFilter(<ParserTreeFilter: ...>, <GlobalNameFilter: ...>)
    >>> sorted(str(n) for n in filters[0].values())
    ['<TreeNameDefinition: func@(3, 4)>', '<TreeNameDefinition: x@(2, 0)>']
    >>> filters[0]._filters[0]._until_position
    (4, 0)
    >>> filters[0]._filters[1]._until_position
    
    Then it yields the names from one level ""lower"". In this example, this is
    the module scope (including globals).
    As a side note, you can see, that the position in the filter is None on the
    globals filter, because there the whole module is searched.
    
    >>> list(filters[1].values())  # package modules -> Also empty.
    []
    >>> sorted(name.string_name for name in filters[2].values())  # Module attributes
    ['__doc__', '__file__', '__name__', '__package__']
    
    Finally, it yields the builtin filter, if `include_builtin` is
    true (default).
    
    >>> filters[3].values()                              #doctest: +ELLIPSIS
    [<CompiledName: ...>, ...]
",function,"('(evaluator, context, until_position, origin_scope)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.finder.get_global_filters,evaluate.finder,get_global_filters,"Python Library Documentation: function get_global_filters in module jedi.evaluate.filters

get_global_filters(evaluator, context, until_position, origin_scope)
    Returns all filters in order of priority for name resolution.
    
    For global name lookups. The filters will handle name resolution
    themselves, but here we gather possible filters downwards.
    
    >>> from jedi._compatibility import u, no_unicode_pprint
    >>> from jedi import Script
    >>> script = Script(u('''
    ... x = ['a', 'b', 'c']
    ... def func():
    ...     y = None
    ... '''))
    >>> module_node = script._module_node
    >>> scope = next(module_node.iter_funcdefs())
    >>> scope
    <Function: func@3-5>
    >>> context = script._get_module().create_context(scope)
    >>> filters = list(get_global_filters(context.evaluator, context, (4, 0), None))
    
    First we get the names from the function scope.
    
    >>> no_unicode_pprint(filters[0])                    #doctest: +ELLIPSIS
    MergedFilter(<ParserTreeFilter: ...>, <GlobalNameFilter: ...>)
    >>> sorted(str(n) for n in filters[0].values())
    ['<TreeNameDefinition: func@(3, 4)>', '<TreeNameDefinition: x@(2, 0)>']
    >>> filters[0]._filters[0]._until_position
    (4, 0)
    >>> filters[0]._filters[1]._until_position
    
    Then it yields the names from one level ""lower"". In this example, this is
    the module scope (including globals).
    As a side note, you can see, that the position in the filter is None on the
    globals filter, because there the whole module is searched.
    
    >>> list(filters[1].values())  # package modules -> Also empty.
    []
    >>> sorted(name.string_name for name in filters[2].values())  # Module attributes
    ['__doc__', '__file__', '__name__', '__package__']
    
    Finally, it yields the builtin filter, if `include_builtin` is
    true (default).
    
    >>> filters[3].values()                              #doctest: +ELLIPSIS
    [<CompiledName: ...>, ...]
",function,"('(evaluator, context, until_position, origin_scope)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.finder.get_global_filters,evaluate.finder,get_global_filters,"Python Library Documentation: function get_global_filters in module jedi.evaluate.filters

get_global_filters(evaluator, context, until_position, origin_scope)
    Returns all filters in order of priority for name resolution.
    
    For global name lookups. The filters will handle name resolution
    themselves, but here we gather possible filters downwards.
    
    >>> from jedi._compatibility import u, no_unicode_pprint
    >>> from jedi import Script
    >>> script = Script(u('''
    ... x = ['a', 'b', 'c']
    ... def func():
    ...     y = None
    ... '''))
    >>> module_node = script._module_node
    >>> scope = next(module_node.iter_funcdefs())
    >>> scope
    <Function: func@3-5>
    >>> context = script._get_module().create_context(scope)
    >>> filters = list(get_global_filters(context.evaluator, context, (4, 0), None))
    
    First we get the names from the function scope.
    
    >>> no_unicode_pprint(filters[0])                    #doctest: +ELLIPSIS
    MergedFilter(<ParserTreeFilter: ...>, <GlobalNameFilter: ...>)
    >>> sorted(str(n) for n in filters[0].values())
    ['<TreeNameDefinition: func@(3, 4)>', '<TreeNameDefinition: x@(2, 0)>']
    >>> filters[0]._filters[0]._until_position
    (4, 0)
    >>> filters[0]._filters[1]._until_position
    
    Then it yields the names from one level ""lower"". In this example, this is
    the module scope (including globals).
    As a side note, you can see, that the position in the filter is None on the
    globals filter, because there the whole module is searched.
    
    >>> list(filters[1].values())  # package modules -> Also empty.
    []
    >>> sorted(name.string_name for name in filters[2].values())  # Module attributes
    ['__doc__', '__file__', '__name__', '__package__']
    
    Finally, it yields the builtin filter, if `include_builtin` is
    true (default).
    
    >>> filters[3].values()                              #doctest: +ELLIPSIS
    [<CompiledName: ...>, ...]
",function,"('(evaluator, context, until_position, origin_scope)',)",until_position,,,arg_info
jedi,0.12.0,jedi.evaluate.finder.get_global_filters,evaluate.finder,get_global_filters,"Python Library Documentation: function get_global_filters in module jedi.evaluate.filters

get_global_filters(evaluator, context, until_position, origin_scope)
    Returns all filters in order of priority for name resolution.
    
    For global name lookups. The filters will handle name resolution
    themselves, but here we gather possible filters downwards.
    
    >>> from jedi._compatibility import u, no_unicode_pprint
    >>> from jedi import Script
    >>> script = Script(u('''
    ... x = ['a', 'b', 'c']
    ... def func():
    ...     y = None
    ... '''))
    >>> module_node = script._module_node
    >>> scope = next(module_node.iter_funcdefs())
    >>> scope
    <Function: func@3-5>
    >>> context = script._get_module().create_context(scope)
    >>> filters = list(get_global_filters(context.evaluator, context, (4, 0), None))
    
    First we get the names from the function scope.
    
    >>> no_unicode_pprint(filters[0])                    #doctest: +ELLIPSIS
    MergedFilter(<ParserTreeFilter: ...>, <GlobalNameFilter: ...>)
    >>> sorted(str(n) for n in filters[0].values())
    ['<TreeNameDefinition: func@(3, 4)>', '<TreeNameDefinition: x@(2, 0)>']
    >>> filters[0]._filters[0]._until_position
    (4, 0)
    >>> filters[0]._filters[1]._until_position
    
    Then it yields the names from one level ""lower"". In this example, this is
    the module scope (including globals).
    As a side note, you can see, that the position in the filter is None on the
    globals filter, because there the whole module is searched.
    
    >>> list(filters[1].values())  # package modules -> Also empty.
    []
    >>> sorted(name.string_name for name in filters[2].values())  # Module attributes
    ['__doc__', '__file__', '__name__', '__package__']
    
    Finally, it yields the builtin filter, if `include_builtin` is
    true (default).
    
    >>> filters[3].values()                              #doctest: +ELLIPSIS
    [<CompiledName: ...>, ...]
",function,"('(evaluator, context, until_position, origin_scope)',)",origin_scope,,,arg_info
jedi,0.12.0,jedi.evaluate.finder.get_parent_scope,evaluate.finder,get_parent_scope,"Python Library Documentation: function get_parent_scope in module jedi.parser_utils

get_parent_scope(node, include_flows=False)
    Returns the underlying scope.
",function,"('(node, include_flows=False)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.finder.get_parent_scope,evaluate.finder,get_parent_scope,"Python Library Documentation: function get_parent_scope in module jedi.parser_utils

get_parent_scope(node, include_flows=False)
    Returns the underlying scope.
",function,"('(node, include_flows=False)',)",include_flows,False,bool,arg_info
jedi,0.12.0,jedi.evaluate.finder.is_scope,evaluate.finder,is_scope,"Python Library Documentation: function is_scope in module jedi.parser_utils

is_scope(node)
",function,"('(node)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.finder.search_ancestor,evaluate.finder,search_ancestor,"Python Library Documentation: function search_ancestor in module parso.tree

search_ancestor(node, *node_types)
    Recursively looks at the parents of a node and returns the first found node
    that matches node_types. Returns ``None`` if no matching node is found.
    
    :param node: The ancestors of this node will be checked.
    :param node_types: type names that are searched for.
    :type node_types: tuple of str
",function,"('(node, *node_types)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.flow_analysis.Status,evaluate.flow_analysis,Status,"Python Library Documentation: class Status in module jedi.evaluate.flow_analysis

class Status(builtins.object)
 |  Methods defined here:
 |  
 |  __and__(self, other)
 |  
 |  __init__(self, value, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  invert(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  lookup_table = {True: <Status: reachable>, False: <Status: unreachable...
",class,"('(self, value, name)',)",value,,,arg_info
jedi,0.12.0,jedi.evaluate.flow_analysis.Status,evaluate.flow_analysis,Status,"Python Library Documentation: class Status in module jedi.evaluate.flow_analysis

class Status(builtins.object)
 |  Methods defined here:
 |  
 |  __and__(self, other)
 |  
 |  __init__(self, value, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  invert(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  lookup_table = {True: <Status: reachable>, False: <Status: unreachable...
",class,"('(self, value, name)',)",name,,,arg_info
jedi,0.12.0,jedi.evaluate.flow_analysis.Status,evaluate.flow_analysis,Status,"Python Library Documentation: class Status in module jedi.evaluate.flow_analysis

class Status(builtins.object)
 |  Methods defined here:
 |  
 |  __and__(self, other)
 |  
 |  __init__(self, value, name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  invert(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  lookup_table = {True: <Status: reachable>, False: <Status: unreachable...
",class,"('(self, value, name)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.flow_analysis._break_check,evaluate.flow_analysis,_break_check,"Python Library Documentation: function _break_check in module jedi.evaluate.flow_analysis

_break_check(context, context_scope, flow_scope, node)
",function,"('(context, context_scope, flow_scope, node)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.flow_analysis._break_check,evaluate.flow_analysis,_break_check,"Python Library Documentation: function _break_check in module jedi.evaluate.flow_analysis

_break_check(context, context_scope, flow_scope, node)
",function,"('(context, context_scope, flow_scope, node)',)",context_scope,,,arg_info
jedi,0.12.0,jedi.evaluate.flow_analysis._break_check,evaluate.flow_analysis,_break_check,"Python Library Documentation: function _break_check in module jedi.evaluate.flow_analysis

_break_check(context, context_scope, flow_scope, node)
",function,"('(context, context_scope, flow_scope, node)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.flow_analysis._break_check,evaluate.flow_analysis,_break_check,"Python Library Documentation: function _break_check in module jedi.evaluate.flow_analysis

_break_check(context, context_scope, flow_scope, node)
",function,"('(context, context_scope, flow_scope, node)',)",flow_scope,,,arg_info
jedi,0.12.0,jedi.evaluate.flow_analysis._check_if,evaluate.flow_analysis,_check_if,"Python Library Documentation: function _check_if in module jedi.evaluate.flow_analysis

_check_if(context, node)
",function,"('(context, node)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.flow_analysis._check_if,evaluate.flow_analysis,_check_if,"Python Library Documentation: function _check_if in module jedi.evaluate.flow_analysis

_check_if(context, node)
",function,"('(context, node)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.flow_analysis._get_flow_scopes,evaluate.flow_analysis,_get_flow_scopes,"Python Library Documentation: function _get_flow_scopes in module jedi.evaluate.flow_analysis

_get_flow_scopes(node)
",function,"('(node)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.flow_analysis.get_flow_branch_keyword,evaluate.flow_analysis,get_flow_branch_keyword,"Python Library Documentation: function get_flow_branch_keyword in module jedi.parser_utils

get_flow_branch_keyword(flow_node, node)
",function,"('(flow_node, node)',)",flow_node,,,arg_info
jedi,0.12.0,jedi.evaluate.flow_analysis.get_flow_branch_keyword,evaluate.flow_analysis,get_flow_branch_keyword,"Python Library Documentation: function get_flow_branch_keyword in module jedi.parser_utils

get_flow_branch_keyword(flow_node, node)
",function,"('(flow_node, node)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.flow_analysis.get_parent_scope,evaluate.flow_analysis,get_parent_scope,"Python Library Documentation: function get_parent_scope in module jedi.parser_utils

get_parent_scope(node, include_flows=False)
    Returns the underlying scope.
",function,"('(node, include_flows=False)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.flow_analysis.get_parent_scope,evaluate.flow_analysis,get_parent_scope,"Python Library Documentation: function get_parent_scope in module jedi.parser_utils

get_parent_scope(node, include_flows=False)
    Returns the underlying scope.
",function,"('(node, include_flows=False)',)",include_flows,False,bool,arg_info
jedi,0.12.0,jedi.evaluate.flow_analysis.is_scope,evaluate.flow_analysis,is_scope,"Python Library Documentation: function is_scope in module jedi.parser_utils

is_scope(node)
",function,"('(node)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.flow_analysis.reachability_check,evaluate.flow_analysis,reachability_check,"Python Library Documentation: function reachability_check in module jedi.evaluate.flow_analysis

reachability_check(context, context_scope, node, origin_scope=None)
",function,"('(context, context_scope, node, origin_scope=None)',)",context_scope,,,arg_info
jedi,0.12.0,jedi.evaluate.flow_analysis.reachability_check,evaluate.flow_analysis,reachability_check,"Python Library Documentation: function reachability_check in module jedi.evaluate.flow_analysis

reachability_check(context, context_scope, node, origin_scope=None)
",function,"('(context, context_scope, node, origin_scope=None)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.flow_analysis.reachability_check,evaluate.flow_analysis,reachability_check,"Python Library Documentation: function reachability_check in module jedi.evaluate.flow_analysis

reachability_check(context, context_scope, node, origin_scope=None)
",function,"('(context, context_scope, node, origin_scope=None)',)",origin_scope,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.flow_analysis.reachability_check,evaluate.flow_analysis,reachability_check,"Python Library Documentation: function reachability_check in module jedi.evaluate.flow_analysis

reachability_check(context, context_scope, node, origin_scope=None)
",function,"('(context, context_scope, node, origin_scope=None)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.helpers.CompiledObject,evaluate.helpers,CompiledObject,"Python Library Documentation: class CompiledObject in module jedi.evaluate.compiled.context

class CompiledObject(jedi.evaluate.base_context.Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      CompiledObject
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, access_handle, parent_context=None, faked_class=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  dict_values(self)
 |  
 |  execute_operation(self, other, operator)
 |  
 |  get_filters(self, search_global=False, is_instance=False, until_position=None, origin_scope=None)
 |  
 |  get_param_names(self)
 |  
 |  get_safe_value(self, default=<object object at 0x000000000520FC40>)
 |  
 |  is_class(self)
 |  
 |  is_super_class(self, exception)
 |  
 |  negate(self)
 |  
 |  py__bases__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__call__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__class__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__file__(self)
 |  
 |  py__getitem__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__iter__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__mro__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__name__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, access_handle, parent_context=None, faked_class=None)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.helpers.CompiledObject,evaluate.helpers,CompiledObject,"Python Library Documentation: class CompiledObject in module jedi.evaluate.compiled.context

class CompiledObject(jedi.evaluate.base_context.Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      CompiledObject
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, access_handle, parent_context=None, faked_class=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  dict_values(self)
 |  
 |  execute_operation(self, other, operator)
 |  
 |  get_filters(self, search_global=False, is_instance=False, until_position=None, origin_scope=None)
 |  
 |  get_param_names(self)
 |  
 |  get_safe_value(self, default=<object object at 0x000000000520FC40>)
 |  
 |  is_class(self)
 |  
 |  is_super_class(self, exception)
 |  
 |  negate(self)
 |  
 |  py__bases__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__call__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__class__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__file__(self)
 |  
 |  py__getitem__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__iter__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__mro__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__name__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, access_handle, parent_context=None, faked_class=None)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.helpers.CompiledObject,evaluate.helpers,CompiledObject,"Python Library Documentation: class CompiledObject in module jedi.evaluate.compiled.context

class CompiledObject(jedi.evaluate.base_context.Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      CompiledObject
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, access_handle, parent_context=None, faked_class=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  dict_values(self)
 |  
 |  execute_operation(self, other, operator)
 |  
 |  get_filters(self, search_global=False, is_instance=False, until_position=None, origin_scope=None)
 |  
 |  get_param_names(self)
 |  
 |  get_safe_value(self, default=<object object at 0x000000000520FC40>)
 |  
 |  is_class(self)
 |  
 |  is_super_class(self, exception)
 |  
 |  negate(self)
 |  
 |  py__bases__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__call__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__class__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__file__(self)
 |  
 |  py__getitem__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__iter__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__mro__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__name__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, access_handle, parent_context=None, faked_class=None)',)",access_handle,,,arg_info
jedi,0.12.0,jedi.evaluate.helpers.CompiledObject,evaluate.helpers,CompiledObject,"Python Library Documentation: class CompiledObject in module jedi.evaluate.compiled.context

class CompiledObject(jedi.evaluate.base_context.Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      CompiledObject
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, access_handle, parent_context=None, faked_class=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  dict_values(self)
 |  
 |  execute_operation(self, other, operator)
 |  
 |  get_filters(self, search_global=False, is_instance=False, until_position=None, origin_scope=None)
 |  
 |  get_param_names(self)
 |  
 |  get_safe_value(self, default=<object object at 0x000000000520FC40>)
 |  
 |  is_class(self)
 |  
 |  is_super_class(self, exception)
 |  
 |  negate(self)
 |  
 |  py__bases__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__call__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__class__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__file__(self)
 |  
 |  py__getitem__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__iter__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__mro__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__name__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, access_handle, parent_context=None, faked_class=None)',)",parent_context,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.helpers.CompiledObject,evaluate.helpers,CompiledObject,"Python Library Documentation: class CompiledObject in module jedi.evaluate.compiled.context

class CompiledObject(jedi.evaluate.base_context.Context)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      CompiledObject
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, access_handle, parent_context=None, faked_class=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  dict_values(self)
 |  
 |  execute_operation(self, other, operator)
 |  
 |  get_filters(self, search_global=False, is_instance=False, until_position=None, origin_scope=None)
 |  
 |  get_param_names(self)
 |  
 |  get_safe_value(self, default=<object object at 0x000000000520FC40>)
 |  
 |  is_class(self)
 |  
 |  is_super_class(self, exception)
 |  
 |  negate(self)
 |  
 |  py__bases__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__call__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__class__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__file__(self)
 |  
 |  py__getitem__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__iter__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__mro__ = <jedi.evaluate.compiled.context.CheckAttribute object>
 |  py__name__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, access_handle, parent_context=None, faked_class=None)',)",faked_class,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.helpers._get_safe_value_or_none,evaluate.helpers,_get_safe_value_or_none,"Python Library Documentation: function _get_safe_value_or_none in module jedi.evaluate.helpers

_get_safe_value_or_none(context, accept)
",function,"('(context, accept)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.helpers._get_safe_value_or_none,evaluate.helpers,_get_safe_value_or_none,"Python Library Documentation: function _get_safe_value_or_none in module jedi.evaluate.helpers

_get_safe_value_or_none(context, accept)
",function,"('(context, accept)',)",accept,,,arg_info
jedi,0.12.0,jedi.evaluate.helpers.call_of_leaf,evaluate.helpers,call_of_leaf,"Python Library Documentation: function call_of_leaf in module jedi.evaluate.helpers

call_of_leaf(leaf)
    Creates a ""call"" node that consist of all ``trailer`` and ``power``
    objects.  E.g. if you call it with ``append``::
    
        list([]).append(3) or None
    
    You would get a node with the content ``list([]).append`` back.
    
    This generates a copy of the original ast node.
    
    If you're using the leaf, e.g. the bracket `)` it will return ``list([])``.
",function,"('(leaf)',)",leaf,,,arg_info
jedi,0.12.0,jedi.evaluate.helpers.chain,evaluate.helpers,chain,"Python Library Documentation: class chain in module itertools

class chain(builtins.object)
 |  chain(*iterables) --> chain object
 |  
 |  Return a chain object whose .__next__() method returns elements from the
 |  first iterable until it is exhausted, then elements from the next
 |  iterable, until all of the iterables are exhausted.
 |  
 |  Methods defined here:
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __next__(self, /)
 |      Implement next(self).
 |  
 |  __reduce__(...)
 |      Return state information for pickling.
 |  
 |  __setstate__(...)
 |      Set state information for unpickling.
 |  
 |  from_iterable(...) from builtins.type
 |      chain.from_iterable(iterable) --> chain object
 |      
 |      Alternate chain() constructor taking a single iterable argument
 |      that evaluates lazily.
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.helpers.contextmanager,evaluate.helpers,contextmanager,"Python Library Documentation: function contextmanager in module contextlib

contextmanager(func)
    @contextmanager decorator.
    
    Typical usage:
    
        @contextmanager
        def some_generator(<arguments>):
            <setup>
            try:
                yield <value>
            finally:
                <cleanup>
    
    This makes this:
    
        with some_generator(<arguments>) as <variable>:
            <body>
    
    equivalent to this:
    
        <setup>
        try:
            <variable> = <value>
            <body>
        finally:
            <cleanup>
",function,"('(func)',)",func,,,arg_info
jedi,0.12.0,jedi.evaluate.helpers.deep_ast_copy,evaluate.helpers,deep_ast_copy,"Python Library Documentation: function deep_ast_copy in module jedi.evaluate.helpers

deep_ast_copy(obj)
    Much, much faster than copy.deepcopy, but just for parser tree nodes.
",function,"('(obj)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.helpers.evaluate_call_of_leaf,evaluate.helpers,evaluate_call_of_leaf,"Python Library Documentation: function evaluate_call_of_leaf in module jedi.evaluate.helpers

evaluate_call_of_leaf(context, leaf, cut_own_trailer=False)
    Creates a ""call"" node that consist of all ``trailer`` and ``power``
    objects.  E.g. if you call it with ``append``::
    
        list([]).append(3) or None
    
    You would get a node with the content ``list([]).append`` back.
    
    This generates a copy of the original ast node.
    
    If you're using the leaf, e.g. the bracket `)` it will return ``list([])``.
    
    We use this function for two purposes. Given an expression ``bar.foo``,
    we may want to
      - infer the type of ``foo`` to offer completions after foo
      - infer the type of ``bar`` to be able to jump to the definition of foo
    The option ``cut_own_trailer`` must be set to true for the second purpose.
",function,"('(context, leaf, cut_own_trailer=False)',)",cut_own_trailer,False,bool,arg_info
jedi,0.12.0,jedi.evaluate.helpers.evaluate_call_of_leaf,evaluate.helpers,evaluate_call_of_leaf,"Python Library Documentation: function evaluate_call_of_leaf in module jedi.evaluate.helpers

evaluate_call_of_leaf(context, leaf, cut_own_trailer=False)
    Creates a ""call"" node that consist of all ``trailer`` and ``power``
    objects.  E.g. if you call it with ``append``::
    
        list([]).append(3) or None
    
    You would get a node with the content ``list([]).append`` back.
    
    This generates a copy of the original ast node.
    
    If you're using the leaf, e.g. the bracket `)` it will return ``list([])``.
    
    We use this function for two purposes. Given an expression ``bar.foo``,
    we may want to
      - infer the type of ``foo`` to offer completions after foo
      - infer the type of ``bar`` to be able to jump to the definition of foo
    The option ``cut_own_trailer`` must be set to true for the second purpose.
",function,"('(context, leaf, cut_own_trailer=False)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.helpers.evaluate_call_of_leaf,evaluate.helpers,evaluate_call_of_leaf,"Python Library Documentation: function evaluate_call_of_leaf in module jedi.evaluate.helpers

evaluate_call_of_leaf(context, leaf, cut_own_trailer=False)
    Creates a ""call"" node that consist of all ``trailer`` and ``power``
    objects.  E.g. if you call it with ``append``::
    
        list([]).append(3) or None
    
    You would get a node with the content ``list([]).append`` back.
    
    This generates a copy of the original ast node.
    
    If you're using the leaf, e.g. the bracket `)` it will return ``list([])``.
    
    We use this function for two purposes. Given an expression ``bar.foo``,
    we may want to
      - infer the type of ``foo`` to offer completions after foo
      - infer the type of ``bar`` to be able to jump to the definition of foo
    The option ``cut_own_trailer`` must be set to true for the second purpose.
",function,"('(context, leaf, cut_own_trailer=False)',)",leaf,,,arg_info
jedi,0.12.0,jedi.evaluate.helpers.get_int_or_none,evaluate.helpers,get_int_or_none,"Python Library Documentation: function get_int_or_none in module jedi.evaluate.helpers

get_int_or_none(context)
",function,"('(context)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.helpers.get_module_names,evaluate.helpers,get_module_names,"Python Library Documentation: function get_module_names in module jedi.evaluate.helpers

get_module_names(module, all_scopes)
    Returns a dictionary with name parts as keys and their call paths as
    values.
",function,"('(module, all_scopes)',)",module,,,arg_info
jedi,0.12.0,jedi.evaluate.helpers.get_module_names,evaluate.helpers,get_module_names,"Python Library Documentation: function get_module_names in module jedi.evaluate.helpers

get_module_names(module, all_scopes)
    Returns a dictionary with name parts as keys and their call paths as
    values.
",function,"('(module, all_scopes)',)",all_scopes,,,arg_info
jedi,0.12.0,jedi.evaluate.helpers.get_names_of_node,evaluate.helpers,get_names_of_node,"Python Library Documentation: function get_names_of_node in module jedi.evaluate.helpers

get_names_of_node(node)
",function,"('(node)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.helpers.get_parent_scope,evaluate.helpers,get_parent_scope,"Python Library Documentation: function get_parent_scope in module jedi.parser_utils

get_parent_scope(node, include_flows=False)
    Returns the underlying scope.
",function,"('(node, include_flows=False)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.helpers.get_parent_scope,evaluate.helpers,get_parent_scope,"Python Library Documentation: function get_parent_scope in module jedi.parser_utils

get_parent_scope(node, include_flows=False)
    Returns the underlying scope.
",function,"('(node, include_flows=False)',)",include_flows,False,bool,arg_info
jedi,0.12.0,jedi.evaluate.helpers.is_compiled,evaluate.helpers,is_compiled,"Python Library Documentation: function is_compiled in module jedi.evaluate.helpers

is_compiled(context)
",function,"('(context)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.helpers.is_literal,evaluate.helpers,is_literal,"Python Library Documentation: function is_literal in module jedi.evaluate.helpers

is_literal(context)
",function,"('(context)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.helpers.is_number,evaluate.helpers,is_number,"Python Library Documentation: function is_number in module jedi.evaluate.helpers

is_number(context)
",function,"('(context)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.helpers.is_stdlib_path,evaluate.helpers,is_stdlib_path,"Python Library Documentation: function is_stdlib_path in module jedi.evaluate.helpers

is_stdlib_path(path)
",function,"('(path)',)",path,,,arg_info
jedi,0.12.0,jedi.evaluate.helpers.is_string,evaluate.helpers,is_string,"Python Library Documentation: function is_string in module jedi.evaluate.helpers

is_string(context)
",function,"('(context)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.helpers.unicode,evaluate.helpers,str,"Python Library Documentation: class str in module builtins

class str(object)
 |  str(object='') -> str
 |  str(bytes_or_buffer[, encoding[, errors]]) -> str
 |  
 |  Create a new string object from the given object. If encoding or
 |  errors is specified, then the object must expose a data buffer
 |  that will be decoded using the given encoding and error handler.
 |  Otherwise, returns the result of object.__str__() (if defined)
 |  or repr(object).
 |  encoding defaults to sys.getdefaultencoding().
 |  errors defaults to 'strict'.
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __format__(...)
 |      S.__format__(format_spec) -> str
 |      
 |      Return a formatted version of S as described by format_spec.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __getnewargs__(...)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  __sizeof__(...)
 |      S.__sizeof__() -> size of S in memory, in bytes
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  capitalize(...)
 |      S.capitalize() -> str
 |      
 |      Return a capitalized version of S, i.e. make the first character
 |      have upper case and the rest lower case.
 |  
 |  casefold(...)
 |      S.casefold() -> str
 |      
 |      Return a version of S suitable for caseless comparisons.
 |  
 |  center(...)
 |      S.center(width[, fillchar]) -> str
 |      
 |      Return S centered in a string of length width. Padding is
 |      done using the specified fill character (default is a space)
 |  
 |  count(...)
 |      S.count(sub[, start[, end]]) -> int
 |      
 |      Return the number of non-overlapping occurrences of substring sub in
 |      string S[start:end].  Optional arguments start and end are
 |      interpreted as in slice notation.
 |  
 |  encode(...)
 |      S.encode(encoding='utf-8', errors='strict') -> bytes
 |      
 |      Encode S using the codec registered for encoding. Default encoding
 |      is 'utf-8'. errors may be given to set a different error
 |      handling scheme. Default is 'strict' meaning that encoding errors raise
 |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
 |      'xmlcharrefreplace' as well as any other name registered with
 |      codecs.register_error that can handle UnicodeEncodeErrors.
 |  
 |  endswith(...)
 |      S.endswith(suffix[, start[, end]]) -> bool
 |      
 |      Return True if S ends with the specified suffix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      suffix can also be a tuple of strings to try.
 |  
 |  expandtabs(...)
 |      S.expandtabs(tabsize=8) -> str
 |      
 |      Return a copy of S where all tab characters are expanded using spaces.
 |      If tabsize is not given, a tab size of 8 characters is assumed.
 |  
 |  find(...)
 |      S.find(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  format(...)
 |      S.format(*args, **kwargs) -> str
 |      
 |      Return a formatted version of S, using substitutions from args and kwargs.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  format_map(...)
 |      S.format_map(mapping) -> str
 |      
 |      Return a formatted version of S, using substitutions from mapping.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  index(...)
 |      S.index(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found, 
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  isalnum(...)
 |      S.isalnum() -> bool
 |      
 |      Return True if all characters in S are alphanumeric
 |      and there is at least one character in S, False otherwise.
 |  
 |  isalpha(...)
 |      S.isalpha() -> bool
 |      
 |      Return True if all characters in S are alphabetic
 |      and there is at least one character in S, False otherwise.
 |  
 |  isdecimal(...)
 |      S.isdecimal() -> bool
 |      
 |      Return True if there are only decimal characters in S,
 |      False otherwise.
 |  
 |  isdigit(...)
 |      S.isdigit() -> bool
 |      
 |      Return True if all characters in S are digits
 |      and there is at least one character in S, False otherwise.
 |  
 |  isidentifier(...)
 |      S.isidentifier() -> bool
 |      
 |      Return True if S is a valid identifier according
 |      to the language definition.
 |      
 |      Use keyword.iskeyword() to test for reserved identifiers
 |      such as ""def"" and ""class"".
 |  
 |  islower(...)
 |      S.islower() -> bool
 |      
 |      Return True if all cased characters in S are lowercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  isnumeric(...)
 |      S.isnumeric() -> bool
 |      
 |      Return True if there are only numeric characters in S,
 |      False otherwise.
 |  
 |  isprintable(...)
 |      S.isprintable() -> bool
 |      
 |      Return True if all characters in S are considered
 |      printable in repr() or S is empty, False otherwise.
 |  
 |  isspace(...)
 |      S.isspace() -> bool
 |      
 |      Return True if all characters in S are whitespace
 |      and there is at least one character in S, False otherwise.
 |  
 |  istitle(...)
 |      S.istitle() -> bool
 |      
 |      Return True if S is a titlecased string and there is at least one
 |      character in S, i.e. upper- and titlecase characters may only
 |      follow uncased characters and lowercase characters only cased ones.
 |      Return False otherwise.
 |  
 |  isupper(...)
 |      S.isupper() -> bool
 |      
 |      Return True if all cased characters in S are uppercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  join(...)
 |      S.join(iterable) -> str
 |      
 |      Return a string which is the concatenation of the strings in the
 |      iterable.  The separator between elements is S.
 |  
 |  ljust(...)
 |      S.ljust(width[, fillchar]) -> str
 |      
 |      Return S left-justified in a Unicode string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  lower(...)
 |      S.lower() -> str
 |      
 |      Return a copy of the string S converted to lowercase.
 |  
 |  lstrip(...)
 |      S.lstrip([chars]) -> str
 |      
 |      Return a copy of the string S with leading whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  partition(...)
 |      S.partition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, and return the part before it,
 |      the separator itself, and the part after it.  If the separator is not
 |      found, return S and two empty strings.
 |  
 |  replace(...)
 |      S.replace(old, new[, count]) -> str
 |      
 |      Return a copy of S with all occurrences of substring
 |      old replaced by new.  If the optional argument count is
 |      given, only the first count occurrences are replaced.
 |  
 |  rfind(...)
 |      S.rfind(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  rindex(...)
 |      S.rindex(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  rjust(...)
 |      S.rjust(width[, fillchar]) -> str
 |      
 |      Return S right-justified in a string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  rpartition(...)
 |      S.rpartition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, starting at the end of S, and return
 |      the part before it, the separator itself, and the part after it.  If the
 |      separator is not found, return two empty strings and S.
 |  
 |  rsplit(...)
 |      S.rsplit(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string, starting at the end of the string and
 |      working to the front.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified, any whitespace string
 |      is a separator.
 |  
 |  rstrip(...)
 |      S.rstrip([chars]) -> str
 |      
 |      Return a copy of the string S with trailing whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  split(...)
 |      S.split(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified or is None, any
 |      whitespace string is a separator and empty strings are
 |      removed from the result.
 |  
 |  splitlines(...)
 |      S.splitlines([keepends]) -> list of strings
 |      
 |      Return a list of the lines in S, breaking at line boundaries.
 |      Line breaks are not included in the resulting list unless keepends
 |      is given and true.
 |  
 |  startswith(...)
 |      S.startswith(prefix[, start[, end]]) -> bool
 |      
 |      Return True if S starts with the specified prefix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      prefix can also be a tuple of strings to try.
 |  
 |  strip(...)
 |      S.strip([chars]) -> str
 |      
 |      Return a copy of the string S with leading and trailing
 |      whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  swapcase(...)
 |      S.swapcase() -> str
 |      
 |      Return a copy of S with uppercase characters converted to lowercase
 |      and vice versa.
 |  
 |  title(...)
 |      S.title() -> str
 |      
 |      Return a titlecased version of S, i.e. words start with title case
 |      characters, all remaining cased characters have lower case.
 |  
 |  translate(...)
 |      S.translate(table) -> str
 |      
 |      Return a copy of the string S in which each character has been mapped
 |      through the given translation table. The table must implement
 |      lookup/indexing via __getitem__, for instance a dictionary or list,
 |      mapping Unicode ordinals to Unicode ordinals, strings, or None. If
 |      this operation raises LookupError, the character is left untouched.
 |      Characters mapped to None are deleted.
 |  
 |  upper(...)
 |      S.upper() -> str
 |      
 |      Return a copy of S converted to uppercase.
 |  
 |  zfill(...)
 |      S.zfill(width) -> str
 |      
 |      Pad a numeric string S with zeros on the left, to fill a field
 |      of the specified width. The string S is never truncated.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  maketrans(x, y=None, z=None, /)
 |      Return a translation table usable for str.translate().
 |      
 |      If there is only one argument, it must be a dictionary mapping Unicode
 |      ordinals (integers) or characters to Unicode ordinals, strings or None.
 |      Character keys will be then converted to ordinals.
 |      If there are two arguments, they must be strings of equal length, and
 |      in the resulting dictionary, each character in x will be mapped to the
 |      character at the same position in y. If there is a third argument, it
 |      must be a string, whose characters will be mapped to None in the result.
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.AbstractNameDefinition,evaluate.imports,AbstractNameDefinition,"Python Library Documentation: class AbstractNameDefinition in module jedi.evaluate.filters

class AbstractNameDefinition(builtins.object)
 |  Methods defined here:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  infer(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  parent_context = None
 |  
 |  start_pos = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.ContextSet,evaluate.imports,ContextSet,"Python Library Documentation: class ContextSet in module jedi.evaluate.base_context

class ContextSet(jedi.common.context.BaseContextSet)
 |  Method resolution order:
 |      ContextSet
 |      jedi.common.context.BaseContextSet
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContextSet:
 |  
 |  __bool__(self)
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, *args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self)
 |  
 |  __len__(self)
 |  
 |  __or__(self, other)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  filter(self, filter_func)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from jedi.common.context.BaseContextSet:
 |  
 |  from_iterable(iterable) from builtins.type
 |  
 |  from_set(set_) from builtins.type
 |  
 |  from_sets(sets) from builtins.type
 |      Used to work with an iterable of set.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContextSet:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, *args)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.ContextSet.from_iterable,evaluate.imports.ContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.ContextSet.from_iterable,evaluate.imports.ContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",iterable,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.ContextSet.from_set,evaluate.imports.ContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",set_,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.ContextSet.from_set,evaluate.imports.ContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.ContextSet.from_sets,evaluate.imports.ContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.ContextSet.from_sets,evaluate.imports.ContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",sets,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.ImplicitNSInfo,evaluate.imports,ImplicitNSInfo,"Python Library Documentation: class ImplicitNSInfo in module jedi._compatibility

class ImplicitNSInfo(builtins.object)
 |  Stores information returned from an implicit namespace spec
 |  
 |  Methods defined here:
 |  
 |  __init__(self, name, paths)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, name, paths)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.ImplicitNSInfo,evaluate.imports,ImplicitNSInfo,"Python Library Documentation: class ImplicitNSInfo in module jedi._compatibility

class ImplicitNSInfo(builtins.object)
 |  Stores information returned from an implicit namespace spec
 |  
 |  Methods defined here:
 |  
 |  __init__(self, name, paths)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, name, paths)',)",name,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.ImplicitNSInfo,evaluate.imports,ImplicitNSInfo,"Python Library Documentation: class ImplicitNSInfo in module jedi._compatibility

class ImplicitNSInfo(builtins.object)
 |  Stores information returned from an implicit namespace spec
 |  
 |  Methods defined here:
 |  
 |  __init__(self, name, paths)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, name, paths)',)",paths,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.ImportName,evaluate.imports,ImportName,"Python Library Documentation: class ImportName in module jedi.evaluate.imports

class ImportName(jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      ImportName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, parent_context, string_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  start_pos = (1, 0)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, string_name)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.ImportName,evaluate.imports,ImportName,"Python Library Documentation: class ImportName in module jedi.evaluate.imports

class ImportName(jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      ImportName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, parent_context, string_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  start_pos = (1, 0)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, string_name)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.ImportName,evaluate.imports,ImportName,"Python Library Documentation: class ImportName in module jedi.evaluate.imports

class ImportName(jedi.evaluate.filters.AbstractNameDefinition)
 |  Method resolution order:
 |      ImportName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, parent_context, string_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  start_pos = (1, 0)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, string_name)',)",string_name,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.Importer,evaluate.imports,Importer,"Python Library Documentation: class Importer in module jedi.evaluate.imports

class Importer(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, import_path, module_context, level=0)
 |      An implementation similar to ``__import__``. Use `follow`
 |      to actually follow the imports.
 |      
 |      *level* specifies whether to use absolute or relative imports. 0 (the
 |      default) means only perform absolute imports. Positive values for level
 |      indicate the number of parent directories to search relative to the
 |      directory of the module calling ``__import__()`` (see PEP 328 for the
 |      details).
 |      
 |      :param import_path: List of namespaces (strings or Names).
 |  
 |  completion_names(self, evaluator, only_modules=False)
 |      :param only_modules: Indicates wheter it's possible to import a
 |          definition that is not defined in a module.
 |  
 |  follow(self)
 |  
 |  sys_path_with_modifications(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  str_import_path
 |      Returns the import path as pure strings instead of `Name`.
",class,"('(self, evaluator, import_path, module_context, level=0)',)",module_context,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.Importer,evaluate.imports,Importer,"Python Library Documentation: class Importer in module jedi.evaluate.imports

class Importer(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, import_path, module_context, level=0)
 |      An implementation similar to ``__import__``. Use `follow`
 |      to actually follow the imports.
 |      
 |      *level* specifies whether to use absolute or relative imports. 0 (the
 |      default) means only perform absolute imports. Positive values for level
 |      indicate the number of parent directories to search relative to the
 |      directory of the module calling ``__import__()`` (see PEP 328 for the
 |      details).
 |      
 |      :param import_path: List of namespaces (strings or Names).
 |  
 |  completion_names(self, evaluator, only_modules=False)
 |      :param only_modules: Indicates wheter it's possible to import a
 |          definition that is not defined in a module.
 |  
 |  follow(self)
 |  
 |  sys_path_with_modifications(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  str_import_path
 |      Returns the import path as pure strings instead of `Name`.
",class,"('(self, evaluator, import_path, module_context, level=0)',)",import_path,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.Importer,evaluate.imports,Importer,"Python Library Documentation: class Importer in module jedi.evaluate.imports

class Importer(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, import_path, module_context, level=0)
 |      An implementation similar to ``__import__``. Use `follow`
 |      to actually follow the imports.
 |      
 |      *level* specifies whether to use absolute or relative imports. 0 (the
 |      default) means only perform absolute imports. Positive values for level
 |      indicate the number of parent directories to search relative to the
 |      directory of the module calling ``__import__()`` (see PEP 328 for the
 |      details).
 |      
 |      :param import_path: List of namespaces (strings or Names).
 |  
 |  completion_names(self, evaluator, only_modules=False)
 |      :param only_modules: Indicates wheter it's possible to import a
 |          definition that is not defined in a module.
 |  
 |  follow(self)
 |  
 |  sys_path_with_modifications(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  str_import_path
 |      Returns the import path as pure strings instead of `Name`.
",class,"('(self, evaluator, import_path, module_context, level=0)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.Importer,evaluate.imports,Importer,"Python Library Documentation: class Importer in module jedi.evaluate.imports

class Importer(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, import_path, module_context, level=0)
 |      An implementation similar to ``__import__``. Use `follow`
 |      to actually follow the imports.
 |      
 |      *level* specifies whether to use absolute or relative imports. 0 (the
 |      default) means only perform absolute imports. Positive values for level
 |      indicate the number of parent directories to search relative to the
 |      directory of the module calling ``__import__()`` (see PEP 328 for the
 |      details).
 |      
 |      :param import_path: List of namespaces (strings or Names).
 |  
 |  completion_names(self, evaluator, only_modules=False)
 |      :param only_modules: Indicates wheter it's possible to import a
 |          definition that is not defined in a module.
 |  
 |  follow(self)
 |  
 |  sys_path_with_modifications(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  str_import_path
 |      Returns the import path as pure strings instead of `Name`.
",class,"('(self, evaluator, import_path, module_context, level=0)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.Importer,evaluate.imports,Importer,"Python Library Documentation: class Importer in module jedi.evaluate.imports

class Importer(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, import_path, module_context, level=0)
 |      An implementation similar to ``__import__``. Use `follow`
 |      to actually follow the imports.
 |      
 |      *level* specifies whether to use absolute or relative imports. 0 (the
 |      default) means only perform absolute imports. Positive values for level
 |      indicate the number of parent directories to search relative to the
 |      directory of the module calling ``__import__()`` (see PEP 328 for the
 |      details).
 |      
 |      :param import_path: List of namespaces (strings or Names).
 |  
 |  completion_names(self, evaluator, only_modules=False)
 |      :param only_modules: Indicates wheter it's possible to import a
 |          definition that is not defined in a module.
 |  
 |  follow(self)
 |  
 |  sys_path_with_modifications(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  str_import_path
 |      Returns the import path as pure strings instead of `Name`.
",class,"('(self, evaluator, import_path, module_context, level=0)',)",level,0,int,arg_info
jedi,0.12.0,jedi.evaluate.imports.ModuleCache,evaluate.imports,ModuleCache,"Python Library Documentation: class ModuleCache in module jedi.evaluate.imports

class ModuleCache(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  add(self, module, name)
 |  
 |  get(self, name)
 |  
 |  get_from_path(self, path)
 |  
 |  iterate_modules_with_names(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.NestedImportModule,evaluate.imports,NestedImportModule,"Python Library Documentation: class NestedImportModule in module jedi.evaluate.imports

class NestedImportModule(parso.python.tree.Module)
 |  TODO while there's no use case for nested import module right now, we might
 |      be able to use them for static analysis checks later on.
 |  
 |  Method resolution order:
 |      NestedImportModule
 |      parso.python.tree.Module
 |      parso.python.tree.Scope
 |      parso.python.tree.PythonBaseNode
 |      parso.python.tree.PythonMixin
 |      parso.tree.BaseNode
 |      parso.tree.NodeOrLeaf
 |      parso.python.tree.DocstringMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, module, nested_import)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from parso.python.tree.Module:
 |  
 |  get_used_names(self)
 |      Returns all the :class:`Name` leafs that exist in this module. This
 |      includes both definitions and references of names.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from parso.python.tree.Module:
 |  
 |  type = 'file_input'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from parso.python.tree.Scope:
 |  
 |  get_suite(self)
 |      Returns the part that is executed by the function.
 |  
 |  iter_classdefs(self)
 |      Returns a generator of `classdef` nodes.
 |  
 |  iter_funcdefs(self)
 |      Returns a generator of `funcdef` nodes.
 |  
 |  iter_imports(self)
 |      Returns a generator of `import_name` and `import_from` nodes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from parso.python.tree.PythonMixin:
 |  
 |  get_name_of_position(self, position)
 |      Given a (line, column) tuple, returns a :py:class:`Name` or ``None`` if
 |      there is no name at that position.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from parso.tree.BaseNode:
 |  
 |  get_code(self, include_prefix=True)
 |      Returns the code that was input the input for the parser for this node.
 |      
 |      :param include_prefix: Removes the prefix (whitespace and comments) of
 |          e.g. a statement.
 |  
 |  get_first_leaf(self)
 |      Returns the first leaf of a node or itself if this is a leaf.
 |  
 |  get_last_leaf(self)
 |      Returns the last leaf of a node or itself if this is a leaf.
 |  
 |  get_leaf_for_position(self, position, include_prefixes=False)
 |      Get the :py:class:`parso.tree.Leaf` at ``position``
 |      
 |      :param tuple position: A position tuple, row, column. Rows start from 1
 |      :param bool include_prefixes: If ``False``, ``None`` will be returned if ``position`` falls
 |          on whitespace or comments before a leaf
 |      :return: :py:class:`parso.tree.Leaf` at ``position``, or ``None``
 |  
 |  get_start_pos_of_prefix(self)
 |      Returns the start_pos of the prefix. This means basically it returns
 |      the end_pos of the last prefix. The `get_start_pos_of_prefix()` of the
 |      prefix `+` in `2 + 1` would be `(1, 1)`, while the start_pos is
 |      `(1, 2)`.
 |      
 |      :return tuple of int: (line, column)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from parso.tree.BaseNode:
 |  
 |  children
 |  
 |  end_pos
 |      Returns the end position of the prefix as a tuple, e.g. `(3, 4)`.
 |      
 |      :return tuple of int: (line, column)
 |  
 |  parent
 |  
 |  start_pos
 |      Returns the starting position of the prefix as a tuple, e.g. `(3, 4)`.
 |      
 |      :return tuple of int: (line, column)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from parso.tree.NodeOrLeaf:
 |  
 |  get_next_leaf(self)
 |      Returns the next leaf in the parser tree.
 |      Returns None if this is the last element in the parser tree.
 |  
 |  get_next_sibling(self)
 |      Returns the node immediately following this node in this parent's
 |      children list. If this node does not have a next sibling, it is None
 |  
 |  get_previous_leaf(self)
 |      Returns the previous leaf in the parser tree.
 |      Returns `None` if this is the first element in the parser tree.
 |  
 |  get_previous_sibling(self)
 |      Returns the node immediately preceding this node in this parent's
 |      children list. If this node does not have a previous sibling, it is
 |      None.
 |  
 |  get_root_node(self)
 |      Returns the root node of a parser tree. The returned node doesn't have
 |      a parent node like all the other nodes/leaves.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from parso.python.tree.DocstringMixin:
 |  
 |  get_doc_node(self)
 |      Returns the string leaf of a docstring. e.g. ``r'''foo'''``.
",class,"('(self, module, nested_import)',)",nested_import,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.NestedImportModule,evaluate.imports,NestedImportModule,"Python Library Documentation: class NestedImportModule in module jedi.evaluate.imports

class NestedImportModule(parso.python.tree.Module)
 |  TODO while there's no use case for nested import module right now, we might
 |      be able to use them for static analysis checks later on.
 |  
 |  Method resolution order:
 |      NestedImportModule
 |      parso.python.tree.Module
 |      parso.python.tree.Scope
 |      parso.python.tree.PythonBaseNode
 |      parso.python.tree.PythonMixin
 |      parso.tree.BaseNode
 |      parso.tree.NodeOrLeaf
 |      parso.python.tree.DocstringMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, module, nested_import)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from parso.python.tree.Module:
 |  
 |  get_used_names(self)
 |      Returns all the :class:`Name` leafs that exist in this module. This
 |      includes both definitions and references of names.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from parso.python.tree.Module:
 |  
 |  type = 'file_input'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from parso.python.tree.Scope:
 |  
 |  get_suite(self)
 |      Returns the part that is executed by the function.
 |  
 |  iter_classdefs(self)
 |      Returns a generator of `classdef` nodes.
 |  
 |  iter_funcdefs(self)
 |      Returns a generator of `funcdef` nodes.
 |  
 |  iter_imports(self)
 |      Returns a generator of `import_name` and `import_from` nodes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from parso.python.tree.PythonMixin:
 |  
 |  get_name_of_position(self, position)
 |      Given a (line, column) tuple, returns a :py:class:`Name` or ``None`` if
 |      there is no name at that position.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from parso.tree.BaseNode:
 |  
 |  get_code(self, include_prefix=True)
 |      Returns the code that was input the input for the parser for this node.
 |      
 |      :param include_prefix: Removes the prefix (whitespace and comments) of
 |          e.g. a statement.
 |  
 |  get_first_leaf(self)
 |      Returns the first leaf of a node or itself if this is a leaf.
 |  
 |  get_last_leaf(self)
 |      Returns the last leaf of a node or itself if this is a leaf.
 |  
 |  get_leaf_for_position(self, position, include_prefixes=False)
 |      Get the :py:class:`parso.tree.Leaf` at ``position``
 |      
 |      :param tuple position: A position tuple, row, column. Rows start from 1
 |      :param bool include_prefixes: If ``False``, ``None`` will be returned if ``position`` falls
 |          on whitespace or comments before a leaf
 |      :return: :py:class:`parso.tree.Leaf` at ``position``, or ``None``
 |  
 |  get_start_pos_of_prefix(self)
 |      Returns the start_pos of the prefix. This means basically it returns
 |      the end_pos of the last prefix. The `get_start_pos_of_prefix()` of the
 |      prefix `+` in `2 + 1` would be `(1, 1)`, while the start_pos is
 |      `(1, 2)`.
 |      
 |      :return tuple of int: (line, column)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from parso.tree.BaseNode:
 |  
 |  children
 |  
 |  end_pos
 |      Returns the end position of the prefix as a tuple, e.g. `(3, 4)`.
 |      
 |      :return tuple of int: (line, column)
 |  
 |  parent
 |  
 |  start_pos
 |      Returns the starting position of the prefix as a tuple, e.g. `(3, 4)`.
 |      
 |      :return tuple of int: (line, column)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from parso.tree.NodeOrLeaf:
 |  
 |  get_next_leaf(self)
 |      Returns the next leaf in the parser tree.
 |      Returns None if this is the last element in the parser tree.
 |  
 |  get_next_sibling(self)
 |      Returns the node immediately following this node in this parent's
 |      children list. If this node does not have a next sibling, it is None
 |  
 |  get_previous_leaf(self)
 |      Returns the previous leaf in the parser tree.
 |      Returns `None` if this is the first element in the parser tree.
 |  
 |  get_previous_sibling(self)
 |      Returns the node immediately preceding this node in this parent's
 |      children list. If this node does not have a previous sibling, it is
 |      None.
 |  
 |  get_root_node(self)
 |      Returns the root node of a parser tree. The returned node doesn't have
 |      a parent node like all the other nodes/leaves.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from parso.python.tree.DocstringMixin:
 |  
 |  get_doc_node(self)
 |      Returns the string leaf of a docstring. e.g. ``r'''foo'''``.
",class,"('(self, module, nested_import)',)",module,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.NestedImportModule,evaluate.imports,NestedImportModule,"Python Library Documentation: class NestedImportModule in module jedi.evaluate.imports

class NestedImportModule(parso.python.tree.Module)
 |  TODO while there's no use case for nested import module right now, we might
 |      be able to use them for static analysis checks later on.
 |  
 |  Method resolution order:
 |      NestedImportModule
 |      parso.python.tree.Module
 |      parso.python.tree.Scope
 |      parso.python.tree.PythonBaseNode
 |      parso.python.tree.PythonMixin
 |      parso.tree.BaseNode
 |      parso.tree.NodeOrLeaf
 |      parso.python.tree.DocstringMixin
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, module, nested_import)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from parso.python.tree.Module:
 |  
 |  get_used_names(self)
 |      Returns all the :class:`Name` leafs that exist in this module. This
 |      includes both definitions and references of names.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from parso.python.tree.Module:
 |  
 |  type = 'file_input'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from parso.python.tree.Scope:
 |  
 |  get_suite(self)
 |      Returns the part that is executed by the function.
 |  
 |  iter_classdefs(self)
 |      Returns a generator of `classdef` nodes.
 |  
 |  iter_funcdefs(self)
 |      Returns a generator of `funcdef` nodes.
 |  
 |  iter_imports(self)
 |      Returns a generator of `import_name` and `import_from` nodes.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from parso.python.tree.PythonMixin:
 |  
 |  get_name_of_position(self, position)
 |      Given a (line, column) tuple, returns a :py:class:`Name` or ``None`` if
 |      there is no name at that position.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from parso.tree.BaseNode:
 |  
 |  get_code(self, include_prefix=True)
 |      Returns the code that was input the input for the parser for this node.
 |      
 |      :param include_prefix: Removes the prefix (whitespace and comments) of
 |          e.g. a statement.
 |  
 |  get_first_leaf(self)
 |      Returns the first leaf of a node or itself if this is a leaf.
 |  
 |  get_last_leaf(self)
 |      Returns the last leaf of a node or itself if this is a leaf.
 |  
 |  get_leaf_for_position(self, position, include_prefixes=False)
 |      Get the :py:class:`parso.tree.Leaf` at ``position``
 |      
 |      :param tuple position: A position tuple, row, column. Rows start from 1
 |      :param bool include_prefixes: If ``False``, ``None`` will be returned if ``position`` falls
 |          on whitespace or comments before a leaf
 |      :return: :py:class:`parso.tree.Leaf` at ``position``, or ``None``
 |  
 |  get_start_pos_of_prefix(self)
 |      Returns the start_pos of the prefix. This means basically it returns
 |      the end_pos of the last prefix. The `get_start_pos_of_prefix()` of the
 |      prefix `+` in `2 + 1` would be `(1, 1)`, while the start_pos is
 |      `(1, 2)`.
 |      
 |      :return tuple of int: (line, column)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from parso.tree.BaseNode:
 |  
 |  children
 |  
 |  end_pos
 |      Returns the end position of the prefix as a tuple, e.g. `(3, 4)`.
 |      
 |      :return tuple of int: (line, column)
 |  
 |  parent
 |  
 |  start_pos
 |      Returns the starting position of the prefix as a tuple, e.g. `(3, 4)`.
 |      
 |      :return tuple of int: (line, column)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from parso.tree.NodeOrLeaf:
 |  
 |  get_next_leaf(self)
 |      Returns the next leaf in the parser tree.
 |      Returns None if this is the last element in the parser tree.
 |  
 |  get_next_sibling(self)
 |      Returns the node immediately following this node in this parent's
 |      children list. If this node does not have a next sibling, it is None
 |  
 |  get_previous_leaf(self)
 |      Returns the previous leaf in the parser tree.
 |      Returns `None` if this is the first element in the parser tree.
 |  
 |  get_previous_sibling(self)
 |      Returns the node immediately preceding this node in this parent's
 |      children list. If this node does not have a previous sibling, it is
 |      None.
 |  
 |  get_root_node(self)
 |      Returns the root node of a parser tree. The returned node doesn't have
 |      a parent node like all the other nodes/leaves.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from parso.python.tree.DocstringMixin:
 |  
 |  get_doc_node(self)
 |      Returns the string leaf of a docstring. e.g. ``r'''foo'''``.
",class,"('(self, module, nested_import)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.SubModuleName,evaluate.imports,SubModuleName,"Python Library Documentation: class SubModuleName in module jedi.evaluate.imports

class SubModuleName(ImportName)
 |  Method resolution order:
 |      SubModuleName
 |      ImportName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods inherited from ImportName:
 |  
 |  __init__(self, parent_context, string_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ImportName:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from ImportName:
 |  
 |  start_pos = (1, 0)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, string_name)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.SubModuleName,evaluate.imports,SubModuleName,"Python Library Documentation: class SubModuleName in module jedi.evaluate.imports

class SubModuleName(ImportName)
 |  Method resolution order:
 |      SubModuleName
 |      ImportName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods inherited from ImportName:
 |  
 |  __init__(self, parent_context, string_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ImportName:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from ImportName:
 |  
 |  start_pos = (1, 0)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, string_name)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.SubModuleName,evaluate.imports,SubModuleName,"Python Library Documentation: class SubModuleName in module jedi.evaluate.imports

class SubModuleName(ImportName)
 |  Method resolution order:
 |      SubModuleName
 |      ImportName
 |      jedi.evaluate.filters.AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods inherited from ImportName:
 |  
 |  __init__(self, parent_context, string_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  goto(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ImportName:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from ImportName:
 |  
 |  start_pos = (1, 0)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.filters.AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  string_name = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, string_name)',)",string_name,,,arg_info
jedi,0.12.0,jedi.evaluate.imports._add_error,evaluate.imports,_add_error,"Python Library Documentation: function _add_error in module jedi.evaluate.imports

_add_error(context, name, message=None)
",function,"('(context, name, message=None)',)",message,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.imports._add_error,evaluate.imports,_add_error,"Python Library Documentation: function _add_error in module jedi.evaluate.imports

_add_error(context, name, message=None)
",function,"('(context, name, message=None)',)",name,,,arg_info
jedi,0.12.0,jedi.evaluate.imports._add_error,evaluate.imports,_add_error,"Python Library Documentation: function _add_error in module jedi.evaluate.imports

_add_error(context, name, message=None)
",function,"('(context, name, message=None)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.imports._load_module,evaluate.imports,_load_module,"Python Library Documentation: function _load_module in module jedi.evaluate.imports

_load_module(evaluator, path=None, code=None, sys_path=None, module_name=None, safe_module_name=False)
",function,"('(evaluator, path=None, code=None, sys_path=None, module_name=None, safe_module_name=False)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.imports._load_module,evaluate.imports,_load_module,"Python Library Documentation: function _load_module in module jedi.evaluate.imports

_load_module(evaluator, path=None, code=None, sys_path=None, module_name=None, safe_module_name=False)
",function,"('(evaluator, path=None, code=None, sys_path=None, module_name=None, safe_module_name=False)',)",code,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.imports._load_module,evaluate.imports,_load_module,"Python Library Documentation: function _load_module in module jedi.evaluate.imports

_load_module(evaluator, path=None, code=None, sys_path=None, module_name=None, safe_module_name=False)
",function,"('(evaluator, path=None, code=None, sys_path=None, module_name=None, safe_module_name=False)',)",sys_path,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.imports._load_module,evaluate.imports,_load_module,"Python Library Documentation: function _load_module in module jedi.evaluate.imports

_load_module(evaluator, path=None, code=None, sys_path=None, module_name=None, safe_module_name=False)
",function,"('(evaluator, path=None, code=None, sys_path=None, module_name=None, safe_module_name=False)',)",module_name,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.imports._load_module,evaluate.imports,_load_module,"Python Library Documentation: function _load_module in module jedi.evaluate.imports

_load_module(evaluator, path=None, code=None, sys_path=None, module_name=None, safe_module_name=False)
",function,"('(evaluator, path=None, code=None, sys_path=None, module_name=None, safe_module_name=False)',)",safe_module_name,False,bool,arg_info
jedi,0.12.0,jedi.evaluate.imports._load_module,evaluate.imports,_load_module,"Python Library Documentation: function _load_module in module jedi.evaluate.imports

_load_module(evaluator, path=None, code=None, sys_path=None, module_name=None, safe_module_name=False)
",function,"('(evaluator, path=None, code=None, sys_path=None, module_name=None, safe_module_name=False)',)",path,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.imports.add_module_to_cache,evaluate.imports,add_module_to_cache,"Python Library Documentation: function add_module_to_cache in module jedi.evaluate.imports

add_module_to_cache(evaluator, module_name, module, safe=False)
",function,"('(evaluator, module_name, module, safe=False)',)",module,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.add_module_to_cache,evaluate.imports,add_module_to_cache,"Python Library Documentation: function add_module_to_cache in module jedi.evaluate.imports

add_module_to_cache(evaluator, module_name, module, safe=False)
",function,"('(evaluator, module_name, module, safe=False)',)",module_name,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.add_module_to_cache,evaluate.imports,add_module_to_cache,"Python Library Documentation: function add_module_to_cache in module jedi.evaluate.imports

add_module_to_cache(evaluator, module_name, module, safe=False)
",function,"('(evaluator, module_name, module, safe=False)',)",safe,False,bool,arg_info
jedi,0.12.0,jedi.evaluate.imports.add_module_to_cache,evaluate.imports,add_module_to_cache,"Python Library Documentation: function add_module_to_cache in module jedi.evaluate.imports

add_module_to_cache(evaluator, module_name, module, safe=False)
",function,"('(evaluator, module_name, module, safe=False)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.dotted_from_fs_path,evaluate.imports,dotted_from_fs_path,"Python Library Documentation: function dotted_from_fs_path in module jedi.evaluate.utils

dotted_from_fs_path(fs_path, sys_path)
    Changes `/usr/lib/python3.4/email/utils.py` to `email.utils`.  I.e.
    compares the path with sys.path and then returns the dotted_path. If the
    path is not in the sys.path, just returns None.
",function,"('(fs_path, sys_path)',)",fs_path,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.dotted_from_fs_path,evaluate.imports,dotted_from_fs_path,"Python Library Documentation: function dotted_from_fs_path in module jedi.evaluate.utils

dotted_from_fs_path(fs_path, sys_path)
    Changes `/usr/lib/python3.4/email/utils.py` to `email.utils`.  I.e.
    compares the path with sys.path and then returns the dotted_path. If the
    path is not in the sys.path, just returns None.
",function,"('(fs_path, sys_path)',)",sys_path,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.evaluator_method_cache,evaluate.imports,evaluator_method_cache,"Python Library Documentation: function evaluator_method_cache in module jedi.evaluate.cache

evaluator_method_cache(default=<object object at 0x000000000520FC20>)
",function,"('(default=<object object at 0x000000000520FC20>)',)",default,<object object at 0x000000000520FC20>,object,arg_info
jedi,0.12.0,jedi.evaluate.imports.force_unicode,evaluate.imports,force_unicode,"Python Library Documentation: function force_unicode in module jedi._compatibility

force_unicode(obj)
",function,"('(obj)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.get_cached_code_lines,evaluate.imports,get_cached_code_lines,"Python Library Documentation: function get_cached_code_lines in module jedi.parser_utils

get_cached_code_lines(grammar, path)
    Basically access the cached code lines in parso. This is not the nicest way
    to do this, but we avoid splitting all the lines again.
",function,"('(grammar, path)',)",grammar,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.get_cached_code_lines,evaluate.imports,get_cached_code_lines,"Python Library Documentation: function get_cached_code_lines in module jedi.parser_utils

get_cached_code_lines(grammar, path)
    Basically access the cached code lines in parso. This is not the nicest way
    to do this, but we avoid splitting all the lines again.
",function,"('(grammar, path)',)",path,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.get_modules_containing_name,evaluate.imports,get_modules_containing_name,"Python Library Documentation: function get_modules_containing_name in module jedi.evaluate.imports

get_modules_containing_name(evaluator, modules, name)
    Search a name in the directories of modules.
",function,"('(evaluator, modules, name)',)",name,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.get_modules_containing_name,evaluate.imports,get_modules_containing_name,"Python Library Documentation: function get_modules_containing_name in module jedi.evaluate.imports

get_modules_containing_name(evaluator, modules, name)
    Search a name in the directories of modules.
",function,"('(evaluator, modules, name)',)",modules,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.get_modules_containing_name,evaluate.imports,get_modules_containing_name,"Python Library Documentation: function get_modules_containing_name in module jedi.evaluate.imports

get_modules_containing_name(evaluator, modules, name)
    Search a name in the directories of modules.
",function,"('(evaluator, modules, name)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.infer_import,evaluate.imports,wrapper,"Python Library Documentation: function wrapper in module jedi.evaluate.cache

wrapper(obj, *args, **kwargs)
",function,"('(obj, *args, **kwargs)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.python_bytes_to_unicode,evaluate.imports,python_bytes_to_unicode,"Python Library Documentation: function python_bytes_to_unicode in module parso.utils

python_bytes_to_unicode(source, encoding='utf-8', errors='strict')
    Checks for unicode BOMs and PEP 263 encoding declarations. Then returns a
    unicode object like in :py:meth:`bytes.decode`.
    
    :param encoding: See :py:meth:`bytes.decode` documentation.
    :param errors: See :py:meth:`bytes.decode` documentation. ``errors`` can be
        ``'strict'``, ``'replace'`` or ``'ignore'``.
",function,"(""(source, encoding='utf-8', errors='strict')"",)",source,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.python_bytes_to_unicode,evaluate.imports,python_bytes_to_unicode,"Python Library Documentation: function python_bytes_to_unicode in module parso.utils

python_bytes_to_unicode(source, encoding='utf-8', errors='strict')
    Checks for unicode BOMs and PEP 263 encoding declarations. Then returns a
    unicode object like in :py:meth:`bytes.decode`.
    
    :param encoding: See :py:meth:`bytes.decode` documentation.
    :param errors: See :py:meth:`bytes.decode` documentation. ``errors`` can be
        ``'strict'``, ``'replace'`` or ``'ignore'``.
",function,"(""(source, encoding='utf-8', errors='strict')"",)",encoding,utf-8,str,arg_info
jedi,0.12.0,jedi.evaluate.imports.python_bytes_to_unicode,evaluate.imports,python_bytes_to_unicode,"Python Library Documentation: function python_bytes_to_unicode in module parso.utils

python_bytes_to_unicode(source, encoding='utf-8', errors='strict')
    Checks for unicode BOMs and PEP 263 encoding declarations. Then returns a
    unicode object like in :py:meth:`bytes.decode`.
    
    :param encoding: See :py:meth:`bytes.decode` documentation.
    :param errors: See :py:meth:`bytes.decode` documentation. ``errors`` can be
        ``'strict'``, ``'replace'`` or ``'ignore'``.
",function,"(""(source, encoding='utf-8', errors='strict')"",)",errors,strict,str,arg_info
jedi,0.12.0,jedi.evaluate.imports.search_ancestor,evaluate.imports,search_ancestor,"Python Library Documentation: function search_ancestor in module parso.tree

search_ancestor(node, *node_types)
    Recursively looks at the parents of a node and returns the first found node
    that matches node_types. Returns ``None`` if no matching node is found.
    
    :param node: The ancestors of this node will be checked.
    :param node_types: type names that are searched for.
    :type node_types: tuple of str
",function,"('(node, *node_types)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.unicode,evaluate.imports,str,"Python Library Documentation: class str in module builtins

class str(object)
 |  str(object='') -> str
 |  str(bytes_or_buffer[, encoding[, errors]]) -> str
 |  
 |  Create a new string object from the given object. If encoding or
 |  errors is specified, then the object must expose a data buffer
 |  that will be decoded using the given encoding and error handler.
 |  Otherwise, returns the result of object.__str__() (if defined)
 |  or repr(object).
 |  encoding defaults to sys.getdefaultencoding().
 |  errors defaults to 'strict'.
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __format__(...)
 |      S.__format__(format_spec) -> str
 |      
 |      Return a formatted version of S as described by format_spec.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __getnewargs__(...)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  __sizeof__(...)
 |      S.__sizeof__() -> size of S in memory, in bytes
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  capitalize(...)
 |      S.capitalize() -> str
 |      
 |      Return a capitalized version of S, i.e. make the first character
 |      have upper case and the rest lower case.
 |  
 |  casefold(...)
 |      S.casefold() -> str
 |      
 |      Return a version of S suitable for caseless comparisons.
 |  
 |  center(...)
 |      S.center(width[, fillchar]) -> str
 |      
 |      Return S centered in a string of length width. Padding is
 |      done using the specified fill character (default is a space)
 |  
 |  count(...)
 |      S.count(sub[, start[, end]]) -> int
 |      
 |      Return the number of non-overlapping occurrences of substring sub in
 |      string S[start:end].  Optional arguments start and end are
 |      interpreted as in slice notation.
 |  
 |  encode(...)
 |      S.encode(encoding='utf-8', errors='strict') -> bytes
 |      
 |      Encode S using the codec registered for encoding. Default encoding
 |      is 'utf-8'. errors may be given to set a different error
 |      handling scheme. Default is 'strict' meaning that encoding errors raise
 |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
 |      'xmlcharrefreplace' as well as any other name registered with
 |      codecs.register_error that can handle UnicodeEncodeErrors.
 |  
 |  endswith(...)
 |      S.endswith(suffix[, start[, end]]) -> bool
 |      
 |      Return True if S ends with the specified suffix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      suffix can also be a tuple of strings to try.
 |  
 |  expandtabs(...)
 |      S.expandtabs(tabsize=8) -> str
 |      
 |      Return a copy of S where all tab characters are expanded using spaces.
 |      If tabsize is not given, a tab size of 8 characters is assumed.
 |  
 |  find(...)
 |      S.find(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  format(...)
 |      S.format(*args, **kwargs) -> str
 |      
 |      Return a formatted version of S, using substitutions from args and kwargs.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  format_map(...)
 |      S.format_map(mapping) -> str
 |      
 |      Return a formatted version of S, using substitutions from mapping.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  index(...)
 |      S.index(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found, 
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  isalnum(...)
 |      S.isalnum() -> bool
 |      
 |      Return True if all characters in S are alphanumeric
 |      and there is at least one character in S, False otherwise.
 |  
 |  isalpha(...)
 |      S.isalpha() -> bool
 |      
 |      Return True if all characters in S are alphabetic
 |      and there is at least one character in S, False otherwise.
 |  
 |  isdecimal(...)
 |      S.isdecimal() -> bool
 |      
 |      Return True if there are only decimal characters in S,
 |      False otherwise.
 |  
 |  isdigit(...)
 |      S.isdigit() -> bool
 |      
 |      Return True if all characters in S are digits
 |      and there is at least one character in S, False otherwise.
 |  
 |  isidentifier(...)
 |      S.isidentifier() -> bool
 |      
 |      Return True if S is a valid identifier according
 |      to the language definition.
 |      
 |      Use keyword.iskeyword() to test for reserved identifiers
 |      such as ""def"" and ""class"".
 |  
 |  islower(...)
 |      S.islower() -> bool
 |      
 |      Return True if all cased characters in S are lowercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  isnumeric(...)
 |      S.isnumeric() -> bool
 |      
 |      Return True if there are only numeric characters in S,
 |      False otherwise.
 |  
 |  isprintable(...)
 |      S.isprintable() -> bool
 |      
 |      Return True if all characters in S are considered
 |      printable in repr() or S is empty, False otherwise.
 |  
 |  isspace(...)
 |      S.isspace() -> bool
 |      
 |      Return True if all characters in S are whitespace
 |      and there is at least one character in S, False otherwise.
 |  
 |  istitle(...)
 |      S.istitle() -> bool
 |      
 |      Return True if S is a titlecased string and there is at least one
 |      character in S, i.e. upper- and titlecase characters may only
 |      follow uncased characters and lowercase characters only cased ones.
 |      Return False otherwise.
 |  
 |  isupper(...)
 |      S.isupper() -> bool
 |      
 |      Return True if all cased characters in S are uppercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  join(...)
 |      S.join(iterable) -> str
 |      
 |      Return a string which is the concatenation of the strings in the
 |      iterable.  The separator between elements is S.
 |  
 |  ljust(...)
 |      S.ljust(width[, fillchar]) -> str
 |      
 |      Return S left-justified in a Unicode string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  lower(...)
 |      S.lower() -> str
 |      
 |      Return a copy of the string S converted to lowercase.
 |  
 |  lstrip(...)
 |      S.lstrip([chars]) -> str
 |      
 |      Return a copy of the string S with leading whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  partition(...)
 |      S.partition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, and return the part before it,
 |      the separator itself, and the part after it.  If the separator is not
 |      found, return S and two empty strings.
 |  
 |  replace(...)
 |      S.replace(old, new[, count]) -> str
 |      
 |      Return a copy of S with all occurrences of substring
 |      old replaced by new.  If the optional argument count is
 |      given, only the first count occurrences are replaced.
 |  
 |  rfind(...)
 |      S.rfind(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  rindex(...)
 |      S.rindex(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  rjust(...)
 |      S.rjust(width[, fillchar]) -> str
 |      
 |      Return S right-justified in a string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  rpartition(...)
 |      S.rpartition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, starting at the end of S, and return
 |      the part before it, the separator itself, and the part after it.  If the
 |      separator is not found, return two empty strings and S.
 |  
 |  rsplit(...)
 |      S.rsplit(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string, starting at the end of the string and
 |      working to the front.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified, any whitespace string
 |      is a separator.
 |  
 |  rstrip(...)
 |      S.rstrip([chars]) -> str
 |      
 |      Return a copy of the string S with trailing whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  split(...)
 |      S.split(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified or is None, any
 |      whitespace string is a separator and empty strings are
 |      removed from the result.
 |  
 |  splitlines(...)
 |      S.splitlines([keepends]) -> list of strings
 |      
 |      Return a list of the lines in S, breaking at line boundaries.
 |      Line breaks are not included in the resulting list unless keepends
 |      is given and true.
 |  
 |  startswith(...)
 |      S.startswith(prefix[, start[, end]]) -> bool
 |      
 |      Return True if S starts with the specified prefix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      prefix can also be a tuple of strings to try.
 |  
 |  strip(...)
 |      S.strip([chars]) -> str
 |      
 |      Return a copy of the string S with leading and trailing
 |      whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  swapcase(...)
 |      S.swapcase() -> str
 |      
 |      Return a copy of S with uppercase characters converted to lowercase
 |      and vice versa.
 |  
 |  title(...)
 |      S.title() -> str
 |      
 |      Return a titlecased version of S, i.e. words start with title case
 |      characters, all remaining cased characters have lower case.
 |  
 |  translate(...)
 |      S.translate(table) -> str
 |      
 |      Return a copy of the string S in which each character has been mapped
 |      through the given translation table. The table must implement
 |      lookup/indexing via __getitem__, for instance a dictionary or list,
 |      mapping Unicode ordinals to Unicode ordinals, strings, or None. If
 |      this operation raises LookupError, the character is left untouched.
 |      Characters mapped to None are deleted.
 |  
 |  upper(...)
 |      S.upper() -> str
 |      
 |      Return a copy of S converted to uppercase.
 |  
 |  zfill(...)
 |      S.zfill(width) -> str
 |      
 |      Pad a numeric string S with zeros on the left, to fill a field
 |      of the specified width. The string S is never truncated.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  maketrans(x, y=None, z=None, /)
 |      Return a translation table usable for str.translate().
 |      
 |      If there is only one argument, it must be a dictionary mapping Unicode
 |      ordinals (integers) or characters to Unicode ordinals, strings or None.
 |      Character keys will be then converted to ordinals.
 |      If there are two arguments, they must be strings of equal length, and
 |      in the resulting dictionary, each character in x will be mapped to the
 |      character at the same position in y. If there is a third argument, it
 |      must be a string, whose characters will be mapped to None in the result.
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.imports.unite,evaluate.imports,unite,"Python Library Documentation: function unite in module jedi.evaluate.utils

unite(iterable)
    Turns a two dimensional array into a one dimensional.
",function,"('(iterable)',)",iterable,,,arg_info
jedi,0.12.0,jedi.evaluate.iterate_contexts,evaluate,iterate_contexts,"Python Library Documentation: function iterate_contexts in module jedi.evaluate.base_context

iterate_contexts(contexts, contextualized_node=None, is_async=False)
    Calls `iterate`, on all contexts but ignores the ordering and just returns
    all contexts that the iterate functions yield.
",function,"('(contexts, contextualized_node=None, is_async=False)',)",contextualized_node,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.iterate_contexts,evaluate,iterate_contexts,"Python Library Documentation: function iterate_contexts in module jedi.evaluate.base_context

iterate_contexts(contexts, contextualized_node=None, is_async=False)
    Calls `iterate`, on all contexts but ignores the ordering and just returns
    all contexts that the iterate functions yield.
",function,"('(contexts, contextualized_node=None, is_async=False)',)",contexts,,,arg_info
jedi,0.12.0,jedi.evaluate.iterate_contexts,evaluate,iterate_contexts,"Python Library Documentation: function iterate_contexts in module jedi.evaluate.base_context

iterate_contexts(contexts, contextualized_node=None, is_async=False)
    Calls `iterate`, on all contexts but ignores the ordering and just returns
    all contexts that the iterate functions yield.
",function,"('(contexts, contextualized_node=None, is_async=False)',)",is_async,False,bool,arg_info
jedi,0.12.0,jedi.evaluate.lazy_context.AbstractLazyContext,evaluate.lazy_context,AbstractLazyContext,"Python Library Documentation: class AbstractLazyContext in module jedi.evaluate.lazy_context

class AbstractLazyContext(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, data)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, data)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.lazy_context.AbstractLazyContext,evaluate.lazy_context,AbstractLazyContext,"Python Library Documentation: class AbstractLazyContext in module jedi.evaluate.lazy_context

class AbstractLazyContext(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, data)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, data)',)",data,,,arg_info
jedi,0.12.0,jedi.evaluate.lazy_context.ContextSet,evaluate.lazy_context,ContextSet,"Python Library Documentation: class ContextSet in module jedi.evaluate.base_context

class ContextSet(jedi.common.context.BaseContextSet)
 |  Method resolution order:
 |      ContextSet
 |      jedi.common.context.BaseContextSet
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContextSet:
 |  
 |  __bool__(self)
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, *args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self)
 |  
 |  __len__(self)
 |  
 |  __or__(self, other)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  filter(self, filter_func)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from jedi.common.context.BaseContextSet:
 |  
 |  from_iterable(iterable) from builtins.type
 |  
 |  from_set(set_) from builtins.type
 |  
 |  from_sets(sets) from builtins.type
 |      Used to work with an iterable of set.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContextSet:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, *args)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.lazy_context.ContextSet.from_iterable,evaluate.lazy_context.ContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.lazy_context.ContextSet.from_iterable,evaluate.lazy_context.ContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",iterable,,,arg_info
jedi,0.12.0,jedi.evaluate.lazy_context.ContextSet.from_set,evaluate.lazy_context.ContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.lazy_context.ContextSet.from_set,evaluate.lazy_context.ContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",set_,,,arg_info
jedi,0.12.0,jedi.evaluate.lazy_context.ContextSet.from_sets,evaluate.lazy_context.ContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",sets,,,arg_info
jedi,0.12.0,jedi.evaluate.lazy_context.ContextSet.from_sets,evaluate.lazy_context.ContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.lazy_context.LazyKnownContext,evaluate.lazy_context,LazyKnownContext,"Python Library Documentation: class LazyKnownContext in module jedi.evaluate.lazy_context

class LazyKnownContext(AbstractLazyContext)
 |  data is a context.
 |  
 |  Method resolution order:
 |      LazyKnownContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __init__(self, data)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, data)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.lazy_context.LazyKnownContext,evaluate.lazy_context,LazyKnownContext,"Python Library Documentation: class LazyKnownContext in module jedi.evaluate.lazy_context

class LazyKnownContext(AbstractLazyContext)
 |  data is a context.
 |  
 |  Method resolution order:
 |      LazyKnownContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __init__(self, data)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, data)',)",data,,,arg_info
jedi,0.12.0,jedi.evaluate.lazy_context.LazyKnownContexts,evaluate.lazy_context,LazyKnownContexts,"Python Library Documentation: class LazyKnownContexts in module jedi.evaluate.lazy_context

class LazyKnownContexts(AbstractLazyContext)
 |  data is a ContextSet.
 |  
 |  Method resolution order:
 |      LazyKnownContexts
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __init__(self, data)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, data)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.lazy_context.LazyKnownContexts,evaluate.lazy_context,LazyKnownContexts,"Python Library Documentation: class LazyKnownContexts in module jedi.evaluate.lazy_context

class LazyKnownContexts(AbstractLazyContext)
 |  data is a ContextSet.
 |  
 |  Method resolution order:
 |      LazyKnownContexts
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __init__(self, data)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, data)',)",data,,,arg_info
jedi,0.12.0,jedi.evaluate.lazy_context.LazyTreeContext,evaluate.lazy_context,LazyTreeContext,"Python Library Documentation: class LazyTreeContext in module jedi.evaluate.lazy_context

class LazyTreeContext(AbstractLazyContext)
 |  Method resolution order:
 |      LazyTreeContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.lazy_context.LazyTreeContext,evaluate.lazy_context,LazyTreeContext,"Python Library Documentation: class LazyTreeContext in module jedi.evaluate.lazy_context

class LazyTreeContext(AbstractLazyContext)
 |  Method resolution order:
 |      LazyTreeContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.lazy_context.LazyTreeContext,evaluate.lazy_context,LazyTreeContext,"Python Library Documentation: class LazyTreeContext in module jedi.evaluate.lazy_context

class LazyTreeContext(AbstractLazyContext)
 |  Method resolution order:
 |      LazyTreeContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.lazy_context.LazyUnknownContext,evaluate.lazy_context,LazyUnknownContext,"Python Library Documentation: class LazyUnknownContext in module jedi.evaluate.lazy_context

class LazyUnknownContext(AbstractLazyContext)
 |  Method resolution order:
 |      LazyUnknownContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.lazy_context.MergedLazyContexts,evaluate.lazy_context,MergedLazyContexts,"Python Library Documentation: class MergedLazyContexts in module jedi.evaluate.lazy_context

class MergedLazyContexts(AbstractLazyContext)
 |  data is a list of lazy contexts.
 |  
 |  Method resolution order:
 |      MergedLazyContexts
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __init__(self, data)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, data)',)",data,,,arg_info
jedi,0.12.0,jedi.evaluate.lazy_context.MergedLazyContexts,evaluate.lazy_context,MergedLazyContexts,"Python Library Documentation: class MergedLazyContexts in module jedi.evaluate.lazy_context

class MergedLazyContexts(AbstractLazyContext)
 |  data is a list of lazy contexts.
 |  
 |  Method resolution order:
 |      MergedLazyContexts
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __init__(self, data)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, data)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.lazy_context.get_merged_lazy_context,evaluate.lazy_context,get_merged_lazy_context,"Python Library Documentation: function get_merged_lazy_context in module jedi.evaluate.lazy_context

get_merged_lazy_context(lazy_contexts)
",function,"('(lazy_contexts)',)",lazy_contexts,,,arg_info
jedi,0.12.0,jedi.evaluate.param.ExecutedParam,evaluate.param,ExecutedParam,"Python Library Documentation: class ExecutedParam in module jedi.evaluate.param

class ExecutedParam(builtins.object)
 |  Fake a param and give it values.
 |  
 |  Methods defined here:
 |  
 |  __init__(self, execution_context, param_node, lazy_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  var_args
",class,"('(self, execution_context, param_node, lazy_context)',)",lazy_context,,,arg_info
jedi,0.12.0,jedi.evaluate.param.ExecutedParam,evaluate.param,ExecutedParam,"Python Library Documentation: class ExecutedParam in module jedi.evaluate.param

class ExecutedParam(builtins.object)
 |  Fake a param and give it values.
 |  
 |  Methods defined here:
 |  
 |  __init__(self, execution_context, param_node, lazy_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  var_args
",class,"('(self, execution_context, param_node, lazy_context)',)",param_node,,,arg_info
jedi,0.12.0,jedi.evaluate.param.ExecutedParam,evaluate.param,ExecutedParam,"Python Library Documentation: class ExecutedParam in module jedi.evaluate.param

class ExecutedParam(builtins.object)
 |  Fake a param and give it values.
 |  
 |  Methods defined here:
 |  
 |  __init__(self, execution_context, param_node, lazy_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  var_args
",class,"('(self, execution_context, param_node, lazy_context)',)",execution_context,,,arg_info
jedi,0.12.0,jedi.evaluate.param.ExecutedParam,evaluate.param,ExecutedParam,"Python Library Documentation: class ExecutedParam in module jedi.evaluate.param

class ExecutedParam(builtins.object)
 |  Fake a param and give it values.
 |  
 |  Methods defined here:
 |  
 |  __init__(self, execution_context, param_node, lazy_context)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  var_args
",class,"('(self, execution_context, param_node, lazy_context)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.param.LazyKnownContext,evaluate.param,LazyKnownContext,"Python Library Documentation: class LazyKnownContext in module jedi.evaluate.lazy_context

class LazyKnownContext(AbstractLazyContext)
 |  data is a context.
 |  
 |  Method resolution order:
 |      LazyKnownContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __init__(self, data)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, data)',)",data,,,arg_info
jedi,0.12.0,jedi.evaluate.param.LazyKnownContext,evaluate.param,LazyKnownContext,"Python Library Documentation: class LazyKnownContext in module jedi.evaluate.lazy_context

class LazyKnownContext(AbstractLazyContext)
 |  data is a context.
 |  
 |  Method resolution order:
 |      LazyKnownContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __init__(self, data)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, data)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.param.LazyTreeContext,evaluate.param,LazyTreeContext,"Python Library Documentation: class LazyTreeContext in module jedi.evaluate.lazy_context

class LazyTreeContext(AbstractLazyContext)
 |  Method resolution order:
 |      LazyTreeContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.param.LazyTreeContext,evaluate.param,LazyTreeContext,"Python Library Documentation: class LazyTreeContext in module jedi.evaluate.lazy_context

class LazyTreeContext(AbstractLazyContext)
 |  Method resolution order:
 |      LazyTreeContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.param.LazyTreeContext,evaluate.param,LazyTreeContext,"Python Library Documentation: class LazyTreeContext in module jedi.evaluate.lazy_context

class LazyTreeContext(AbstractLazyContext)
 |  Method resolution order:
 |      LazyTreeContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.param.LazyUnknownContext,evaluate.param,LazyUnknownContext,"Python Library Documentation: class LazyUnknownContext in module jedi.evaluate.lazy_context

class LazyUnknownContext(AbstractLazyContext)
 |  Method resolution order:
 |      LazyUnknownContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.param.PushBackIterator,evaluate.param,PushBackIterator,"Python Library Documentation: class PushBackIterator in module jedi.evaluate.utils

class PushBackIterator(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, iterator)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self)
 |  
 |  __next__(self)
 |  
 |  next(self)
 |      Python 2 Compatibility
 |  
 |  push_back(self, value)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, iterator)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.param.PushBackIterator,evaluate.param,PushBackIterator,"Python Library Documentation: class PushBackIterator in module jedi.evaluate.utils

class PushBackIterator(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, iterator)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self)
 |  
 |  __next__(self)
 |  
 |  next(self)
 |      Python 2 Compatibility
 |  
 |  push_back(self, value)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, iterator)',)",iterator,,,arg_info
jedi,0.12.0,jedi.evaluate.param._add_argument_issue,evaluate.param,_add_argument_issue,"Python Library Documentation: function _add_argument_issue in module jedi.evaluate.param

_add_argument_issue(parent_context, error_name, lazy_context, message)
",function,"('(parent_context, error_name, lazy_context, message)',)",message,,,arg_info
jedi,0.12.0,jedi.evaluate.param._add_argument_issue,evaluate.param,_add_argument_issue,"Python Library Documentation: function _add_argument_issue in module jedi.evaluate.param

_add_argument_issue(parent_context, error_name, lazy_context, message)
",function,"('(parent_context, error_name, lazy_context, message)',)",error_name,,,arg_info
jedi,0.12.0,jedi.evaluate.param._add_argument_issue,evaluate.param,_add_argument_issue,"Python Library Documentation: function _add_argument_issue in module jedi.evaluate.param

_add_argument_issue(parent_context, error_name, lazy_context, message)
",function,"('(parent_context, error_name, lazy_context, message)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.param._add_argument_issue,evaluate.param,_add_argument_issue,"Python Library Documentation: function _add_argument_issue in module jedi.evaluate.param

_add_argument_issue(parent_context, error_name, lazy_context, message)
",function,"('(parent_context, error_name, lazy_context, message)',)",lazy_context,,,arg_info
jedi,0.12.0,jedi.evaluate.param._create_default_param,evaluate.param,_create_default_param,"Python Library Documentation: function _create_default_param in module jedi.evaluate.param

_create_default_param(execution_context, param)
",function,"('(execution_context, param)',)",execution_context,,,arg_info
jedi,0.12.0,jedi.evaluate.param._create_default_param,evaluate.param,_create_default_param,"Python Library Documentation: function _create_default_param in module jedi.evaluate.param

_create_default_param(execution_context, param)
",function,"('(execution_context, param)',)",param,,,arg_info
jedi,0.12.0,jedi.evaluate.param._error_argument_count,evaluate.param,_error_argument_count,"Python Library Documentation: function _error_argument_count in module jedi.evaluate.param

_error_argument_count(funcdef, actual_count)
",function,"('(funcdef, actual_count)',)",funcdef,,,arg_info
jedi,0.12.0,jedi.evaluate.param._error_argument_count,evaluate.param,_error_argument_count,"Python Library Documentation: function _error_argument_count in module jedi.evaluate.param

_error_argument_count(funcdef, actual_count)
",function,"('(funcdef, actual_count)',)",actual_count,,,arg_info
jedi,0.12.0,jedi.evaluate.param.create_default_params,evaluate.param,create_default_params,"Python Library Documentation: function create_default_params in module jedi.evaluate.param

create_default_params(execution_context, funcdef)
",function,"('(execution_context, funcdef)',)",execution_context,,,arg_info
jedi,0.12.0,jedi.evaluate.param.create_default_params,evaluate.param,create_default_params,"Python Library Documentation: function create_default_params in module jedi.evaluate.param

create_default_params(execution_context, funcdef)
",function,"('(execution_context, funcdef)',)",funcdef,,,arg_info
jedi,0.12.0,jedi.evaluate.param.defaultdict,evaluate.param,defaultdict,"Python Library Documentation: class defaultdict in module collections

class defaultdict(builtins.dict)
 |  defaultdict(default_factory[, ...]) --> dict with default factory
 |  
 |  The default factory is called without arguments to produce
 |  a new value when a key is not present, in __getitem__ only.
 |  A defaultdict compares equal to a dict with the same items.
 |  All remaining arguments are treated the same as if they were
 |  passed to the dict constructor, including keyword arguments.
 |  
 |  Method resolution order:
 |      defaultdict
 |      builtins.dict
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __copy__(...)
 |      D.copy() -> a shallow copy of D.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __missing__(...)
 |      __missing__(key) # Called by __getitem__ for missing key; pseudo-code:
 |      if self.default_factory is None: raise KeyError((key,))
 |      self[key] = value = self.default_factory()
 |      return value
 |  
 |  __reduce__(...)
 |      Return state information for pickling.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  copy(...)
 |      D.copy() -> a shallow copy of D.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  default_factory
 |      Factory for default value called by __missing__().
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.dict:
 |  
 |  __contains__(self, key, /)
 |      True if D has a key k, else False.
 |  
 |  __delitem__(self, key, /)
 |      Delete self[key].
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getitem__(...)
 |      x.__getitem__(y) <==> x[y]
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __setitem__(self, key, value, /)
 |      Set self[key] to value.
 |  
 |  __sizeof__(...)
 |      D.__sizeof__() -> size of D in memory, in bytes
 |  
 |  clear(...)
 |      D.clear() -> None.  Remove all items from D.
 |  
 |  fromkeys(iterable, value=None, /) from builtins.type
 |      Returns a new dict with keys from iterable and values equal to value.
 |  
 |  get(...)
 |      D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
 |  
 |  items(...)
 |      D.items() -> a set-like object providing a view on D's items
 |  
 |  keys(...)
 |      D.keys() -> a set-like object providing a view on D's keys
 |  
 |  pop(...)
 |      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
 |      If key is not found, d is returned if given, otherwise KeyError is raised
 |  
 |  popitem(...)
 |      D.popitem() -> (k, v), remove and return some (key, value) pair as a
 |      2-tuple; but raise KeyError if D is empty.
 |  
 |  setdefault(...)
 |      D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D
 |  
 |  update(...)
 |      D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
 |      If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
 |      If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
 |      In either case, this is followed by: for k in F:  D[k] = F[k]
 |  
 |  values(...)
 |      D.values() -> an object providing a view on D's values
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from builtins.dict:
 |  
 |  __hash__ = None
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.param.get_params,evaluate.param,get_params,"Python Library Documentation: function get_params in module jedi.evaluate.param

get_params(execution_context, var_args)
",function,"('(execution_context, var_args)',)",execution_context,,,arg_info
jedi,0.12.0,jedi.evaluate.param.get_params,evaluate.param,get_params,"Python Library Documentation: function get_params in module jedi.evaluate.param

get_params(execution_context, var_args)
",function,"('(execution_context, var_args)',)",var_args,,,arg_info
jedi,0.12.0,jedi.evaluate.parser_cache.evaluator_function_cache,evaluate.parser_cache,evaluator_function_cache,"Python Library Documentation: function evaluator_function_cache in module jedi.evaluate.cache

evaluator_function_cache(default=<object object at 0x000000000520FC20>)
",function,"('(default=<object object at 0x000000000520FC20>)',)",default,<object object at 0x000000000520FC20>,object,arg_info
jedi,0.12.0,jedi.evaluate.parser_cache.get_yield_exprs,evaluate.parser_cache,wrapper,"Python Library Documentation: function wrapper in module jedi.evaluate.cache

wrapper(obj, *args, **kwargs)
",function,"('(obj, *args, **kwargs)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.ContextSet,evaluate.pep0484,ContextSet,"Python Library Documentation: class ContextSet in module jedi.evaluate.base_context

class ContextSet(jedi.common.context.BaseContextSet)
 |  Method resolution order:
 |      ContextSet
 |      jedi.common.context.BaseContextSet
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContextSet:
 |  
 |  __bool__(self)
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, *args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self)
 |  
 |  __len__(self)
 |  
 |  __or__(self, other)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  filter(self, filter_func)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from jedi.common.context.BaseContextSet:
 |  
 |  from_iterable(iterable) from builtins.type
 |  
 |  from_set(set_) from builtins.type
 |  
 |  from_sets(sets) from builtins.type
 |      Used to work with an iterable of set.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContextSet:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, *args)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.ContextSet.from_iterable,evaluate.pep0484.ContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",iterable,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.ContextSet.from_iterable,evaluate.pep0484.ContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.ContextSet.from_set,evaluate.pep0484.ContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.ContextSet.from_set,evaluate.pep0484.ContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",set_,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.ContextSet.from_sets,evaluate.pep0484.ContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.ContextSet.from_sets,evaluate.pep0484.ContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",sets,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.LazyTreeContext,evaluate.pep0484,LazyTreeContext,"Python Library Documentation: class LazyTreeContext in module jedi.evaluate.lazy_context

class LazyTreeContext(AbstractLazyContext)
 |  Method resolution order:
 |      LazyTreeContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.LazyTreeContext,evaluate.pep0484,LazyTreeContext,"Python Library Documentation: class LazyTreeContext in module jedi.evaluate.lazy_context

class LazyTreeContext(AbstractLazyContext)
 |  Method resolution order:
 |      LazyTreeContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.LazyTreeContext,evaluate.pep0484,LazyTreeContext,"Python Library Documentation: class LazyTreeContext in module jedi.evaluate.lazy_context

class LazyTreeContext(AbstractLazyContext)
 |  Method resolution order:
 |      LazyTreeContext
 |      AbstractLazyContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractLazyContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractLazyContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.ModuleContext,evaluate.pep0484,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.ModuleContext,evaluate.pep0484,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.ModuleContext,evaluate.pep0484,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",module_node,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.ModuleContext,evaluate.pep0484,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",path,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.ModuleContext,evaluate.pep0484,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",code_lines,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.ParserSyntaxError,evaluate.pep0484,ParserSyntaxError,"Python Library Documentation: class ParserSyntaxError in module parso.parser

class ParserSyntaxError(builtins.Exception)
 |  Contains error information about the parser tree.
 |  
 |  May be raised as an exception.
 |  
 |  Method resolution order:
 |      ParserSyntaxError
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, message, error_leaf)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, message, error_leaf)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.ParserSyntaxError,evaluate.pep0484,ParserSyntaxError,"Python Library Documentation: class ParserSyntaxError in module parso.parser

class ParserSyntaxError(builtins.Exception)
 |  Contains error information about the parser tree.
 |  
 |  May be raised as an exception.
 |  
 |  Method resolution order:
 |      ParserSyntaxError
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, message, error_leaf)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, message, error_leaf)',)",message,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.ParserSyntaxError,evaluate.pep0484,ParserSyntaxError,"Python Library Documentation: class ParserSyntaxError in module parso.parser

class ParserSyntaxError(builtins.Exception)
 |  Contains error information about the parser tree.
 |  
 |  May be raised as an exception.
 |  
 |  Method resolution order:
 |      ParserSyntaxError
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, message, error_leaf)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, message, error_leaf)',)",error_leaf,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484._evaluate_annotation_string,evaluate.pep0484,_evaluate_annotation_string,"Python Library Documentation: function _evaluate_annotation_string in module jedi.evaluate.pep0484

_evaluate_annotation_string(context, string, index=None)
",function,"('(context, string, index=None)',)",index,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.pep0484._evaluate_annotation_string,evaluate.pep0484,_evaluate_annotation_string,"Python Library Documentation: function _evaluate_annotation_string in module jedi.evaluate.pep0484

_evaluate_annotation_string(context, string, index=None)
",function,"('(context, string, index=None)',)",string,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484._evaluate_annotation_string,evaluate.pep0484,_evaluate_annotation_string,"Python Library Documentation: function _evaluate_annotation_string in module jedi.evaluate.pep0484

_evaluate_annotation_string(context, string, index=None)
",function,"('(context, string, index=None)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484._evaluate_for_annotation,evaluate.pep0484,_evaluate_for_annotation,"Python Library Documentation: function _evaluate_for_annotation in module jedi.evaluate.pep0484

_evaluate_for_annotation(context, annotation, index=None)
    Evaluates a string-node, looking for an annotation
    If index is not None, the annotation is expected to be a tuple
    and we're interested in that index
",function,"('(context, annotation, index=None)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484._evaluate_for_annotation,evaluate.pep0484,_evaluate_for_annotation,"Python Library Documentation: function _evaluate_for_annotation in module jedi.evaluate.pep0484

_evaluate_for_annotation(context, annotation, index=None)
    Evaluates a string-node, looking for an annotation
    If index is not None, the annotation is expected to be a tuple
    and we're interested in that index
",function,"('(context, annotation, index=None)',)",annotation,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484._evaluate_for_annotation,evaluate.pep0484,_evaluate_for_annotation,"Python Library Documentation: function _evaluate_for_annotation in module jedi.evaluate.pep0484

_evaluate_for_annotation(context, annotation, index=None)
    Evaluates a string-node, looking for an annotation
    If index is not None, the annotation is expected to be a tuple
    and we're interested in that index
",function,"('(context, annotation, index=None)',)",index,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.pep0484._find_type_from_comment_hint,evaluate.pep0484,_find_type_from_comment_hint,"Python Library Documentation: function _find_type_from_comment_hint in module jedi.evaluate.pep0484

_find_type_from_comment_hint(context, node, varlist, name)
",function,"('(context, node, varlist, name)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484._find_type_from_comment_hint,evaluate.pep0484,_find_type_from_comment_hint,"Python Library Documentation: function _find_type_from_comment_hint in module jedi.evaluate.pep0484

_find_type_from_comment_hint(context, node, varlist, name)
",function,"('(context, node, varlist, name)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484._find_type_from_comment_hint,evaluate.pep0484,_find_type_from_comment_hint,"Python Library Documentation: function _find_type_from_comment_hint in module jedi.evaluate.pep0484

_find_type_from_comment_hint(context, node, varlist, name)
",function,"('(context, node, varlist, name)',)",varlist,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484._find_type_from_comment_hint,evaluate.pep0484,_find_type_from_comment_hint,"Python Library Documentation: function _find_type_from_comment_hint in module jedi.evaluate.pep0484

_find_type_from_comment_hint(context, node, varlist, name)
",function,"('(context, node, varlist, name)',)",name,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484._fix_forward_reference,evaluate.pep0484,_fix_forward_reference,"Python Library Documentation: function _fix_forward_reference in module jedi.evaluate.pep0484

_fix_forward_reference(context, node)
",function,"('(context, node)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484._fix_forward_reference,evaluate.pep0484,_fix_forward_reference,"Python Library Documentation: function _fix_forward_reference in module jedi.evaluate.pep0484

_fix_forward_reference(context, node)
",function,"('(context, node)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484._get_forward_reference_node,evaluate.pep0484,_get_forward_reference_node,"Python Library Documentation: function _get_forward_reference_node in module jedi.evaluate.pep0484

_get_forward_reference_node(context, string)
",function,"('(context, string)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484._get_forward_reference_node,evaluate.pep0484,_get_forward_reference_node,"Python Library Documentation: function _get_forward_reference_node in module jedi.evaluate.pep0484

_get_forward_reference_node(context, string)
",function,"('(context, string)',)",string,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484._get_typing_replacement_module,evaluate.pep0484,_get_typing_replacement_module,"Python Library Documentation: function _get_typing_replacement_module in module jedi.evaluate.pep0484

_get_typing_replacement_module(grammar)
    The idea is to return our jedi replacement for the PEP-0484 typing module
    as discussed at https://github.com/davidhalter/jedi/issues/663
",function,"('(grammar)',)",grammar,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484._split_comment_param_declaration,evaluate.pep0484,_split_comment_param_declaration,"Python Library Documentation: function _split_comment_param_declaration in module jedi.evaluate.pep0484

_split_comment_param_declaration(decl_text)
    Split decl_text on commas, but group generic expressions
    together.
    
    For example, given ""foo, Bar[baz, biz]"" we return
    ['foo', 'Bar[baz, biz]'].
",function,"('(decl_text)',)",decl_text,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.evaluator_method_cache,evaluate.pep0484,evaluator_method_cache,"Python Library Documentation: function evaluator_method_cache in module jedi.evaluate.cache

evaluator_method_cache(default=<object object at 0x000000000520FC20>)
",function,"('(default=<object object at 0x000000000520FC20>)',)",default,<object object at 0x000000000520FC20>,object,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.find_type_from_comment_hint_assign,evaluate.pep0484,find_type_from_comment_hint_assign,"Python Library Documentation: function find_type_from_comment_hint_assign in module jedi.evaluate.pep0484

find_type_from_comment_hint_assign(context, node, name)
",function,"('(context, node, name)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.find_type_from_comment_hint_assign,evaluate.pep0484,find_type_from_comment_hint_assign,"Python Library Documentation: function find_type_from_comment_hint_assign in module jedi.evaluate.pep0484

find_type_from_comment_hint_assign(context, node, name)
",function,"('(context, node, name)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.find_type_from_comment_hint_assign,evaluate.pep0484,find_type_from_comment_hint_assign,"Python Library Documentation: function find_type_from_comment_hint_assign in module jedi.evaluate.pep0484

find_type_from_comment_hint_assign(context, node, name)
",function,"('(context, node, name)',)",name,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.find_type_from_comment_hint_for,evaluate.pep0484,find_type_from_comment_hint_for,"Python Library Documentation: function find_type_from_comment_hint_for in module jedi.evaluate.pep0484

find_type_from_comment_hint_for(context, node, name)
",function,"('(context, node, name)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.find_type_from_comment_hint_for,evaluate.pep0484,find_type_from_comment_hint_for,"Python Library Documentation: function find_type_from_comment_hint_for in module jedi.evaluate.pep0484

find_type_from_comment_hint_for(context, node, name)
",function,"('(context, node, name)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.find_type_from_comment_hint_for,evaluate.pep0484,find_type_from_comment_hint_for,"Python Library Documentation: function find_type_from_comment_hint_for in module jedi.evaluate.pep0484

find_type_from_comment_hint_for(context, node, name)
",function,"('(context, node, name)',)",name,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.find_type_from_comment_hint_with,evaluate.pep0484,find_type_from_comment_hint_with,"Python Library Documentation: function find_type_from_comment_hint_with in module jedi.evaluate.pep0484

find_type_from_comment_hint_with(context, node, name)
",function,"('(context, node, name)',)",name,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.find_type_from_comment_hint_with,evaluate.pep0484,find_type_from_comment_hint_with,"Python Library Documentation: function find_type_from_comment_hint_with in module jedi.evaluate.pep0484

find_type_from_comment_hint_with(context, node, name)
",function,"('(context, node, name)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.find_type_from_comment_hint_with,evaluate.pep0484,find_type_from_comment_hint_with,"Python Library Documentation: function find_type_from_comment_hint_with in module jedi.evaluate.pep0484

find_type_from_comment_hint_with(context, node, name)
",function,"('(context, node, name)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.force_unicode,evaluate.pep0484,force_unicode,"Python Library Documentation: function force_unicode in module jedi._compatibility

force_unicode(obj)
",function,"('(obj)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.infer_param,evaluate.pep0484,wrapper,"Python Library Documentation: function wrapper in module jedi.evaluate.cache

wrapper(obj, *args, **kwargs)
",function,"('(obj, *args, **kwargs)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.infer_return_types,evaluate.pep0484,wrapper,"Python Library Documentation: function wrapper in module jedi.evaluate.cache

wrapper(obj, *args, **kwargs)
",function,"('(obj, *args, **kwargs)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.is_string,evaluate.pep0484,is_string,"Python Library Documentation: function is_string in module jedi.evaluate.helpers

is_string(context)
",function,"('(context)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.parse,evaluate.pep0484,parse,"Python Library Documentation: function parse in module parso

parse(code=None, **kwargs)
    A utility function to avoid loading grammars.
    Params are documented in :py:meth:`parso.Grammar.parse`.
    
    :param str version: The version used by :py:func:`parso.load_grammar`.
",function,"('(code=None, **kwargs)',)",code,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.py__annotations__,evaluate.pep0484,py__annotations__,"Python Library Documentation: function py__annotations__ in module jedi.evaluate.pep0484

py__annotations__(funcdef)
",function,"('(funcdef)',)",funcdef,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.py__getitem__,evaluate.pep0484,py__getitem__,"Python Library Documentation: function py__getitem__ in module jedi.evaluate.pep0484

py__getitem__(context, typ, node)
",function,"('(context, typ, node)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.py__getitem__,evaluate.pep0484,py__getitem__,"Python Library Documentation: function py__getitem__ in module jedi.evaluate.pep0484

py__getitem__(context, typ, node)
",function,"('(context, typ, node)',)",typ,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.py__getitem__,evaluate.pep0484,py__getitem__,"Python Library Documentation: function py__getitem__ in module jedi.evaluate.pep0484

py__getitem__(context, typ, node)
",function,"('(context, typ, node)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.split_lines,evaluate.pep0484,split_lines,"Python Library Documentation: function split_lines in module parso.utils

split_lines(string, keepends=False)
    Intended for Python code. In contrast to Python's :py:meth:`str.splitlines`,
    looks at form feeds and other special characters as normal text. Just
    splits ``\n`` and ``\r\n``.
    Also different: Returns ``[""""]`` for an empty string input.
    
    In Python 2.7 form feeds are used as normal characters when using
    str.splitlines. However in Python 3 somewhere there was a decision to split
    also on form feeds.
",function,"('(string, keepends=False)',)",string,,,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.split_lines,evaluate.pep0484,split_lines,"Python Library Documentation: function split_lines in module parso.utils

split_lines(string, keepends=False)
    Intended for Python code. In contrast to Python's :py:meth:`str.splitlines`,
    looks at form feeds and other special characters as normal text. Just
    splits ``\n`` and ``\r\n``.
    Also different: Returns ``[""""]`` for an empty string input.
    
    In Python 2.7 form feeds are used as normal characters when using
    str.splitlines. However in Python 3 somewhere there was a decision to split
    also on form feeds.
",function,"('(string, keepends=False)',)",keepends,False,bool,arg_info
jedi,0.12.0,jedi.evaluate.pep0484.unicode,evaluate.pep0484,str,"Python Library Documentation: class str in module builtins

class str(object)
 |  str(object='') -> str
 |  str(bytes_or_buffer[, encoding[, errors]]) -> str
 |  
 |  Create a new string object from the given object. If encoding or
 |  errors is specified, then the object must expose a data buffer
 |  that will be decoded using the given encoding and error handler.
 |  Otherwise, returns the result of object.__str__() (if defined)
 |  or repr(object).
 |  encoding defaults to sys.getdefaultencoding().
 |  errors defaults to 'strict'.
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __format__(...)
 |      S.__format__(format_spec) -> str
 |      
 |      Return a formatted version of S as described by format_spec.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __getnewargs__(...)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  __sizeof__(...)
 |      S.__sizeof__() -> size of S in memory, in bytes
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  capitalize(...)
 |      S.capitalize() -> str
 |      
 |      Return a capitalized version of S, i.e. make the first character
 |      have upper case and the rest lower case.
 |  
 |  casefold(...)
 |      S.casefold() -> str
 |      
 |      Return a version of S suitable for caseless comparisons.
 |  
 |  center(...)
 |      S.center(width[, fillchar]) -> str
 |      
 |      Return S centered in a string of length width. Padding is
 |      done using the specified fill character (default is a space)
 |  
 |  count(...)
 |      S.count(sub[, start[, end]]) -> int
 |      
 |      Return the number of non-overlapping occurrences of substring sub in
 |      string S[start:end].  Optional arguments start and end are
 |      interpreted as in slice notation.
 |  
 |  encode(...)
 |      S.encode(encoding='utf-8', errors='strict') -> bytes
 |      
 |      Encode S using the codec registered for encoding. Default encoding
 |      is 'utf-8'. errors may be given to set a different error
 |      handling scheme. Default is 'strict' meaning that encoding errors raise
 |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
 |      'xmlcharrefreplace' as well as any other name registered with
 |      codecs.register_error that can handle UnicodeEncodeErrors.
 |  
 |  endswith(...)
 |      S.endswith(suffix[, start[, end]]) -> bool
 |      
 |      Return True if S ends with the specified suffix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      suffix can also be a tuple of strings to try.
 |  
 |  expandtabs(...)
 |      S.expandtabs(tabsize=8) -> str
 |      
 |      Return a copy of S where all tab characters are expanded using spaces.
 |      If tabsize is not given, a tab size of 8 characters is assumed.
 |  
 |  find(...)
 |      S.find(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  format(...)
 |      S.format(*args, **kwargs) -> str
 |      
 |      Return a formatted version of S, using substitutions from args and kwargs.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  format_map(...)
 |      S.format_map(mapping) -> str
 |      
 |      Return a formatted version of S, using substitutions from mapping.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  index(...)
 |      S.index(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found, 
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  isalnum(...)
 |      S.isalnum() -> bool
 |      
 |      Return True if all characters in S are alphanumeric
 |      and there is at least one character in S, False otherwise.
 |  
 |  isalpha(...)
 |      S.isalpha() -> bool
 |      
 |      Return True if all characters in S are alphabetic
 |      and there is at least one character in S, False otherwise.
 |  
 |  isdecimal(...)
 |      S.isdecimal() -> bool
 |      
 |      Return True if there are only decimal characters in S,
 |      False otherwise.
 |  
 |  isdigit(...)
 |      S.isdigit() -> bool
 |      
 |      Return True if all characters in S are digits
 |      and there is at least one character in S, False otherwise.
 |  
 |  isidentifier(...)
 |      S.isidentifier() -> bool
 |      
 |      Return True if S is a valid identifier according
 |      to the language definition.
 |      
 |      Use keyword.iskeyword() to test for reserved identifiers
 |      such as ""def"" and ""class"".
 |  
 |  islower(...)
 |      S.islower() -> bool
 |      
 |      Return True if all cased characters in S are lowercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  isnumeric(...)
 |      S.isnumeric() -> bool
 |      
 |      Return True if there are only numeric characters in S,
 |      False otherwise.
 |  
 |  isprintable(...)
 |      S.isprintable() -> bool
 |      
 |      Return True if all characters in S are considered
 |      printable in repr() or S is empty, False otherwise.
 |  
 |  isspace(...)
 |      S.isspace() -> bool
 |      
 |      Return True if all characters in S are whitespace
 |      and there is at least one character in S, False otherwise.
 |  
 |  istitle(...)
 |      S.istitle() -> bool
 |      
 |      Return True if S is a titlecased string and there is at least one
 |      character in S, i.e. upper- and titlecase characters may only
 |      follow uncased characters and lowercase characters only cased ones.
 |      Return False otherwise.
 |  
 |  isupper(...)
 |      S.isupper() -> bool
 |      
 |      Return True if all cased characters in S are uppercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  join(...)
 |      S.join(iterable) -> str
 |      
 |      Return a string which is the concatenation of the strings in the
 |      iterable.  The separator between elements is S.
 |  
 |  ljust(...)
 |      S.ljust(width[, fillchar]) -> str
 |      
 |      Return S left-justified in a Unicode string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  lower(...)
 |      S.lower() -> str
 |      
 |      Return a copy of the string S converted to lowercase.
 |  
 |  lstrip(...)
 |      S.lstrip([chars]) -> str
 |      
 |      Return a copy of the string S with leading whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  partition(...)
 |      S.partition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, and return the part before it,
 |      the separator itself, and the part after it.  If the separator is not
 |      found, return S and two empty strings.
 |  
 |  replace(...)
 |      S.replace(old, new[, count]) -> str
 |      
 |      Return a copy of S with all occurrences of substring
 |      old replaced by new.  If the optional argument count is
 |      given, only the first count occurrences are replaced.
 |  
 |  rfind(...)
 |      S.rfind(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  rindex(...)
 |      S.rindex(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  rjust(...)
 |      S.rjust(width[, fillchar]) -> str
 |      
 |      Return S right-justified in a string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  rpartition(...)
 |      S.rpartition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, starting at the end of S, and return
 |      the part before it, the separator itself, and the part after it.  If the
 |      separator is not found, return two empty strings and S.
 |  
 |  rsplit(...)
 |      S.rsplit(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string, starting at the end of the string and
 |      working to the front.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified, any whitespace string
 |      is a separator.
 |  
 |  rstrip(...)
 |      S.rstrip([chars]) -> str
 |      
 |      Return a copy of the string S with trailing whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  split(...)
 |      S.split(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified or is None, any
 |      whitespace string is a separator and empty strings are
 |      removed from the result.
 |  
 |  splitlines(...)
 |      S.splitlines([keepends]) -> list of strings
 |      
 |      Return a list of the lines in S, breaking at line boundaries.
 |      Line breaks are not included in the resulting list unless keepends
 |      is given and true.
 |  
 |  startswith(...)
 |      S.startswith(prefix[, start[, end]]) -> bool
 |      
 |      Return True if S starts with the specified prefix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      prefix can also be a tuple of strings to try.
 |  
 |  strip(...)
 |      S.strip([chars]) -> str
 |      
 |      Return a copy of the string S with leading and trailing
 |      whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  swapcase(...)
 |      S.swapcase() -> str
 |      
 |      Return a copy of S with uppercase characters converted to lowercase
 |      and vice versa.
 |  
 |  title(...)
 |      S.title() -> str
 |      
 |      Return a titlecased version of S, i.e. words start with title case
 |      characters, all remaining cased characters have lower case.
 |  
 |  translate(...)
 |      S.translate(table) -> str
 |      
 |      Return a copy of the string S in which each character has been mapped
 |      through the given translation table. The table must implement
 |      lookup/indexing via __getitem__, for instance a dictionary or list,
 |      mapping Unicode ordinals to Unicode ordinals, strings, or None. If
 |      this operation raises LookupError, the character is left untouched.
 |      Characters mapped to None are deleted.
 |  
 |  upper(...)
 |      S.upper() -> str
 |      
 |      Return a copy of S converted to uppercase.
 |  
 |  zfill(...)
 |      S.zfill(width) -> str
 |      
 |      Pad a numeric string S with zeros on the left, to fill a field
 |      of the specified width. The string S is never truncated.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  maketrans(x, y=None, z=None, /)
 |      Return a translation table usable for str.translate().
 |      
 |      If there is only one argument, it must be a dictionary mapping Unicode
 |      ordinals (integers) or characters to Unicode ordinals, strings or None.
 |      Character keys will be then converted to ordinals.
 |      If there are two arguments, they must be strings of equal length, and
 |      in the resulting dictionary, each character in x will be mapped to the
 |      character at the same position in y. If there is a third argument, it
 |      must be a string, whose characters will be mapped to None in the result.
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.python_bytes_to_unicode,evaluate,python_bytes_to_unicode,"Python Library Documentation: function python_bytes_to_unicode in module parso.utils

python_bytes_to_unicode(source, encoding='utf-8', errors='strict')
    Checks for unicode BOMs and PEP 263 encoding declarations. Then returns a
    unicode object like in :py:meth:`bytes.decode`.
    
    :param encoding: See :py:meth:`bytes.decode` documentation.
    :param errors: See :py:meth:`bytes.decode` documentation. ``errors`` can be
        ``'strict'``, ``'replace'`` or ``'ignore'``.
",function,"(""(source, encoding='utf-8', errors='strict')"",)",errors,strict,str,arg_info
jedi,0.12.0,jedi.evaluate.python_bytes_to_unicode,evaluate,python_bytes_to_unicode,"Python Library Documentation: function python_bytes_to_unicode in module parso.utils

python_bytes_to_unicode(source, encoding='utf-8', errors='strict')
    Checks for unicode BOMs and PEP 263 encoding declarations. Then returns a
    unicode object like in :py:meth:`bytes.decode`.
    
    :param encoding: See :py:meth:`bytes.decode` documentation.
    :param errors: See :py:meth:`bytes.decode` documentation. ``errors`` can be
        ``'strict'``, ``'replace'`` or ``'ignore'``.
",function,"(""(source, encoding='utf-8', errors='strict')"",)",source,,,arg_info
jedi,0.12.0,jedi.evaluate.python_bytes_to_unicode,evaluate,python_bytes_to_unicode,"Python Library Documentation: function python_bytes_to_unicode in module parso.utils

python_bytes_to_unicode(source, encoding='utf-8', errors='strict')
    Checks for unicode BOMs and PEP 263 encoding declarations. Then returns a
    unicode object like in :py:meth:`bytes.decode`.
    
    :param encoding: See :py:meth:`bytes.decode` documentation.
    :param errors: See :py:meth:`bytes.decode` documentation. ``errors`` can be
        ``'strict'``, ``'replace'`` or ``'ignore'``.
",function,"(""(source, encoding='utf-8', errors='strict')"",)",encoding,utf-8,str,arg_info
jedi,0.12.0,jedi.evaluate.recursion.ExecutionRecursionDetector,evaluate.recursion,ExecutionRecursionDetector,"Python Library Documentation: class ExecutionRecursionDetector in module jedi.evaluate.recursion

class ExecutionRecursionDetector(builtins.object)
 |  Catches recursions of executions.
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  pop_execution(self)
 |  
 |  push_execution(self, execution)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.recursion.ExecutionRecursionDetector,evaluate.recursion,ExecutionRecursionDetector,"Python Library Documentation: class ExecutionRecursionDetector in module jedi.evaluate.recursion

class ExecutionRecursionDetector(builtins.object)
 |  Catches recursions of executions.
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  pop_execution(self)
 |  
 |  push_execution(self, execution)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.recursion.RecursionDetector,evaluate.recursion,RecursionDetector,"Python Library Documentation: class RecursionDetector in module jedi.evaluate.recursion

class RecursionDetector(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.recursion.contextmanager,evaluate.recursion,contextmanager,"Python Library Documentation: function contextmanager in module contextlib

contextmanager(func)
    @contextmanager decorator.
    
    Typical usage:
    
        @contextmanager
        def some_generator(<arguments>):
            <setup>
            try:
                yield <value>
            finally:
                <cleanup>
    
    This makes this:
    
        with some_generator(<arguments>) as <variable>:
            <body>
    
    equivalent to this:
    
        <setup>
        try:
            <variable> = <value>
            <body>
        finally:
            <cleanup>
",function,"('(func)',)",func,,,arg_info
jedi,0.12.0,jedi.evaluate.recursion.execution_recursion_decorator,evaluate.recursion,execution_recursion_decorator,"Python Library Documentation: function execution_recursion_decorator in module jedi.evaluate.recursion

execution_recursion_decorator(default=ContextSet())
",function,"('(default=ContextSet())',)",default,ContextSet(),ContextSet,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.ClassContext,evaluate.syntax_tree,ClassContext,"Python Library Documentation: class ClassContext in module jedi.evaluate.context.klass

class ClassContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  This class is not only important to extend `tree.Class`, it is also a
 |  important for descriptors (if the descriptor methods are evaluated or not).
 |  
 |  Method resolution order:
 |      ClassContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, classdef)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None, is_instance=False)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  get_param_names(self)
 |  
 |  get_params(self)
 |  
 |  is_class(self)
 |  
 |  py__bases__ = wrapper(obj, *args, **kwargs)
 |  
 |  py__call__(self, params)
 |  
 |  py__class__(self)
 |  
 |  py__mro__ = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'class'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, classdef)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.ClassContext,evaluate.syntax_tree,ClassContext,"Python Library Documentation: class ClassContext in module jedi.evaluate.context.klass

class ClassContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  This class is not only important to extend `tree.Class`, it is also a
 |  important for descriptors (if the descriptor methods are evaluated or not).
 |  
 |  Method resolution order:
 |      ClassContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, classdef)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None, is_instance=False)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  get_param_names(self)
 |  
 |  get_params(self)
 |  
 |  is_class(self)
 |  
 |  py__bases__ = wrapper(obj, *args, **kwargs)
 |  
 |  py__call__(self, params)
 |  
 |  py__class__(self)
 |  
 |  py__mro__ = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'class'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, classdef)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.ClassContext,evaluate.syntax_tree,ClassContext,"Python Library Documentation: class ClassContext in module jedi.evaluate.context.klass

class ClassContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  This class is not only important to extend `tree.Class`, it is also a
 |  important for descriptors (if the descriptor methods are evaluated or not).
 |  
 |  Method resolution order:
 |      ClassContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, classdef)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None, is_instance=False)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  get_param_names(self)
 |  
 |  get_params(self)
 |  
 |  is_class(self)
 |  
 |  py__bases__ = wrapper(obj, *args, **kwargs)
 |  
 |  py__call__(self, params)
 |  
 |  py__class__(self)
 |  
 |  py__mro__ = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'class'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, classdef)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.ClassContext,evaluate.syntax_tree,ClassContext,"Python Library Documentation: class ClassContext in module jedi.evaluate.context.klass

class ClassContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  This class is not only important to extend `tree.Class`, it is also a
 |  important for descriptors (if the descriptor methods are evaluated or not).
 |  
 |  Method resolution order:
 |      ClassContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, classdef)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None, is_instance=False)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  get_param_names(self)
 |  
 |  get_params(self)
 |  
 |  is_class(self)
 |  
 |  py__bases__ = wrapper(obj, *args, **kwargs)
 |  
 |  py__call__(self, params)
 |  
 |  py__class__(self)
 |  
 |  py__mro__ = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'class'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, classdef)',)",classdef,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.CompiledInstance,evaluate.syntax_tree,CompiledInstance,"Python Library Documentation: class CompiledInstance in module jedi.evaluate.context.instance

class CompiledInstance(AbstractInstanceContext)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      CompiledInstance
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  create_instance_context(self, class_context, node)
 |  
 |  get_first_non_keyword_argument_contexts(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractInstanceContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractInstanceContext:
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractInstanceContext:
 |  
 |  api_type = 'instance'
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Instan...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.ContextSet,evaluate.syntax_tree,ContextSet,"Python Library Documentation: class ContextSet in module jedi.evaluate.base_context

class ContextSet(jedi.common.context.BaseContextSet)
 |  Method resolution order:
 |      ContextSet
 |      jedi.common.context.BaseContextSet
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContextSet:
 |  
 |  __bool__(self)
 |  
 |  __getattr__(self, name)
 |  
 |  __init__(self, *args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self)
 |  
 |  __len__(self)
 |  
 |  __or__(self, other)
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  filter(self, filter_func)
 |  
 |  ----------------------------------------------------------------------
 |  Class methods inherited from jedi.common.context.BaseContextSet:
 |  
 |  from_iterable(iterable) from builtins.type
 |  
 |  from_set(set_) from builtins.type
 |  
 |  from_sets(sets) from builtins.type
 |      Used to work with an iterable of set.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContextSet:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, *args)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.ContextSet.from_iterable,evaluate.syntax_tree.ContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",iterable,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.ContextSet.from_iterable,evaluate.syntax_tree.ContextSet,from_iterable,"Python Library Documentation: method from_iterable in module jedi.common.context

from_iterable(iterable) method of builtins.type instance
",method,"('(iterable)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.ContextSet.from_set,evaluate.syntax_tree.ContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",set_,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.ContextSet.from_set,evaluate.syntax_tree.ContextSet,from_set,"Python Library Documentation: method from_set in module jedi.common.context

from_set(set_) method of builtins.type instance
",method,"('(set_)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.ContextSet.from_sets,evaluate.syntax_tree.ContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",cls,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.ContextSet.from_sets,evaluate.syntax_tree.ContextSet,from_sets,"Python Library Documentation: method from_sets in module jedi.common.context

from_sets(sets) method of builtins.type instance
    Used to work with an iterable of set.
",method,"('(sets)',)",sets,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.ContextualizedName,evaluate.syntax_tree,ContextualizedName,"Python Library Documentation: class ContextualizedName in module jedi.evaluate.base_context

class ContextualizedName(ContextualizedNode)
 |  Method resolution order:
 |      ContextualizedName
 |      ContextualizedNode
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  assignment_indexes(self)
 |      Returns an array of tuple(int, node) of the indexes that are used in
 |      tuple assignments.
 |      
 |      For example if the name is ``y`` in the following code::
 |      
 |          x, (y, z) = 2, ''
 |      
 |      would result in ``[(1, xyz_node), (0, yz_node)]``.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ContextualizedNode:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ContextualizedNode:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.ContextualizedName,evaluate.syntax_tree,ContextualizedName,"Python Library Documentation: class ContextualizedName in module jedi.evaluate.base_context

class ContextualizedName(ContextualizedNode)
 |  Method resolution order:
 |      ContextualizedName
 |      ContextualizedNode
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  assignment_indexes(self)
 |      Returns an array of tuple(int, node) of the indexes that are used in
 |      tuple assignments.
 |      
 |      For example if the name is ``y`` in the following code::
 |      
 |          x, (y, z) = 2, ''
 |      
 |      would result in ``[(1, xyz_node), (0, yz_node)]``.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ContextualizedNode:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ContextualizedNode:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.ContextualizedName,evaluate.syntax_tree,ContextualizedName,"Python Library Documentation: class ContextualizedName in module jedi.evaluate.base_context

class ContextualizedName(ContextualizedNode)
 |  Method resolution order:
 |      ContextualizedName
 |      ContextualizedNode
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  assignment_indexes(self)
 |      Returns an array of tuple(int, node) of the indexes that are used in
 |      tuple assignments.
 |      
 |      For example if the name is ``y`` in the following code::
 |      
 |          x, (y, z) = 2, ''
 |      
 |      would result in ``[(1, xyz_node), (0, yz_node)]``.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from ContextualizedNode:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from ContextualizedNode:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.ContextualizedNode,evaluate.syntax_tree,ContextualizedNode,"Python Library Documentation: class ContextualizedNode in module jedi.evaluate.base_context

class ContextualizedNode(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.ContextualizedNode,evaluate.syntax_tree,ContextualizedNode,"Python Library Documentation: class ContextualizedNode in module jedi.evaluate.base_context

class ContextualizedNode(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.ContextualizedNode,evaluate.syntax_tree,ContextualizedNode,"Python Library Documentation: class ContextualizedNode in module jedi.evaluate.base_context

class ContextualizedNode(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.FunctionContext,evaluate.syntax_tree,FunctionContext,"Python Library Documentation: class FunctionContext in module jedi.evaluate.context.function

class FunctionContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, funcdef)
 |      This should not be called directly
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, funcdef)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.FunctionContext,evaluate.syntax_tree,FunctionContext,"Python Library Documentation: class FunctionContext in module jedi.evaluate.context.function

class FunctionContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, funcdef)
 |      This should not be called directly
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, funcdef)',)",funcdef,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.FunctionContext,evaluate.syntax_tree,FunctionContext,"Python Library Documentation: class FunctionContext in module jedi.evaluate.context.function

class FunctionContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, funcdef)
 |      This should not be called directly
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, funcdef)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.FunctionContext,evaluate.syntax_tree,FunctionContext,"Python Library Documentation: class FunctionContext in module jedi.evaluate.context.function

class FunctionContext(jedi._compatibility.Py2CompatibilityMetaClass)
 |  Needed because of decorators. Decorators are evaluated here.
 |  
 |  Method resolution order:
 |      FunctionContext
 |      jedi._compatibility.Py2CompatibilityMetaClass
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, funcdef)
 |      This should not be called directly
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  get_function_execution(self, arguments=None)
 |  
 |  get_param_names(self)
 |  
 |  infer_function_execution(self, function_execution)
 |      Created to be used by inheritance.
 |  
 |  py__call__(self, arguments)
 |  
 |  py__class__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'function'
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.TreeContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, funcdef)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.NameFinder,evaluate.syntax_tree,NameFinder,"Python Library Documentation: class NameFinder in module jedi.evaluate.finder

class NameFinder(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, name_context, name_or_str, position=None, analysis_errors=True)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  filter_name(self, filters)
 |      Searches names that are defined in a scope (the different
 |      ``filters``), until a name fits.
 |  
 |  find = wrapper(*args, **kwargs)
 |  
 |  get_filters(self, search_global=False)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, name_context, name_or_str, position=None, analysis_errors=True)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.NameFinder,evaluate.syntax_tree,NameFinder,"Python Library Documentation: class NameFinder in module jedi.evaluate.finder

class NameFinder(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, name_context, name_or_str, position=None, analysis_errors=True)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  filter_name(self, filters)
 |      Searches names that are defined in a scope (the different
 |      ``filters``), until a name fits.
 |  
 |  find = wrapper(*args, **kwargs)
 |  
 |  get_filters(self, search_global=False)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, name_context, name_or_str, position=None, analysis_errors=True)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.NameFinder,evaluate.syntax_tree,NameFinder,"Python Library Documentation: class NameFinder in module jedi.evaluate.finder

class NameFinder(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, name_context, name_or_str, position=None, analysis_errors=True)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  filter_name(self, filters)
 |      Searches names that are defined in a scope (the different
 |      ``filters``), until a name fits.
 |  
 |  find = wrapper(*args, **kwargs)
 |  
 |  get_filters(self, search_global=False)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, name_context, name_or_str, position=None, analysis_errors=True)',)",name_context,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.NameFinder,evaluate.syntax_tree,NameFinder,"Python Library Documentation: class NameFinder in module jedi.evaluate.finder

class NameFinder(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, name_context, name_or_str, position=None, analysis_errors=True)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  filter_name(self, filters)
 |      Searches names that are defined in a scope (the different
 |      ``filters``), until a name fits.
 |  
 |  find = wrapper(*args, **kwargs)
 |  
 |  get_filters(self, search_global=False)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, name_context, name_or_str, position=None, analysis_errors=True)',)",name_or_str,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.NameFinder,evaluate.syntax_tree,NameFinder,"Python Library Documentation: class NameFinder in module jedi.evaluate.finder

class NameFinder(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, name_context, name_or_str, position=None, analysis_errors=True)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  filter_name(self, filters)
 |      Searches names that are defined in a scope (the different
 |      ``filters``), until a name fits.
 |  
 |  find = wrapper(*args, **kwargs)
 |  
 |  get_filters(self, search_global=False)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, name_context, name_or_str, position=None, analysis_errors=True)',)",position,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.NameFinder,evaluate.syntax_tree,NameFinder,"Python Library Documentation: class NameFinder in module jedi.evaluate.finder

class NameFinder(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, name_context, name_or_str, position=None, analysis_errors=True)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  filter_name(self, filters)
 |      Searches names that are defined in a scope (the different
 |      ``filters``), until a name fits.
 |  
 |  find = wrapper(*args, **kwargs)
 |  
 |  get_filters(self, search_global=False)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, name_context, name_or_str, position=None, analysis_errors=True)',)",analysis_errors,True,bool,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.NameFinder,evaluate.syntax_tree,NameFinder,"Python Library Documentation: class NameFinder in module jedi.evaluate.finder

class NameFinder(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, context, name_context, name_or_str, position=None, analysis_errors=True)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  filter_name(self, filters)
 |      Searches names that are defined in a scope (the different
 |      ``filters``), until a name fits.
 |  
 |  find = wrapper(*args, **kwargs)
 |  
 |  get_filters(self, search_global=False)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, context, name_context, name_or_str, position=None, analysis_errors=True)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.TreeInstance,evaluate.syntax_tree,TreeInstance,"Python Library Documentation: class TreeInstance in module jedi.evaluate.context.instance

class TreeInstance(AbstractInstanceContext)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      TreeInstance
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractInstanceContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractInstanceContext:
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractInstanceContext:
 |  
 |  api_type = 'instance'
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Instan...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context, var_args)',)",class_context,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.TreeInstance,evaluate.syntax_tree,TreeInstance,"Python Library Documentation: class TreeInstance in module jedi.evaluate.context.instance

class TreeInstance(AbstractInstanceContext)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      TreeInstance
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractInstanceContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractInstanceContext:
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractInstanceContext:
 |  
 |  api_type = 'instance'
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Instan...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context, var_args)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.TreeInstance,evaluate.syntax_tree,TreeInstance,"Python Library Documentation: class TreeInstance in module jedi.evaluate.context.instance

class TreeInstance(AbstractInstanceContext)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      TreeInstance
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractInstanceContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractInstanceContext:
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractInstanceContext:
 |  
 |  api_type = 'instance'
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Instan...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context, var_args)',)",var_args,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.TreeInstance,evaluate.syntax_tree,TreeInstance,"Python Library Documentation: class TreeInstance in module jedi.evaluate.context.instance

class TreeInstance(AbstractInstanceContext)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      TreeInstance
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractInstanceContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractInstanceContext:
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractInstanceContext:
 |  
 |  api_type = 'instance'
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Instan...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context, var_args)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.TreeInstance,evaluate.syntax_tree,TreeInstance,"Python Library Documentation: class TreeInstance in module jedi.evaluate.context.instance

class TreeInstance(AbstractInstanceContext)
 |  This class is used to evaluate instances.
 |  
 |  Method resolution order:
 |      TreeInstance
 |      AbstractInstanceContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, parent_context, class_context, var_args)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractInstanceContext:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  create_init_executions(self)
 |  
 |  create_instance_context = wrapper(obj, *args, **kwargs)
 |  
 |  execute_function_slots(self, names, *evaluated_args)
 |  
 |  get_filters(self, search_global=None, until_position=None, origin_scope=None, include_self_names=True)
 |  
 |  get_function_slot_names(self, name)
 |  
 |  is_class(self)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__class__(self)
 |  
 |  py__get__(self, obj)
 |  
 |  py__getitem__(self, index)
 |  
 |  py__iter__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractInstanceContext:
 |  
 |  py__call__
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractInstanceContext:
 |  
 |  api_type = 'instance'
 |  
 |  function_execution_cls = <class 'jedi.evaluate.context.instance.Instan...
 |      This class is used to evaluate functions and their returns.
 |      
 |      This is the most complicated class, because it contains the logic to
 |      transfer parameters. It is even more complicated, because there may be
 |      multiple calls to functions and recursion has to be avoided. But this is
 |      responsibility of the decorators.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, parent_context, class_context, var_args)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree._apply_decorators,evaluate.syntax_tree,_apply_decorators,"Python Library Documentation: function _apply_decorators in module jedi.evaluate.syntax_tree

_apply_decorators(context, node)
    Returns the function, that should to be executed in the end.
    This is also the places where the decorators are processed.
",function,"('(context, node)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree._apply_decorators,evaluate.syntax_tree,_apply_decorators,"Python Library Documentation: function _apply_decorators in module jedi.evaluate.syntax_tree

_apply_decorators(context, node)
    Returns the function, that should to be executed in the end.
    This is also the places where the decorators are processed.
",function,"('(context, node)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree._bool_to_context,evaluate.syntax_tree,_bool_to_context,"Python Library Documentation: function _bool_to_context in module jedi.evaluate.syntax_tree

_bool_to_context(evaluator, bool_)
",function,"('(evaluator, bool_)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree._bool_to_context,evaluate.syntax_tree,_bool_to_context,"Python Library Documentation: function _bool_to_context in module jedi.evaluate.syntax_tree

_bool_to_context(evaluator, bool_)
",function,"('(evaluator, bool_)',)",bool_,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree._eval_comparison,evaluate.syntax_tree,_eval_comparison,"Python Library Documentation: function _eval_comparison in module jedi.evaluate.syntax_tree

_eval_comparison(evaluator, context, left_contexts, operator, right_contexts)
",function,"('(evaluator, context, left_contexts, operator, right_contexts)',)",right_contexts,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree._eval_comparison,evaluate.syntax_tree,_eval_comparison,"Python Library Documentation: function _eval_comparison in module jedi.evaluate.syntax_tree

_eval_comparison(evaluator, context, left_contexts, operator, right_contexts)
",function,"('(evaluator, context, left_contexts, operator, right_contexts)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree._eval_comparison,evaluate.syntax_tree,_eval_comparison,"Python Library Documentation: function _eval_comparison in module jedi.evaluate.syntax_tree

_eval_comparison(evaluator, context, left_contexts, operator, right_contexts)
",function,"('(evaluator, context, left_contexts, operator, right_contexts)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree._eval_comparison,evaluate.syntax_tree,_eval_comparison,"Python Library Documentation: function _eval_comparison in module jedi.evaluate.syntax_tree

_eval_comparison(evaluator, context, left_contexts, operator, right_contexts)
",function,"('(evaluator, context, left_contexts, operator, right_contexts)',)",operator,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree._eval_comparison,evaluate.syntax_tree,_eval_comparison,"Python Library Documentation: function _eval_comparison in module jedi.evaluate.syntax_tree

_eval_comparison(evaluator, context, left_contexts, operator, right_contexts)
",function,"('(evaluator, context, left_contexts, operator, right_contexts)',)",left_contexts,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree._eval_comparison_part,evaluate.syntax_tree,_eval_comparison_part,"Python Library Documentation: function _eval_comparison_part in module jedi.evaluate.syntax_tree

_eval_comparison_part(evaluator, context, left, operator, right)
",function,"('(evaluator, context, left, operator, right)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree._eval_comparison_part,evaluate.syntax_tree,_eval_comparison_part,"Python Library Documentation: function _eval_comparison_part in module jedi.evaluate.syntax_tree

_eval_comparison_part(evaluator, context, left, operator, right)
",function,"('(evaluator, context, left, operator, right)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree._eval_comparison_part,evaluate.syntax_tree,_eval_comparison_part,"Python Library Documentation: function _eval_comparison_part in module jedi.evaluate.syntax_tree

_eval_comparison_part(evaluator, context, left, operator, right)
",function,"('(evaluator, context, left, operator, right)',)",left,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree._eval_comparison_part,evaluate.syntax_tree,_eval_comparison_part,"Python Library Documentation: function _eval_comparison_part in module jedi.evaluate.syntax_tree

_eval_comparison_part(evaluator, context, left, operator, right)
",function,"('(evaluator, context, left, operator, right)',)",operator,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree._eval_comparison_part,evaluate.syntax_tree,_eval_comparison_part,"Python Library Documentation: function _eval_comparison_part in module jedi.evaluate.syntax_tree

_eval_comparison_part(evaluator, context, left, operator, right)
",function,"('(evaluator, context, left, operator, right)',)",right,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree._evaluate_for_annotation,evaluate.syntax_tree,_evaluate_for_annotation,"Python Library Documentation: function _evaluate_for_annotation in module jedi.evaluate.pep0484

_evaluate_for_annotation(context, annotation, index=None)
    Evaluates a string-node, looking for an annotation
    If index is not None, the annotation is expected to be a tuple
    and we're interested in that index
",function,"('(context, annotation, index=None)',)",index,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree._evaluate_for_annotation,evaluate.syntax_tree,_evaluate_for_annotation,"Python Library Documentation: function _evaluate_for_annotation in module jedi.evaluate.pep0484

_evaluate_for_annotation(context, annotation, index=None)
    Evaluates a string-node, looking for an annotation
    If index is not None, the annotation is expected to be a tuple
    and we're interested in that index
",function,"('(context, annotation, index=None)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree._evaluate_for_annotation,evaluate.syntax_tree,_evaluate_for_annotation,"Python Library Documentation: function _evaluate_for_annotation in module jedi.evaluate.pep0484

_evaluate_for_annotation(context, annotation, index=None)
    Evaluates a string-node, looking for an annotation
    If index is not None, the annotation is expected to be a tuple
    and we're interested in that index
",function,"('(context, annotation, index=None)',)",annotation,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree._is_list,evaluate.syntax_tree,_is_list,"Python Library Documentation: function _is_list in module jedi.evaluate.syntax_tree

_is_list(context)
",function,"('(context)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree._is_tuple,evaluate.syntax_tree,_is_tuple,"Python Library Documentation: function _is_tuple in module jedi.evaluate.syntax_tree

_is_tuple(context)
",function,"('(context)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree._limit_context_infers,evaluate.syntax_tree,_limit_context_infers,"Python Library Documentation: function _limit_context_infers in module jedi.evaluate.syntax_tree

_limit_context_infers(func)
    This is for now the way how we limit type inference going wild. There are
    other ways to ensure recursion limits as well. This is mostly necessary
    because of instance (self) access that can be quite tricky to limit.
    
    I'm still not sure this is the way to go, but it looks okay for now and we
    can still go anther way in the future. Tests are there. ~ dave
",function,"('(func)',)",func,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree._literals_to_types,evaluate.syntax_tree,_literals_to_types,"Python Library Documentation: function _literals_to_types in module jedi.evaluate.syntax_tree

_literals_to_types(evaluator, result)
",function,"('(evaluator, result)',)",result,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree._literals_to_types,evaluate.syntax_tree,_literals_to_types,"Python Library Documentation: function _literals_to_types in module jedi.evaluate.syntax_tree

_literals_to_types(evaluator, result)
",function,"('(evaluator, result)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree._py__stop_iteration_returns,evaluate.syntax_tree,_py__stop_iteration_returns,"Python Library Documentation: function _py__stop_iteration_returns in module jedi.evaluate.syntax_tree

_py__stop_iteration_returns(generators)
",function,"('(generators)',)",generators,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree._remove_statements,evaluate.syntax_tree,_remove_statements,"Python Library Documentation: function _remove_statements in module jedi.evaluate.syntax_tree

_remove_statements(evaluator, context, stmt, name)
    This is the part where statements are being stripped.
    
    Due to lazy evaluation, statements like a = func; b = a; b() have to be
    evaluated.
",function,"('(evaluator, context, stmt, name)',)",stmt,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree._remove_statements,evaluate.syntax_tree,_remove_statements,"Python Library Documentation: function _remove_statements in module jedi.evaluate.syntax_tree

_remove_statements(evaluator, context, stmt, name)
    This is the part where statements are being stripped.
    
    Due to lazy evaluation, statements like a = func; b = a; b() have to be
    evaluated.
",function,"('(evaluator, context, stmt, name)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree._remove_statements,evaluate.syntax_tree,_remove_statements,"Python Library Documentation: function _remove_statements in module jedi.evaluate.syntax_tree

_remove_statements(evaluator, context, stmt, name)
    This is the part where statements are being stripped.
    
    Due to lazy evaluation, statements like a = func; b = a; b() have to be
    evaluated.
",function,"('(evaluator, context, stmt, name)',)",name,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree._remove_statements,evaluate.syntax_tree,_remove_statements,"Python Library Documentation: function _remove_statements in module jedi.evaluate.syntax_tree

_remove_statements(evaluator, context, stmt, name)
    This is the part where statements are being stripped.
    
    Due to lazy evaluation, statements like a = func; b = a; b() have to be
    evaluated.
",function,"('(evaluator, context, stmt, name)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.check_tuple_assignments,evaluate.syntax_tree,check_tuple_assignments,"Python Library Documentation: function check_tuple_assignments in module jedi.evaluate.syntax_tree

check_tuple_assignments(evaluator, contextualized_name, context_set)
    Checks if tuples are assigned.
",function,"('(evaluator, contextualized_name, context_set)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.check_tuple_assignments,evaluate.syntax_tree,check_tuple_assignments,"Python Library Documentation: function check_tuple_assignments in module jedi.evaluate.syntax_tree

check_tuple_assignments(evaluator, contextualized_name, context_set)
    Checks if tuples are assigned.
",function,"('(evaluator, contextualized_name, context_set)',)",contextualized_name,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.check_tuple_assignments,evaluate.syntax_tree,check_tuple_assignments,"Python Library Documentation: function check_tuple_assignments in module jedi.evaluate.syntax_tree

check_tuple_assignments(evaluator, contextualized_name, context_set)
    Checks if tuples are assigned.
",function,"('(evaluator, contextualized_name, context_set)',)",context_set,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.eval_atom,evaluate.syntax_tree,eval_atom,"Python Library Documentation: function eval_atom in module jedi.evaluate.syntax_tree

eval_atom(context, atom)
    Basically to process ``atom`` nodes. The parser sometimes doesn't
    generate the node (because it has just one child). In that case an atom
    might be a name or a literal as well.
",function,"('(context, atom)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.eval_atom,evaluate.syntax_tree,eval_atom,"Python Library Documentation: function eval_atom in module jedi.evaluate.syntax_tree

eval_atom(context, atom)
    Basically to process ``atom`` nodes. The parser sometimes doesn't
    generate the node (because it has just one child). In that case an atom
    might be a name or a literal as well.
",function,"('(context, atom)',)",atom,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.eval_expr_stmt,evaluate.syntax_tree,wrapper,"Python Library Documentation: function wrapper in module jedi.evaluate.syntax_tree

wrapper(context, *args, **kwargs)
",function,"('(context, *args, **kwargs)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.eval_or_test,evaluate.syntax_tree,eval_or_test,"Python Library Documentation: function eval_or_test in module jedi.evaluate.syntax_tree

eval_or_test(context, or_test)
",function,"('(context, or_test)',)",or_test,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.eval_or_test,evaluate.syntax_tree,eval_or_test,"Python Library Documentation: function eval_or_test in module jedi.evaluate.syntax_tree

eval_or_test(context, or_test)
",function,"('(context, or_test)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.eval_subscript_list,evaluate.syntax_tree,eval_subscript_list,"Python Library Documentation: function eval_subscript_list in module jedi.evaluate.syntax_tree

eval_subscript_list(evaluator, context, index)
    Handles slices in subscript nodes.
",function,"('(evaluator, context, index)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.eval_subscript_list,evaluate.syntax_tree,eval_subscript_list,"Python Library Documentation: function eval_subscript_list in module jedi.evaluate.syntax_tree

eval_subscript_list(evaluator, context, index)
    Handles slices in subscript nodes.
",function,"('(evaluator, context, index)',)",index,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.eval_subscript_list,evaluate.syntax_tree,eval_subscript_list,"Python Library Documentation: function eval_subscript_list in module jedi.evaluate.syntax_tree

eval_subscript_list(evaluator, context, index)
    Handles slices in subscript nodes.
",function,"('(evaluator, context, index)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.eval_trailer,evaluate.syntax_tree,eval_trailer,"Python Library Documentation: function eval_trailer in module jedi.evaluate.syntax_tree

eval_trailer(context, base_contexts, trailer)
",function,"('(context, base_contexts, trailer)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.eval_trailer,evaluate.syntax_tree,eval_trailer,"Python Library Documentation: function eval_trailer in module jedi.evaluate.syntax_tree

eval_trailer(context, base_contexts, trailer)
",function,"('(context, base_contexts, trailer)',)",trailer,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.eval_trailer,evaluate.syntax_tree,eval_trailer,"Python Library Documentation: function eval_trailer in module jedi.evaluate.syntax_tree

eval_trailer(context, base_contexts, trailer)
",function,"('(context, base_contexts, trailer)',)",base_contexts,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.force_unicode,evaluate.syntax_tree,force_unicode,"Python Library Documentation: function force_unicode in module jedi._compatibility

force_unicode(obj)
",function,"('(obj)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.is_compiled,evaluate.syntax_tree,is_compiled,"Python Library Documentation: function is_compiled in module jedi.evaluate.helpers

is_compiled(context)
",function,"('(context)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.is_literal,evaluate.syntax_tree,is_literal,"Python Library Documentation: function is_literal in module jedi.evaluate.helpers

is_literal(context)
",function,"('(context)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.is_number,evaluate.syntax_tree,is_number,"Python Library Documentation: function is_number in module jedi.evaluate.helpers

is_number(context)
",function,"('(context)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.is_string,evaluate.syntax_tree,is_string,"Python Library Documentation: function is_string in module jedi.evaluate.helpers

is_string(context)
",function,"('(context)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.iterate_contexts,evaluate.syntax_tree,iterate_contexts,"Python Library Documentation: function iterate_contexts in module jedi.evaluate.base_context

iterate_contexts(contexts, contextualized_node=None, is_async=False)
    Calls `iterate`, on all contexts but ignores the ordering and just returns
    all contexts that the iterate functions yield.
",function,"('(contexts, contextualized_node=None, is_async=False)',)",is_async,False,bool,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.iterate_contexts,evaluate.syntax_tree,iterate_contexts,"Python Library Documentation: function iterate_contexts in module jedi.evaluate.base_context

iterate_contexts(contexts, contextualized_node=None, is_async=False)
    Calls `iterate`, on all contexts but ignores the ordering and just returns
    all contexts that the iterate functions yield.
",function,"('(contexts, contextualized_node=None, is_async=False)',)",contextualized_node,,NoneType,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.iterate_contexts,evaluate.syntax_tree,iterate_contexts,"Python Library Documentation: function iterate_contexts in module jedi.evaluate.base_context

iterate_contexts(contexts, contextualized_node=None, is_async=False)
    Calls `iterate`, on all contexts but ignores the ordering and just returns
    all contexts that the iterate functions yield.
",function,"('(contexts, contextualized_node=None, is_async=False)',)",contexts,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.iterator_to_context_set,evaluate.syntax_tree,iterator_to_context_set,"Python Library Documentation: function iterator_to_context_set in module jedi.evaluate.base_context

iterator_to_context_set(func)
",function,"('(func)',)",func,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.tree_name_to_contexts,evaluate.syntax_tree,tree_name_to_contexts,"Python Library Documentation: function tree_name_to_contexts in module jedi.evaluate.syntax_tree

tree_name_to_contexts(evaluator, context, tree_name)
",function,"('(evaluator, context, tree_name)',)",tree_name,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.tree_name_to_contexts,evaluate.syntax_tree,tree_name_to_contexts,"Python Library Documentation: function tree_name_to_contexts in module jedi.evaluate.syntax_tree

tree_name_to_contexts(evaluator, context, tree_name)
",function,"('(evaluator, context, tree_name)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.tree_name_to_contexts,evaluate.syntax_tree,tree_name_to_contexts,"Python Library Documentation: function tree_name_to_contexts in module jedi.evaluate.syntax_tree

tree_name_to_contexts(evaluator, context, tree_name)
",function,"('(evaluator, context, tree_name)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.syntax_tree.unicode,evaluate.syntax_tree,str,"Python Library Documentation: class str in module builtins

class str(object)
 |  str(object='') -> str
 |  str(bytes_or_buffer[, encoding[, errors]]) -> str
 |  
 |  Create a new string object from the given object. If encoding or
 |  errors is specified, then the object must expose a data buffer
 |  that will be decoded using the given encoding and error handler.
 |  Otherwise, returns the result of object.__str__() (if defined)
 |  or repr(object).
 |  encoding defaults to sys.getdefaultencoding().
 |  errors defaults to 'strict'.
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __format__(...)
 |      S.__format__(format_spec) -> str
 |      
 |      Return a formatted version of S as described by format_spec.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __getnewargs__(...)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  __sizeof__(...)
 |      S.__sizeof__() -> size of S in memory, in bytes
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  capitalize(...)
 |      S.capitalize() -> str
 |      
 |      Return a capitalized version of S, i.e. make the first character
 |      have upper case and the rest lower case.
 |  
 |  casefold(...)
 |      S.casefold() -> str
 |      
 |      Return a version of S suitable for caseless comparisons.
 |  
 |  center(...)
 |      S.center(width[, fillchar]) -> str
 |      
 |      Return S centered in a string of length width. Padding is
 |      done using the specified fill character (default is a space)
 |  
 |  count(...)
 |      S.count(sub[, start[, end]]) -> int
 |      
 |      Return the number of non-overlapping occurrences of substring sub in
 |      string S[start:end].  Optional arguments start and end are
 |      interpreted as in slice notation.
 |  
 |  encode(...)
 |      S.encode(encoding='utf-8', errors='strict') -> bytes
 |      
 |      Encode S using the codec registered for encoding. Default encoding
 |      is 'utf-8'. errors may be given to set a different error
 |      handling scheme. Default is 'strict' meaning that encoding errors raise
 |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
 |      'xmlcharrefreplace' as well as any other name registered with
 |      codecs.register_error that can handle UnicodeEncodeErrors.
 |  
 |  endswith(...)
 |      S.endswith(suffix[, start[, end]]) -> bool
 |      
 |      Return True if S ends with the specified suffix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      suffix can also be a tuple of strings to try.
 |  
 |  expandtabs(...)
 |      S.expandtabs(tabsize=8) -> str
 |      
 |      Return a copy of S where all tab characters are expanded using spaces.
 |      If tabsize is not given, a tab size of 8 characters is assumed.
 |  
 |  find(...)
 |      S.find(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  format(...)
 |      S.format(*args, **kwargs) -> str
 |      
 |      Return a formatted version of S, using substitutions from args and kwargs.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  format_map(...)
 |      S.format_map(mapping) -> str
 |      
 |      Return a formatted version of S, using substitutions from mapping.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  index(...)
 |      S.index(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found, 
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  isalnum(...)
 |      S.isalnum() -> bool
 |      
 |      Return True if all characters in S are alphanumeric
 |      and there is at least one character in S, False otherwise.
 |  
 |  isalpha(...)
 |      S.isalpha() -> bool
 |      
 |      Return True if all characters in S are alphabetic
 |      and there is at least one character in S, False otherwise.
 |  
 |  isdecimal(...)
 |      S.isdecimal() -> bool
 |      
 |      Return True if there are only decimal characters in S,
 |      False otherwise.
 |  
 |  isdigit(...)
 |      S.isdigit() -> bool
 |      
 |      Return True if all characters in S are digits
 |      and there is at least one character in S, False otherwise.
 |  
 |  isidentifier(...)
 |      S.isidentifier() -> bool
 |      
 |      Return True if S is a valid identifier according
 |      to the language definition.
 |      
 |      Use keyword.iskeyword() to test for reserved identifiers
 |      such as ""def"" and ""class"".
 |  
 |  islower(...)
 |      S.islower() -> bool
 |      
 |      Return True if all cased characters in S are lowercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  isnumeric(...)
 |      S.isnumeric() -> bool
 |      
 |      Return True if there are only numeric characters in S,
 |      False otherwise.
 |  
 |  isprintable(...)
 |      S.isprintable() -> bool
 |      
 |      Return True if all characters in S are considered
 |      printable in repr() or S is empty, False otherwise.
 |  
 |  isspace(...)
 |      S.isspace() -> bool
 |      
 |      Return True if all characters in S are whitespace
 |      and there is at least one character in S, False otherwise.
 |  
 |  istitle(...)
 |      S.istitle() -> bool
 |      
 |      Return True if S is a titlecased string and there is at least one
 |      character in S, i.e. upper- and titlecase characters may only
 |      follow uncased characters and lowercase characters only cased ones.
 |      Return False otherwise.
 |  
 |  isupper(...)
 |      S.isupper() -> bool
 |      
 |      Return True if all cased characters in S are uppercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  join(...)
 |      S.join(iterable) -> str
 |      
 |      Return a string which is the concatenation of the strings in the
 |      iterable.  The separator between elements is S.
 |  
 |  ljust(...)
 |      S.ljust(width[, fillchar]) -> str
 |      
 |      Return S left-justified in a Unicode string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  lower(...)
 |      S.lower() -> str
 |      
 |      Return a copy of the string S converted to lowercase.
 |  
 |  lstrip(...)
 |      S.lstrip([chars]) -> str
 |      
 |      Return a copy of the string S with leading whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  partition(...)
 |      S.partition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, and return the part before it,
 |      the separator itself, and the part after it.  If the separator is not
 |      found, return S and two empty strings.
 |  
 |  replace(...)
 |      S.replace(old, new[, count]) -> str
 |      
 |      Return a copy of S with all occurrences of substring
 |      old replaced by new.  If the optional argument count is
 |      given, only the first count occurrences are replaced.
 |  
 |  rfind(...)
 |      S.rfind(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  rindex(...)
 |      S.rindex(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  rjust(...)
 |      S.rjust(width[, fillchar]) -> str
 |      
 |      Return S right-justified in a string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  rpartition(...)
 |      S.rpartition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, starting at the end of S, and return
 |      the part before it, the separator itself, and the part after it.  If the
 |      separator is not found, return two empty strings and S.
 |  
 |  rsplit(...)
 |      S.rsplit(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string, starting at the end of the string and
 |      working to the front.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified, any whitespace string
 |      is a separator.
 |  
 |  rstrip(...)
 |      S.rstrip([chars]) -> str
 |      
 |      Return a copy of the string S with trailing whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  split(...)
 |      S.split(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified or is None, any
 |      whitespace string is a separator and empty strings are
 |      removed from the result.
 |  
 |  splitlines(...)
 |      S.splitlines([keepends]) -> list of strings
 |      
 |      Return a list of the lines in S, breaking at line boundaries.
 |      Line breaks are not included in the resulting list unless keepends
 |      is given and true.
 |  
 |  startswith(...)
 |      S.startswith(prefix[, start[, end]]) -> bool
 |      
 |      Return True if S starts with the specified prefix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      prefix can also be a tuple of strings to try.
 |  
 |  strip(...)
 |      S.strip([chars]) -> str
 |      
 |      Return a copy of the string S with leading and trailing
 |      whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  swapcase(...)
 |      S.swapcase() -> str
 |      
 |      Return a copy of S with uppercase characters converted to lowercase
 |      and vice versa.
 |  
 |  title(...)
 |      S.title() -> str
 |      
 |      Return a titlecased version of S, i.e. words start with title case
 |      characters, all remaining cased characters have lower case.
 |  
 |  translate(...)
 |      S.translate(table) -> str
 |      
 |      Return a copy of the string S in which each character has been mapped
 |      through the given translation table. The table must implement
 |      lookup/indexing via __getitem__, for instance a dictionary or list,
 |      mapping Unicode ordinals to Unicode ordinals, strings, or None. If
 |      this operation raises LookupError, the character is left untouched.
 |      Characters mapped to None are deleted.
 |  
 |  upper(...)
 |      S.upper() -> str
 |      
 |      Return a copy of S converted to uppercase.
 |  
 |  zfill(...)
 |      S.zfill(width) -> str
 |      
 |      Pad a numeric string S with zeros on the left, to fill a field
 |      of the specified width. The string S is never truncated.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  maketrans(x, y=None, z=None, /)
 |      Return a translation table usable for str.translate().
 |      
 |      If there is only one argument, it must be a dictionary mapping Unicode
 |      ordinals (integers) or characters to Unicode ordinals, strings or None.
 |      Character keys will be then converted to ordinals.
 |      If there are two arguments, they must be strings of equal length, and
 |      in the resulting dictionary, each character in x will be mapped to the
 |      character at the same position in y. If there is a third argument, it
 |      must be a string, whose characters will be mapped to None in the result.
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.sys_path.ContextualizedNode,evaluate.sys_path,ContextualizedNode,"Python Library Documentation: class ContextualizedNode in module jedi.evaluate.base_context

class ContextualizedNode(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",node,,,arg_info
jedi,0.12.0,jedi.evaluate.sys_path.ContextualizedNode,evaluate.sys_path,ContextualizedNode,"Python Library Documentation: class ContextualizedNode in module jedi.evaluate.base_context

class ContextualizedNode(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.sys_path.ContextualizedNode,evaluate.sys_path,ContextualizedNode,"Python Library Documentation: class ContextualizedNode in module jedi.evaluate.base_context

class ContextualizedNode(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, context, node)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  get_root_context(self)
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, context, node)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.sys_path._abs_path,evaluate.sys_path,_abs_path,"Python Library Documentation: function _abs_path in module jedi.evaluate.sys_path

_abs_path(module_context, path)
",function,"('(module_context, path)',)",path,,,arg_info
jedi,0.12.0,jedi.evaluate.sys_path._abs_path,evaluate.sys_path,_abs_path,"Python Library Documentation: function _abs_path in module jedi.evaluate.sys_path

_abs_path(module_context, path)
",function,"('(module_context, path)',)",module_context,,,arg_info
jedi,0.12.0,jedi.evaluate.sys_path._get_buildout_script_paths,evaluate.sys_path,_get_buildout_script_paths,"Python Library Documentation: function _get_buildout_script_paths in module jedi.evaluate.sys_path

_get_buildout_script_paths(search_path)
    if there is a 'buildout.cfg' file in one of the parent directories of the
    given module it will return a list of all files in the buildout bin
    directory that look like python files.
    
    :param search_path: absolute path to the module.
    :type search_path: str
",function,"('(search_path)',)",search_path,,,arg_info
jedi,0.12.0,jedi.evaluate.sys_path._get_parent_dir_with_file,evaluate.sys_path,_get_parent_dir_with_file,"Python Library Documentation: function _get_parent_dir_with_file in module jedi.evaluate.sys_path

_get_parent_dir_with_file(path, filename)
",function,"('(path, filename)',)",filename,,,arg_info
jedi,0.12.0,jedi.evaluate.sys_path._get_parent_dir_with_file,evaluate.sys_path,_get_parent_dir_with_file,"Python Library Documentation: function _get_parent_dir_with_file in module jedi.evaluate.sys_path

_get_parent_dir_with_file(path, filename)
",function,"('(path, filename)',)",path,,,arg_info
jedi,0.12.0,jedi.evaluate.sys_path._get_paths_from_buildout_script,evaluate.sys_path,_get_paths_from_buildout_script,"Python Library Documentation: function _get_paths_from_buildout_script in module jedi.evaluate.sys_path

_get_paths_from_buildout_script(evaluator, buildout_script_path)
",function,"('(evaluator, buildout_script_path)',)",buildout_script_path,,,arg_info
jedi,0.12.0,jedi.evaluate.sys_path._get_paths_from_buildout_script,evaluate.sys_path,_get_paths_from_buildout_script,"Python Library Documentation: function _get_paths_from_buildout_script in module jedi.evaluate.sys_path

_get_paths_from_buildout_script(evaluator, buildout_script_path)
",function,"('(evaluator, buildout_script_path)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.sys_path._paths_from_assignment,evaluate.sys_path,_paths_from_assignment,"Python Library Documentation: function _paths_from_assignment in module jedi.evaluate.sys_path

_paths_from_assignment(module_context, expr_stmt)
    Extracts the assigned strings from an assignment that looks as follows::
    
        sys.path[0:0] = ['module/path', 'another/module/path']
    
    This function is in general pretty tolerant (and therefore 'buggy').
    However, it's not a big issue usually to add more paths to Jedi's sys_path,
    because it will only affect Jedi in very random situations and by adding
    more paths than necessary, it usually benefits the general user.
",function,"('(module_context, expr_stmt)',)",expr_stmt,,,arg_info
jedi,0.12.0,jedi.evaluate.sys_path._paths_from_assignment,evaluate.sys_path,_paths_from_assignment,"Python Library Documentation: function _paths_from_assignment in module jedi.evaluate.sys_path

_paths_from_assignment(module_context, expr_stmt)
    Extracts the assigned strings from an assignment that looks as follows::
    
        sys.path[0:0] = ['module/path', 'another/module/path']
    
    This function is in general pretty tolerant (and therefore 'buggy').
    However, it's not a big issue usually to add more paths to Jedi's sys_path,
    because it will only affect Jedi in very random situations and by adding
    more paths than necessary, it usually benefits the general user.
",function,"('(module_context, expr_stmt)',)",module_context,,,arg_info
jedi,0.12.0,jedi.evaluate.sys_path._paths_from_list_modifications,evaluate.sys_path,_paths_from_list_modifications,"Python Library Documentation: function _paths_from_list_modifications in module jedi.evaluate.sys_path

_paths_from_list_modifications(module_context, trailer1, trailer2)
    extract the path from either ""sys.path.append"" or ""sys.path.insert""
",function,"('(module_context, trailer1, trailer2)',)",module_context,,,arg_info
jedi,0.12.0,jedi.evaluate.sys_path._paths_from_list_modifications,evaluate.sys_path,_paths_from_list_modifications,"Python Library Documentation: function _paths_from_list_modifications in module jedi.evaluate.sys_path

_paths_from_list_modifications(module_context, trailer1, trailer2)
    extract the path from either ""sys.path.append"" or ""sys.path.insert""
",function,"('(module_context, trailer1, trailer2)',)",trailer1,,,arg_info
jedi,0.12.0,jedi.evaluate.sys_path._paths_from_list_modifications,evaluate.sys_path,_paths_from_list_modifications,"Python Library Documentation: function _paths_from_list_modifications in module jedi.evaluate.sys_path

_paths_from_list_modifications(module_context, trailer1, trailer2)
    extract the path from either ""sys.path.append"" or ""sys.path.insert""
",function,"('(module_context, trailer1, trailer2)',)",trailer2,,,arg_info
jedi,0.12.0,jedi.evaluate.sys_path.check_sys_path_modifications,evaluate.sys_path,wrapper,"Python Library Documentation: function wrapper in module jedi.evaluate.cache

wrapper(obj, *args, **kwargs)
",function,"('(obj, *args, **kwargs)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.sys_path.discover_buildout_paths,evaluate.sys_path,discover_buildout_paths,"Python Library Documentation: function discover_buildout_paths in module jedi.evaluate.sys_path

discover_buildout_paths(evaluator, script_path)
",function,"('(evaluator, script_path)',)",script_path,,,arg_info
jedi,0.12.0,jedi.evaluate.sys_path.discover_buildout_paths,evaluate.sys_path,discover_buildout_paths,"Python Library Documentation: function discover_buildout_paths in module jedi.evaluate.sys_path

discover_buildout_paths(evaluator, script_path)
",function,"('(evaluator, script_path)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.sys_path.dotted_path_in_sys_path,evaluate.sys_path,dotted_path_in_sys_path,"Python Library Documentation: function dotted_path_in_sys_path in module jedi.evaluate.sys_path

dotted_path_in_sys_path(sys_path, module_path)
    Returns the dotted path inside a sys.path.
",function,"('(sys_path, module_path)',)",module_path,,,arg_info
jedi,0.12.0,jedi.evaluate.sys_path.dotted_path_in_sys_path,evaluate.sys_path,dotted_path_in_sys_path,"Python Library Documentation: function dotted_path_in_sys_path in module jedi.evaluate.sys_path

dotted_path_in_sys_path(sys_path, module_path)
    Returns the dotted path inside a sys.path.
",function,"('(sys_path, module_path)',)",sys_path,,,arg_info
jedi,0.12.0,jedi.evaluate.sys_path.evaluator_method_cache,evaluate.sys_path,evaluator_method_cache,"Python Library Documentation: function evaluator_method_cache in module jedi.evaluate.cache

evaluator_method_cache(default=<object object at 0x000000000520FC20>)
",function,"('(default=<object object at 0x000000000520FC20>)',)",default,<object object at 0x000000000520FC20>,object,arg_info
jedi,0.12.0,jedi.evaluate.sys_path.force_unicode,evaluate.sys_path,force_unicode,"Python Library Documentation: function force_unicode in module jedi._compatibility

force_unicode(obj)
",function,"('(obj)',)",obj,,,arg_info
jedi,0.12.0,jedi.evaluate.sys_path.get_cached_code_lines,evaluate.sys_path,get_cached_code_lines,"Python Library Documentation: function get_cached_code_lines in module jedi.parser_utils

get_cached_code_lines(grammar, path)
    Basically access the cached code lines in parso. This is not the nicest way
    to do this, but we avoid splitting all the lines again.
",function,"('(grammar, path)',)",grammar,,,arg_info
jedi,0.12.0,jedi.evaluate.sys_path.get_cached_code_lines,evaluate.sys_path,get_cached_code_lines,"Python Library Documentation: function get_cached_code_lines in module jedi.parser_utils

get_cached_code_lines(grammar, path)
    Basically access the cached code lines in parso. This is not the nicest way
    to do this, but we avoid splitting all the lines again.
",function,"('(grammar, path)',)",path,,,arg_info
jedi,0.12.0,jedi.evaluate.sys_path.is_string,evaluate.sys_path,is_string,"Python Library Documentation: function is_string in module jedi.evaluate.helpers

is_string(context)
",function,"('(context)',)",context,,,arg_info
jedi,0.12.0,jedi.evaluate.sys_path.traverse_parents,evaluate.sys_path,traverse_parents,"Python Library Documentation: function traverse_parents in module jedi.common.utils

traverse_parents(path, include_current=False)
",function,"('(path, include_current=False)',)",include_current,False,bool,arg_info
jedi,0.12.0,jedi.evaluate.sys_path.traverse_parents,evaluate.sys_path,traverse_parents,"Python Library Documentation: function traverse_parents in module jedi.common.utils

traverse_parents(path, include_current=False)
",function,"('(path, include_current=False)',)",path,,,arg_info
jedi,0.12.0,jedi.evaluate.sys_path.unicode,evaluate.sys_path,str,"Python Library Documentation: class str in module builtins

class str(object)
 |  str(object='') -> str
 |  str(bytes_or_buffer[, encoding[, errors]]) -> str
 |  
 |  Create a new string object from the given object. If encoding or
 |  errors is specified, then the object must expose a data buffer
 |  that will be decoded using the given encoding and error handler.
 |  Otherwise, returns the result of object.__str__() (if defined)
 |  or repr(object).
 |  encoding defaults to sys.getdefaultencoding().
 |  errors defaults to 'strict'.
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __format__(...)
 |      S.__format__(format_spec) -> str
 |      
 |      Return a formatted version of S as described by format_spec.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __getnewargs__(...)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  __sizeof__(...)
 |      S.__sizeof__() -> size of S in memory, in bytes
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  capitalize(...)
 |      S.capitalize() -> str
 |      
 |      Return a capitalized version of S, i.e. make the first character
 |      have upper case and the rest lower case.
 |  
 |  casefold(...)
 |      S.casefold() -> str
 |      
 |      Return a version of S suitable for caseless comparisons.
 |  
 |  center(...)
 |      S.center(width[, fillchar]) -> str
 |      
 |      Return S centered in a string of length width. Padding is
 |      done using the specified fill character (default is a space)
 |  
 |  count(...)
 |      S.count(sub[, start[, end]]) -> int
 |      
 |      Return the number of non-overlapping occurrences of substring sub in
 |      string S[start:end].  Optional arguments start and end are
 |      interpreted as in slice notation.
 |  
 |  encode(...)
 |      S.encode(encoding='utf-8', errors='strict') -> bytes
 |      
 |      Encode S using the codec registered for encoding. Default encoding
 |      is 'utf-8'. errors may be given to set a different error
 |      handling scheme. Default is 'strict' meaning that encoding errors raise
 |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
 |      'xmlcharrefreplace' as well as any other name registered with
 |      codecs.register_error that can handle UnicodeEncodeErrors.
 |  
 |  endswith(...)
 |      S.endswith(suffix[, start[, end]]) -> bool
 |      
 |      Return True if S ends with the specified suffix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      suffix can also be a tuple of strings to try.
 |  
 |  expandtabs(...)
 |      S.expandtabs(tabsize=8) -> str
 |      
 |      Return a copy of S where all tab characters are expanded using spaces.
 |      If tabsize is not given, a tab size of 8 characters is assumed.
 |  
 |  find(...)
 |      S.find(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  format(...)
 |      S.format(*args, **kwargs) -> str
 |      
 |      Return a formatted version of S, using substitutions from args and kwargs.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  format_map(...)
 |      S.format_map(mapping) -> str
 |      
 |      Return a formatted version of S, using substitutions from mapping.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  index(...)
 |      S.index(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found, 
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  isalnum(...)
 |      S.isalnum() -> bool
 |      
 |      Return True if all characters in S are alphanumeric
 |      and there is at least one character in S, False otherwise.
 |  
 |  isalpha(...)
 |      S.isalpha() -> bool
 |      
 |      Return True if all characters in S are alphabetic
 |      and there is at least one character in S, False otherwise.
 |  
 |  isdecimal(...)
 |      S.isdecimal() -> bool
 |      
 |      Return True if there are only decimal characters in S,
 |      False otherwise.
 |  
 |  isdigit(...)
 |      S.isdigit() -> bool
 |      
 |      Return True if all characters in S are digits
 |      and there is at least one character in S, False otherwise.
 |  
 |  isidentifier(...)
 |      S.isidentifier() -> bool
 |      
 |      Return True if S is a valid identifier according
 |      to the language definition.
 |      
 |      Use keyword.iskeyword() to test for reserved identifiers
 |      such as ""def"" and ""class"".
 |  
 |  islower(...)
 |      S.islower() -> bool
 |      
 |      Return True if all cased characters in S are lowercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  isnumeric(...)
 |      S.isnumeric() -> bool
 |      
 |      Return True if there are only numeric characters in S,
 |      False otherwise.
 |  
 |  isprintable(...)
 |      S.isprintable() -> bool
 |      
 |      Return True if all characters in S are considered
 |      printable in repr() or S is empty, False otherwise.
 |  
 |  isspace(...)
 |      S.isspace() -> bool
 |      
 |      Return True if all characters in S are whitespace
 |      and there is at least one character in S, False otherwise.
 |  
 |  istitle(...)
 |      S.istitle() -> bool
 |      
 |      Return True if S is a titlecased string and there is at least one
 |      character in S, i.e. upper- and titlecase characters may only
 |      follow uncased characters and lowercase characters only cased ones.
 |      Return False otherwise.
 |  
 |  isupper(...)
 |      S.isupper() -> bool
 |      
 |      Return True if all cased characters in S are uppercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  join(...)
 |      S.join(iterable) -> str
 |      
 |      Return a string which is the concatenation of the strings in the
 |      iterable.  The separator between elements is S.
 |  
 |  ljust(...)
 |      S.ljust(width[, fillchar]) -> str
 |      
 |      Return S left-justified in a Unicode string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  lower(...)
 |      S.lower() -> str
 |      
 |      Return a copy of the string S converted to lowercase.
 |  
 |  lstrip(...)
 |      S.lstrip([chars]) -> str
 |      
 |      Return a copy of the string S with leading whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  partition(...)
 |      S.partition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, and return the part before it,
 |      the separator itself, and the part after it.  If the separator is not
 |      found, return S and two empty strings.
 |  
 |  replace(...)
 |      S.replace(old, new[, count]) -> str
 |      
 |      Return a copy of S with all occurrences of substring
 |      old replaced by new.  If the optional argument count is
 |      given, only the first count occurrences are replaced.
 |  
 |  rfind(...)
 |      S.rfind(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  rindex(...)
 |      S.rindex(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  rjust(...)
 |      S.rjust(width[, fillchar]) -> str
 |      
 |      Return S right-justified in a string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  rpartition(...)
 |      S.rpartition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, starting at the end of S, and return
 |      the part before it, the separator itself, and the part after it.  If the
 |      separator is not found, return two empty strings and S.
 |  
 |  rsplit(...)
 |      S.rsplit(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string, starting at the end of the string and
 |      working to the front.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified, any whitespace string
 |      is a separator.
 |  
 |  rstrip(...)
 |      S.rstrip([chars]) -> str
 |      
 |      Return a copy of the string S with trailing whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  split(...)
 |      S.split(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified or is None, any
 |      whitespace string is a separator and empty strings are
 |      removed from the result.
 |  
 |  splitlines(...)
 |      S.splitlines([keepends]) -> list of strings
 |      
 |      Return a list of the lines in S, breaking at line boundaries.
 |      Line breaks are not included in the resulting list unless keepends
 |      is given and true.
 |  
 |  startswith(...)
 |      S.startswith(prefix[, start[, end]]) -> bool
 |      
 |      Return True if S starts with the specified prefix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      prefix can also be a tuple of strings to try.
 |  
 |  strip(...)
 |      S.strip([chars]) -> str
 |      
 |      Return a copy of the string S with leading and trailing
 |      whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  swapcase(...)
 |      S.swapcase() -> str
 |      
 |      Return a copy of S with uppercase characters converted to lowercase
 |      and vice versa.
 |  
 |  title(...)
 |      S.title() -> str
 |      
 |      Return a titlecased version of S, i.e. words start with title case
 |      characters, all remaining cased characters have lower case.
 |  
 |  translate(...)
 |      S.translate(table) -> str
 |      
 |      Return a copy of the string S in which each character has been mapped
 |      through the given translation table. The table must implement
 |      lookup/indexing via __getitem__, for instance a dictionary or list,
 |      mapping Unicode ordinals to Unicode ordinals, strings, or None. If
 |      this operation raises LookupError, the character is left untouched.
 |      Characters mapped to None are deleted.
 |  
 |  upper(...)
 |      S.upper() -> str
 |      
 |      Return a copy of S converted to uppercase.
 |  
 |  zfill(...)
 |      S.zfill(width) -> str
 |      
 |      Pad a numeric string S with zeros on the left, to fill a field
 |      of the specified width. The string S is never truncated.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  maketrans(x, y=None, z=None, /)
 |      Return a translation table usable for str.translate().
 |      
 |      If there is only one argument, it must be a dictionary mapping Unicode
 |      ordinals (integers) or characters to Unicode ordinals, strings or None.
 |      Character keys will be then converted to ordinals.
 |      If there are two arguments, they must be strings of equal length, and
 |      in the resulting dictionary, each character in x will be mapped to the
 |      character at the same position in y. If there is a third argument, it
 |      must be a string, whose characters will be mapped to None in the result.
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.unite,evaluate,unite,"Python Library Documentation: function unite in module jedi.evaluate.utils

unite(iterable)
    Turns a two dimensional array into a one dimensional.
",function,"('(iterable)',)",iterable,,,arg_info
jedi,0.12.0,jedi.evaluate.usages.ModuleContext,evaluate.usages,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",evaluator,,,arg_info
jedi,0.12.0,jedi.evaluate.usages.ModuleContext,evaluate.usages,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.usages.ModuleContext,evaluate.usages,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",module_node,,,arg_info
jedi,0.12.0,jedi.evaluate.usages.ModuleContext,evaluate.usages,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",code_lines,,,arg_info
jedi,0.12.0,jedi.evaluate.usages.ModuleContext,evaluate.usages,ModuleContext,"Python Library Documentation: class ModuleContext in module jedi.evaluate.context.module

class ModuleContext(jedi.evaluate.base_context.TreeContext)
 |  Should be defined, otherwise the API returns empty types.
 |  
 |  Method resolution order:
 |      ModuleContext
 |      jedi.evaluate.base_context.TreeContext
 |      jedi.evaluate.base_context.Context
 |      jedi.common.context.BaseContext
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, evaluator, module_node, path, code_lines)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  get_filters(self, search_global, until_position=None, origin_scope=None)
 |  
 |  py__class__(self)
 |  
 |  py__file__(self)
 |      In contrast to Python's __file__ can be None.
 |  
 |  py__name__(self)
 |  
 |  py__package__(self)
 |  
 |  star_imports = wrapper(obj, *args, **kwargs)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |  
 |  py__path__
 |      Not seen here, since it's a property. The callback actually uses a
 |      variable, so use it like::
 |      
 |          foo.py__path__(sys_path)
 |      
 |      In case of a package, this returns Python's __path__ attribute, which
 |      is a list of paths (strings).
 |      Raises an AttributeError if the module is not a package.
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  api_type = 'module'
 |  
 |  parent_context = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.evaluate.base_context.Context:
 |  
 |  create_context(self, node, node_is_context=False, node_is_object=False)
 |  
 |  eval_node(self, node)
 |  
 |  execute = wrapper(*args, **kwargs)
 |  
 |  execute_evaluated(self, *value_list)
 |      Execute a function with already executed arguments.
 |  
 |  get_item(self, index_contexts, contextualized_node)
 |  
 |  is_class(self)
 |  
 |  iterate(self, contextualized_node=None, is_async=False)
 |  
 |  py__bool__(self)
 |      Since Wrapper is a super class for classes, functions and modules,
 |      the return value will always be true.
 |  
 |  py__doc__(self, include_call_signature=False)
 |  
 |  py__getattribute__ lambda *args, **kwargs
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from jedi.evaluate.base_context.Context:
 |  
 |  predefined_names = {}
 |  
 |  tree_node = None
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from jedi.common.context.BaseContext:
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from jedi.common.context.BaseContext:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, evaluator, module_node, path, code_lines)',)",path,,,arg_info
jedi,0.12.0,jedi.evaluate.usages.TreeNameDefinition,evaluate.usages,TreeNameDefinition,"Python Library Documentation: class TreeNameDefinition in module jedi.evaluate.filters

class TreeNameDefinition(AbstractTreeName)
 |  Method resolution order:
 |      TreeNameDefinition
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",tree_name,,,arg_info
jedi,0.12.0,jedi.evaluate.usages.TreeNameDefinition,evaluate.usages,TreeNameDefinition,"Python Library Documentation: class TreeNameDefinition in module jedi.evaluate.filters

class TreeNameDefinition(AbstractTreeName)
 |  Method resolution order:
 |      TreeNameDefinition
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",parent_context,,,arg_info
jedi,0.12.0,jedi.evaluate.usages.TreeNameDefinition,evaluate.usages,TreeNameDefinition,"Python Library Documentation: class TreeNameDefinition in module jedi.evaluate.filters

class TreeNameDefinition(AbstractTreeName)
 |  Method resolution order:
 |      TreeNameDefinition
 |      AbstractTreeName
 |      AbstractNameDefinition
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  infer(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  api_type
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractTreeName:
 |  
 |  __init__(self, parent_context, tree_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  goto(self)
 |  
 |  is_import(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractTreeName:
 |  
 |  start_pos
 |  
 |  string_name
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from AbstractNameDefinition:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  execute(self, arguments)
 |  
 |  execute_evaluated(self, *args, **kwargs)
 |  
 |  get_root_context(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from AbstractNameDefinition:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from AbstractNameDefinition:
 |  
 |  parent_context = None
 |  
 |  tree_name = None
",class,"('(self, parent_context, tree_name)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.usages._dictionarize,evaluate.usages,_dictionarize,"Python Library Documentation: function _dictionarize in module jedi.evaluate.usages

_dictionarize(names)
",function,"('(names)',)",names,,,arg_info
jedi,0.12.0,jedi.evaluate.usages._find_names,evaluate.usages,_find_names,"Python Library Documentation: function _find_names in module jedi.evaluate.usages

_find_names(module_context, tree_name)
",function,"('(module_context, tree_name)',)",module_context,,,arg_info
jedi,0.12.0,jedi.evaluate.usages._find_names,evaluate.usages,_find_names,"Python Library Documentation: function _find_names in module jedi.evaluate.usages

_find_names(module_context, tree_name)
",function,"('(module_context, tree_name)',)",tree_name,,,arg_info
jedi,0.12.0,jedi.evaluate.usages._resolve_names,evaluate.usages,_resolve_names,"Python Library Documentation: function _resolve_names in module jedi.evaluate.usages

_resolve_names(definition_names, avoid_names=())
",function,"('(definition_names, avoid_names=())',)",definition_names,,,arg_info
jedi,0.12.0,jedi.evaluate.usages._resolve_names,evaluate.usages,_resolve_names,"Python Library Documentation: function _resolve_names in module jedi.evaluate.usages

_resolve_names(definition_names, avoid_names=())
",function,"('(definition_names, avoid_names=())',)",avoid_names,(),tuple,arg_info
jedi,0.12.0,jedi.evaluate.usages.usages,evaluate.usages,usages,"Python Library Documentation: function usages in module jedi.evaluate.usages

usages(module_context, tree_name)
",function,"('(module_context, tree_name)',)",module_context,,,arg_info
jedi,0.12.0,jedi.evaluate.usages.usages,evaluate.usages,usages,"Python Library Documentation: function usages in module jedi.evaluate.usages

usages(module_context, tree_name)
",function,"('(module_context, tree_name)',)",tree_name,,,arg_info
jedi,0.12.0,jedi.evaluate.utils.PushBackIterator,evaluate.utils,PushBackIterator,"Python Library Documentation: class PushBackIterator in module jedi.evaluate.utils

class PushBackIterator(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, iterator)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self)
 |  
 |  __next__(self)
 |  
 |  next(self)
 |      Python 2 Compatibility
 |  
 |  push_back(self, value)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, iterator)',)",iterator,,,arg_info
jedi,0.12.0,jedi.evaluate.utils.PushBackIterator,evaluate.utils,PushBackIterator,"Python Library Documentation: class PushBackIterator in module jedi.evaluate.utils

class PushBackIterator(builtins.object)
 |  Methods defined here:
 |  
 |  __init__(self, iterator)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __iter__(self)
 |  
 |  __next__(self)
 |  
 |  next(self)
 |      Python 2 Compatibility
 |  
 |  push_back(self, value)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self, iterator)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.utils.UncaughtAttributeError,evaluate.utils,UncaughtAttributeError,"Python Library Documentation: class UncaughtAttributeError in module jedi.evaluate.utils

class UncaughtAttributeError(builtins.Exception)
 |  Important, because `__getattr__` and `hasattr` catch AttributeErrors
 |  implicitly. This is really evil (mainly because of `__getattr__`).
 |  `hasattr` in Python 2 is even more evil, because it catches ALL exceptions.
 |  Therefore this class originally had to be derived from `BaseException`
 |  instead of `Exception`.  But because I removed relevant `hasattr` from
 |  the code base, we can now switch back to `Exception`.
 |  
 |  :param base: return values of sys.exc_info().
 |  
 |  Method resolution order:
 |      UncaughtAttributeError
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Data descriptors defined here:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, /, *args, **kwargs)',)",self,,,arg_info
jedi,0.12.0,jedi.evaluate.utils.dotted_from_fs_path,evaluate.utils,dotted_from_fs_path,"Python Library Documentation: function dotted_from_fs_path in module jedi.evaluate.utils

dotted_from_fs_path(fs_path, sys_path)
    Changes `/usr/lib/python3.4/email/utils.py` to `email.utils`.  I.e.
    compares the path with sys.path and then returns the dotted_path. If the
    path is not in the sys.path, just returns None.
",function,"('(fs_path, sys_path)',)",fs_path,,,arg_info
jedi,0.12.0,jedi.evaluate.utils.dotted_from_fs_path,evaluate.utils,dotted_from_fs_path,"Python Library Documentation: function dotted_from_fs_path in module jedi.evaluate.utils

dotted_from_fs_path(fs_path, sys_path)
    Changes `/usr/lib/python3.4/email/utils.py` to `email.utils`.  I.e.
    compares the path with sys.path and then returns the dotted_path. If the
    path is not in the sys.path, just returns None.
",function,"('(fs_path, sys_path)',)",sys_path,,,arg_info
jedi,0.12.0,jedi.evaluate.utils.indent_block,evaluate.utils,indent_block,"Python Library Documentation: function indent_block in module jedi.evaluate.utils

indent_block(text, indention='    ')
    This function indents a text block with a default of four spaces.
",function,"(""(text, indention='    ')"",)",text,,,arg_info
jedi,0.12.0,jedi.evaluate.utils.indent_block,evaluate.utils,indent_block,"Python Library Documentation: function indent_block in module jedi.evaluate.utils

indent_block(text, indention='    ')
    This function indents a text block with a default of four spaces.
",function,"(""(text, indention='    ')"",)",indention,    ,,arg_info
jedi,0.12.0,jedi.evaluate.utils.reraise,evaluate.utils,reraise,"Python Library Documentation: function reraise in module jedi._compatibility

reraise(exception, traceback)
    Re-raise `exception` with a `traceback` object.
    
    Usage::
    
        reraise(Exception, sys.exc_info()[2])
",function,"('(exception, traceback)',)",exception,,,arg_info
jedi,0.12.0,jedi.evaluate.utils.reraise,evaluate.utils,reraise,"Python Library Documentation: function reraise in module jedi._compatibility

reraise(exception, traceback)
    Re-raise `exception` with a `traceback` object.
    
    Usage::
    
        reraise(Exception, sys.exc_info()[2])
",function,"('(exception, traceback)',)",traceback,,,arg_info
jedi,0.12.0,jedi.evaluate.utils.reraise_uncaught,evaluate.utils,reraise_uncaught,"Python Library Documentation: function reraise_uncaught in module jedi.evaluate.utils

reraise_uncaught(func)
    Re-throw uncaught `AttributeError`.
    
    Usage:  Put ``@rethrow_uncaught`` in front of the function
    which does **not** suppose to raise `AttributeError`.
    
    AttributeError is easily get caught by `hasattr` and another
    ``except AttributeError`` clause.  This becomes problem when you use
    a lot of ""dynamic"" attributes (e.g., using ``@property``) because you
    can't distinguish if the property does not exist for real or some code
    inside of the ""dynamic"" attribute through that error.  In a well
    written code, such error should not exist but getting there is very
    difficult.  This decorator is to help us getting there by changing
    `AttributeError` to `UncaughtAttributeError` to avoid unexpected catch.
    This helps us noticing bugs earlier and facilitates debugging.
    
    .. note:: Treating StopIteration here is easy.
              Add that feature when needed.
",function,"('(func)',)",func,,,arg_info
jedi,0.12.0,jedi.evaluate.utils.safe_property,evaluate.utils,safe_property,"Python Library Documentation: function safe_property in module jedi.evaluate.utils

safe_property(func)
",function,"('(func)',)",func,,,arg_info
jedi,0.12.0,jedi.evaluate.utils.to_list,evaluate.utils,to_list,"Python Library Documentation: function to_list in module jedi.evaluate.utils

to_list(func)
",function,"('(func)',)",func,,,arg_info
jedi,0.12.0,jedi.evaluate.utils.unite,evaluate.utils,unite,"Python Library Documentation: function unite in module jedi.evaluate.utils

unite(iterable)
    Turns a two dimensional array into a one dimensional.
",function,"('(iterable)',)",iterable,,,arg_info
jedi,0.12.0,jedi.parser_utils.clean_scope_docstring,parser_utils,clean_scope_docstring,"Python Library Documentation: function clean_scope_docstring in module jedi.parser_utils

clean_scope_docstring(scope_node)
    Returns a cleaned version of the docstring token.
",function,"('(scope_node)',)",scope_node,,,arg_info
jedi,0.12.0,jedi.parser_utils.cleandoc,parser_utils,cleandoc,"Python Library Documentation: function cleandoc in module inspect

cleandoc(doc)
    Clean up indentation from docstrings.
    
    Any whitespace that can be uniformly removed from the second line
    onwards is removed.
",function,"('(doc)',)",doc,,,arg_info
jedi,0.12.0,jedi.parser_utils.for_stmt_defines_one_name,parser_utils,for_stmt_defines_one_name,"Python Library Documentation: function for_stmt_defines_one_name in module jedi.parser_utils

for_stmt_defines_one_name(for_stmt)
    Returns True if only one name is returned: ``for x in y``.
    Returns False if the for loop is more complicated: ``for x, z in y``.
    
    :returns: bool
",function,"('(for_stmt)',)",for_stmt,,,arg_info
jedi,0.12.0,jedi.parser_utils.force_unicode,parser_utils,force_unicode,"Python Library Documentation: function force_unicode in module jedi._compatibility

force_unicode(obj)
",function,"('(obj)',)",obj,,,arg_info
jedi,0.12.0,jedi.parser_utils.get_cached_code_lines,parser_utils,get_cached_code_lines,"Python Library Documentation: function get_cached_code_lines in module jedi.parser_utils

get_cached_code_lines(grammar, path)
    Basically access the cached code lines in parso. This is not the nicest way
    to do this, but we avoid splitting all the lines again.
",function,"('(grammar, path)',)",grammar,,,arg_info
jedi,0.12.0,jedi.parser_utils.get_cached_code_lines,parser_utils,get_cached_code_lines,"Python Library Documentation: function get_cached_code_lines in module jedi.parser_utils

get_cached_code_lines(grammar, path)
    Basically access the cached code lines in parso. This is not the nicest way
    to do this, but we avoid splitting all the lines again.
",function,"('(grammar, path)',)",path,,,arg_info
jedi,0.12.0,jedi.parser_utils.get_call_signature,parser_utils,get_call_signature,"Python Library Documentation: function get_call_signature in module jedi.parser_utils

get_call_signature(funcdef, width=72, call_string=None)
    Generate call signature of this function.
    
    :param width: Fold lines if a line is longer than this value.
    :type width: int
    :arg func_name: Override function name when given.
    :type func_name: str
    
    :rtype: str
",function,"('(funcdef, width=72, call_string=None)',)",funcdef,,,arg_info
jedi,0.12.0,jedi.parser_utils.get_call_signature,parser_utils,get_call_signature,"Python Library Documentation: function get_call_signature in module jedi.parser_utils

get_call_signature(funcdef, width=72, call_string=None)
    Generate call signature of this function.
    
    :param width: Fold lines if a line is longer than this value.
    :type width: int
    :arg func_name: Override function name when given.
    :type func_name: str
    
    :rtype: str
",function,"('(funcdef, width=72, call_string=None)',)",width,72,int,arg_info
jedi,0.12.0,jedi.parser_utils.get_call_signature,parser_utils,get_call_signature,"Python Library Documentation: function get_call_signature in module jedi.parser_utils

get_call_signature(funcdef, width=72, call_string=None)
    Generate call signature of this function.
    
    :param width: Fold lines if a line is longer than this value.
    :type width: int
    :arg func_name: Override function name when given.
    :type func_name: str
    
    :rtype: str
",function,"('(funcdef, width=72, call_string=None)',)",call_string,,NoneType,arg_info
jedi,0.12.0,jedi.parser_utils.get_comp_fors,parser_utils,get_comp_fors,"Python Library Documentation: function get_comp_fors in module jedi.parser_utils

get_comp_fors(comp_for)
",function,"('(comp_for)',)",comp_for,,,arg_info
jedi,0.12.0,jedi.parser_utils.get_doc_with_call_signature,parser_utils,get_doc_with_call_signature,"Python Library Documentation: function get_doc_with_call_signature in module jedi.parser_utils

get_doc_with_call_signature(scope_node)
    Return a document string including call signature.
",function,"('(scope_node)',)",scope_node,,,arg_info
jedi,0.12.0,jedi.parser_utils.get_executable_nodes,parser_utils,get_executable_nodes,"Python Library Documentation: function get_executable_nodes in module jedi.parser_utils

get_executable_nodes(node, last_added=False)
    For static analysis.
",function,"('(node, last_added=False)',)",node,,,arg_info
jedi,0.12.0,jedi.parser_utils.get_executable_nodes,parser_utils,get_executable_nodes,"Python Library Documentation: function get_executable_nodes in module jedi.parser_utils

get_executable_nodes(node, last_added=False)
    For static analysis.
",function,"('(node, last_added=False)',)",last_added,False,bool,arg_info
jedi,0.12.0,jedi.parser_utils.get_flow_branch_keyword,parser_utils,get_flow_branch_keyword,"Python Library Documentation: function get_flow_branch_keyword in module jedi.parser_utils

get_flow_branch_keyword(flow_node, node)
",function,"('(flow_node, node)',)",flow_node,,,arg_info
jedi,0.12.0,jedi.parser_utils.get_flow_branch_keyword,parser_utils,get_flow_branch_keyword,"Python Library Documentation: function get_flow_branch_keyword in module jedi.parser_utils

get_flow_branch_keyword(flow_node, node)
",function,"('(flow_node, node)',)",node,,,arg_info
jedi,0.12.0,jedi.parser_utils.get_following_comment_same_line,parser_utils,get_following_comment_same_line,"Python Library Documentation: function get_following_comment_same_line in module jedi.parser_utils

get_following_comment_same_line(node)
    returns (as string) any comment that appears on the same line,
    after the node, including the #
",function,"('(node)',)",node,,,arg_info
jedi,0.12.0,jedi.parser_utils.get_parent_scope,parser_utils,get_parent_scope,"Python Library Documentation: function get_parent_scope in module jedi.parser_utils

get_parent_scope(node, include_flows=False)
    Returns the underlying scope.
",function,"('(node, include_flows=False)',)",node,,,arg_info
jedi,0.12.0,jedi.parser_utils.get_parent_scope,parser_utils,get_parent_scope,"Python Library Documentation: function get_parent_scope in module jedi.parser_utils

get_parent_scope(node, include_flows=False)
    Returns the underlying scope.
",function,"('(node, include_flows=False)',)",include_flows,False,bool,arg_info
jedi,0.12.0,jedi.parser_utils.get_statement_of_position,parser_utils,get_statement_of_position,"Python Library Documentation: function get_statement_of_position in module jedi.parser_utils

get_statement_of_position(node, pos)
",function,"('(node, pos)',)",node,,,arg_info
jedi,0.12.0,jedi.parser_utils.get_statement_of_position,parser_utils,get_statement_of_position,"Python Library Documentation: function get_statement_of_position in module jedi.parser_utils

get_statement_of_position(node, pos)
",function,"('(node, pos)',)",pos,,,arg_info
jedi,0.12.0,jedi.parser_utils.is_scope,parser_utils,is_scope,"Python Library Documentation: function is_scope in module jedi.parser_utils

is_scope(node)
",function,"('(node)',)",node,,,arg_info
jedi,0.12.0,jedi.parser_utils.literal_eval,parser_utils,literal_eval,"Python Library Documentation: function literal_eval in module jedi._compatibility

literal_eval(string)
",function,"('(string)',)",string,,,arg_info
jedi,0.12.0,jedi.parser_utils.move,parser_utils,move,"Python Library Documentation: function move in module jedi.parser_utils

move(node, line_offset)
    Move the `Node` start_pos.
",function,"('(node, line_offset)',)",node,,,arg_info
jedi,0.12.0,jedi.parser_utils.move,parser_utils,move,"Python Library Documentation: function move in module jedi.parser_utils

move(node, line_offset)
    Move the `Node` start_pos.
",function,"('(node, line_offset)',)",line_offset,,,arg_info
jedi,0.12.0,jedi.parser_utils.safe_literal_eval,parser_utils,safe_literal_eval,"Python Library Documentation: function safe_literal_eval in module jedi.parser_utils

safe_literal_eval(value)
",function,"('(value)',)",value,,,arg_info
