#numpy_1.14.3
numpy.__config__.get_info(name)
numpy._globals.ModuleDeprecationWarning(self, /, *args, **kwargs)
numpy._globals.VisibleDeprecationWarning(self, /, *args, **kwargs)
numpy._globals._NoValue(self, /, *args, **kwargs)
numpy._import_tools.PackageLoader(self, verbose=False, infunc=False)
numpy._import_tools.PackageLoaderDebug(self, verbose=False, infunc=False)
numpy.add_newdocs.add_newdoc(place, obj, doc)
numpy.compat.Path(self, /, *args, **kwargs)
numpy.compat.Path._format_parsed_parts(drv, root, parts)
numpy.compat.Path._from_parsed_parts(drv, root, parts, init=True)
numpy.compat.Path._from_parts(args, init=True)
numpy.compat.Path._parse_args(args)
numpy.compat.Path.cwd()
numpy.compat.Path.home()
numpy.compat._inspect.formatargspec(args, varargs=None, varkw=None, defaults=None, formatarg=<class 'str'>, formatvarargs=<function <lambda> at 0x00000000032736A8>, formatvarkw=<function <lambda> at 0x0000000003273620>, formatvalue=<function <lambda> at 0x0000000003273598>, join=<function joinseq at 0x00000000032737B8>)
numpy.compat._inspect.formatargvalues(args, varargs, varkw, locals, formatarg=<class 'str'>, formatvarargs=<function <lambda> at 0x0000000003273488>, formatvarkw=<function <lambda> at 0x0000000003273400>, formatvalue=<function <lambda> at 0x0000000003273378>, join=<function joinseq at 0x00000000032737B8>)
numpy.compat._inspect.getargs(co)
numpy.compat._inspect.getargspec(func)
numpy.compat._inspect.getargvalues(frame)
numpy.compat._inspect.iscode(object)
numpy.compat._inspect.isfunction(object)
numpy.compat._inspect.ismethod(object)
numpy.compat._inspect.joinseq(seq)
numpy.compat._inspect.strseq(object, convert, join=<function joinseq at 0x00000000032737B8>)
numpy.compat.asbytes(s)
numpy.compat.asbytes_nested(x)
numpy.compat.asstr(s)
numpy.compat.asunicode(s)
numpy.compat.asunicode_nested(x)
numpy.compat.basestring(self, /, *args, **kwargs)
numpy.compat.bytes(self, /, *args, **kwargs)
numpy.compat.formatargspec(args, varargs=None, varkw=None, defaults=None, formatarg=<class 'str'>, formatvarargs=<function <lambda> at 0x00000000032736A8>, formatvarkw=<function <lambda> at 0x0000000003273620>, formatvalue=<function <lambda> at 0x0000000003273598>, join=<function joinseq at 0x00000000032737B8>)
numpy.compat.getargspec(func)
numpy.compat.is_pathlib_path(obj)
numpy.compat.isfileobj(f)
numpy.compat.long(self, /, *args, **kwargs)
numpy.compat.npy_load_module(name, fn, info=None)
numpy.compat.open_latin1(filename, mode='r')
numpy.compat.py3k.Path(self, /, *args, **kwargs)
numpy.compat.py3k.Path._format_parsed_parts(drv, root, parts)
numpy.compat.py3k.Path._from_parsed_parts(drv, root, parts, init=True)
numpy.compat.py3k.Path._from_parts(args, init=True)
numpy.compat.py3k.Path._parse_args(args)
numpy.compat.py3k.Path.cwd()
numpy.compat.py3k.Path.home()
numpy.compat.py3k.asbytes(s)
numpy.compat.py3k.asbytes_nested(x)
numpy.compat.py3k.asstr(s)
numpy.compat.py3k.asunicode(s)
numpy.compat.py3k.asunicode_nested(x)
numpy.compat.py3k.basestring(self, /, *args, **kwargs)
numpy.compat.py3k.bytes(self, /, *args, **kwargs)
numpy.compat.py3k.is_pathlib_path(obj)
numpy.compat.py3k.isfileobj(f)
numpy.compat.py3k.long(self, /, *args, **kwargs)
numpy.compat.py3k.npy_load_module(name, fn, info=None)
numpy.compat.py3k.open_latin1(filename, mode='r')
numpy.compat.py3k.sixu(s)
numpy.compat.py3k.unicode(self, /, *args, **kwargs)
numpy.compat.sixu(s)
numpy.compat.unicode(self, /, *args, **kwargs)
numpy.core.AxisError(self, axis, ndim=None, msg_prefix=None)
numpy.core.ComplexWarning(self, /, *args, **kwargs)
numpy.core.MachAr(self, float_conv=<class 'float'>, int_conv=<class 'int'>, float_to_float=<class 'float'>, float_to_str=<function MachAr.<lambda> at 0x00000000033A1C80>, title='Python floating point number')
numpy.core.TooHardError(self, /, *args, **kwargs)
numpy.core._internal.AxisError(self, axis, ndim=None, msg_prefix=None)
numpy.core._internal.TooHardError(self, /, *args, **kwargs)
numpy.core._internal._add_trailing_padding(value, padding)
numpy.core._internal._array_descr(descriptor)
numpy.core._internal._commastring(astr)
numpy.core._internal._copy_fields(ary)
numpy.core._internal._ctypes(self, array, ptr=None)
numpy.core._internal._dtype_from_pep3118(spec)
numpy.core._internal._fix_names(field_spec)
numpy.core._internal._gcd(a, b)
numpy.core._internal._getfield_is_safe(oldtype, newtype, offset)
numpy.core._internal._lcm(a, b)
numpy.core._internal._makenames_list(adict, align)
numpy.core._internal._missing_ctypes(self, /, *args, **kwargs)
numpy.core._internal._newnames(datatype, order)
numpy.core._internal._prod(a)
numpy.core._internal._reconstruct(subtype, shape, dtype)
numpy.core._internal._ufunc_doc_signature_formatter(ufunc)
numpy.core._internal._usefields(adict, align)
numpy.core._internal._view_is_safe(oldtype, newtype)
numpy.core._internal.array_ufunc_errmsg_formatter(dummy, ufunc, method, *inputs, **kwargs)
numpy.core._internal.basestring(self, /, *args, **kwargs)
numpy.core._internal.dtype(self, /, *args, **kwargs)
numpy.core._internal.dummy_ctype(self, cls)
numpy.core._internal.ndarray(self, /, *args, **kwargs)
numpy.core._internal.object_(self, /, *args, **kwargs)
numpy.core._methods._all(a, axis=None, dtype=None, out=None, keepdims=False)
numpy.core._methods._amax(a, axis=None, out=None, keepdims=False)
numpy.core._methods._amin(a, axis=None, out=None, keepdims=False)
numpy.core._methods._any(a, axis=None, dtype=None, out=None, keepdims=False)
numpy.core._methods._count_reduce_items(arr, axis)
numpy.core._methods._mean(a, axis=None, dtype=None, out=None, keepdims=False)
numpy.core._methods._prod(a, axis=None, dtype=None, out=None, keepdims=False)
numpy.core._methods._std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=False)
numpy.core._methods._sum(a, axis=None, dtype=None, out=None, keepdims=False)
numpy.core._methods._var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=False)
numpy.core._methods.asanyarray(a, dtype=None, order=None)
numpy.core._ufunc_reconstruct(module, name)
numpy.core.alen(a)
numpy.core.all(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.allclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False)
numpy.core.alltrue(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.amax(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.amin(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.any(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.argmax(a, axis=None, out=None)
numpy.core.argmin(a, axis=None, out=None)
numpy.core.argpartition(a, kth, axis=-1, kind='introselect', order=None)
numpy.core.argsort(a, axis=-1, kind='quicksort', order=None)
numpy.core.argwhere(a)
numpy.core.around(a, decimals=0, out=None)
numpy.core.array2string(a, max_line_width=None, precision=None, suppress_small=None, separator=' ', prefix='', style=<class 'numpy._globals._NoValue'>, formatter=None, threshold=None, edgeitems=None, sign=None, floatmode=None, suffix='', **kwarg)
numpy.core.array_equal(a1, a2)
numpy.core.array_equiv(a1, a2)
numpy.core.array_repr(arr, max_line_width=None, precision=None, suppress_small=None)
numpy.core.array_str(a, max_line_width=None, precision=None, suppress_small=None)
numpy.core.arrayprint.BoolFormat(self, data, **kwargs)
numpy.core.arrayprint.ComplexFloatingFormat(self, x, precision, floatmode, suppress_small, sign=False, **kwarg)
numpy.core.arrayprint.ComplexFormat(self, *args, **kwargs)
numpy.core.arrayprint.DatetimeFormat(self, x, unit=None, timezone=None, casting='same_kind', legacy=False)
numpy.core.arrayprint.FloatFormat(self, *args, **kwargs)
numpy.core.arrayprint.FloatingFormat(self, data, precision, floatmode, suppress_small, sign=False, **kwarg)
numpy.core.arrayprint.IntegerFormat(self, data)
numpy.core.arrayprint.LongComplexFormat(self, *args, **kwargs)
numpy.core.arrayprint.LongFloatFormat(self, *args, **kwargs)
numpy.core.arrayprint.StructureFormat(self, *args, **kwargs)
numpy.core.arrayprint.StructureFormat.from_data(data, **options)
numpy.core.arrayprint.StructuredVoidFormat(self, format_functions)
numpy.core.arrayprint.StructuredVoidFormat.from_data(data, **options)
numpy.core.arrayprint.SubArrayFormat(self, format_function)
numpy.core.arrayprint.TimedeltaFormat(self, data)
numpy.core.arrayprint._TimelikeFormat(self, data)
numpy.core.arrayprint._array2string(a, options, separator=' ', prefix='')
numpy.core.arrayprint._extendLine(s, line, word, line_width, next_line_prefix, legacy)
numpy.core.arrayprint._formatArray(a, format_function, line_width, next_line_prefix, separator, edge_items, summary_insert, legacy)
numpy.core.arrayprint._get_format_function(data, **options)
numpy.core.arrayprint._get_formatdict(data, **opt)
numpy.core.arrayprint._guarded_str
numpy.core.arrayprint._leading_trailing(a, edgeitems, index=())
numpy.core.arrayprint._make_options_dict(precision=None, threshold=None, edgeitems=None, linewidth=None, suppress=None, nanstr=None, infstr=None, sign=None, formatter=None, floatmode=None, legacy=None)
numpy.core.arrayprint._none_or_positive_arg(x, name)
numpy.core.arrayprint._object_format(o)
numpy.core.arrayprint._recursive_guard(fillvalue='...')
numpy.core.arrayprint._void_scalar_repr(x)
numpy.core.arrayprint.any(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.arrayprint.array2string(a, max_line_width=None, precision=None, suppress_small=None, separator=' ', prefix='', style=<class 'numpy._globals._NoValue'>, formatter=None, threshold=None, edgeitems=None, sign=None, floatmode=None, suffix='', **kwarg)
numpy.core.arrayprint.array_repr(arr, max_line_width=None, precision=None, suppress_small=None)
numpy.core.arrayprint.array_str(a, max_line_width=None, precision=None, suppress_small=None)
numpy.core.arrayprint.asarray(a, dtype=None, order=None)
numpy.core.arrayprint.bool_(self, /, *args, **kwargs)
numpy.core.arrayprint.complex_(self, /, *args, **kwargs)
numpy.core.arrayprint.dtype(self, /, *args, **kwargs)
numpy.core.arrayprint.dtype_is_implied(dtype)
numpy.core.arrayprint.dtype_short_repr(dtype)
numpy.core.arrayprint.errstate(self, **kwargs)
numpy.core.arrayprint.flexible(self, /, *args, **kwargs)
numpy.core.arrayprint.float_(self, /, *args, **kwargs)
numpy.core.arrayprint.format_float_positional(x, precision=None, unique=True, fractional=True, trim='k', sign=False, pad_left=None, pad_right=None)
numpy.core.arrayprint.format_float_scientific(x, precision=None, unique=True, trim='k', sign=False, pad_left=None, exp_digits=None)
numpy.core.arrayprint.int_(self, /, *args, **kwargs)
numpy.core.arrayprint.intc(self, /, *args, **kwargs)
numpy.core.arrayprint.longlong(self, /, *args, **kwargs)
numpy.core.arrayprint.ndarray(self, /, *args, **kwargs)
numpy.core.arrayprint.ravel(a, order='C')
numpy.core.arrayprint.repr_format(x)
numpy.core.arrayprint.set_printoptions(precision=None, threshold=None, edgeitems=None, linewidth=None, suppress=None, nanstr=None, infstr=None, formatter=None, sign=None, floatmode=None, **kwarg)
numpy.core.arrayprint.set_string_function(f, repr=True)
numpy.core.arrayprint.str_format(x)
numpy.core.asanyarray(a, dtype=None, order=None)
numpy.core.asarray(a, dtype=None, order=None)
numpy.core.ascontiguousarray(a, dtype=None)
numpy.core.asfortranarray(a, dtype=None)
numpy.core.base_repr(number, base=2, padding=0)
numpy.core.binary_repr(num, width=None)
numpy.core.block(arrays)
numpy.core.bool8(self, /, *args, **kwargs)
numpy.core.bool_(self, /, *args, **kwargs)
numpy.core.broadcast(self, /, *args, **kwargs)
numpy.core.busdaycalendar(self, /, *args, **kwargs)
numpy.core.byte(self, /, *args, **kwargs)
numpy.core.bytes0(self, /, *args, **kwargs)
numpy.core.bytes_(self, /, *args, **kwargs)
numpy.core.cdouble(self, /, *args, **kwargs)
numpy.core.cfloat(self, /, *args, **kwargs)
numpy.core.character(self, /, *args, **kwargs)
numpy.core.chararray(self, /, *args, **kwargs)
numpy.core.choose(a, choices, out=None, mode='raise')
numpy.core.clip(a, a_min, a_max, out=None)
numpy.core.clongdouble(self, /, *args, **kwargs)
numpy.core.clongfloat(self, /, *args, **kwargs)
numpy.core.complex128(self, /, *args, **kwargs)
numpy.core.complex64(self, /, *args, **kwargs)
numpy.core.complex_(self, /, *args, **kwargs)
numpy.core.complexfloating(self, /, *args, **kwargs)
numpy.core.compress(condition, a, axis=None, out=None)
numpy.core.convolve(a, v, mode='full')
numpy.core.correlate(a, v, mode='valid')
numpy.core.count_nonzero(a, axis=None)
numpy.core.cross(a, b, axisa=-1, axisb=-1, axisc=-1, axis=None)
numpy.core.csingle(self, /, *args, **kwargs)
numpy.core.cumprod(a, axis=None, dtype=None, out=None)
numpy.core.cumproduct(a, axis=None, dtype=None, out=None)
numpy.core.cumsum(a, axis=None, dtype=None, out=None)
numpy.core.datetime64(self, /, *args, **kwargs)
numpy.core.defchararray._bytes(self, /, *args, **kwargs)
numpy.core.defchararray._get_num_chars(a)
numpy.core.defchararray._to_string_or_unicode_array(result)
numpy.core.defchararray._unicode(self, /, *args, **kwargs)
numpy.core.defchararray.add(x1, x2)
numpy.core.defchararray.array(obj, itemsize=None, copy=True, unicode=None, order=None)
numpy.core.defchararray.asarray(obj, itemsize=None, unicode=None, order=None)
numpy.core.defchararray.asbytes(s)
numpy.core.defchararray.bool_(self, /, *args, **kwargs)
numpy.core.defchararray.capitalize(a)
numpy.core.defchararray.center(a, width, fillchar=' ')
numpy.core.defchararray.character(self, /, *args, **kwargs)
numpy.core.defchararray.chararray(self, /, *args, **kwargs)
numpy.core.defchararray.count(a, sub, start=0, end=None)
numpy.core.defchararray.decode(a, encoding=None, errors=None)
numpy.core.defchararray.encode(a, encoding=None, errors=None)
numpy.core.defchararray.endswith(a, suffix, start=0, end=None)
numpy.core.defchararray.equal(x1, x2)
numpy.core.defchararray.expandtabs(a, tabsize=8)
numpy.core.defchararray.find(a, sub, start=0, end=None)
numpy.core.defchararray.greater(x1, x2)
numpy.core.defchararray.greater_equal(x1, x2)
numpy.core.defchararray.index(a, sub, start=0, end=None)
numpy.core.defchararray.integer(self, /, *args, **kwargs)
numpy.core.defchararray.isalnum(a)
numpy.core.defchararray.isalpha(a)
numpy.core.defchararray.isdecimal(a)
numpy.core.defchararray.isdigit(a)
numpy.core.defchararray.islower(a)
numpy.core.defchararray.isnumeric(a)
numpy.core.defchararray.isspace(a)
numpy.core.defchararray.istitle(a)
numpy.core.defchararray.isupper(a)
numpy.core.defchararray.join(sep, seq)
numpy.core.defchararray.less(x1, x2)
numpy.core.defchararray.less_equal(x1, x2)
numpy.core.defchararray.ljust(a, width, fillchar=' ')
numpy.core.defchararray.long(self, /, *args, **kwargs)
numpy.core.defchararray.lower(a)
numpy.core.defchararray.lstrip(a, chars=None)
numpy.core.defchararray.mod(a, values)
numpy.core.defchararray.multiply(a, i)
numpy.core.defchararray.ndarray(self, /, *args, **kwargs)
numpy.core.defchararray.not_equal(x1, x2)
numpy.core.defchararray.object_(self, /, *args, **kwargs)
numpy.core.defchararray.partition(a, sep)
numpy.core.defchararray.replace(a, old, new, count=None)
numpy.core.defchararray.rfind(a, sub, start=0, end=None)
numpy.core.defchararray.rindex(a, sub, start=0, end=None)
numpy.core.defchararray.rjust(a, width, fillchar=' ')
numpy.core.defchararray.rpartition(a, sep)
numpy.core.defchararray.rsplit(a, sep=None, maxsplit=None)
numpy.core.defchararray.rstrip(a, chars=None)
numpy.core.defchararray.split(a, sep=None, maxsplit=None)
numpy.core.defchararray.splitlines(a, keepends=None)
numpy.core.defchararray.startswith(a, prefix, start=0, end=None)
numpy.core.defchararray.str_len(a)
numpy.core.defchararray.string_(self, /, *args, **kwargs)
numpy.core.defchararray.strip(a, chars=None)
numpy.core.defchararray.swapcase(a)
numpy.core.defchararray.title(a)
numpy.core.defchararray.translate(a, table, deletechars=None)
numpy.core.defchararray.unicode_(self, /, *args, **kwargs)
numpy.core.defchararray.upper(a)
numpy.core.defchararray.zfill(a, width)
numpy.core.diagonal(a, offset=0, axis1=0, axis2=1)
numpy.core.double(self, /, *args, **kwargs)
numpy.core.dtype(self, /, *args, **kwargs)
numpy.core.einsumfunc._can_dot(inputs, result, idx_removed)
numpy.core.einsumfunc._compute_size_by_dict(indices, idx_dict)
numpy.core.einsumfunc._find_contraction(positions, input_sets, output_set)
numpy.core.einsumfunc._greedy_path(input_sets, output_set, idx_dict, memory_limit)
numpy.core.einsumfunc._optimal_path(input_sets, output_set, idx_dict, memory_limit)
numpy.core.einsumfunc._parse_einsum_input(operands)
numpy.core.einsumfunc.asanyarray(a, dtype=None, order=None)
numpy.core.einsumfunc.asarray(a, dtype=None, order=None)
numpy.core.einsumfunc.basestring(self, /, *args, **kwargs)
numpy.core.einsumfunc.tensordot(a, b, axes=2)
numpy.core.errstate(self, **kwargs)
numpy.core.find_common_type(array_types, scalar_types)
numpy.core.finfo(self, /, *args, **kwargs)
numpy.core.flatiter(self, /, *args, **kwargs)
numpy.core.flatnonzero(a)
numpy.core.flexible(self, /, *args, **kwargs)
numpy.core.float16(self, /, *args, **kwargs)
numpy.core.float32(self, /, *args, **kwargs)
numpy.core.float64(self, /, *args, **kwargs)
numpy.core.float_(self, /, *args, **kwargs)
numpy.core.floating(self, /, *args, **kwargs)
numpy.core.format_float_positional(x, precision=None, unique=True, fractional=True, trim='k', sign=False, pad_left=None, pad_right=None)
numpy.core.format_float_scientific(x, precision=None, unique=True, trim='k', sign=False, pad_left=None, exp_digits=None)
numpy.core.format_parser(self, formats, names, titles, aligned=False, byteorder=None)
numpy.core.fromfunction(function, shape, **kwargs)
numpy.core.fromnumeric.VisibleDeprecationWarning(self, /, *args, **kwargs)
numpy.core.fromnumeric._dt_(sctype)
numpy.core.fromnumeric._gentype(self, /, *args, **kwargs)
numpy.core.fromnumeric._wrapfunc(obj, method, *args, **kwds)
numpy.core.fromnumeric._wrapit(obj, method, *args, **kwds)
numpy.core.fromnumeric.alen(a)
numpy.core.fromnumeric.all(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.fromnumeric.alltrue(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.fromnumeric.amax(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.fromnumeric.amin(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.fromnumeric.any(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.fromnumeric.argmax(a, axis=None, out=None)
numpy.core.fromnumeric.argmin(a, axis=None, out=None)
numpy.core.fromnumeric.argpartition(a, kth, axis=-1, kind='introselect', order=None)
numpy.core.fromnumeric.argsort(a, axis=-1, kind='quicksort', order=None)
numpy.core.fromnumeric.around(a, decimals=0, out=None)
numpy.core.fromnumeric.asanyarray(a, dtype=None, order=None)
numpy.core.fromnumeric.asarray(a, dtype=None, order=None)
numpy.core.fromnumeric.choose(a, choices, out=None, mode='raise')
numpy.core.fromnumeric.clip(a, a_min, a_max, out=None)
numpy.core.fromnumeric.compress(condition, a, axis=None, out=None)
numpy.core.fromnumeric.cumprod(a, axis=None, dtype=None, out=None)
numpy.core.fromnumeric.cumproduct(a, axis=None, dtype=None, out=None)
numpy.core.fromnumeric.cumsum(a, axis=None, dtype=None, out=None)
numpy.core.fromnumeric.diagonal(a, offset=0, axis1=0, axis2=1)
numpy.core.fromnumeric.mean(a, axis=None, dtype=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.fromnumeric.ndim(a)
numpy.core.fromnumeric.nonzero(a)
numpy.core.fromnumeric.partition(a, kth, axis=-1, kind='introselect', order=None)
numpy.core.fromnumeric.prod(a, axis=None, dtype=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.fromnumeric.product(a, axis=None, dtype=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.fromnumeric.ptp(a, axis=None, out=None)
numpy.core.fromnumeric.put(a, ind, v, mode='raise')
numpy.core.fromnumeric.rank(a)
numpy.core.fromnumeric.ravel(a, order='C')
numpy.core.fromnumeric.repeat(a, repeats, axis=None)
numpy.core.fromnumeric.reshape(a, newshape, order='C')
numpy.core.fromnumeric.resize(a, new_shape)
numpy.core.fromnumeric.round_(a, decimals=0, out=None)
numpy.core.fromnumeric.searchsorted(a, v, side='left', sorter=None)
numpy.core.fromnumeric.shape(a)
numpy.core.fromnumeric.size(a, axis=None)
numpy.core.fromnumeric.sometrue(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.fromnumeric.sort(a, axis=-1, kind='quicksort', order=None)
numpy.core.fromnumeric.squeeze(a, axis=None)
numpy.core.fromnumeric.std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.fromnumeric.sum(a, axis=None, dtype=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.fromnumeric.swapaxes(a, axis1, axis2)
numpy.core.fromnumeric.take(a, indices, axis=None, out=None, mode='raise')
numpy.core.fromnumeric.trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None)
numpy.core.fromnumeric.transpose(a, axes=None)
numpy.core.fromnumeric.var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.full(shape, fill_value, dtype=None, order='C')
numpy.core.full_like(a, fill_value, dtype=None, order='K', subok=True)
numpy.core.function_base.TooHardError(self, /, *args, **kwargs)
numpy.core.function_base._index_deprecate(i, stacklevel=2)
numpy.core.function_base.asanyarray(a, dtype=None, order=None)
numpy.core.function_base.geomspace(start, stop, num=50, endpoint=True, dtype=None)
numpy.core.function_base.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)
numpy.core.function_base.logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None)
numpy.core.generic(self, /, *args, **kwargs)
numpy.core.geomspace(start, stop, num=50, endpoint=True, dtype=None)
numpy.core.getlimits.MachAr(self, float_conv=<class 'float'>, int_conv=<class 'int'>, float_to_float=<class 'float'>, float_to_str=<function MachAr.<lambda> at 0x00000000033A1C80>, title='Python floating point number')
numpy.core.getlimits.MachArLike(self, ftype, **kwargs)
numpy.core.getlimits._discovered_machar(ftype)
numpy.core.getlimits._f16(self, /, *args, **kwargs)
numpy.core.getlimits._f32(self, /, *args, **kwargs)
numpy.core.getlimits._f64(self, /, *args, **kwargs)
numpy.core.getlimits._fr0(a)
numpy.core.getlimits._fr1(a)
numpy.core.getlimits._get_machar(ftype)
numpy.core.getlimits._ld(self, /, *args, **kwargs)
numpy.core.getlimits.finfo(self, /, *args, **kwargs)
numpy.core.getlimits.iinfo(self, int_type)
numpy.core.half(self, /, *args, **kwargs)
numpy.core.hstack(tup)
numpy.core.identity(n, dtype=None)
numpy.core.iinfo(self, int_type)
numpy.core.indices(dimensions, dtype=<class 'int'>)
numpy.core.inexact(self, /, *args, **kwargs)
numpy.core.int0(self, /, *args, **kwargs)
numpy.core.int16(self, /, *args, **kwargs)
numpy.core.int32(self, /, *args, **kwargs)
numpy.core.int64(self, /, *args, **kwargs)
numpy.core.int8(self, /, *args, **kwargs)
numpy.core.int_(self, /, *args, **kwargs)
numpy.core.intc(self, /, *args, **kwargs)
numpy.core.integer(self, /, *args, **kwargs)
numpy.core.intp(self, /, *args, **kwargs)
numpy.core.isclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False)
numpy.core.isfortran(a)
numpy.core.isscalar(num)
numpy.core.issctype(rep)
numpy.core.issubdtype(arg1, arg2)
numpy.core.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)
numpy.core.load(file)
numpy.core.logspace(start, stop, num=50, endpoint=True, base=10.0, dtype=None)
numpy.core.long(self, /, *args, **kwargs)
numpy.core.longcomplex(self, /, *args, **kwargs)
numpy.core.longdouble(self, /, *args, **kwargs)
numpy.core.longfloat(self, /, *args, **kwargs)
numpy.core.longlong(self, /, *args, **kwargs)
numpy.core.machar.MachAr(self, float_conv=<class 'float'>, int_conv=<class 'int'>, float_to_float=<class 'float'>, float_to_str=<function MachAr.<lambda> at 0x00000000033A1C80>, title='Python floating point number')
numpy.core.machar.any(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.machar.errstate(self, **kwargs)
numpy.core.max(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.maximum_sctype(t)
numpy.core.mean(a, axis=None, dtype=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.memmap(self, /, *args, **kwargs)
numpy.core.memmap.__class__(self, /, *args, **kwargs)
numpy.core.memmap.flush(self)
numpy.core.min(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.moveaxis(a, source, destination)
numpy.core.multiarray.broadcast(self, /, *args, **kwargs)
numpy.core.multiarray.busdaycalendar(self, /, *args, **kwargs)
numpy.core.multiarray.dtype(self, /, *args, **kwargs)
numpy.core.multiarray.error(self, /, *args, **kwargs)
numpy.core.multiarray.flagsobj(self, /, *args, **kwargs)
numpy.core.multiarray.flatiter(self, /, *args, **kwargs)
numpy.core.multiarray.ndarray(self, /, *args, **kwargs)
numpy.core.multiarray.nditer(self, /, *args, **kwargs)
numpy.core.ndarray(self, /, *args, **kwargs)
numpy.core.ndim(a)
numpy.core.nditer(self, /, *args, **kwargs)
numpy.core.nonzero(a)
numpy.core.number(self, /, *args, **kwargs)
numpy.core.numeric.AxisError(self, axis, ndim=None, msg_prefix=None)
numpy.core.numeric.ComplexWarning(self, /, *args, **kwargs)
numpy.core.numeric.TooHardError(self, /, *args, **kwargs)
numpy.core.numeric._maketup(descr, val)
numpy.core.numeric._mode_from_name(mode)
numpy.core.numeric._move_axis_to_0(a, axis)
numpy.core.numeric._unspecified(self, /, *args, **kwargs)
numpy.core.numeric.alen(a)
numpy.core.numeric.all(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.numeric.allclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False)
numpy.core.numeric.alltrue(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.numeric.amax(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.numeric.amin(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.numeric.any(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.numeric.argmax(a, axis=None, out=None)
numpy.core.numeric.argmin(a, axis=None, out=None)
numpy.core.numeric.argpartition(a, kth, axis=-1, kind='introselect', order=None)
numpy.core.numeric.argsort(a, axis=-1, kind='quicksort', order=None)
numpy.core.numeric.argwhere(a)
numpy.core.numeric.around(a, decimals=0, out=None)
numpy.core.numeric.array2string(a, max_line_width=None, precision=None, suppress_small=None, separator=' ', prefix='', style=<class 'numpy._globals._NoValue'>, formatter=None, threshold=None, edgeitems=None, sign=None, floatmode=None, suffix='', **kwarg)
numpy.core.numeric.array_equal(a1, a2)
numpy.core.numeric.array_equiv(a1, a2)
numpy.core.numeric.array_repr(arr, max_line_width=None, precision=None, suppress_small=None)
numpy.core.numeric.array_str(a, max_line_width=None, precision=None, suppress_small=None)
numpy.core.numeric.asanyarray(a, dtype=None, order=None)
numpy.core.numeric.asarray(a, dtype=None, order=None)
numpy.core.numeric.ascontiguousarray(a, dtype=None)
numpy.core.numeric.asfortranarray(a, dtype=None)
numpy.core.numeric.base_repr(number, base=2, padding=0)
numpy.core.numeric.basestring(self, /, *args, **kwargs)
numpy.core.numeric.binary_repr(num, width=None)
numpy.core.numeric.bool8(self, /, *args, **kwargs)
numpy.core.numeric.bool_(self, /, *args, **kwargs)
numpy.core.numeric.broadcast(self, /, *args, **kwargs)
numpy.core.numeric.busdaycalendar(self, /, *args, **kwargs)
numpy.core.numeric.byte(self, /, *args, **kwargs)
numpy.core.numeric.bytes0(self, /, *args, **kwargs)
numpy.core.numeric.bytes_(self, /, *args, **kwargs)
numpy.core.numeric.cdouble(self, /, *args, **kwargs)
numpy.core.numeric.cfloat(self, /, *args, **kwargs)
numpy.core.numeric.character(self, /, *args, **kwargs)
numpy.core.numeric.choose(a, choices, out=None, mode='raise')
numpy.core.numeric.clip(a, a_min, a_max, out=None)
numpy.core.numeric.clongdouble(self, /, *args, **kwargs)
numpy.core.numeric.clongfloat(self, /, *args, **kwargs)
numpy.core.numeric.complex128(self, /, *args, **kwargs)
numpy.core.numeric.complex64(self, /, *args, **kwargs)
numpy.core.numeric.complex_(self, /, *args, **kwargs)
numpy.core.numeric.complexfloating(self, /, *args, **kwargs)
numpy.core.numeric.compress(condition, a, axis=None, out=None)
numpy.core.numeric.convolve(a, v, mode='full')
numpy.core.numeric.correlate(a, v, mode='valid')
numpy.core.numeric.count_nonzero(a, axis=None)
numpy.core.numeric.cross(a, b, axisa=-1, axisb=-1, axisc=-1, axis=None)
numpy.core.numeric.csingle(self, /, *args, **kwargs)
numpy.core.numeric.cumprod(a, axis=None, dtype=None, out=None)
numpy.core.numeric.cumproduct(a, axis=None, dtype=None, out=None)
numpy.core.numeric.cumsum(a, axis=None, dtype=None, out=None)
numpy.core.numeric.datetime64(self, /, *args, **kwargs)
numpy.core.numeric.diagonal(a, offset=0, axis1=0, axis2=1)
numpy.core.numeric.double(self, /, *args, **kwargs)
numpy.core.numeric.dtype(self, /, *args, **kwargs)
numpy.core.numeric.errstate(self, **kwargs)
numpy.core.numeric.extend_all(module)
numpy.core.numeric.find_common_type(array_types, scalar_types)
numpy.core.numeric.flatiter(self, /, *args, **kwargs)
numpy.core.numeric.flatnonzero(a)
numpy.core.numeric.flexible(self, /, *args, **kwargs)
numpy.core.numeric.float16(self, /, *args, **kwargs)
numpy.core.numeric.float32(self, /, *args, **kwargs)
numpy.core.numeric.float64(self, /, *args, **kwargs)
numpy.core.numeric.float_(self, /, *args, **kwargs)
numpy.core.numeric.floating(self, /, *args, **kwargs)
numpy.core.numeric.format_float_positional(x, precision=None, unique=True, fractional=True, trim='k', sign=False, pad_left=None, pad_right=None)
numpy.core.numeric.format_float_scientific(x, precision=None, unique=True, trim='k', sign=False, pad_left=None, exp_digits=None)
numpy.core.numeric.fromfunction(function, shape, **kwargs)
numpy.core.numeric.full(shape, fill_value, dtype=None, order='C')
numpy.core.numeric.full_like(a, fill_value, dtype=None, order='K', subok=True)
numpy.core.numeric.generic(self, /, *args, **kwargs)
numpy.core.numeric.half(self, /, *args, **kwargs)
numpy.core.numeric.identity(n, dtype=None)
numpy.core.numeric.indices(dimensions, dtype=<class 'int'>)
numpy.core.numeric.inexact(self, /, *args, **kwargs)
numpy.core.numeric.int0(self, /, *args, **kwargs)
numpy.core.numeric.int16(self, /, *args, **kwargs)
numpy.core.numeric.int32(self, /, *args, **kwargs)
numpy.core.numeric.int64(self, /, *args, **kwargs)
numpy.core.numeric.int8(self, /, *args, **kwargs)
numpy.core.numeric.int_(self, /, *args, **kwargs)
numpy.core.numeric.intc(self, /, *args, **kwargs)
numpy.core.numeric.integer(self, /, *args, **kwargs)
numpy.core.numeric.intp(self, /, *args, **kwargs)
numpy.core.numeric.isclose(a, b, rtol=1e-05, atol=1e-08, equal_nan=False)
numpy.core.numeric.isfortran(a)
numpy.core.numeric.isscalar(num)
numpy.core.numeric.issctype(rep)
numpy.core.numeric.issubdtype(arg1, arg2)
numpy.core.numeric.load(file)
numpy.core.numeric.long(self, /, *args, **kwargs)
numpy.core.numeric.longcomplex(self, /, *args, **kwargs)
numpy.core.numeric.longdouble(self, /, *args, **kwargs)
numpy.core.numeric.longfloat(self, /, *args, **kwargs)
numpy.core.numeric.longlong(self, /, *args, **kwargs)
numpy.core.numeric.maximum_sctype(t)
numpy.core.numeric.mean(a, axis=None, dtype=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.numeric.moveaxis(a, source, destination)
numpy.core.numeric.ndarray(self, /, *args, **kwargs)
numpy.core.numeric.ndim(a)
numpy.core.numeric.nditer(self, /, *args, **kwargs)
numpy.core.numeric.nonzero(a)
numpy.core.numeric.normalize_axis_tuple(axis, ndim, argname=None, allow_duplicate=False)
numpy.core.numeric.number(self, /, *args, **kwargs)
numpy.core.numeric.obj2sctype(rep, default=None)
numpy.core.numeric.object0(self, /, *args, **kwargs)
numpy.core.numeric.object_(self, /, *args, **kwargs)
numpy.core.numeric.ones(shape, dtype=None, order='C')
numpy.core.numeric.ones_like(a, dtype=None, order='K', subok=True)
numpy.core.numeric.outer(a, b, out=None)
numpy.core.numeric.partition(a, kth, axis=-1, kind='introselect', order=None)
numpy.core.numeric.prod(a, axis=None, dtype=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.numeric.product(a, axis=None, dtype=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.numeric.ptp(a, axis=None, out=None)
numpy.core.numeric.put(a, ind, v, mode='raise')
numpy.core.numeric.rank(a)
numpy.core.numeric.ravel(a, order='C')
numpy.core.numeric.repeat(a, repeats, axis=None)
numpy.core.numeric.require(a, dtype=None, requirements=None)
numpy.core.numeric.reshape(a, newshape, order='C')
numpy.core.numeric.resize(a, new_shape)
numpy.core.numeric.roll(a, shift, axis=None)
numpy.core.numeric.rollaxis(a, axis, start=0)
numpy.core.numeric.round_(a, decimals=0, out=None)
numpy.core.numeric.sctype2char(sctype)
numpy.core.numeric.searchsorted(a, v, side='left', sorter=None)
numpy.core.numeric.set_printoptions(precision=None, threshold=None, edgeitems=None, linewidth=None, suppress=None, nanstr=None, infstr=None, formatter=None, sign=None, floatmode=None, **kwarg)
numpy.core.numeric.set_string_function(f, repr=True)
numpy.core.numeric.setbufsize(size)
numpy.core.numeric.seterr(all=None, divide=None, over=None, under=None, invalid=None)
numpy.core.numeric.seterrcall(func)
numpy.core.numeric.shape(a)
numpy.core.numeric.short(self, /, *args, **kwargs)
numpy.core.numeric.signedinteger(self, /, *args, **kwargs)
numpy.core.numeric.single(self, /, *args, **kwargs)
numpy.core.numeric.singlecomplex(self, /, *args, **kwargs)
numpy.core.numeric.size(a, axis=None)
numpy.core.numeric.sometrue(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.numeric.sort(a, axis=-1, kind='quicksort', order=None)
numpy.core.numeric.squeeze(a, axis=None)
numpy.core.numeric.std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.numeric.str0(self, /, *args, **kwargs)
numpy.core.numeric.str_(self, /, *args, **kwargs)
numpy.core.numeric.string_(self, /, *args, **kwargs)
numpy.core.numeric.sum(a, axis=None, dtype=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.numeric.swapaxes(a, axis1, axis2)
numpy.core.numeric.take(a, indices, axis=None, out=None, mode='raise')
numpy.core.numeric.tensordot(a, b, axes=2)
numpy.core.numeric.timedelta64(self, /, *args, **kwargs)
numpy.core.numeric.trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None)
numpy.core.numeric.transpose(a, axes=None)
numpy.core.numeric.ubyte(self, /, *args, **kwargs)
numpy.core.numeric.ufunc(self, /, *args, **kwargs)
numpy.core.numeric.uint(self, /, *args, **kwargs)
numpy.core.numeric.uint0(self, /, *args, **kwargs)
numpy.core.numeric.uint16(self, /, *args, **kwargs)
numpy.core.numeric.uint32(self, /, *args, **kwargs)
numpy.core.numeric.uint64(self, /, *args, **kwargs)
numpy.core.numeric.uint8(self, /, *args, **kwargs)
numpy.core.numeric.uintc(self, /, *args, **kwargs)
numpy.core.numeric.uintp(self, /, *args, **kwargs)
numpy.core.numeric.ulonglong(self, /, *args, **kwargs)
numpy.core.numeric.unicode(self, /, *args, **kwargs)
numpy.core.numeric.unicode_(self, /, *args, **kwargs)
numpy.core.numeric.unsignedinteger(self, /, *args, **kwargs)
numpy.core.numeric.ushort(self, /, *args, **kwargs)
numpy.core.numeric.var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.numeric.void(self, /, *args, **kwargs)
numpy.core.numeric.void0(self, /, *args, **kwargs)
numpy.core.numeric.zeros_like(a, dtype=None, order='K', subok=True)
numpy.core.numerictypes._add_array_type(typename, bits)
numpy.core.numerictypes._can_coerce_all(dtypelist, start=0)
numpy.core.numerictypes._evalname(name)
numpy.core.numerictypes._find_common_coerce(a, b)
numpy.core.numerictypes._typedict(self, /, *args, **kwargs)
numpy.core.numerictypes.bitname(obj)
numpy.core.numerictypes.bool(self, /, *args, **kwargs)
numpy.core.numerictypes.bool8(self, /, *args, **kwargs)
numpy.core.numerictypes.bool_(self, /, *args, **kwargs)
numpy.core.numerictypes.busdaycalendar(self, /, *args, **kwargs)
numpy.core.numerictypes.byte(self, /, *args, **kwargs)
numpy.core.numerictypes.bytes(self, /, *args, **kwargs)
numpy.core.numerictypes.bytes0(self, /, *args, **kwargs)
numpy.core.numerictypes.bytes_(self, /, *args, **kwargs)
numpy.core.numerictypes.cdouble(self, /, *args, **kwargs)
numpy.core.numerictypes.cfloat(self, /, *args, **kwargs)
numpy.core.numerictypes.character(self, /, *args, **kwargs)
numpy.core.numerictypes.clongdouble(self, /, *args, **kwargs)
numpy.core.numerictypes.clongfloat(self, /, *args, **kwargs)
numpy.core.numerictypes.complex(self, /, *args, **kwargs)
numpy.core.numerictypes.complex128(self, /, *args, **kwargs)
numpy.core.numerictypes.complex64(self, /, *args, **kwargs)
numpy.core.numerictypes.complex_(self, /, *args, **kwargs)
numpy.core.numerictypes.complexfloating(self, /, *args, **kwargs)
numpy.core.numerictypes.csingle(self, /, *args, **kwargs)
numpy.core.numerictypes.datetime64(self, /, *args, **kwargs)
numpy.core.numerictypes.double(self, /, *args, **kwargs)
numpy.core.numerictypes.dtype(self, /, *args, **kwargs)
numpy.core.numerictypes.english_capitalize(s)
numpy.core.numerictypes.english_lower(s)
numpy.core.numerictypes.english_upper(s)
numpy.core.numerictypes.find_common_type(array_types, scalar_types)
numpy.core.numerictypes.flexible(self, /, *args, **kwargs)
numpy.core.numerictypes.float(self, /, *args, **kwargs)
numpy.core.numerictypes.float16(self, /, *args, **kwargs)
numpy.core.numerictypes.float32(self, /, *args, **kwargs)
numpy.core.numerictypes.float64(self, /, *args, **kwargs)
numpy.core.numerictypes.float_(self, /, *args, **kwargs)
numpy.core.numerictypes.floating(self, /, *args, **kwargs)
numpy.core.numerictypes.generic(self, /, *args, **kwargs)
numpy.core.numerictypes.half(self, /, *args, **kwargs)
numpy.core.numerictypes.inexact(self, /, *args, **kwargs)
numpy.core.numerictypes.int(self, /, *args, **kwargs)
numpy.core.numerictypes.int0(self, /, *args, **kwargs)
numpy.core.numerictypes.int16(self, /, *args, **kwargs)
numpy.core.numerictypes.int32(self, /, *args, **kwargs)
numpy.core.numerictypes.int64(self, /, *args, **kwargs)
numpy.core.numerictypes.int8(self, /, *args, **kwargs)
numpy.core.numerictypes.int_(self, /, *args, **kwargs)
numpy.core.numerictypes.intc(self, /, *args, **kwargs)
numpy.core.numerictypes.integer(self, /, *args, **kwargs)
numpy.core.numerictypes.intp(self, /, *args, **kwargs)
numpy.core.numerictypes.issctype(rep)
numpy.core.numerictypes.issubclass_(arg1, arg2)
numpy.core.numerictypes.issubdtype(arg1, arg2)
numpy.core.numerictypes.issubsctype(arg1, arg2)
numpy.core.numerictypes.long(self, /, *args, **kwargs)
numpy.core.numerictypes.longcomplex(self, /, *args, **kwargs)
numpy.core.numerictypes.longdouble(self, /, *args, **kwargs)
numpy.core.numerictypes.longfloat(self, /, *args, **kwargs)
numpy.core.numerictypes.longlong(self, /, *args, **kwargs)
numpy.core.numerictypes.maximum_sctype(t)
numpy.core.numerictypes.ndarray(self, /, *args, **kwargs)
numpy.core.numerictypes.number(self, /, *args, **kwargs)
numpy.core.numerictypes.obj2sctype(rep, default=None)
numpy.core.numerictypes.object(self, /, *args, **kwargs)
numpy.core.numerictypes.object0(self, /, *args, **kwargs)
numpy.core.numerictypes.object_(self, /, *args, **kwargs)
numpy.core.numerictypes.sctype2char(sctype)
numpy.core.numerictypes.short(self, /, *args, **kwargs)
numpy.core.numerictypes.signedinteger(self, /, *args, **kwargs)
numpy.core.numerictypes.single(self, /, *args, **kwargs)
numpy.core.numerictypes.singlecomplex(self, /, *args, **kwargs)
numpy.core.numerictypes.str(self, /, *args, **kwargs)
numpy.core.numerictypes.str0(self, /, *args, **kwargs)
numpy.core.numerictypes.str_(self, /, *args, **kwargs)
numpy.core.numerictypes.string_(self, /, *args, **kwargs)
numpy.core.numerictypes.timedelta64(self, /, *args, **kwargs)
numpy.core.numerictypes.ubyte(self, /, *args, **kwargs)
numpy.core.numerictypes.uint(self, /, *args, **kwargs)
numpy.core.numerictypes.uint0(self, /, *args, **kwargs)
numpy.core.numerictypes.uint16(self, /, *args, **kwargs)
numpy.core.numerictypes.uint32(self, /, *args, **kwargs)
numpy.core.numerictypes.uint64(self, /, *args, **kwargs)
numpy.core.numerictypes.uint8(self, /, *args, **kwargs)
numpy.core.numerictypes.uintc(self, /, *args, **kwargs)
numpy.core.numerictypes.uintp(self, /, *args, **kwargs)
numpy.core.numerictypes.ulonglong(self, /, *args, **kwargs)
numpy.core.numerictypes.unicode(self, /, *args, **kwargs)
numpy.core.numerictypes.unicode_(self, /, *args, **kwargs)
numpy.core.numerictypes.unsignedinteger(self, /, *args, **kwargs)
numpy.core.numerictypes.ushort(self, /, *args, **kwargs)
numpy.core.numerictypes.void(self, /, *args, **kwargs)
numpy.core.numerictypes.void0(self, /, *args, **kwargs)
numpy.core.obj2sctype(rep, default=None)
numpy.core.object0(self, /, *args, **kwargs)
numpy.core.object_(self, /, *args, **kwargs)
numpy.core.ones(shape, dtype=None, order='C')
numpy.core.ones_like(a, dtype=None, order='K', subok=True)
numpy.core.outer(a, b, out=None)
numpy.core.partition(a, kth, axis=-1, kind='introselect', order=None)
numpy.core.prod(a, axis=None, dtype=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.product(a, axis=None, dtype=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.ptp(a, axis=None, out=None)
numpy.core.put(a, ind, v, mode='raise')
numpy.core.rank(a)
numpy.core.ravel(a, order='C')
numpy.core.recarray(self, /, *args, **kwargs)
numpy.core.record(self, /, *args, **kwargs)
numpy.core.records.array(obj, dtype=None, shape=None, offset=0, strides=None, formats=None, names=None, titles=None, aligned=False, byteorder=None, copy=True)
numpy.core.records.bytes(self, /, *args, **kwargs)
numpy.core.records.find_duplicate(list)
numpy.core.records.format_parser(self, formats, names, titles, aligned=False, byteorder=None)
numpy.core.records.fromarrays(arrayList, dtype=None, shape=None, formats=None, names=None, titles=None, aligned=False, byteorder=None)
numpy.core.records.fromfile(fd, dtype=None, shape=None, offset=0, formats=None, names=None, titles=None, aligned=False, byteorder=None)
numpy.core.records.fromrecords(recList, dtype=None, shape=None, formats=None, names=None, titles=None, aligned=False, byteorder=None)
numpy.core.records.fromstring(datastring, dtype=None, shape=None, offset=0, formats=None, names=None, titles=None, aligned=False, byteorder=None)
numpy.core.records.get_remaining_size(fd)
numpy.core.records.isfileobj(f)
numpy.core.records.long(self, /, *args, **kwargs)
numpy.core.records.ndarray(self, /, *args, **kwargs)
numpy.core.records.recarray(self, /, *args, **kwargs)
numpy.core.records.record(self, /, *args, **kwargs)
numpy.core.repeat(a, repeats, axis=None)
numpy.core.require(a, dtype=None, requirements=None)
numpy.core.reshape(a, newshape, order='C')
numpy.core.resize(a, new_shape)
numpy.core.roll(a, shift, axis=None)
numpy.core.rollaxis(a, axis, start=0)
numpy.core.round(a, decimals=0, out=None)
numpy.core.round_(a, decimals=0, out=None)
numpy.core.sctype2char(sctype)
numpy.core.searchsorted(a, v, side='left', sorter=None)
numpy.core.set_printoptions(precision=None, threshold=None, edgeitems=None, linewidth=None, suppress=None, nanstr=None, infstr=None, formatter=None, sign=None, floatmode=None, **kwarg)
numpy.core.set_string_function(f, repr=True)
numpy.core.setbufsize(size)
numpy.core.seterr(all=None, divide=None, over=None, under=None, invalid=None)
numpy.core.seterrcall(func)
numpy.core.shape(a)
numpy.core.shape_base._block(arrays, max_depth, result_ndim)
numpy.core.shape_base._block_check_depths_match(arrays, parent_index=[])
numpy.core.shape_base.asanyarray(a, dtype=None, order=None)
numpy.core.shape_base.block(arrays)
numpy.core.shape_base.hstack(tup)
numpy.core.shape_base.stack(arrays, axis=0, out=None)
numpy.core.shape_base.vstack(tup)
numpy.core.short(self, /, *args, **kwargs)
numpy.core.signedinteger(self, /, *args, **kwargs)
numpy.core.single(self, /, *args, **kwargs)
numpy.core.singlecomplex(self, /, *args, **kwargs)
numpy.core.size(a, axis=None)
numpy.core.sometrue(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.sort(a, axis=-1, kind='quicksort', order=None)
numpy.core.squeeze(a, axis=None)
numpy.core.stack(arrays, axis=0, out=None)
numpy.core.std(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.str0(self, /, *args, **kwargs)
numpy.core.str_(self, /, *args, **kwargs)
numpy.core.string_(self, /, *args, **kwargs)
numpy.core.sum(a, axis=None, dtype=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.swapaxes(a, axis1, axis2)
numpy.core.take(a, indices, axis=None, out=None, mode='raise')
numpy.core.tensordot(a, b, axes=2)
numpy.core.timedelta64(self, /, *args, **kwargs)
numpy.core.trace(a, offset=0, axis1=0, axis2=1, dtype=None, out=None)
numpy.core.transpose(a, axes=None)
numpy.core.ubyte(self, /, *args, **kwargs)
numpy.core.ufunc(self, /, *args, **kwargs)
numpy.core.uint(self, /, *args, **kwargs)
numpy.core.uint0(self, /, *args, **kwargs)
numpy.core.uint16(self, /, *args, **kwargs)
numpy.core.uint32(self, /, *args, **kwargs)
numpy.core.uint64(self, /, *args, **kwargs)
numpy.core.uint8(self, /, *args, **kwargs)
numpy.core.uintc(self, /, *args, **kwargs)
numpy.core.uintp(self, /, *args, **kwargs)
numpy.core.ulonglong(self, /, *args, **kwargs)
numpy.core.unicode(self, /, *args, **kwargs)
numpy.core.unicode_(self, /, *args, **kwargs)
numpy.core.unsignedinteger(self, /, *args, **kwargs)
numpy.core.ushort(self, /, *args, **kwargs)
numpy.core.var(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<class 'numpy._globals._NoValue'>)
numpy.core.void(self, /, *args, **kwargs)
numpy.core.void0(self, /, *args, **kwargs)
numpy.core.vstack(tup)
numpy.core.zeros_like(a, dtype=None, order='K', subok=True)
numpy.ctypeslib._ARRAY_TYPE(self, /, *args, **kwargs)
numpy.ctypeslib._dtype(self, /, *args, **kwargs)
numpy.ctypeslib._flags_fromnum(num)
numpy.ctypeslib._ndptr(self, /, *args, **kwargs)
numpy.ctypeslib._ndptr.from_param(obj)
numpy.ctypeslib._ndptr_base(self, /, *args, **kwargs)
numpy.ctypeslib._num_fromflags(flaglist)
numpy.ctypeslib.as_array(obj, shape=None)
numpy.ctypeslib.as_ctypes(obj)
numpy.ctypeslib.c_intp(self, /, *args, **kwargs)
numpy.ctypeslib.flagsobj(self, /, *args, **kwargs)
numpy.ctypeslib.integer(self, /, *args, **kwargs)
numpy.ctypeslib.load_library(libname, loader_path)
numpy.ctypeslib.ndarray(self, /, *args, **kwargs)
numpy.ctypeslib.ndpointer(dtype=None, ndim=None, shape=None, flags=None)
numpy.ctypeslib.prep_array(array_type)
numpy.ctypeslib.prep_pointer(pointer_obj, shape)
numpy.ctypeslib.prep_simple(simple_type, dtype)
numpy.ctypeslib.tp(self, /, *args, **kwargs)
numpy.distutils.FormatError(self, msg)
numpy.distutils.LibraryInfo(self, name, description, version, sections, vars, requires=None)
numpy.distutils.PkgNotFound(self, msg)
numpy.distutils.VariableSet(self, d)
numpy.distutils.__config__.get_info(name)
numpy.distutils.__version__.__class__(self, /, *args, **kwargs)
numpy.distutils.ccompiler.CCompiler(self, verbose=0, dry_run=0, force=0)
numpy.distutils.ccompiler.CCompilerError(self, /, *args, **kwargs)
numpy.distutils.ccompiler.CCompiler_compile(self, sources, output_dir=None, macros=None, include_dirs=None, debug=0, extra_preargs=None, extra_postargs=None, depends=None)
numpy.distutils.ccompiler.CCompiler_customize(self, dist, need_cxx=0)
numpy.distutils.ccompiler.CCompiler_customize_cmd(self, cmd, ignore=())
numpy.distutils.ccompiler.CCompiler_cxx_compiler(self)
numpy.distutils.ccompiler.CCompiler_find_executables(self)
numpy.distutils.ccompiler.CCompiler_get_version(self, force=False, ok_status=[0])
numpy.distutils.ccompiler.CCompiler_object_filenames(self, source_filenames, strip_dir=0, output_dir='')
numpy.distutils.ccompiler.CCompiler_show_customization(self)
numpy.distutils.ccompiler.CCompiler_spawn(self, cmd, display=None)
numpy.distutils.ccompiler.CompileError(self, /, *args, **kwargs)
numpy.distutils.ccompiler.DistutilsArgError(self, /, *args, **kwargs)
numpy.distutils.ccompiler.DistutilsByteCompileError(self, /, *args, **kwargs)
numpy.distutils.ccompiler.DistutilsClassError(self, /, *args, **kwargs)
numpy.distutils.ccompiler.DistutilsError(self, /, *args, **kwargs)
numpy.distutils.ccompiler.DistutilsExecError(self, /, *args, **kwargs)
numpy.distutils.ccompiler.DistutilsFileError(self, /, *args, **kwargs)
numpy.distutils.ccompiler.DistutilsGetoptError(self, /, *args, **kwargs)
numpy.distutils.ccompiler.DistutilsInternalError(self, /, *args, **kwargs)
numpy.distutils.ccompiler.DistutilsModuleError(self, /, *args, **kwargs)
numpy.distutils.ccompiler.DistutilsOptionError(self, /, *args, **kwargs)
numpy.distutils.ccompiler.DistutilsPlatformError(self, /, *args, **kwargs)
numpy.distutils.ccompiler.DistutilsSetupError(self, /, *args, **kwargs)
numpy.distutils.ccompiler.DistutilsTemplateError(self, /, *args, **kwargs)
numpy.distutils.ccompiler.LibError(self, /, *args, **kwargs)
numpy.distutils.ccompiler.LinkError(self, /, *args, **kwargs)
numpy.distutils.ccompiler.LooseVersion(self, vstring=None)
numpy.distutils.ccompiler.PreprocessError(self, /, *args, **kwargs)
numpy.distutils.ccompiler.UnknownFileError(self, /, *args, **kwargs)
numpy.distutils.ccompiler._commandline_dep_string(cc_args, extra_postargs, pp_opts)
numpy.distutils.ccompiler._compiler_to_string(compiler)
numpy.distutils.ccompiler._distutils_gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)
numpy.distutils.ccompiler._distutils_gen_preprocess_options(macros, include_dirs)
numpy.distutils.ccompiler._distutils_new_compiler(plat=None, compiler=None, verbose=0, dry_run=0, force=0)
numpy.distutils.ccompiler._needs_build(obj, cc_args, extra_postargs, pp_opts)
numpy.distutils.ccompiler.copy(x)
numpy.distutils.ccompiler.customize_compiler(compiler)
numpy.distutils.ccompiler.cyg2win32(path)
numpy.distutils.ccompiler.exec_command(command, execute_in='', use_shell=None, use_tee=None, _with_python=1, **env)
numpy.distutils.ccompiler.execute(func, args, msg=None, verbose=0, dry_run=0)
numpy.distutils.ccompiler.gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)
numpy.distutils.ccompiler.gen_preprocess_options(macros, include_dirs)
numpy.distutils.ccompiler.get_default_compiler(osname=None, platform=None)
numpy.distutils.ccompiler.is_sequence(seq)
numpy.distutils.ccompiler.mkpath(name, mode=511, verbose=1, dry_run=0)
numpy.distutils.ccompiler.move_file(src, dst, verbose=1, dry_run=0)
numpy.distutils.ccompiler.new_compiler(plat=None, compiler=None, verbose=0, dry_run=0, force=0)
numpy.distutils.ccompiler.newer_group(sources, target, missing='error')
numpy.distutils.ccompiler.newer_pairwise(sources, targets)
numpy.distutils.ccompiler.quote_args(args)
numpy.distutils.ccompiler.replace_method(klass, method_name, func)
numpy.distutils.ccompiler.simple_version_match(pat='[-.\\d]+', ignore='', start='')
numpy.distutils.ccompiler.spawn(cmd, search_path=1, verbose=0, dry_run=0)
numpy.distutils.ccompiler.split_quoted(s)
numpy.distutils.customized_ccompiler(plat=None, compiler=None)
numpy.distutils.customized_fcompiler(plat=None, compiler=None)
numpy.distutils.environment.Distribution(self, attrs=None)
numpy.distutils.environment.EnvironmentConfig(self, distutils_section='ALL', **kw)
numpy.distutils.environment.__metaclass__(self, /, *args, **kwargs)
numpy.distutils.exec_command._exec_command(command, use_shell=None, use_tee=None, **env)
numpy.distutils.exec_command._preserve_environment(names)
numpy.distutils.exec_command._quote_arg(arg)
numpy.distutils.exec_command._supports_fileno(stream)
numpy.distutils.exec_command.exec_command(command, execute_in='', use_shell=None, use_tee=None, _with_python=1, **env)
numpy.distutils.exec_command.find_executable(exe, path=None, _cache={})
numpy.distutils.exec_command.is_sequence(seq)
numpy.distutils.exec_command.make_temp_file(suffix='', prefix='', text=True)
numpy.distutils.fcompiler.CCompiler(self, verbose=0, dry_run=0, force=0)
numpy.distutils.fcompiler.CompileError(self, /, *args, **kwargs)
numpy.distutils.fcompiler.CompilerNotFound(self, /, *args, **kwargs)
numpy.distutils.fcompiler.DistutilsExecError(self, /, *args, **kwargs)
numpy.distutils.fcompiler.DistutilsModuleError(self, /, *args, **kwargs)
numpy.distutils.fcompiler.DistutilsPlatformError(self, /, *args, **kwargs)
numpy.distutils.fcompiler.EnvironmentConfig(self, distutils_section='ALL', **kw)
numpy.distutils.fcompiler.FCompiler(self, *args, **kw)
numpy.distutils.fcompiler.FancyGetopt(self, option_table=None)
numpy.distutils.fcompiler.LinkError(self, /, *args, **kwargs)
numpy.distutils.fcompiler.__metaclass__(self, /, *args, **kwargs)
numpy.distutils.fcompiler._find_existing_fcompiler(compiler_types, osname=None, platform=None, requiref90=False, c_compiler=None)
numpy.distutils.fcompiler.all_strings(lst)
numpy.distutils.fcompiler.available_fcompilers_for_platform(osname=None, platform=None)
numpy.distutils.fcompiler.find_executable(exe, path=None, _cache={})
numpy.distutils.fcompiler.flaglist(s)
numpy.distutils.fcompiler.gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)
numpy.distutils.fcompiler.get_default_fcompiler(osname=None, platform=None, requiref90=False, c_compiler=None)
numpy.distutils.fcompiler.get_f77flags(src)
numpy.distutils.fcompiler.get_python_lib(plat_specific=0, standard_lib=0, prefix=None)
numpy.distutils.fcompiler.get_shared_lib_extension(is_python_ext=False)
numpy.distutils.fcompiler.has_f90_header(src)
numpy.distutils.fcompiler.is_free_format(file)
numpy.distutils.fcompiler.is_sequence(seq)
numpy.distutils.fcompiler.is_sequence_of_strings(seq)
numpy.distutils.fcompiler.is_string(s)
numpy.distutils.fcompiler.make_temp_file(suffix='', prefix='', text=True)
numpy.distutils.fcompiler.new_fcompiler(plat=None, compiler=None, verbose=0, dry_run=0, force=0, requiref90=False, c_compiler=None)
numpy.distutils.fcompiler.open_latin1(filename, mode='r')
numpy.distutils.fcompiler.show_fcompilers(dist=None)
numpy.distutils.fcompiler.split_quoted(s)
numpy.distutils.fcompiler.str2bool(s)
numpy.distutils.fcompiler.strtobool(val)
numpy.distutils.log.Log(self, threshold=3)
numpy.distutils.log._fix_args(args, flag=1)
numpy.distutils.log.cyan_text(s)
numpy.distutils.log.default_text(s)
numpy.distutils.log.green_text(s)
numpy.distutils.log.is_sequence(seq)
numpy.distutils.log.is_string(s)
numpy.distutils.log.old_Log(self, threshold=3)
numpy.distutils.log.red_text(s)
numpy.distutils.log.set_threshold(level, force=False)
numpy.distutils.log.set_verbosity(v, force=False)
numpy.distutils.misc_util.Configuration(self, package_name=None, parent_name=None, top_path=None, package_path=None, caller_level=1, setup_name='setup.py', **attrs)
numpy.distutils.misc_util.DistutilsError(self, /, *args, **kwargs)
numpy.distutils.misc_util.InstallableLib(self, name, build_info, target_dir)
numpy.distutils.misc_util._commandline_dep_string(cc_args, extra_postargs, pp_opts)
numpy.distutils.misc_util._fix_paths(paths, local_path, include_non_existing)
numpy.distutils.misc_util._get_directories(list_of_sources)
numpy.distutils.misc_util._get_f90_modules(source)
numpy.distutils.misc_util._get_headers(directory_list)
numpy.distutils.misc_util.all_strings(lst)
numpy.distutils.misc_util.allpath(name)
numpy.distutils.misc_util.appendpath(prefix, path)
numpy.distutils.misc_util.as_list(seq)
numpy.distutils.misc_util.basestring(self, /, *args, **kwargs)
numpy.distutils.misc_util.blue_text(s)
numpy.distutils.misc_util.colour_text(s, fg=None, bg=None)
numpy.distutils.misc_util.cyan_text(s)
numpy.distutils.misc_util.cyg2win32(path)
numpy.distutils.misc_util.default_config_dict(name=None, parent_name=None, local_path=None)
numpy.distutils.misc_util.default_text(s)
numpy.distutils.misc_util.dict_append(d, **kws)
numpy.distutils.misc_util.filter_sources(sources)
numpy.distutils.misc_util.general_source_directories_files(top_path)
numpy.distutils.misc_util.general_source_files(top_path)
numpy.distutils.misc_util.generate_config_py(target)
numpy.distutils.misc_util.get_cmd(cmdname, _cache={})
numpy.distutils.misc_util.get_data_files(data)
numpy.distutils.misc_util.get_dependencies(sources)
numpy.distutils.misc_util.get_ext_source_files(ext)
numpy.distutils.misc_util.get_frame(level=0)
numpy.distutils.misc_util.get_info(pkgname, dirs=None)
numpy.distutils.misc_util.get_language(sources)
numpy.distutils.misc_util.get_lib_source_files(lib)
numpy.distutils.misc_util.get_mathlibs(path=None)
numpy.distutils.misc_util.get_path_from_frame(frame, parent_path=None)
numpy.distutils.misc_util.get_pkg_info(pkgname, dirs=None)
numpy.distutils.misc_util.get_script_files(scripts)
numpy.distutils.misc_util.get_shared_lib_extension(is_python_ext=False)
numpy.distutils.misc_util.gpaths(paths, local_path='', include_non_existing=True)
numpy.distutils.misc_util.green_text(s)
numpy.distutils.misc_util.has_cxx_sources(sources)
numpy.distutils.misc_util.has_f_sources(sources)
numpy.distutils.misc_util.is_glob_pattern(s)
numpy.distutils.misc_util.is_local_src_dir(directory)
numpy.distutils.misc_util.is_sequence(seq)
numpy.distutils.misc_util.is_string(s)
numpy.distutils.misc_util.make_temp_file(suffix='', prefix='', text=True)
numpy.distutils.misc_util.minrelpath(path)
numpy.distutils.misc_util.msvc_version(compiler)
numpy.distutils.misc_util.npy_load_module(name, fn, info=None)
numpy.distutils.misc_util.quote_args(args)
numpy.distutils.misc_util.red_text(s)
numpy.distutils.misc_util.rel_path(path, parent_path)
numpy.distutils.misc_util.tlocal(self, /, *args, **kwargs)
numpy.distutils.misc_util.yellow_text(s)
numpy.distutils.npy_pkg_config.FormatError(self, msg)
numpy.distutils.npy_pkg_config.LibraryInfo(self, name, description, version, sections, vars, requires=None)
numpy.distutils.npy_pkg_config.NoOptionError(self, option, section)
numpy.distutils.npy_pkg_config.PkgNotFound(self, msg)
numpy.distutils.npy_pkg_config.RawConfigParser(self, defaults=None, dict_type=<class 'collections.OrderedDict'>, allow_no_value=False, *, delimiters=('=', ':'), comment_prefixes=('#', ';'), inline_comment_prefixes=None, strict=True, empty_lines_in_values=True, default_section='DEFAULT', interpolation=<object object at 0x0000000005211C40>, converters=<object object at 0x0000000005211C40>)
numpy.distutils.npy_pkg_config.VariableSet(self, d)
numpy.distutils.npy_pkg_config._escape_backslash(val)
numpy.distutils.npy_pkg_config._read_config_imp(filenames, dirs=None)
numpy.distutils.npy_pkg_config.parse_config(filename, dirs=None)
numpy.distutils.npy_pkg_config.parse_flags(line)
numpy.distutils.npy_pkg_config.parse_meta(config)
numpy.distutils.npy_pkg_config.parse_sections(config)
numpy.distutils.npy_pkg_config.parse_variables(config)
numpy.distutils.npy_pkg_config.pkg_to_filename(pkg_name)
numpy.distutils.npy_pkg_config.read_config(pkgname, dirs=None)
numpy.distutils.parse_flags(line)
numpy.distutils.read_config(pkgname, dirs=None)
numpy.distutils.unixccompiler.CCompiler(self, verbose=0, dry_run=0, force=0)
numpy.distutils.unixccompiler.CompileError(self, /, *args, **kwargs)
numpy.distutils.unixccompiler.DistutilsExecError(self, /, *args, **kwargs)
numpy.distutils.unixccompiler.LibError(self, /, *args, **kwargs)
numpy.distutils.unixccompiler.LinkError(self, /, *args, **kwargs)
numpy.distutils.unixccompiler.UnixCCompiler(self, verbose=0, dry_run=0, force=0)
numpy.distutils.unixccompiler.UnixCCompiler__compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
numpy.distutils.unixccompiler.UnixCCompiler_create_static_lib(self, objects, output_libname, output_dir=None, debug=0, target_lang=None)
numpy.distutils.unixccompiler._commandline_dep_string(cc_args, extra_postargs, pp_opts)
numpy.distutils.unixccompiler.gen_lib_options(compiler, library_dirs, runtime_library_dirs, libraries)
numpy.distutils.unixccompiler.gen_preprocess_options(macros, include_dirs)
numpy.distutils.unixccompiler.newer(source, target)
numpy.distutils.unixccompiler.replace_method(klass, method_name, func)
numpy.f2py.auxfuncs.F2PYError(self, /, *args, **kwargs)
numpy.f2py.auxfuncs._isstring(var)
numpy.f2py.auxfuncs.applyrules(rules, d, var={})
numpy.f2py.auxfuncs.containscommon(rout)
numpy.f2py.auxfuncs.containsmodule(block)
numpy.f2py.auxfuncs.debugcapi(var)
numpy.f2py.auxfuncs.dictappend(rd, ar)
numpy.f2py.auxfuncs.flatlist(l)
numpy.f2py.auxfuncs.gentitle(name)
numpy.f2py.auxfuncs.get_kind(var)
numpy.f2py.auxfuncs.getargs(rout)
numpy.f2py.auxfuncs.getargs2(rout)
numpy.f2py.auxfuncs.getcallprotoargument(rout, cb_map={})
numpy.f2py.auxfuncs.getcallstatement(rout)
numpy.f2py.auxfuncs.getfortranname(rout)
numpy.f2py.auxfuncs.getmultilineblock(rout, blockname, comment=1, counter=0)
numpy.f2py.auxfuncs.getpymethoddef(rout)
numpy.f2py.auxfuncs.getrestdoc(rout)
numpy.f2py.auxfuncs.getusercode(rout)
numpy.f2py.auxfuncs.getusercode1(rout)
numpy.f2py.auxfuncs.hasassumedshape(rout)
numpy.f2py.auxfuncs.hasbody(rout)
numpy.f2py.auxfuncs.hascallstatement(rout)
numpy.f2py.auxfuncs.hascommon(rout)
numpy.f2py.auxfuncs.hasexternals(rout)
numpy.f2py.auxfuncs.hasinitvalue(var)
numpy.f2py.auxfuncs.hasinitvalueasstring(var)
numpy.f2py.auxfuncs.hasnote(var)
numpy.f2py.auxfuncs.hasresultnote(rout)
numpy.f2py.auxfuncs.hasvariables(rout)
numpy.f2py.auxfuncs.isallocatable(var)
numpy.f2py.auxfuncs.isarray(var)
numpy.f2py.auxfuncs.isarrayofstrings(var)
numpy.f2py.auxfuncs.ischaracter(var)
numpy.f2py.auxfuncs.iscomplex(var)
numpy.f2py.auxfuncs.iscomplexarray(var)
numpy.f2py.auxfuncs.iscomplexfunction(rout)
numpy.f2py.auxfuncs.iscomplexfunction_warn(rout)
numpy.f2py.auxfuncs.isdouble(var)
numpy.f2py.auxfuncs.isdummyroutine(rout)
numpy.f2py.auxfuncs.isexternal(var)
numpy.f2py.auxfuncs.isfalse(var)
numpy.f2py.auxfuncs.isfunction(rout)
numpy.f2py.auxfuncs.isfunction_wrap(rout)
numpy.f2py.auxfuncs.isint1array(var)
numpy.f2py.auxfuncs.isinteger(var)
numpy.f2py.auxfuncs.isintent_aligned16(var)
numpy.f2py.auxfuncs.isintent_aligned4(var)
numpy.f2py.auxfuncs.isintent_aligned8(var)
numpy.f2py.auxfuncs.isintent_aux(var)
numpy.f2py.auxfuncs.isintent_c(var)
numpy.f2py.auxfuncs.isintent_cache(var)
numpy.f2py.auxfuncs.isintent_callback(var)
numpy.f2py.auxfuncs.isintent_copy(var)
numpy.f2py.auxfuncs.isintent_hide(var)
numpy.f2py.auxfuncs.isintent_in(var)
numpy.f2py.auxfuncs.isintent_inout(var)
numpy.f2py.auxfuncs.isintent_inplace(var)
numpy.f2py.auxfuncs.isintent_nothide(var)
numpy.f2py.auxfuncs.isintent_out(var)
numpy.f2py.auxfuncs.isintent_overwrite(var)
numpy.f2py.auxfuncs.islogical(var)
numpy.f2py.auxfuncs.islogicalfunction(rout)
numpy.f2py.auxfuncs.islong_complex(var)
numpy.f2py.auxfuncs.islong_double(var)
numpy.f2py.auxfuncs.islong_doublefunction(rout)
numpy.f2py.auxfuncs.islong_long(var)
numpy.f2py.auxfuncs.islong_longfunction(rout)
numpy.f2py.auxfuncs.ismodule(rout)
numpy.f2py.auxfuncs.ismoduleroutine(rout)
numpy.f2py.auxfuncs.ismutable(var)
numpy.f2py.auxfuncs.isoptional(var)
numpy.f2py.auxfuncs.isprivate(var)
numpy.f2py.auxfuncs.isreal(var)
numpy.f2py.auxfuncs.isrequired(var)
numpy.f2py.auxfuncs.isroutine(rout)
numpy.f2py.auxfuncs.isscalar(var)
numpy.f2py.auxfuncs.issigned_array(var)
numpy.f2py.auxfuncs.issigned_chararray(var)
numpy.f2py.auxfuncs.issigned_long_longarray(var)
numpy.f2py.auxfuncs.issigned_shortarray(var)
numpy.f2py.auxfuncs.isstring(var)
numpy.f2py.auxfuncs.isstringarray(var)
numpy.f2py.auxfuncs.isstringfunction(rout)
numpy.f2py.auxfuncs.issubroutine(rout)
numpy.f2py.auxfuncs.issubroutine_wrap(rout)
numpy.f2py.auxfuncs.isthreadsafe(rout)
numpy.f2py.auxfuncs.istrue(var)
numpy.f2py.auxfuncs.isunsigned(var)
numpy.f2py.auxfuncs.isunsigned_char(var)
numpy.f2py.auxfuncs.isunsigned_chararray(var)
numpy.f2py.auxfuncs.isunsigned_long_long(var)
numpy.f2py.auxfuncs.isunsigned_long_longarray(var)
numpy.f2py.auxfuncs.isunsigned_short(var)
numpy.f2py.auxfuncs.isunsigned_shortarray(var)
numpy.f2py.auxfuncs.isunsignedarray(var)
numpy.f2py.auxfuncs.l_not(f)
numpy.f2py.auxfuncs.outmess(t)
numpy.f2py.auxfuncs.replace(str, d, defaultsep='')
numpy.f2py.auxfuncs.show(object, stream=None, indent=1, width=80, depth=None, *, compact=False)
numpy.f2py.auxfuncs.stripcomma(s)
numpy.f2py.auxfuncs.throw_error(self, mess)
numpy.f2py.capi_maps.applyrules(rules, d, var={})
numpy.f2py.capi_maps.cb_routsign2map(rout, um)
numpy.f2py.capi_maps.cb_sign2map(a, var, index=None)
numpy.f2py.capi_maps.common_sign2map(a, var)
numpy.f2py.capi_maps.debugcapi(var)
numpy.f2py.capi_maps.dictappend(rd, ar)
numpy.f2py.capi_maps.gentitle(name)
numpy.f2py.capi_maps.getargs2(rout)
numpy.f2py.capi_maps.getarrdims(a, var, verbose=0)
numpy.f2py.capi_maps.getarrdocsign(a, var)
numpy.f2py.capi_maps.getcallprotoargument(rout, cb_map={})
numpy.f2py.capi_maps.getcallstatement(rout)
numpy.f2py.capi_maps.getctype(var)
numpy.f2py.capi_maps.getfortranname(rout)
numpy.f2py.capi_maps.getinit(a, var)
numpy.f2py.capi_maps.getpydocsign(a, var)
numpy.f2py.capi_maps.getpymethoddef(rout)
numpy.f2py.capi_maps.getrestdoc(rout)
numpy.f2py.capi_maps.getstrlength(var)
numpy.f2py.capi_maps.getusercode(rout)
numpy.f2py.capi_maps.getusercode1(rout)
numpy.f2py.capi_maps.hasbody(rout)
numpy.f2py.capi_maps.hascallstatement(rout)
numpy.f2py.capi_maps.hascommon(rout)
numpy.f2py.capi_maps.hasexternals(rout)
numpy.f2py.capi_maps.hasinitvalue(var)
numpy.f2py.capi_maps.hasnote(var)
numpy.f2py.capi_maps.hasresultnote(rout)
numpy.f2py.capi_maps.isallocatable(var)
numpy.f2py.capi_maps.isarray(var)
numpy.f2py.capi_maps.isarrayofstrings(var)
numpy.f2py.capi_maps.iscomplex(var)
numpy.f2py.capi_maps.iscomplexarray(var)
numpy.f2py.capi_maps.iscomplexfunction(rout)
numpy.f2py.capi_maps.iscomplexfunction_warn(rout)
numpy.f2py.capi_maps.isdouble(var)
numpy.f2py.capi_maps.isdummyroutine(rout)
numpy.f2py.capi_maps.isexternal(var)
numpy.f2py.capi_maps.isfunction(rout)
numpy.f2py.capi_maps.isfunction_wrap(rout)
numpy.f2py.capi_maps.isint1array(var)
numpy.f2py.capi_maps.isinteger(var)
numpy.f2py.capi_maps.isintent_aux(var)
numpy.f2py.capi_maps.isintent_c(var)
numpy.f2py.capi_maps.isintent_callback(var)
numpy.f2py.capi_maps.isintent_copy(var)
numpy.f2py.capi_maps.isintent_hide(var)
numpy.f2py.capi_maps.isintent_in(var)
numpy.f2py.capi_maps.isintent_inout(var)
numpy.f2py.capi_maps.isintent_inplace(var)
numpy.f2py.capi_maps.isintent_nothide(var)
numpy.f2py.capi_maps.isintent_out(var)
numpy.f2py.capi_maps.isintent_overwrite(var)
numpy.f2py.capi_maps.islogical(var)
numpy.f2py.capi_maps.islogicalfunction(rout)
numpy.f2py.capi_maps.islong_complex(var)
numpy.f2py.capi_maps.islong_double(var)
numpy.f2py.capi_maps.islong_doublefunction(rout)
numpy.f2py.capi_maps.islong_long(var)
numpy.f2py.capi_maps.islong_longfunction(rout)
numpy.f2py.capi_maps.ismodule(rout)
numpy.f2py.capi_maps.ismoduleroutine(rout)
numpy.f2py.capi_maps.isoptional(var)
numpy.f2py.capi_maps.isprivate(var)
numpy.f2py.capi_maps.isrequired(var)
numpy.f2py.capi_maps.isroutine(rout)
numpy.f2py.capi_maps.isscalar(var)
numpy.f2py.capi_maps.issigned_long_longarray(var)
numpy.f2py.capi_maps.isstring(var)
numpy.f2py.capi_maps.isstringarray(var)
numpy.f2py.capi_maps.isstringfunction(rout)
numpy.f2py.capi_maps.issubroutine(rout)
numpy.f2py.capi_maps.issubroutine_wrap(rout)
numpy.f2py.capi_maps.isthreadsafe(rout)
numpy.f2py.capi_maps.isunsigned(var)
numpy.f2py.capi_maps.isunsigned_char(var)
numpy.f2py.capi_maps.isunsigned_chararray(var)
numpy.f2py.capi_maps.isunsigned_long_long(var)
numpy.f2py.capi_maps.isunsigned_long_longarray(var)
numpy.f2py.capi_maps.isunsigned_short(var)
numpy.f2py.capi_maps.isunsigned_shortarray(var)
numpy.f2py.capi_maps.l_not(f)
numpy.f2py.capi_maps.markoutercomma(line, comma=',')
numpy.f2py.capi_maps.modsign2map(m)
numpy.f2py.capi_maps.outmess(t)
numpy.f2py.capi_maps.replace(str, d, defaultsep='')
numpy.f2py.capi_maps.routsign2map(rout)
numpy.f2py.capi_maps.show(object, stream=None, indent=1, width=80, depth=None, *, compact=False)
numpy.f2py.capi_maps.sign2map(a, var)
numpy.f2py.capi_maps.stripcomma(s)
numpy.f2py.capi_maps.throw_error(self, mess)
numpy.f2py.cb_rules.applyrules(rules, d, var={})
numpy.f2py.cb_rules.buildcallback(rout, um)
numpy.f2py.cb_rules.buildcallbacks(m)
numpy.f2py.cb_rules.debugcapi(var)
numpy.f2py.cb_rules.dictappend(rd, ar)
numpy.f2py.cb_rules.getargs(rout)
numpy.f2py.cb_rules.hasnote(var)
numpy.f2py.cb_rules.isarray(var)
numpy.f2py.cb_rules.iscomplex(var)
numpy.f2py.cb_rules.iscomplexarray(var)
numpy.f2py.cb_rules.iscomplexfunction(rout)
numpy.f2py.cb_rules.isfunction(rout)
numpy.f2py.cb_rules.isintent_c(var)
numpy.f2py.cb_rules.isintent_hide(var)
numpy.f2py.cb_rules.isintent_in(var)
numpy.f2py.cb_rules.isintent_inout(var)
numpy.f2py.cb_rules.isintent_nothide(var)
numpy.f2py.cb_rules.isintent_out(var)
numpy.f2py.cb_rules.isoptional(var)
numpy.f2py.cb_rules.isrequired(var)
numpy.f2py.cb_rules.isscalar(var)
numpy.f2py.cb_rules.isstring(var)
numpy.f2py.cb_rules.isstringfunction(rout)
numpy.f2py.cb_rules.issubroutine(rout)
numpy.f2py.cb_rules.l_not(f)
numpy.f2py.cb_rules.outmess(t)
numpy.f2py.cb_rules.replace(str, d, defaultsep='')
numpy.f2py.cb_rules.stripcomma(s)
numpy.f2py.cb_rules.throw_error(self, mess)
numpy.f2py.cfuncs.append_needs(need, flag=1)
numpy.f2py.common_rules.buildhooks(m)
numpy.f2py.common_rules.findcommonblocks(block, top=1)
numpy.f2py.common_rules.hasbody(rout)
numpy.f2py.common_rules.hascommon(rout)
numpy.f2py.common_rules.hasnote(var)
numpy.f2py.common_rules.isintent_hide(var)
numpy.f2py.common_rules.outmess(t)
numpy.f2py.common_rules.rmbadname(names)
numpy.f2py.compile(source, modulename='untitled', extra_args='', verbose=True, source_fn=None, extension='.f')
numpy.f2py.crackfortran._calc_depend_dict(vars)
numpy.f2py.crackfortran._ensure_exprdict(r)
numpy.f2py.crackfortran._eval_length(length, params)
numpy.f2py.crackfortran._eval_scalar(value, params)
numpy.f2py.crackfortran._get_depend_dict(name, vars, deps)
numpy.f2py.crackfortran._is_intent_callback(vdecl)
numpy.f2py.crackfortran._kind_func(string)
numpy.f2py.crackfortran._resolvenameargspattern(line)
numpy.f2py.crackfortran._selected_int_kind_func(r)
numpy.f2py.crackfortran._selected_real_kind_func(p, r=0, radix=0)
numpy.f2py.crackfortran._selected_real_kind_func_intel(p, r=0, radix=0)
numpy.f2py.crackfortran._simplifyargs(argsline)
numpy.f2py.crackfortran.analyzeargs(block)
numpy.f2py.crackfortran.analyzebody(block, args, tab='')
numpy.f2py.crackfortran.analyzecommon(block)
numpy.f2py.crackfortran.analyzeline(m, case, line)
numpy.f2py.crackfortran.analyzevars(block)
numpy.f2py.crackfortran.appenddecl(decl, decl2, force=1)
numpy.f2py.crackfortran.appendmultiline(group, context_name, ml)
numpy.f2py.crackfortran.applyrules(rules, d, var={})
numpy.f2py.crackfortran.buildimplicitrules(block)
numpy.f2py.crackfortran.common2fortran(common, tab='')
numpy.f2py.crackfortran.crack2fortran(block)
numpy.f2py.crackfortran.crack2fortrangen(block, tab='\n', as_interface=False)
numpy.f2py.crackfortran.crackfortran(files)
numpy.f2py.crackfortran.crackline(line, reset=0)
numpy.f2py.crackfortran.cracktypespec(typespec, selector)
numpy.f2py.crackfortran.cracktypespec0(typespec, ll)
numpy.f2py.crackfortran.debugcapi(var)
numpy.f2py.crackfortran.determineexprtype(expr, vars, rules={})
numpy.f2py.crackfortran.dictappend(rd, ar)
numpy.f2py.crackfortran.expr2name(a, block, args=[])
numpy.f2py.crackfortran.gentitle(name)
numpy.f2py.crackfortran.get_parameters(vars, global_params={})
numpy.f2py.crackfortran.get_sorted_names(vars)
numpy.f2py.crackfortran.get_usedict(block)
numpy.f2py.crackfortran.get_useparameters(block, param_map=None)
numpy.f2py.crackfortran.getargs2(rout)
numpy.f2py.crackfortran.getarrlen(dl, args, star='*')
numpy.f2py.crackfortran.getblockname(block, unknown='unknown')
numpy.f2py.crackfortran.getcallprotoargument(rout, cb_map={})
numpy.f2py.crackfortran.getcallstatement(rout)
numpy.f2py.crackfortran.getextension(name)
numpy.f2py.crackfortran.getfortranname(rout)
numpy.f2py.crackfortran.getlincoef(e, xset)
numpy.f2py.crackfortran.getpymethoddef(rout)
numpy.f2py.crackfortran.getrestdoc(rout)
numpy.f2py.crackfortran.getusercode(rout)
numpy.f2py.crackfortran.getusercode1(rout)
numpy.f2py.crackfortran.hasbody(rout)
numpy.f2py.crackfortran.hascallstatement(rout)
numpy.f2py.crackfortran.hascommon(rout)
numpy.f2py.crackfortran.hasexternals(rout)
numpy.f2py.crackfortran.hasinitvalue(var)
numpy.f2py.crackfortran.hasnote(var)
numpy.f2py.crackfortran.hasresultnote(rout)
numpy.f2py.crackfortran.is_free_format(file)
numpy.f2py.crackfortran.isallocatable(var)
numpy.f2py.crackfortran.isarray(var)
numpy.f2py.crackfortran.isarrayofstrings(var)
numpy.f2py.crackfortran.iscomplex(var)
numpy.f2py.crackfortran.iscomplexarray(var)
numpy.f2py.crackfortran.iscomplexfunction(rout)
numpy.f2py.crackfortran.iscomplexfunction_warn(rout)
numpy.f2py.crackfortran.isdouble(var)
numpy.f2py.crackfortran.isdummyroutine(rout)
numpy.f2py.crackfortran.isexternal(var)
numpy.f2py.crackfortran.isfunction(rout)
numpy.f2py.crackfortran.isfunction_wrap(rout)
numpy.f2py.crackfortran.isint1array(var)
numpy.f2py.crackfortran.isinteger(var)
numpy.f2py.crackfortran.isintent_aux(var)
numpy.f2py.crackfortran.isintent_c(var)
numpy.f2py.crackfortran.isintent_callback(var)
numpy.f2py.crackfortran.isintent_copy(var)
numpy.f2py.crackfortran.isintent_hide(var)
numpy.f2py.crackfortran.isintent_in(var)
numpy.f2py.crackfortran.isintent_inout(var)
numpy.f2py.crackfortran.isintent_inplace(var)
numpy.f2py.crackfortran.isintent_nothide(var)
numpy.f2py.crackfortran.isintent_out(var)
numpy.f2py.crackfortran.isintent_overwrite(var)
numpy.f2py.crackfortran.islogical(var)
numpy.f2py.crackfortran.islogicalfunction(rout)
numpy.f2py.crackfortran.islong_complex(var)
numpy.f2py.crackfortran.islong_double(var)
numpy.f2py.crackfortran.islong_doublefunction(rout)
numpy.f2py.crackfortran.islong_long(var)
numpy.f2py.crackfortran.islong_longfunction(rout)
numpy.f2py.crackfortran.ismodule(rout)
numpy.f2py.crackfortran.ismoduleroutine(rout)
numpy.f2py.crackfortran.isoptional(var)
numpy.f2py.crackfortran.isprivate(var)
numpy.f2py.crackfortran.isrequired(var)
numpy.f2py.crackfortran.isroutine(rout)
numpy.f2py.crackfortran.isscalar(var)
numpy.f2py.crackfortran.issigned_long_longarray(var)
numpy.f2py.crackfortran.isstring(var)
numpy.f2py.crackfortran.isstringarray(var)
numpy.f2py.crackfortran.isstringfunction(rout)
numpy.f2py.crackfortran.issubroutine(rout)
numpy.f2py.crackfortran.issubroutine_wrap(rout)
numpy.f2py.crackfortran.isthreadsafe(rout)
numpy.f2py.crackfortran.isunsigned(var)
numpy.f2py.crackfortran.isunsigned_char(var)
numpy.f2py.crackfortran.isunsigned_chararray(var)
numpy.f2py.crackfortran.isunsigned_long_long(var)
numpy.f2py.crackfortran.isunsigned_long_longarray(var)
numpy.f2py.crackfortran.isunsigned_short(var)
numpy.f2py.crackfortran.isunsigned_shortarray(var)
numpy.f2py.crackfortran.l_not(f)
numpy.f2py.crackfortran.markinnerspaces(line)
numpy.f2py.crackfortran.markoutercomma(line, comma=',')
numpy.f2py.crackfortran.markouterparen(line)
numpy.f2py.crackfortran.myeval(e, g=None, l=None)
numpy.f2py.crackfortran.outmess(line, flag=1)
numpy.f2py.crackfortran.postcrack(block, args=None, tab='')
numpy.f2py.crackfortran.postcrack2(block, tab='', param_map=None)
numpy.f2py.crackfortran.readfortrancode(ffile, dowithline=<function pprint at 0x0000000003825730>, istop=1)
numpy.f2py.crackfortran.removespaces(expr)
numpy.f2py.crackfortran.replace(str, d, defaultsep='')
numpy.f2py.crackfortran.rmbadname(names)
numpy.f2py.crackfortran.rmbadname1(name)
numpy.f2py.crackfortran.setattrspec(decl, attr, force=0)
numpy.f2py.crackfortran.setcharselector(decl, sel, force=0)
numpy.f2py.crackfortran.setkindselector(decl, sel, force=0)
numpy.f2py.crackfortran.setmesstext(block)
numpy.f2py.crackfortran.show(object, stream=None, indent=1, width=80, depth=None, *, compact=False)
numpy.f2py.crackfortran.sortvarnames(vars)
numpy.f2py.crackfortran.stripcomma(s)
numpy.f2py.crackfortran.throw_error(self, mess)
numpy.f2py.crackfortran.true_intent_list(var)
numpy.f2py.crackfortran.undo_rmbadname(names)
numpy.f2py.crackfortran.undo_rmbadname1(name)
numpy.f2py.crackfortran.unmarkouterparen(line)
numpy.f2py.crackfortran.updatevars(typespec, selector, attrspec, entitydecl)
numpy.f2py.crackfortran.use2fortran(use, tab='')
numpy.f2py.crackfortran.vars2fortran(block, vars, args, tab='', as_interface=False)
numpy.f2py.diagnose.run_command(cmd)
numpy.f2py.f2py2e.buildmodules(lst)
numpy.f2py.f2py2e.callcrackfortran(files, options)
numpy.f2py.f2py2e.dict_append(d_out, d_in)
numpy.f2py.f2py2e.filter_files(prefix, suffix, files, remove_prefix=None)
numpy.f2py.f2py2e.get_prefix(module)
numpy.f2py.f2py2e.outmess(t)
numpy.f2py.f2py2e.run_main(comline_list)
numpy.f2py.f2py2e.scaninputline(inputline)
numpy.f2py.f2py2e.show(object, stream=None, indent=1, width=80, depth=None, *, compact=False)
numpy.f2py.f2py_testing.jiffies(_load_time=[])
numpy.f2py.f2py_testing.memusage(processName='python', instance=0)
numpy.f2py.f2py_testing.run(runtest, test_functions, repeat=1)
numpy.f2py.f90mod_rules.applyrules(rules, d, var={})
numpy.f2py.f90mod_rules.buildhooks(pymod)
numpy.f2py.f90mod_rules.debugcapi(var)
numpy.f2py.f90mod_rules.dictappend(rd, ar)
numpy.f2py.f90mod_rules.findf90modules(m)
numpy.f2py.f90mod_rules.gentitle(name)
numpy.f2py.f90mod_rules.getargs2(rout)
numpy.f2py.f90mod_rules.getcallprotoargument(rout, cb_map={})
numpy.f2py.f90mod_rules.getcallstatement(rout)
numpy.f2py.f90mod_rules.getfortranname(rout)
numpy.f2py.f90mod_rules.getpymethoddef(rout)
numpy.f2py.f90mod_rules.getrestdoc(rout)
numpy.f2py.f90mod_rules.getusercode(rout)
numpy.f2py.f90mod_rules.getusercode1(rout)
numpy.f2py.f90mod_rules.hasbody(rout)
numpy.f2py.f90mod_rules.hascallstatement(rout)
numpy.f2py.f90mod_rules.hascommon(rout)
numpy.f2py.f90mod_rules.hasexternals(rout)
numpy.f2py.f90mod_rules.hasinitvalue(var)
numpy.f2py.f90mod_rules.hasnote(var)
numpy.f2py.f90mod_rules.hasresultnote(rout)
numpy.f2py.f90mod_rules.isallocatable(var)
numpy.f2py.f90mod_rules.isarray(var)
numpy.f2py.f90mod_rules.isarrayofstrings(var)
numpy.f2py.f90mod_rules.iscomplex(var)
numpy.f2py.f90mod_rules.iscomplexarray(var)
numpy.f2py.f90mod_rules.iscomplexfunction(rout)
numpy.f2py.f90mod_rules.iscomplexfunction_warn(rout)
numpy.f2py.f90mod_rules.isdouble(var)
numpy.f2py.f90mod_rules.isdummyroutine(rout)
numpy.f2py.f90mod_rules.isexternal(var)
numpy.f2py.f90mod_rules.isfunction(rout)
numpy.f2py.f90mod_rules.isfunction_wrap(rout)
numpy.f2py.f90mod_rules.isint1array(var)
numpy.f2py.f90mod_rules.isinteger(var)
numpy.f2py.f90mod_rules.isintent_aux(var)
numpy.f2py.f90mod_rules.isintent_c(var)
numpy.f2py.f90mod_rules.isintent_callback(var)
numpy.f2py.f90mod_rules.isintent_copy(var)
numpy.f2py.f90mod_rules.isintent_hide(var)
numpy.f2py.f90mod_rules.isintent_in(var)
numpy.f2py.f90mod_rules.isintent_inout(var)
numpy.f2py.f90mod_rules.isintent_inplace(var)
numpy.f2py.f90mod_rules.isintent_nothide(var)
numpy.f2py.f90mod_rules.isintent_out(var)
numpy.f2py.f90mod_rules.isintent_overwrite(var)
numpy.f2py.f90mod_rules.islogical(var)
numpy.f2py.f90mod_rules.islogicalfunction(rout)
numpy.f2py.f90mod_rules.islong_complex(var)
numpy.f2py.f90mod_rules.islong_double(var)
numpy.f2py.f90mod_rules.islong_doublefunction(rout)
numpy.f2py.f90mod_rules.islong_long(var)
numpy.f2py.f90mod_rules.islong_longfunction(rout)
numpy.f2py.f90mod_rules.ismodule(rout)
numpy.f2py.f90mod_rules.ismoduleroutine(rout)
numpy.f2py.f90mod_rules.isoptional(var)
numpy.f2py.f90mod_rules.isprivate(var)
numpy.f2py.f90mod_rules.isrequired(var)
numpy.f2py.f90mod_rules.isroutine(rout)
numpy.f2py.f90mod_rules.isscalar(var)
numpy.f2py.f90mod_rules.issigned_long_longarray(var)
numpy.f2py.f90mod_rules.isstring(var)
numpy.f2py.f90mod_rules.isstringarray(var)
numpy.f2py.f90mod_rules.isstringfunction(rout)
numpy.f2py.f90mod_rules.issubroutine(rout)
numpy.f2py.f90mod_rules.issubroutine_wrap(rout)
numpy.f2py.f90mod_rules.isthreadsafe(rout)
numpy.f2py.f90mod_rules.isunsigned(var)
numpy.f2py.f90mod_rules.isunsigned_char(var)
numpy.f2py.f90mod_rules.isunsigned_chararray(var)
numpy.f2py.f90mod_rules.isunsigned_long_long(var)
numpy.f2py.f90mod_rules.isunsigned_long_longarray(var)
numpy.f2py.f90mod_rules.isunsigned_short(var)
numpy.f2py.f90mod_rules.isunsigned_shortarray(var)
numpy.f2py.f90mod_rules.l_not(f)
numpy.f2py.f90mod_rules.outmess(t)
numpy.f2py.f90mod_rules.replace(str, d, defaultsep='')
numpy.f2py.f90mod_rules.show(object, stream=None, indent=1, width=80, depth=None, *, compact=False)
numpy.f2py.f90mod_rules.stripcomma(s)
numpy.f2py.f90mod_rules.throw_error(self, mess)
numpy.f2py.f90mod_rules.undo_rmbadname(names)
numpy.f2py.f90mod_rules.undo_rmbadname1(name)
numpy.f2py.func2subr.assubr(rout)
numpy.f2py.func2subr.createfuncwrapper(rout, signature=0)
numpy.f2py.func2subr.createsubrwrapper(rout, signature=0)
numpy.f2py.func2subr.getfortranname(rout)
numpy.f2py.func2subr.isexternal(var)
numpy.f2py.func2subr.isfunction(rout)
numpy.f2py.func2subr.isfunction_wrap(rout)
numpy.f2py.func2subr.isintent_in(var)
numpy.f2py.func2subr.isintent_out(var)
numpy.f2py.func2subr.islogicalfunction(rout)
numpy.f2py.func2subr.ismoduleroutine(rout)
numpy.f2py.func2subr.isscalar(var)
numpy.f2py.func2subr.issubroutine(rout)
numpy.f2py.func2subr.issubroutine_wrap(rout)
numpy.f2py.func2subr.outmess(t)
numpy.f2py.func2subr.show(object, stream=None, indent=1, width=80, depth=None, *, compact=False)
numpy.f2py.func2subr.var2fixfortran(vars, a, fa=None, f90mode=None)
numpy.f2py.rules.applyrules(rules, d, var={})
numpy.f2py.rules.buildapi(rout)
numpy.f2py.rules.buildmodule(m, um)
numpy.f2py.rules.debugcapi(var)
numpy.f2py.rules.dictappend(rd, ar)
numpy.f2py.rules.gentitle(name)
numpy.f2py.rules.getargs2(rout)
numpy.f2py.rules.hascallstatement(rout)
numpy.f2py.rules.hasexternals(rout)
numpy.f2py.rules.hasinitvalue(var)
numpy.f2py.rules.hasnote(var)
numpy.f2py.rules.hasresultnote(rout)
numpy.f2py.rules.isarray(var)
numpy.f2py.rules.isarrayofstrings(var)
numpy.f2py.rules.iscomplex(var)
numpy.f2py.rules.iscomplexarray(var)
numpy.f2py.rules.iscomplexfunction(rout)
numpy.f2py.rules.iscomplexfunction_warn(rout)
numpy.f2py.rules.isdummyroutine(rout)
numpy.f2py.rules.isexternal(var)
numpy.f2py.rules.isfunction(rout)
numpy.f2py.rules.isfunction_wrap(rout)
numpy.f2py.rules.isint1array(var)
numpy.f2py.rules.isintent_aux(var)
numpy.f2py.rules.isintent_c(var)
numpy.f2py.rules.isintent_callback(var)
numpy.f2py.rules.isintent_copy(var)
numpy.f2py.rules.isintent_hide(var)
numpy.f2py.rules.isintent_inout(var)
numpy.f2py.rules.isintent_nothide(var)
numpy.f2py.rules.isintent_out(var)
numpy.f2py.rules.isintent_overwrite(var)
numpy.f2py.rules.islogical(var)
numpy.f2py.rules.islong_complex(var)
numpy.f2py.rules.islong_double(var)
numpy.f2py.rules.islong_doublefunction(rout)
numpy.f2py.rules.islong_long(var)
numpy.f2py.rules.islong_longfunction(rout)
numpy.f2py.rules.ismoduleroutine(rout)
numpy.f2py.rules.isoptional(var)
numpy.f2py.rules.isrequired(var)
numpy.f2py.rules.isscalar(var)
numpy.f2py.rules.issigned_long_longarray(var)
numpy.f2py.rules.isstring(var)
numpy.f2py.rules.isstringarray(var)
numpy.f2py.rules.isstringfunction(rout)
numpy.f2py.rules.issubroutine(rout)
numpy.f2py.rules.issubroutine_wrap(rout)
numpy.f2py.rules.isthreadsafe(rout)
numpy.f2py.rules.isunsigned(var)
numpy.f2py.rules.isunsigned_char(var)
numpy.f2py.rules.isunsigned_chararray(var)
numpy.f2py.rules.isunsigned_long_long(var)
numpy.f2py.rules.isunsigned_long_longarray(var)
numpy.f2py.rules.isunsigned_short(var)
numpy.f2py.rules.isunsigned_shortarray(var)
numpy.f2py.rules.l_not(f)
numpy.f2py.rules.outmess(t)
numpy.f2py.rules.replace(str, d, defaultsep='')
numpy.f2py.rules.stripcomma(s)
numpy.f2py.run_main(comline_list)
numpy.f2py.use_rules.applyrules(rules, d, var={})
numpy.f2py.use_rules.buildusevar(name, realname, vars, usemodulename)
numpy.f2py.use_rules.buildusevars(m, r)
numpy.f2py.use_rules.dictappend(rd, ar)
numpy.f2py.use_rules.gentitle(name)
numpy.f2py.use_rules.hasnote(var)
numpy.f2py.use_rules.outmess(t)
numpy.fft.fft(a, n=None, axis=-1, norm=None)
numpy.fft.fft2(a, s=None, axes=(-2, -1), norm=None)
numpy.fft.fftfreq(n, d=1.0)
numpy.fft.fftn(a, s=None, axes=None, norm=None)
numpy.fft.fftpack._FFTCache(self, max_size_in_mb, max_item_count)
numpy.fft.fftpack._cook_nd_args(a, s=None, axes=None, invreal=0)
numpy.fft.fftpack._raw_fft(a, n=None, axis=-1, init_function=<built-in function cffti>, work_function=<built-in function cfftf>, fft_cache=<numpy.fft.helper._FFTCache object at 0x00000000039D3EF0>)
numpy.fft.fftpack._raw_fftnd(a, s=None, axes=None, function=<function fft at 0x00000000039F92F0>, norm=None)
numpy.fft.fftpack._unitary(norm)
numpy.fft.fftpack.asarray(a, dtype=None, order=None)
numpy.fft.fftpack.fft(a, n=None, axis=-1, norm=None)
numpy.fft.fftpack.fft2(a, s=None, axes=(-2, -1), norm=None)
numpy.fft.fftpack.fftn(a, s=None, axes=None, norm=None)
numpy.fft.fftpack.hfft(a, n=None, axis=-1, norm=None)
numpy.fft.fftpack.ifft(a, n=None, axis=-1, norm=None)
numpy.fft.fftpack.ifft2(a, s=None, axes=(-2, -1), norm=None)
numpy.fft.fftpack.ifftn(a, s=None, axes=None, norm=None)
numpy.fft.fftpack.ihfft(a, n=None, axis=-1, norm=None)
numpy.fft.fftpack.irfft(a, n=None, axis=-1, norm=None)
numpy.fft.fftpack.irfft2(a, s=None, axes=(-2, -1), norm=None)
numpy.fft.fftpack.irfftn(a, s=None, axes=None, norm=None)
numpy.fft.fftpack.rfft(a, n=None, axis=-1, norm=None)
numpy.fft.fftpack.rfft2(a, s=None, axes=(-2, -1), norm=None)
numpy.fft.fftpack.rfftn(a, s=None, axes=None, norm=None)
numpy.fft.fftpack.shape(a)
numpy.fft.fftpack.swapaxes(a, axis1, axis2)
numpy.fft.fftpack.take(a, indices, axis=None, out=None, mode='raise')
numpy.fft.fftpack_lite.error(self, /, *args, **kwargs)
numpy.fft.fftshift(x, axes=None)
numpy.fft.helper._FFTCache(self, max_size_in_mb, max_item_count)
numpy.fft.helper.asarray(a, dtype=None, order=None)
numpy.fft.helper.fftfreq(n, d=1.0)
numpy.fft.helper.fftshift(x, axes=None)
numpy.fft.helper.ifftshift(x, axes=None)
numpy.fft.helper.integer(self, /, *args, **kwargs)
numpy.fft.helper.rfftfreq(n, d=1.0)
numpy.fft.helper.take(a, indices, axis=None, out=None, mode='raise')
numpy.fft.hfft(a, n=None, axis=-1, norm=None)
numpy.fft.ifft(a, n=None, axis=-1, norm=None)
numpy.fft.ifft2(a, s=None, axes=(-2, -1), norm=None)
numpy.fft.ifftn(a, s=None, axes=None, norm=None)
numpy.fft.ifftshift(x, axes=None)
numpy.fft.ihfft(a, n=None, axis=-1, norm=None)
numpy.fft.irfft(a, n=None, axis=-1, norm=None)
numpy.fft.irfft2(a, s=None, axes=(-2, -1), norm=None)
numpy.fft.irfftn(a, s=None, axes=None, norm=None)
numpy.fft.register_func(name, func)
numpy.fft.restore_func(name)
numpy.fft.rfft(a, n=None, axis=-1, norm=None)
numpy.fft.rfft2(a, s=None, axes=(-2, -1), norm=None)
numpy.fft.rfftfreq(n, d=1.0)
numpy.fft.rfftn(a, s=None, axes=None, norm=None)
numpy.lib.Arrayterator(self, var, buf_size=None)
numpy.lib.DataSource(self, destpath='.')
numpy.lib.NumpyVersion(self, vstring)
numpy.lib.RankWarning(self, /, *args, **kwargs)
numpy.lib._datasource.DataSource(self, destpath='.')
numpy.lib._datasource.Repository(self, baseurl, destpath='.')
numpy.lib._datasource._FileOpeners(self)
numpy.lib._datasource._check_mode(mode, encoding, newline)
numpy.lib._datasource._python2_bz2open(fn, mode, encoding, newline)
numpy.lib._datasource._python2_gzipopen(fn, mode, encoding, newline)
numpy.lib._datasource.open(path, mode='r', destpath='.', encoding=None, newline=None)
numpy.lib._iotools.ConversionWarning(self, /, *args, **kwargs)
numpy.lib._iotools.ConverterError(self, /, *args, **kwargs)
numpy.lib._iotools.ConverterLockError(self, /, *args, **kwargs)
numpy.lib._iotools.LineSplitter(self, delimiter=None, comments='#', autostrip=True, encoding=None)
numpy.lib._iotools.NameValidator(self, excludelist=None, deletechars=None, case_sensitive=None, replace_space='_')
numpy.lib._iotools.StringConverter(self, dtype_or_func=None, default=None, missing_values=None, locked=False)
numpy.lib._iotools.StringConverter._dtypeortype(dtype)
numpy.lib._iotools.StringConverter._getdtype(val)
numpy.lib._iotools.StringConverter._getsubdtype(val)
numpy.lib._iotools.StringConverter.upgrade_mapper(func, default=None)
numpy.lib._iotools._decode_line(line, encoding=None)
numpy.lib._iotools._is_bytes_like(obj)
numpy.lib._iotools._is_string_like(obj)
numpy.lib._iotools._to_filehandle(fname, flag='r', return_opened=False)
numpy.lib._iotools.asbytes(s)
numpy.lib._iotools.asbytes_nested(x)
numpy.lib._iotools.asunicode(s)
numpy.lib._iotools.basestring(self, /, *args, **kwargs)
numpy.lib._iotools.bool(self, /, *args, **kwargs)
numpy.lib._iotools.bytes(self, /, *args, **kwargs)
numpy.lib._iotools.complex(self, /, *args, **kwargs)
numpy.lib._iotools.easy_dtype(ndtype, names=None, defaultfmt='f%i', **validationargs)
numpy.lib._iotools.flatten_dtype(ndtype, flatten_base=False)
numpy.lib._iotools.float(self, /, *args, **kwargs)
numpy.lib._iotools.has_nested_fields(ndtype)
numpy.lib._iotools.int(self, /, *args, **kwargs)
numpy.lib._iotools.object(self, /, *args, **kwargs)
numpy.lib._iotools.str(self, /, *args, **kwargs)
numpy.lib._iotools.str2bool(value)
numpy.lib._iotools.unicode(self, /, *args, **kwargs)
numpy.lib._version.NumpyVersion(self, vstring)
numpy.lib._version.basestring(self, /, *args, **kwargs)
numpy.lib.add_newdoc(place, obj, doc)
numpy.lib.angle(z, deg=0)
numpy.lib.append(arr, values, axis=None)
numpy.lib.apply_along_axis(func1d, axis, arr, *args, **kwargs)
numpy.lib.apply_over_axes(func, a, axes)
numpy.lib.array_split(ary, indices_or_sections, axis=0)
numpy.lib.arraypad._append_const(arr, pad_amt, val, axis=-1)
numpy.lib.arraypad._append_edge(arr, pad_amt, axis=-1)
numpy.lib.arraypad._append_max(arr, pad_amt, num, axis=-1)
numpy.lib.arraypad._append_mean(arr, pad_amt, num, axis=-1)
numpy.lib.arraypad._append_med(arr, pad_amt, num, axis=-1)
numpy.lib.arraypad._append_min(arr, pad_amt, num, axis=-1)
numpy.lib.arraypad._append_ramp(arr, pad_amt, end, axis=-1)
numpy.lib.arraypad._arange_ndarray(arr, shape, axis, reverse=False)
numpy.lib.arraypad._normalize_shape(ndarray, shape, cast_to_int=True)
numpy.lib.arraypad._pad_ref(arr, pad_amt, method, axis=-1)
numpy.lib.arraypad._pad_sym(arr, pad_amt, method, axis=-1)
numpy.lib.arraypad._pad_wrap(arr, pad_amt, axis=-1)
numpy.lib.arraypad._prepend_const(arr, pad_amt, val, axis=-1)
numpy.lib.arraypad._prepend_edge(arr, pad_amt, axis=-1)
numpy.lib.arraypad._prepend_max(arr, pad_amt, num, axis=-1)
numpy.lib.arraypad._prepend_mean(arr, pad_amt, num, axis=-1)
numpy.lib.arraypad._prepend_med(arr, pad_amt, num, axis=-1)
numpy.lib.arraypad._prepend_min(arr, pad_amt, num, axis=-1)
numpy.lib.arraypad._prepend_ramp(arr, pad_amt, end, axis=-1)
numpy.lib.arraypad._round_ifneeded(arr, dtype)
numpy.lib.arraypad._validate_lengths(narray, number_elements)
numpy.lib.arraypad.pad(array, pad_width, mode, **kwargs)
numpy.lib.arraysetops._unique1d(ar, return_index=False, return_inverse=False, return_counts=False)
numpy.lib.arraysetops.ediff1d(ary, to_end=None, to_begin=None)
numpy.lib.arraysetops.in1d(ar1, ar2, assume_unique=False, invert=False)
numpy.lib.arraysetops.intersect1d(ar1, ar2, assume_unique=False)
numpy.lib.arraysetops.isin(element, test_elements, assume_unique=False, invert=False)
numpy.lib.arraysetops.setdiff1d(ar1, ar2, assume_unique=False)
numpy.lib.arraysetops.setxor1d(ar1, ar2, assume_unique=False)
numpy.lib.arraysetops.union1d(ar1, ar2)
numpy.lib.arraysetops.unique(ar, return_index=False, return_inverse=False, return_counts=False, axis=None)
numpy.lib.arrayterator.Arrayterator(self, var, buf_size=None)
numpy.lib.arrayterator.long(self, /, *args, **kwargs)
numpy.lib.asarray_chkfinite(a, dtype=None, order=None)
numpy.lib.asfarray(a, dtype=<class 'numpy.float64'>)
numpy.lib.asscalar(a)
numpy.lib.average(a, axis=None, weights=None, returned=False)
numpy.lib.bartlett(M)
numpy.lib.blackman(M)
numpy.lib.broadcast_to(array, shape, subok=False)
numpy.lib.byte_bounds(a)
numpy.lib.column_stack(tup)
numpy.lib.copy(a, order='K')
numpy.lib.corrcoef(x, y=None, rowvar=True, bias=<class 'numpy._globals._NoValue'>, ddof=<class 'numpy._globals._NoValue'>)
numpy.lib.cov(m, y=None, rowvar=True, bias=False, ddof=None, fweights=None, aweights=None)
numpy.lib.delete(arr, obj, axis=None)
numpy.lib.deprecate_with_doc(msg)
numpy.lib.diag(v, k=0)
numpy.lib.diag_indices(n, ndim=2)
numpy.lib.diag_indices_from(arr)
numpy.lib.diagflat(v, k=0)
numpy.lib.diff(a, n=1, axis=-1)
numpy.lib.disp(mesg, device=None, linefeed=True)
numpy.lib.dsplit(ary, indices_or_sections)
numpy.lib.dstack(tup)
numpy.lib.ediff1d(ary, to_end=None, to_begin=None)
numpy.lib.expand_dims(a, axis)
numpy.lib.extract(condition, arr)
numpy.lib.eye(N, M=None, k=0, dtype=<class 'float'>, order='C')
numpy.lib.fill_diagonal(a, val, wrap=False)
numpy.lib.financial.Decimal(self, /, *args, **kwargs)
numpy.lib.financial._convert_when(when)
numpy.lib.financial._g_div_gp(r, n, p, x, y, w)
numpy.lib.financial._rbl(rate, per, pmt, pv, when)
numpy.lib.financial.fv(rate, nper, pmt, pv, when='end')
numpy.lib.financial.ipmt(rate, per, nper, pv, fv=0, when='end')
numpy.lib.financial.irr(values)
numpy.lib.financial.mirr(values, finance_rate, reinvest_rate)
numpy.lib.financial.nper(rate, pmt, pv, fv=0, when='end')
numpy.lib.financial.npv(rate, values)
numpy.lib.financial.pmt(rate, nper, pv, fv=0, when='end')
numpy.lib.financial.ppmt(rate, per, nper, pv, fv=0, when='end')
numpy.lib.financial.pv(rate, nper, pmt, fv=0, when='end')
numpy.lib.financial.rate(nper, pmt, pv, fv, when='end', guess=None, tol=None, maxiter=100)
numpy.lib.fix(x, out=None)
numpy.lib.flip(m, axis)
numpy.lib.fliplr(m)
numpy.lib.flipud(m)
numpy.lib.format._check_version(version)
numpy.lib.format._filter_header(s)
numpy.lib.format._read_array_header(fp, version)
numpy.lib.format._read_bytes(fp, size, error_template='ran out of data')
numpy.lib.format._write_array_header(fp, d, version=None)
numpy.lib.format.asbytes(s)
numpy.lib.format.asstr(s)
numpy.lib.format.basestring(self, /, *args, **kwargs)
numpy.lib.format.dtype_to_descr(dtype)
numpy.lib.format.header_data_from_array_1_0(array)
numpy.lib.format.isfileobj(f)
numpy.lib.format.long(self, /, *args, **kwargs)
numpy.lib.format.magic(major, minor)
numpy.lib.format.open_memmap(filename, mode='r+', dtype=None, shape=None, fortran_order=False, version=None)
numpy.lib.format.read_array(fp, allow_pickle=True, pickle_kwargs=None)
numpy.lib.format.read_array_header_1_0(fp)
numpy.lib.format.read_array_header_2_0(fp)
numpy.lib.format.read_magic(fp)
numpy.lib.format.safe_eval(source)
numpy.lib.format.write_array(fp, array, version=None, allow_pickle=True, pickle_kwargs=None)
numpy.lib.format.write_array_header_1_0(fp, d)
numpy.lib.format.write_array_header_2_0(fp, d)
numpy.lib.fromregex(file, regexp, dtype, encoding=None)
numpy.lib.function_base.AxisError(self, axis, ndim=None, msg_prefix=None)
numpy.lib.function_base._calculate_shapes(broadcast_shape, dim_sizes, list_of_core_dims)
numpy.lib.function_base._chbevl(x, vals)
numpy.lib.function_base._create_arrays(broadcast_shape, dim_sizes, list_of_core_dims, dtypes)
numpy.lib.function_base._hist_bin_auto(x)
numpy.lib.function_base._hist_bin_doane(x)
numpy.lib.function_base._hist_bin_fd(x)
numpy.lib.function_base._hist_bin_rice(x)
numpy.lib.function_base._hist_bin_scott(x)
numpy.lib.function_base._hist_bin_sqrt(x)
numpy.lib.function_base._hist_bin_sturges(x)
numpy.lib.function_base._i0_1(x)
numpy.lib.function_base._i0_2(x)
numpy.lib.function_base._median(a, axis=None, out=None, overwrite_input=False)
numpy.lib.function_base._parse_gufunc_signature(signature)
numpy.lib.function_base._parse_input_dimensions(args, input_core_dims)
numpy.lib.function_base._percentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False)
numpy.lib.function_base._update_dim_sizes(dim_sizes, arg, core_dims)
numpy.lib.function_base._ureduce(a, func, **kwargs)
numpy.lib.function_base.add_newdoc(place, obj, doc)
numpy.lib.function_base.angle(z, deg=0)
numpy.lib.function_base.any(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.lib.function_base.append(arr, values, axis=None)
numpy.lib.function_base.around(a, decimals=0, out=None)
numpy.lib.function_base.asanyarray(a, dtype=None, order=None)
numpy.lib.function_base.asarray(a, dtype=None, order=None)
numpy.lib.function_base.asarray_chkfinite(a, dtype=None, order=None)
numpy.lib.function_base.average(a, axis=None, weights=None, returned=False)
numpy.lib.function_base.bartlett(M)
numpy.lib.function_base.basestring(self, /, *args, **kwargs)
numpy.lib.function_base.blackman(M)
numpy.lib.function_base.copy(a, order='K')
numpy.lib.function_base.corrcoef(x, y=None, rowvar=True, bias=<class 'numpy._globals._NoValue'>, ddof=<class 'numpy._globals._NoValue'>)
numpy.lib.function_base.cov(m, y=None, rowvar=True, bias=False, ddof=None, fweights=None, aweights=None)
numpy.lib.function_base.delete(arr, obj, axis=None)
numpy.lib.function_base.diag(v, k=0)
numpy.lib.function_base.diff(a, n=1, axis=-1)
numpy.lib.function_base.disp(mesg, device=None, linefeed=True)
numpy.lib.function_base.extract(condition, arr)
numpy.lib.function_base.flip(m, axis)
numpy.lib.function_base.gradient(f, *varargs, **kwargs)
numpy.lib.function_base.hamming(M)
numpy.lib.function_base.hanning(M)
numpy.lib.function_base.histogram(a, bins=10, range=None, normed=False, weights=None, density=None)
numpy.lib.function_base.histogramdd(sample, bins=10, range=None, normed=False, weights=None)
numpy.lib.function_base.i0(x)
numpy.lib.function_base.insert(arr, obj, values, axis=None)
numpy.lib.function_base.integer(self, /, *args, **kwargs)
numpy.lib.function_base.interp(x, xp, fp, left=None, right=None, period=None)
numpy.lib.function_base.intp(self, /, *args, **kwargs)
numpy.lib.function_base.isscalar(num)
numpy.lib.function_base.iterable(y)
numpy.lib.function_base.kaiser(M, beta)
numpy.lib.function_base.linspace(start, stop, num=50, endpoint=True, retstep=False, dtype=None)
numpy.lib.function_base.long(self, /, *args, **kwargs)
numpy.lib.function_base.mean(a, axis=None, dtype=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.lib.function_base.median(a, axis=None, out=None, overwrite_input=False, keepdims=False)
numpy.lib.function_base.msort(a)
numpy.lib.function_base.ndarray(self, /, *args, **kwargs)
numpy.lib.function_base.nonzero(a)
numpy.lib.function_base.number(self, /, *args, **kwargs)
numpy.lib.function_base.ones(shape, dtype=None, order='C')
numpy.lib.function_base.partition(a, kth, axis=-1, kind='introselect', order=None)
numpy.lib.function_base.percentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False)
numpy.lib.function_base.piecewise(x, condlist, funclist, *args, **kw)
numpy.lib.function_base.place(arr, mask, vals)
numpy.lib.function_base.ravel(a, order='C')
numpy.lib.function_base.rot90(m, k=1, axes=(0, 1))
numpy.lib.function_base.select(condlist, choicelist, default=0)
numpy.lib.function_base.sinc(x)
numpy.lib.function_base.sort(a, axis=-1, kind='quicksort', order=None)
numpy.lib.function_base.sort_complex(a)
numpy.lib.function_base.sum(a, axis=None, dtype=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.lib.function_base.take(a, indices, axis=None, out=None, mode='raise')
numpy.lib.function_base.transpose(a, axes=None)
numpy.lib.function_base.trapz(y, x=None, dx=1.0, axis=-1)
numpy.lib.function_base.trim_zeros(filt, trim='fb')
numpy.lib.function_base.unwrap(p, discont=3.141592653589793, axis=-1)
numpy.lib.function_base.vectorize(self, pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None)
numpy.lib.fv(rate, nper, pmt, pv, when='end')
numpy.lib.genfromtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, skip_header=0, skip_footer=0, converters=None, missing_values=None, filling_values=None, usecols=None, names=None, excludelist=None, deletechars=None, replace_space='_', autostrip=False, case_sensitive=True, defaultfmt='f%i', unpack=None, usemask=False, loose=True, invalid_raise=True, max_rows=None, encoding='bytes')
numpy.lib.gradient(f, *varargs, **kwargs)
numpy.lib.hamming(M)
numpy.lib.hanning(M)
numpy.lib.histogram(a, bins=10, range=None, normed=False, weights=None, density=None)
numpy.lib.histogram2d(x, y, bins=10, range=None, normed=False, weights=None)
numpy.lib.histogramdd(sample, bins=10, range=None, normed=False, weights=None)
numpy.lib.hsplit(ary, indices_or_sections)
numpy.lib.i0(x)
numpy.lib.imag(val)
numpy.lib.in1d(ar1, ar2, assume_unique=False, invert=False)
numpy.lib.index_tricks.AxisConcatenator(self, axis=0, matrix=False, ndmin=1, trans1d=-1)
numpy.lib.index_tricks.CClass(self)
numpy.lib.index_tricks.IndexExpression(self, maketuple)
numpy.lib.index_tricks.RClass(self)
numpy.lib.index_tricks.alltrue(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.lib.index_tricks.as_strided(x, shape=None, strides=None, subok=False, writeable=True)
numpy.lib.index_tricks.asarray(a, dtype=None, order=None)
numpy.lib.index_tricks.cumprod(a, axis=None, dtype=None, out=None)
numpy.lib.index_tricks.diag_indices(n, ndim=2)
numpy.lib.index_tricks.diag_indices_from(arr)
numpy.lib.index_tricks.diff(a, n=1, axis=-1)
numpy.lib.index_tricks.fill_diagonal(a, val, wrap=False)
numpy.lib.index_tricks.find_common_type(array_types, scalar_types)
numpy.lib.index_tricks.issubdtype(arg1, arg2)
numpy.lib.index_tricks.nd_grid(self, sparse=False)
numpy.lib.index_tricks.ndenumerate(self, arr)
numpy.lib.index_tricks.ndindex(self, *shape)
numpy.lib.info(object=None, maxwidth=76, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>, toplevel='numpy')
numpy.lib.info.__class__(self, /, *args, **kwargs)
numpy.lib.insert(arr, obj, values, axis=None)
numpy.lib.interp(x, xp, fp, left=None, right=None, period=None)
numpy.lib.intersect1d(ar1, ar2, assume_unique=False)
numpy.lib.ipmt(rate, per, nper, pv, fv=0, when='end')
numpy.lib.irr(values)
numpy.lib.iscomplex(x)
numpy.lib.iscomplexobj(x)
numpy.lib.isin(element, test_elements, assume_unique=False, invert=False)
numpy.lib.isneginf(x, out=None)
numpy.lib.isposinf(x, out=None)
numpy.lib.isreal(x)
numpy.lib.isrealobj(x)
numpy.lib.issubclass_(arg1, arg2)
numpy.lib.issubdtype(arg1, arg2)
numpy.lib.issubsctype(arg1, arg2)
numpy.lib.iterable(y)
numpy.lib.kaiser(M, beta)
numpy.lib.kron(a, b)
numpy.lib.load(file, mmap_mode=None, allow_pickle=True, fix_imports=True, encoding='ASCII')
numpy.lib.loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0, encoding='bytes')
numpy.lib.lookfor(what, module=None, import_modules=True, regenerate=False, output=None)
numpy.lib.mafromtxt(fname, **kwargs)
numpy.lib.mask_indices(n, mask_func, k=0)
numpy.lib.median(a, axis=None, out=None, overwrite_input=False, keepdims=False)
numpy.lib.mintypecode(typechars, typeset='GDFgdf', default='d')
numpy.lib.mirr(values, finance_rate, reinvest_rate)
numpy.lib.mixins.NDArrayOperatorsMixin(self, /, *args, **kwargs)
numpy.lib.mixins._binary_method(ufunc, name)
numpy.lib.mixins._disables_array_ufunc(obj)
numpy.lib.mixins._inplace_binary_method(ufunc, name)
numpy.lib.mixins._numeric_methods(ufunc, name)
numpy.lib.mixins._reflected_binary_method(ufunc, name)
numpy.lib.mixins._unary_method(ufunc, name)
numpy.lib.msort(a)
numpy.lib.nan_to_num(x, copy=True)
numpy.lib.nanargmax(a, axis=None)
numpy.lib.nanargmin(a, axis=None)
numpy.lib.nancumprod(a, axis=None, dtype=None, out=None)
numpy.lib.nancumsum(a, axis=None, dtype=None, out=None)
numpy.lib.nanfunctions._copyto(a, val, mask)
numpy.lib.nanfunctions._divide_by_count(a, b, out=None)
numpy.lib.nanfunctions._nanmedian(a, axis=None, out=None, overwrite_input=False)
numpy.lib.nanfunctions._nanmedian1d(arr1d, overwrite_input=False)
numpy.lib.nanfunctions._nanmedian_small(a, axis=None, out=None, overwrite_input=False)
numpy.lib.nanfunctions._nanpercentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear')
numpy.lib.nanfunctions._nanpercentile1d(arr1d, q, overwrite_input=False, interpolation='linear')
numpy.lib.nanfunctions._remove_nan_1d(arr1d, overwrite_input=False)
numpy.lib.nanfunctions._replace_nan(a, val)
numpy.lib.nanfunctions._ureduce(a, func, **kwargs)
numpy.lib.nanfunctions.nanargmax(a, axis=None)
numpy.lib.nanfunctions.nanargmin(a, axis=None)
numpy.lib.nanfunctions.nancumprod(a, axis=None, dtype=None, out=None)
numpy.lib.nanfunctions.nancumsum(a, axis=None, dtype=None, out=None)
numpy.lib.nanfunctions.nanmax(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.lib.nanfunctions.nanmean(a, axis=None, dtype=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.lib.nanfunctions.nanmedian(a, axis=None, out=None, overwrite_input=False, keepdims=<class 'numpy._globals._NoValue'>)
numpy.lib.nanfunctions.nanmin(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.lib.nanfunctions.nanpercentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<class 'numpy._globals._NoValue'>)
numpy.lib.nanfunctions.nanprod(a, axis=None, dtype=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.lib.nanfunctions.nanstd(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<class 'numpy._globals._NoValue'>)
numpy.lib.nanfunctions.nansum(a, axis=None, dtype=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.lib.nanfunctions.nanvar(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<class 'numpy._globals._NoValue'>)
numpy.lib.nanmax(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.lib.nanmean(a, axis=None, dtype=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.lib.nanmedian(a, axis=None, out=None, overwrite_input=False, keepdims=<class 'numpy._globals._NoValue'>)
numpy.lib.nanmin(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.lib.nanpercentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=<class 'numpy._globals._NoValue'>)
numpy.lib.nanprod(a, axis=None, dtype=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.lib.nanstd(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<class 'numpy._globals._NoValue'>)
numpy.lib.nansum(a, axis=None, dtype=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.lib.nanvar(a, axis=None, dtype=None, out=None, ddof=0, keepdims=<class 'numpy._globals._NoValue'>)
numpy.lib.ndenumerate(self, arr)
numpy.lib.ndfromtxt(fname, **kwargs)
numpy.lib.ndindex(self, *shape)
numpy.lib.nper(rate, pmt, pv, fv=0, when='end')
numpy.lib.npv(rate, values)
numpy.lib.npyio.BagObj(self, obj)
numpy.lib.npyio.ConversionWarning(self, /, *args, **kwargs)
numpy.lib.npyio.ConverterError(self, /, *args, **kwargs)
numpy.lib.npyio.ConverterLockError(self, /, *args, **kwargs)
numpy.lib.npyio.DataSource(self, destpath='.')
numpy.lib.npyio.LineSplitter(self, delimiter=None, comments='#', autostrip=True, encoding=None)
numpy.lib.npyio.NameValidator(self, excludelist=None, deletechars=None, case_sensitive=None, replace_space='_')
numpy.lib.npyio.NpzFile(self, fid, own_fid=False, allow_pickle=True, pickle_kwargs=None)
numpy.lib.npyio.StringConverter(self, dtype_or_func=None, default=None, missing_values=None, locked=False)
numpy.lib.npyio.StringConverter._dtypeortype(dtype)
numpy.lib.npyio.StringConverter._getdtype(val)
numpy.lib.npyio.StringConverter._getsubdtype(val)
numpy.lib.npyio.StringConverter.upgrade_mapper(func, default=None)
numpy.lib.npyio._decode_line(line, encoding=None)
numpy.lib.npyio._getconv(dtype)
numpy.lib.npyio._is_string_like(obj)
numpy.lib.npyio._savez(file, args, kwds, compress, allow_pickle=True, pickle_kwargs=None)
numpy.lib.npyio.asbytes(s)
numpy.lib.npyio.asbytes_nested(x)
numpy.lib.npyio.asstr(s)
numpy.lib.npyio.asunicode(s)
numpy.lib.npyio.basestring(self, /, *args, **kwargs)
numpy.lib.npyio.bytes(self, /, *args, **kwargs)
numpy.lib.npyio.easy_dtype(ndtype, names=None, defaultfmt='f%i', **validationargs)
numpy.lib.npyio.flatten_dtype(ndtype, flatten_base=False)
numpy.lib.npyio.fromregex(file, regexp, dtype, encoding=None)
numpy.lib.npyio.genfromtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, skip_header=0, skip_footer=0, converters=None, missing_values=None, filling_values=None, usecols=None, names=None, excludelist=None, deletechars=None, replace_space='_', autostrip=False, case_sensitive=True, defaultfmt='f%i', unpack=None, usemask=False, loose=True, invalid_raise=True, max_rows=None, encoding='bytes')
numpy.lib.npyio.has_nested_fields(ndtype)
numpy.lib.npyio.is_pathlib_path(obj)
numpy.lib.npyio.itemgetter(self, /, *args, **kwargs)
numpy.lib.npyio.load(file, mmap_mode=None, allow_pickle=True, fix_imports=True, encoding='ASCII')
numpy.lib.npyio.loadtxt(fname, dtype=<class 'float'>, comments='#', delimiter=None, converters=None, skiprows=0, usecols=None, unpack=False, ndmin=0, encoding='bytes')
numpy.lib.npyio.mafromtxt(fname, **kwargs)
numpy.lib.npyio.ndfromtxt(fname, **kwargs)
numpy.lib.npyio.recfromcsv(fname, **kwargs)
numpy.lib.npyio.recfromtxt(fname, **kwargs)
numpy.lib.npyio.save(file, arr, allow_pickle=True, fix_imports=True)
numpy.lib.npyio.savetxt(fname, X, fmt='%.18e', delimiter=' ', newline='\n', header='', footer='', comments='# ', encoding=None)
numpy.lib.npyio.savez(file, *args, **kwds)
numpy.lib.npyio.savez_compressed(file, *args, **kwds)
numpy.lib.npyio.unicode(self, /, *args, **kwargs)
numpy.lib.npyio.zipfile_factory(file, *args, **kwargs)
numpy.lib.pad(array, pad_width, mode, **kwargs)
numpy.lib.percentile(a, q, axis=None, out=None, overwrite_input=False, interpolation='linear', keepdims=False)
numpy.lib.piecewise(x, condlist, funclist, *args, **kw)
numpy.lib.place(arr, mask, vals)
numpy.lib.pmt(rate, nper, pv, fv=0, when='end')
numpy.lib.poly(seq_of_zeros)
numpy.lib.poly1d(self, c_or_r, r=False, variable=None)
numpy.lib.polyadd(a1, a2)
numpy.lib.polyder(p, m=1)
numpy.lib.polydiv(u, v)
numpy.lib.polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False)
numpy.lib.polyint(p, m=1, k=None)
numpy.lib.polymul(a1, a2)
numpy.lib.polynomial.RankWarning(self, /, *args, **kwargs)
numpy.lib.polynomial._raise_power(astr, wrap=70)
numpy.lib.polynomial.diag(v, k=0)
numpy.lib.polynomial.eigvals(a)
numpy.lib.polynomial.finfo(self, /, *args, **kwargs)
numpy.lib.polynomial.hstack(tup)
numpy.lib.polynomial.imag(val)
numpy.lib.polynomial.inv(a)
numpy.lib.polynomial.iscomplex(x)
numpy.lib.polynomial.isscalar(num)
numpy.lib.polynomial.lstsq(a, b, rcond='warn')
numpy.lib.polynomial.mintypecode(typechars, typeset='GDFgdf', default='d')
numpy.lib.polynomial.ones(shape, dtype=None, order='C')
numpy.lib.polynomial.poly(seq_of_zeros)
numpy.lib.polynomial.poly1d(self, c_or_r, r=False, variable=None)
numpy.lib.polynomial.polyadd(a1, a2)
numpy.lib.polynomial.polyder(p, m=1)
numpy.lib.polynomial.polydiv(u, v)
numpy.lib.polynomial.polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False)
numpy.lib.polynomial.polyint(p, m=1, k=None)
numpy.lib.polynomial.polymul(a1, a2)
numpy.lib.polynomial.polysub(a1, a2)
numpy.lib.polynomial.polyval(p, x)
numpy.lib.polynomial.real(val)
numpy.lib.polynomial.roots(p)
numpy.lib.polynomial.trim_zeros(filt, trim='fb')
numpy.lib.polynomial.vander(x, N=None, increasing=False)
numpy.lib.polysub(a1, a2)
numpy.lib.polyval(p, x)
numpy.lib.ppmt(rate, per, nper, pv, fv=0, when='end')
numpy.lib.pv(rate, nper, pmt, fv=0, when='end')
numpy.lib.rate(nper, pmt, pv, fv, when='end', guess=None, tol=None, maxiter=100)
numpy.lib.real(val)
numpy.lib.real_if_close(a, tol=100)
numpy.lib.recfromcsv(fname, **kwargs)
numpy.lib.recfromtxt(fname, **kwargs)
numpy.lib.roots(p)
numpy.lib.rot90(m, k=1, axes=(0, 1))
numpy.lib.row_stack(tup)
numpy.lib.safe_eval(source)
numpy.lib.save(file, arr, allow_pickle=True, fix_imports=True)
numpy.lib.savetxt(fname, X, fmt='%.18e', delimiter=' ', newline='\n', header='', footer='', comments='# ', encoding=None)
numpy.lib.savez(file, *args, **kwds)
numpy.lib.savez_compressed(file, *args, **kwds)
numpy.lib.scimath._fix_int_lt_zero(x)
numpy.lib.scimath._fix_real_abs_gt_1(x)
numpy.lib.scimath._fix_real_lt_zero(x)
numpy.lib.scimath._tocomplex(arr)
numpy.lib.scimath.any(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.lib.scimath.arccos(x)
numpy.lib.scimath.arcsin(x)
numpy.lib.scimath.arctanh(x)
numpy.lib.scimath.asarray(a, dtype=None, order=None)
numpy.lib.scimath.isreal(x)
numpy.lib.scimath.log(x)
numpy.lib.scimath.log10(x)
numpy.lib.scimath.log2(x)
numpy.lib.scimath.logn(n, x)
numpy.lib.scimath.power(x, p)
numpy.lib.scimath.sqrt(x)
numpy.lib.select(condlist, choicelist, default=0)
numpy.lib.setdiff1d(ar1, ar2, assume_unique=False)
numpy.lib.setxor1d(ar1, ar2, assume_unique=False)
numpy.lib.shape_base._replace_zero_by_x_arrays(sub_arys)
numpy.lib.shape_base.apply_along_axis(func1d, axis, arr, *args, **kwargs)
numpy.lib.shape_base.apply_over_axes(func, a, axes)
numpy.lib.shape_base.array_split(ary, indices_or_sections, axis=0)
numpy.lib.shape_base.asanyarray(a, dtype=None, order=None)
numpy.lib.shape_base.asarray(a, dtype=None, order=None)
numpy.lib.shape_base.column_stack(tup)
numpy.lib.shape_base.dsplit(ary, indices_or_sections)
numpy.lib.shape_base.dstack(tup)
numpy.lib.shape_base.expand_dims(a, axis)
numpy.lib.shape_base.hsplit(ary, indices_or_sections)
numpy.lib.shape_base.kron(a, b)
numpy.lib.shape_base.matrix(self, /, *args, **kwargs)
numpy.lib.shape_base.ndindex(self, *shape)
numpy.lib.shape_base.outer(a, b, out=None)
numpy.lib.shape_base.product(a, axis=None, dtype=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.lib.shape_base.reshape(a, newshape, order='C')
numpy.lib.shape_base.row_stack(tup)
numpy.lib.shape_base.split(ary, indices_or_sections, axis=0)
numpy.lib.shape_base.tile(A, reps)
numpy.lib.shape_base.transpose(a, axes=None)
numpy.lib.shape_base.vsplit(ary, indices_or_sections)
numpy.lib.shape_base.vstack(tup)
numpy.lib.sinc(x)
numpy.lib.sort_complex(a)
numpy.lib.source(object, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>)
numpy.lib.split(ary, indices_or_sections, axis=0)
numpy.lib.stride_tricks.DummyArray(self, interface, base=None)
numpy.lib.stride_tricks._broadcast_to(array, shape, subok, readonly)
numpy.lib.stride_tricks._maybe_view_as_subclass(original_array, new_array)
numpy.lib.stride_tricks.as_strided(x, shape=None, strides=None, subok=False, writeable=True)
numpy.lib.stride_tricks.broadcast_to(array, shape, subok=False)
numpy.lib.tile(A, reps)
numpy.lib.trapz(y, x=None, dx=1.0, axis=-1)
numpy.lib.tri(N, M=None, k=0, dtype=<class 'float'>)
numpy.lib.tril(m, k=0)
numpy.lib.tril_indices(n, k=0, m=None)
numpy.lib.tril_indices_from(arr, k=0)
numpy.lib.trim_zeros(filt, trim='fb')
numpy.lib.triu(m, k=0)
numpy.lib.triu_indices(n, k=0, m=None)
numpy.lib.triu_indices_from(arr, k=0)
numpy.lib.twodim_base._min_int(low, high)
numpy.lib.twodim_base.asanyarray(a, dtype=None, order=None)
numpy.lib.twodim_base.asarray(a, dtype=None, order=None)
numpy.lib.twodim_base.diag(v, k=0)
numpy.lib.twodim_base.diagflat(v, k=0)
numpy.lib.twodim_base.diagonal(a, offset=0, axis1=0, axis2=1)
numpy.lib.twodim_base.eye(N, M=None, k=0, dtype=<class 'float'>, order='C')
numpy.lib.twodim_base.fliplr(m)
numpy.lib.twodim_base.flipud(m)
numpy.lib.twodim_base.histogram2d(x, y, bins=10, range=None, normed=False, weights=None)
numpy.lib.twodim_base.iinfo(self, int_type)
numpy.lib.twodim_base.int16(self, /, *args, **kwargs)
numpy.lib.twodim_base.int32(self, /, *args, **kwargs)
numpy.lib.twodim_base.int64(self, /, *args, **kwargs)
numpy.lib.twodim_base.int8(self, /, *args, **kwargs)
numpy.lib.twodim_base.mask_indices(n, mask_func, k=0)
numpy.lib.twodim_base.nonzero(a)
numpy.lib.twodim_base.ones(shape, dtype=None, order='C')
numpy.lib.twodim_base.transpose(a, axes=None)
numpy.lib.twodim_base.tri(N, M=None, k=0, dtype=<class 'float'>)
numpy.lib.twodim_base.tril(m, k=0)
numpy.lib.twodim_base.tril_indices(n, k=0, m=None)
numpy.lib.twodim_base.tril_indices_from(arr, k=0)
numpy.lib.twodim_base.triu(m, k=0)
numpy.lib.twodim_base.triu_indices(n, k=0, m=None)
numpy.lib.twodim_base.triu_indices_from(arr, k=0)
numpy.lib.twodim_base.vander(x, N=None, increasing=False)
numpy.lib.type_check._getmaxmin(t)
numpy.lib.type_check.asanyarray(a, dtype=None, order=None)
numpy.lib.type_check.asarray(a, dtype=None, order=None)
numpy.lib.type_check.asfarray(a, dtype=<class 'numpy.float64'>)
numpy.lib.type_check.asscalar(a)
numpy.lib.type_check.imag(val)
numpy.lib.type_check.iscomplex(x)
numpy.lib.type_check.iscomplexobj(x)
numpy.lib.type_check.isneginf(x, out=None)
numpy.lib.type_check.isposinf(x, out=None)
numpy.lib.type_check.isreal(x)
numpy.lib.type_check.isrealobj(x)
numpy.lib.type_check.mintypecode(typechars, typeset='GDFgdf', default='d')
numpy.lib.type_check.nan_to_num(x, copy=True)
numpy.lib.type_check.real(val)
numpy.lib.type_check.real_if_close(a, tol=100)
numpy.lib.type_check.typename(char)
numpy.lib.typename(char)
numpy.lib.ufunclike._deprecate_out_named_y(f)
numpy.lib.ufunclike.fix(x, out=None)
numpy.lib.ufunclike.isneginf(x, out=None)
numpy.lib.ufunclike.isposinf(x, out=None)
numpy.lib.union1d(ar1, ar2)
numpy.lib.unique(ar, return_index=False, return_inverse=False, return_counts=False, axis=None)
numpy.lib.unwrap(p, discont=3.141592653589793, axis=-1)
numpy.lib.utils.SafeEval(self)
numpy.lib.utils._Deprecate(self, old_name=None, new_name=None, message=None)
numpy.lib.utils._getmembers(item)
numpy.lib.utils._info(obj, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>)
numpy.lib.utils._lookfor_generate_cache(module, import_modules, regenerate)
numpy.lib.utils._makenamedict(module='numpy')
numpy.lib.utils._median_nancheck(data, result, axis, out)
numpy.lib.utils._set_function_name(func, name)
numpy.lib.utils._split_line(name, arguments, width)
numpy.lib.utils.asarray(a, dtype=None, order=None)
numpy.lib.utils.byte_bounds(a)
numpy.lib.utils.deprecate_with_doc(msg)
numpy.lib.utils.formatargspec(args, varargs=None, varkw=None, defaults=None, formatarg=<class 'str'>, formatvarargs=<function <lambda> at 0x00000000032736A8>, formatvarkw=<function <lambda> at 0x0000000003273620>, formatvalue=<function <lambda> at 0x0000000003273598>, join=<function joinseq at 0x00000000032737B8>)
numpy.lib.utils.getargspec(func)
numpy.lib.utils.info(object=None, maxwidth=76, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>, toplevel='numpy')
numpy.lib.utils.issubclass_(arg1, arg2)
numpy.lib.utils.issubdtype(arg1, arg2)
numpy.lib.utils.issubsctype(arg1, arg2)
numpy.lib.utils.lookfor(what, module=None, import_modules=True, regenerate=False, output=None)
numpy.lib.utils.ndarray(self, /, *args, **kwargs)
numpy.lib.utils.safe_eval(source)
numpy.lib.utils.source(object, output=<_io.TextIOWrapper name='<stdout>' mode='w' encoding='utf-8'>)
numpy.lib.utils.ufunc(self, /, *args, **kwargs)
numpy.lib.utils.who(vardict=None)
numpy.lib.vander(x, N=None, increasing=False)
numpy.lib.vectorize(self, pyfunc, otypes=None, doc=None, excluded=None, cache=False, signature=None)
numpy.lib.vsplit(ary, indices_or_sections)
numpy.lib.who(vardict=None)
numpy.linalg.LinAlgError(self, /, *args, **kwargs)
numpy.linalg.cholesky(a)
numpy.linalg.cond(x, p=None)
numpy.linalg.det(a)
numpy.linalg.eig(a)
numpy.linalg.eigh(a, UPLO='L')
numpy.linalg.eigvals(a)
numpy.linalg.eigvalsh(a, UPLO='L')
numpy.linalg.inv(a)
numpy.linalg.lapack_lite.LapackError(self, /, *args, **kwargs)
numpy.linalg.linalg.LinAlgError(self, /, *args, **kwargs)
numpy.linalg.linalg._complexType(t, default=<class 'numpy.complex128'>)
numpy.linalg.linalg._convertarray(a)
numpy.linalg.linalg._fastCopyAndTranspose(type, *arrays)
numpy.linalg.linalg._isEmpty2d(arr)
numpy.linalg.linalg._linalgRealType(t)
numpy.linalg.linalg._makearray(a)
numpy.linalg.linalg._multi_dot(arrays, order, i, j)
numpy.linalg.linalg._multi_dot_matrix_chain_order(arrays, return_costs=False)
numpy.linalg.linalg._multi_dot_three(A, B, C)
numpy.linalg.linalg._multi_svd_norm(x, row_axis, col_axis, op)
numpy.linalg.linalg._raise_linalgerror_eigenvalues_nonconvergence(err, flag)
numpy.linalg.linalg._raise_linalgerror_nonposdef(err, flag)
numpy.linalg.linalg._raise_linalgerror_singular(err, flag)
numpy.linalg.linalg._raise_linalgerror_svd_nonconvergence(err, flag)
numpy.linalg.linalg._realType(t, default=<class 'numpy.float64'>)
numpy.linalg.linalg.all(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.linalg.linalg.amax(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.linalg.linalg.amin(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.linalg.linalg.asanyarray(a, dtype=None, order=None)
numpy.linalg.linalg.asarray(a, dtype=None, order=None)
numpy.linalg.linalg.asfarray(a, dtype=<class 'numpy.float64'>)
numpy.linalg.linalg.broadcast(self, /, *args, **kwargs)
numpy.linalg.linalg.cdouble(self, /, *args, **kwargs)
numpy.linalg.linalg.cholesky(a)
numpy.linalg.linalg.complexfloating(self, /, *args, **kwargs)
numpy.linalg.linalg.cond(x, p=None)
numpy.linalg.linalg.count_nonzero(a, axis=None)
numpy.linalg.linalg.csingle(self, /, *args, **kwargs)
numpy.linalg.linalg.det(a)
numpy.linalg.linalg.double(self, /, *args, **kwargs)
numpy.linalg.linalg.eig(a)
numpy.linalg.linalg.eigh(a, UPLO='L')
numpy.linalg.linalg.eigvals(a)
numpy.linalg.linalg.eigvalsh(a, UPLO='L')
numpy.linalg.linalg.errstate(self, **kwargs)
numpy.linalg.linalg.finfo(self, /, *args, **kwargs)
numpy.linalg.linalg.fortran_int(self, /, *args, **kwargs)
numpy.linalg.linalg.get_linalg_error_extobj(callback)
numpy.linalg.linalg.inexact(self, /, *args, **kwargs)
numpy.linalg.linalg.intc(self, /, *args, **kwargs)
numpy.linalg.linalg.intp(self, /, *args, **kwargs)
numpy.linalg.linalg.inv(a)
numpy.linalg.linalg.isComplexType(t)
numpy.linalg.linalg.longdouble(self, /, *args, **kwargs)
numpy.linalg.linalg.lstsq(a, b, rcond='warn')
numpy.linalg.linalg.matrix_power(M, n)
numpy.linalg.linalg.matrix_rank(M, tol=None, hermitian=False)
numpy.linalg.linalg.moveaxis(a, source, destination)
numpy.linalg.linalg.multi_dot(arrays)
numpy.linalg.linalg.norm(x, ord=None, axis=None, keepdims=False)
numpy.linalg.linalg.object_(self, /, *args, **kwargs)
numpy.linalg.linalg.ones(shape, dtype=None, order='C')
numpy.linalg.linalg.pinv(a, rcond=1e-15)
numpy.linalg.linalg.product(a, axis=None, dtype=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.linalg.linalg.qr(a, mode='reduced')
numpy.linalg.linalg.ravel(a, order='C')
numpy.linalg.linalg.single(self, /, *args, **kwargs)
numpy.linalg.linalg.size(a, axis=None)
numpy.linalg.linalg.slogdet(a)
numpy.linalg.linalg.solve(a, b)
numpy.linalg.linalg.sum(a, axis=None, dtype=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.linalg.linalg.svd(a, full_matrices=True, compute_uv=True)
numpy.linalg.linalg.swapaxes(a, axis1, axis2)
numpy.linalg.linalg.tensorinv(a, ind=2)
numpy.linalg.linalg.tensorsolve(a, b, axes=None)
numpy.linalg.linalg.transpose(a)
numpy.linalg.linalg.triu(m, k=0)
numpy.linalg.lstsq(a, b, rcond='warn')
numpy.linalg.matrix_power(M, n)
numpy.linalg.matrix_rank(M, tol=None, hermitian=False)
numpy.linalg.multi_dot(arrays)
numpy.linalg.norm(x, ord=None, axis=None, keepdims=False)
numpy.linalg.pinv(a, rcond=1e-15)
numpy.linalg.qr(a, mode='reduced')
numpy.linalg.slogdet(a)
numpy.linalg.solve(a, b)
numpy.linalg.svd(a, full_matrices=True, compute_uv=True)
numpy.linalg.tensorinv(a, ind=2)
numpy.linalg.tensorsolve(a, b, axes=None)
numpy.ma.MAError(self, /, *args, **kwargs)
numpy.ma.MaskError(self, /, *args, **kwargs)
numpy.ma.MaskType(self, /, *args, **kwargs)
numpy.ma.MaskedArray(self, /, *args, **kwargs)
numpy.ma.allclose(a, b, masked_equal=True, rtol=1e-05, atol=1e-08)
numpy.ma.allequal(a, b, fill_value=True)
numpy.ma.amax(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.ma.amin(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.ma.append(a, b, axis=None)
numpy.ma.apply_along_axis(func1d, axis, arr, *args, **kwargs)
numpy.ma.apply_over_axes(func, a, axes)
numpy.ma.argsort(a, axis=<class 'numpy._globals._NoValue'>, kind='quicksort', order=None, endwith=True, fill_value=None)
numpy.ma.array(data, dtype=None, copy=False, order=None, mask=False, fill_value=None, keep_mask=True, hard_mask=False, shrink=True, subok=True, ndmin=0)
numpy.ma.asanyarray(a, dtype=None)
numpy.ma.asarray(a, dtype=None, order=None)
numpy.ma.average(a, axis=None, weights=None, returned=False)
numpy.ma.bool_(self, /, *args, **kwargs)
numpy.ma.choose(indices, choices, out=None, mode='raise')
numpy.ma.clip(a, a_min, a_max, out=None)
numpy.ma.clump_masked(a)
numpy.ma.clump_unmasked(a)
numpy.ma.common_fill_value(a, b)
numpy.ma.compress_cols(a)
numpy.ma.compress_nd(x, axis=None)
numpy.ma.compress_rowcols(x, axis=None)
numpy.ma.compress_rows(a)
numpy.ma.compressed(x)
numpy.ma.concatenate(arrays, axis=0)
numpy.ma.convolve(a, v, mode='full', propagate_mask=True)
numpy.ma.core.MAError(self, /, *args, **kwargs)
numpy.ma.core.MaskError(self, /, *args, **kwargs)
numpy.ma.core.MaskType(self, /, *args, **kwargs)
numpy.ma.core.MaskedArray(self, /, *args, **kwargs)
numpy.ma.core.MaskedArrayFutureWarning(self, /, *args, **kwargs)
numpy.ma.core.MaskedConstant(self, /, *args, **kwargs)
numpy.ma.core.MaskedIterator(self, ma)
numpy.ma.core._DomainCheckInterval(self, a, b)
numpy.ma.core._DomainGreater(self, critical_value)
numpy.ma.core._DomainGreaterEqual(self, critical_value)
numpy.ma.core._DomainSafeDivide(self, tolerance=None)
numpy.ma.core._DomainTan(self, eps)
numpy.ma.core._DomainedBinaryOperation(self, dbfunc, domain, fillx=0, filly=0)
numpy.ma.core._MaskedBinaryOperation(self, mbfunc, fillx=0, filly=0)
numpy.ma.core._MaskedPrintOption(self, display)
numpy.ma.core._MaskedUFunc(self, ufunc)
numpy.ma.core._MaskedUnaryOperation(self, mufunc, fill=0, domain=None)
numpy.ma.core._NoValue(self, /, *args, **kwargs)
numpy.ma.core._arraymethod(funcname, onmask=True)
numpy.ma.core._check_fill_value(fill_value, ndtype)
numpy.ma.core._check_mask_axis(mask, axis, keepdims=<class 'numpy._globals._NoValue'>)
numpy.ma.core._convert2ma(self, funcname, params=None)
numpy.ma.core._convolve_or_correlate(f, a, v, mode, propagate_mask)
numpy.ma.core._deprecate_argsort_axis(arr)
numpy.ma.core._extrema_operation(self, ufunc, compare, fill_value)
numpy.ma.core._extremum_fill_value(obj, extremum, extremum_name)
numpy.ma.core._frommethod(self, methodname, reversed=False)
numpy.ma.core._get_dtype_of(obj)
numpy.ma.core._mareconstruct(subtype, baseclass, baseshape, basetype)
numpy.ma.core._recursive_fill_value(dtype, f)
numpy.ma.core._recursive_filled(a, mask, fill_value)
numpy.ma.core._recursive_printoption(result, mask, printopt)
numpy.ma.core._recursive_set_fill_value(fillvalue, dt)
numpy.ma.core._replace_dtype_fields(dtype, primitive_dtype)
numpy.ma.core._replace_dtype_fields_recursive(dtype, primitive_dtype)
numpy.ma.core._shrink_mask(m)
numpy.ma.core.allclose(a, b, masked_equal=True, rtol=1e-05, atol=1e-08)
numpy.ma.core.allequal(a, b, fill_value=True)
numpy.ma.core.amax(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.ma.core.amin(a, axis=None, out=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.ma.core.append(a, b, axis=None)
numpy.ma.core.argsort(a, axis=<class 'numpy._globals._NoValue'>, kind='quicksort', order=None, endwith=True, fill_value=None)
numpy.ma.core.array(data, dtype=None, copy=False, order=None, mask=False, fill_value=None, keep_mask=True, hard_mask=False, shrink=True, subok=True, ndmin=0)
numpy.ma.core.asanyarray(a, dtype=None)
numpy.ma.core.asarray(a, dtype=None, order=None)
numpy.ma.core.basestring(self, /, *args, **kwargs)
numpy.ma.core.bool_(self, /, *args, **kwargs)
numpy.ma.core.bytes(self, /, *args, **kwargs)
numpy.ma.core.choose(indices, choices, out=None, mode='raise')
numpy.ma.core.clip(a, a_min, a_max, out=None)
numpy.ma.core.common_fill_value(a, b)
numpy.ma.core.compressed(x)
numpy.ma.core.concatenate(arrays, axis=0)
numpy.ma.core.convolve(a, v, mode='full', propagate_mask=True)
numpy.ma.core.correlate(a, v, mode='valid', propagate_mask=True)
numpy.ma.core.default_fill_value(obj)
numpy.ma.core.diag(v, k=0)
numpy.ma.core.diff(a, n=1, axis=-1)
numpy.ma.core.doc_note(initialdoc, note)
numpy.ma.core.dot(a, b, strict=False, out=None)
numpy.ma.core.dump(a, F)
numpy.ma.core.dumps(a)
numpy.ma.core.expand_dims(x, axis)
numpy.ma.core.filled(a, fill_value=None)
numpy.ma.core.fix_invalid(a, mask=False, copy=True, fill_value=None)
numpy.ma.core.flatten_mask(mask)
numpy.ma.core.flatten_structured_array(a)
numpy.ma.core.formatargspec(args, varargs=None, varkw=None, defaults=None, formatarg=<class 'str'>, formatvarargs=<function <lambda> at 0x00000000032736A8>, formatvarkw=<function <lambda> at 0x0000000003273620>, formatvalue=<function <lambda> at 0x0000000003273598>, join=<function joinseq at 0x00000000032737B8>)
numpy.ma.core.fromfile(file, dtype=<class 'float'>, count=-1, sep='')
numpy.ma.core.fromflex(fxarray)
numpy.ma.core.get_data(a, subok=True)
numpy.ma.core.get_fill_value(a)
numpy.ma.core.get_mask(a)
numpy.ma.core.get_object_signature(obj)
numpy.ma.core.getargspec(func)
numpy.ma.core.getdata(a, subok=True)
numpy.ma.core.getmask(a)
numpy.ma.core.getmaskarray(arr)
numpy.ma.core.indices(dimensions, dtype=<class 'int'>)
numpy.ma.core.inner(a, b)
numpy.ma.core.innerproduct(a, b)
numpy.ma.core.isMA(x)
numpy.ma.core.isMaskedArray(x)
numpy.ma.core.is_mask(m)
numpy.ma.core.is_masked(x)
numpy.ma.core.isarray(x)
numpy.ma.core.iscomplexobj(x)
numpy.ma.core.left_shift(a, n)
numpy.ma.core.load(F)
numpy.ma.core.loads(strg)
numpy.ma.core.long(self, /, *args, **kwargs)
numpy.ma.core.make_mask(m, copy=False, shrink=True, dtype=<class 'numpy.bool_'>)
numpy.ma.core.make_mask_descr(ndtype)
numpy.ma.core.make_mask_none(newshape, dtype=None)
numpy.ma.core.mask_or(m1, m2, copy=False, shrink=True)
numpy.ma.core.mask_rowcols(a, axis=None)
numpy.ma.core.masked_array(self, /, *args, **kwargs)
numpy.ma.core.masked_equal(x, value, copy=True)
numpy.ma.core.masked_greater(x, value, copy=True)
numpy.ma.core.masked_greater_equal(x, value, copy=True)
numpy.ma.core.masked_inside(x, v1, v2, copy=True)
numpy.ma.core.masked_invalid(a, copy=True)
numpy.ma.core.masked_less(x, value, copy=True)
numpy.ma.core.masked_less_equal(x, value, copy=True)
numpy.ma.core.masked_not_equal(x, value, copy=True)
numpy.ma.core.masked_object(x, value, copy=True, shrink=True)
numpy.ma.core.masked_outside(x, v1, v2, copy=True)
numpy.ma.core.masked_values(x, value, rtol=1e-05, atol=1e-08, copy=True, shrink=True)
numpy.ma.core.masked_where(condition, a, copy=True)
numpy.ma.core.max(obj, axis=None, out=None, fill_value=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.ma.core.maximum_fill_value(obj)
numpy.ma.core.min(obj, axis=None, out=None, fill_value=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.ma.core.minimum_fill_value(obj)
numpy.ma.core.mvoid(self, /, *args, **kwargs)
numpy.ma.core.n_expand_dims(a, axis)
numpy.ma.core.ndarray(self, /, *args, **kwargs)
numpy.ma.core.ndim(obj)
numpy.ma.core.normalize_axis_tuple(axis, ndim, argname=None, allow_duplicate=False)
numpy.ma.core.ones_like(a, dtype=None, order='K', subok=True)
numpy.ma.core.outer(a, b)
numpy.ma.core.outerproduct(a, b)
numpy.ma.core.power(a, b, third=None)
numpy.ma.core.ptp(obj, axis=None, out=None, fill_value=None)
numpy.ma.core.put(a, indices, values, mode='raise')
numpy.ma.core.putmask(a, mask, values)
numpy.ma.core.rank(obj)
numpy.ma.core.reshape(a, new_shape, order='C')
numpy.ma.core.resize(x, new_shape)
numpy.ma.core.right_shift(a, n)
numpy.ma.core.round(a, decimals=0, out=None)
numpy.ma.core.round_(a, decimals=0, out=None)
numpy.ma.core.set_fill_value(a, fill_value)
numpy.ma.core.shape(obj)
numpy.ma.core.size(obj, axis=None)
numpy.ma.core.sort(a, axis=-1, kind='quicksort', order=None, endwith=True, fill_value=None)
numpy.ma.core.squeeze(a, axis=None)
numpy.ma.core.take(a, indices, axis=None, out=None, mode='raise')
numpy.ma.core.transpose(a, axes=None)
numpy.ma.core.unicode(self, /, *args, **kwargs)
numpy.ma.core.where(condition, x=<class 'numpy._globals._NoValue'>, y=<class 'numpy._globals._NoValue'>)
numpy.ma.core.zeros_like(a, dtype=None, order='K', subok=True)
numpy.ma.corrcoef(x, y=None, rowvar=True, bias=<class 'numpy._globals._NoValue'>, allow_masked=True, ddof=<class 'numpy._globals._NoValue'>)
numpy.ma.correlate(a, v, mode='valid', propagate_mask=True)
numpy.ma.count_masked(arr, axis=None)
numpy.ma.cov(x, y=None, rowvar=True, bias=False, allow_masked=True, ddof=None)
numpy.ma.default_fill_value(obj)
numpy.ma.diag(v, k=0)
numpy.ma.diff(a, n=1, axis=-1)
numpy.ma.dot(a, b, strict=False, out=None)
numpy.ma.dump(a, F)
numpy.ma.dumps(a)
numpy.ma.ediff1d(arr, to_end=None, to_begin=None)
numpy.ma.expand_dims(x, axis)
numpy.ma.extras.AxisConcatenator(self, axis=0, matrix=False, ndmin=1, trans1d=-1)
numpy.ma.extras.MAError(self, /, *args, **kwargs)
numpy.ma.extras.MAxisConcatenator(self, axis=0, matrix=False, ndmin=1, trans1d=-1)
numpy.ma.extras.MaskedArray(self, /, *args, **kwargs)
numpy.ma.extras._covhelper(x, y=None, rowvar=True, allow_masked=True)
numpy.ma.extras._ezclump(mask)
numpy.ma.extras._fromnxfunction(self, funcname)
numpy.ma.extras._fromnxfunction_allargs(self, funcname)
numpy.ma.extras._fromnxfunction_args(self, funcname)
numpy.ma.extras._fromnxfunction_seq(self, funcname)
numpy.ma.extras._fromnxfunction_single(self, funcname)
numpy.ma.extras._median(a, axis=None, out=None, overwrite_input=False)
numpy.ma.extras._ureduce(a, func, **kwargs)
numpy.ma.extras.apply_along_axis(func1d, axis, arr, *args, **kwargs)
numpy.ma.extras.apply_over_axes(func, a, axes)
numpy.ma.extras.array(data, dtype=None, copy=False, order=None, mask=False, fill_value=None, keep_mask=True, hard_mask=False, shrink=True, subok=True, ndmin=0)
numpy.ma.extras.asarray(a, dtype=None, order=None)
numpy.ma.extras.average(a, axis=None, weights=None, returned=False)
numpy.ma.extras.clump_masked(a)
numpy.ma.extras.clump_unmasked(a)
numpy.ma.extras.compress_cols(a)
numpy.ma.extras.compress_nd(x, axis=None)
numpy.ma.extras.compress_rowcols(x, axis=None)
numpy.ma.extras.compress_rows(a)
numpy.ma.extras.concatenate(arrays, axis=0)
numpy.ma.extras.corrcoef(x, y=None, rowvar=True, bias=<class 'numpy._globals._NoValue'>, allow_masked=True, ddof=<class 'numpy._globals._NoValue'>)
numpy.ma.extras.count_masked(arr, axis=None)
numpy.ma.extras.cov(x, y=None, rowvar=True, bias=False, allow_masked=True, ddof=None)
numpy.ma.extras.dot(a, b, strict=False, out=None)
numpy.ma.extras.ediff1d(arr, to_end=None, to_begin=None)
numpy.ma.extras.filled(a, fill_value=None)
numpy.ma.extras.flatnotmasked_contiguous(a)
numpy.ma.extras.flatnotmasked_edges(a)
numpy.ma.extras.flatten_inplace(seq)
numpy.ma.extras.getdata(a, subok=True)
numpy.ma.extras.getmask(a)
numpy.ma.extras.getmaskarray(arr)
numpy.ma.extras.in1d(ar1, ar2, assume_unique=False, invert=False)
numpy.ma.extras.intersect1d(ar1, ar2, assume_unique=False)
numpy.ma.extras.isin(element, test_elements, assume_unique=False, invert=False)
numpy.ma.extras.issequence(seq)
numpy.ma.extras.make_mask_descr(ndtype)
numpy.ma.extras.mask_cols(a, axis=None)
numpy.ma.extras.mask_or(m1, m2, copy=False, shrink=True)
numpy.ma.extras.mask_rowcols(a, axis=None)
numpy.ma.extras.mask_rows(a, axis=None)
numpy.ma.extras.masked_all(shape, dtype=<class 'float'>)
numpy.ma.extras.masked_all_like(arr)
numpy.ma.extras.masked_array(self, /, *args, **kwargs)
numpy.ma.extras.median(a, axis=None, out=None, overwrite_input=False, keepdims=False)
numpy.ma.extras.mr_class(self)
numpy.ma.extras.ndarray(self, /, *args, **kwargs)
numpy.ma.extras.normalize_axis_tuple(axis, ndim, argname=None, allow_duplicate=False)
numpy.ma.extras.notmasked_contiguous(a, axis=None)
numpy.ma.extras.notmasked_edges(a, axis=None)
numpy.ma.extras.polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False)
numpy.ma.extras.setdiff1d(ar1, ar2, assume_unique=False)
numpy.ma.extras.setxor1d(ar1, ar2, assume_unique=False)
numpy.ma.extras.sort(a, axis=-1, kind='quicksort', order=None, endwith=True, fill_value=None)
numpy.ma.extras.union1d(ar1, ar2)
numpy.ma.extras.unique(ar1, return_index=False, return_inverse=False)
numpy.ma.extras.vander(x, n=None)
numpy.ma.filled(a, fill_value=None)
numpy.ma.fix_invalid(a, mask=False, copy=True, fill_value=None)
numpy.ma.flatnotmasked_contiguous(a)
numpy.ma.flatnotmasked_edges(a)
numpy.ma.flatten_mask(mask)
numpy.ma.flatten_structured_array(a)
numpy.ma.fromflex(fxarray)
numpy.ma.getdata(a, subok=True)
numpy.ma.getmask(a)
numpy.ma.getmaskarray(arr)
numpy.ma.in1d(ar1, ar2, assume_unique=False, invert=False)
numpy.ma.indices(dimensions, dtype=<class 'int'>)
numpy.ma.inner(a, b)
numpy.ma.innerproduct(a, b)
numpy.ma.intersect1d(ar1, ar2, assume_unique=False)
numpy.ma.isMA(x)
numpy.ma.isMaskedArray(x)
numpy.ma.is_mask(m)
numpy.ma.is_masked(x)
numpy.ma.isarray(x)
numpy.ma.isin(element, test_elements, assume_unique=False, invert=False)
numpy.ma.left_shift(a, n)
numpy.ma.load(F)
numpy.ma.loads(strg)
numpy.ma.make_mask(m, copy=False, shrink=True, dtype=<class 'numpy.bool_'>)
numpy.ma.make_mask_descr(ndtype)
numpy.ma.make_mask_none(newshape, dtype=None)
numpy.ma.mask_cols(a, axis=None)
numpy.ma.mask_or(m1, m2, copy=False, shrink=True)
numpy.ma.mask_rowcols(a, axis=None)
numpy.ma.mask_rows(a, axis=None)
numpy.ma.masked_all(shape, dtype=<class 'float'>)
numpy.ma.masked_all_like(arr)
numpy.ma.masked_array(self, /, *args, **kwargs)
numpy.ma.masked_equal(x, value, copy=True)
numpy.ma.masked_greater(x, value, copy=True)
numpy.ma.masked_greater_equal(x, value, copy=True)
numpy.ma.masked_inside(x, v1, v2, copy=True)
numpy.ma.masked_invalid(a, copy=True)
numpy.ma.masked_less(x, value, copy=True)
numpy.ma.masked_less_equal(x, value, copy=True)
numpy.ma.masked_not_equal(x, value, copy=True)
numpy.ma.masked_object(x, value, copy=True, shrink=True)
numpy.ma.masked_outside(x, v1, v2, copy=True)
numpy.ma.masked_values(x, value, rtol=1e-05, atol=1e-08, copy=True, shrink=True)
numpy.ma.masked_where(condition, a, copy=True)
numpy.ma.max(obj, axis=None, out=None, fill_value=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.ma.maximum_fill_value(obj)
numpy.ma.median(a, axis=None, out=None, overwrite_input=False, keepdims=False)
numpy.ma.min(obj, axis=None, out=None, fill_value=None, keepdims=<class 'numpy._globals._NoValue'>)
numpy.ma.minimum_fill_value(obj)
numpy.ma.mvoid(self, /, *args, **kwargs)
numpy.ma.ndim(obj)
numpy.ma.notmasked_contiguous(a, axis=None)
numpy.ma.notmasked_edges(a, axis=None)
numpy.ma.outer(a, b)
numpy.ma.outerproduct(a, b)
numpy.ma.polyfit(x, y, deg, rcond=None, full=False, w=None, cov=False)
numpy.ma.power(a, b, third=None)
numpy.ma.ptp(obj, axis=None, out=None, fill_value=None)
numpy.ma.put(a, indices, values, mode='raise')
numpy.ma.putmask(a, mask, values)
numpy.ma.rank(obj)
numpy.ma.reshape(a, new_shape, order='C')
numpy.ma.resize(x, new_shape)
numpy.ma.right_shift(a, n)
numpy.ma.round(a, decimals=0, out=None)
numpy.ma.round_(a, decimals=0, out=None)
numpy.ma.set_fill_value(a, fill_value)
numpy.ma.setdiff1d(ar1, ar2, assume_unique=False)
numpy.ma.setxor1d(ar1, ar2, assume_unique=False)
numpy.ma.shape(obj)
numpy.ma.size(obj, axis=None)
numpy.ma.sort(a, axis=-1, kind='quicksort', order=None, endwith=True, fill_value=None)
numpy.ma.squeeze(a, axis=None)
numpy.ma.take(a, indices, axis=None, out=None, mode='raise')
numpy.ma.transpose(a, axes=None)
numpy.ma.union1d(ar1, ar2)
numpy.ma.unique(ar1, return_index=False, return_inverse=False)
numpy.ma.vander(x, n=None)
numpy.ma.where(condition, x=<class 'numpy._globals._NoValue'>, y=<class 'numpy._globals._NoValue'>)
numpy.matrixlib.asmatrix(data, dtype=None)
numpy.matrixlib.bmat(obj, ldict=None, gdict=None)
numpy.matrixlib.defmatrix._convert_from_string(data)
numpy.matrixlib.defmatrix._from_string(str, gdict, ldict)
numpy.matrixlib.defmatrix.asanyarray(a, dtype=None, order=None)
numpy.matrixlib.defmatrix.asmatrix(data, dtype=None)
numpy.matrixlib.defmatrix.binary_repr(num, width=None)
numpy.matrixlib.defmatrix.bmat(obj, ldict=None, gdict=None)
numpy.matrixlib.defmatrix.identity(n, dtype=None)
numpy.matrixlib.defmatrix.isscalar(num)
numpy.matrixlib.defmatrix.issubdtype(arg1, arg2)
numpy.matrixlib.defmatrix.mat(data, dtype=None)
numpy.matrixlib.defmatrix.matrix(self, /, *args, **kwargs)
numpy.matrixlib.defmatrix.matrix_power(M, n)
numpy.matrixlib.mat(data, dtype=None)
numpy.matrixlib.matrix(self, /, *args, **kwargs)
numpy.polynomial.Chebyshev(self, coef, domain=None, window=None)
numpy.polynomial.Chebyshev.basis(deg, domain=None, window=None)
numpy.polynomial.Chebyshev.cast(series, domain=None, window=None)
numpy.polynomial.Chebyshev.fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None)
numpy.polynomial.Chebyshev.fromroots(roots, domain=[], window=None)
numpy.polynomial.Chebyshev.identity(domain=None, window=None)
numpy.polynomial.Chebyshev.interpolate(func, deg, domain=None, args=())
numpy.polynomial.Hermite(self, coef, domain=None, window=None)
numpy.polynomial.Hermite.basis(deg, domain=None, window=None)
numpy.polynomial.Hermite.cast(series, domain=None, window=None)
numpy.polynomial.Hermite.fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None)
numpy.polynomial.Hermite.fromroots(roots, domain=[], window=None)
numpy.polynomial.Hermite.identity(domain=None, window=None)
numpy.polynomial.HermiteE(self, coef, domain=None, window=None)
numpy.polynomial.HermiteE.basis(deg, domain=None, window=None)
numpy.polynomial.HermiteE.cast(series, domain=None, window=None)
numpy.polynomial.HermiteE.fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None)
numpy.polynomial.HermiteE.fromroots(roots, domain=[], window=None)
numpy.polynomial.HermiteE.identity(domain=None, window=None)
numpy.polynomial.Laguerre(self, coef, domain=None, window=None)
numpy.polynomial.Laguerre.basis(deg, domain=None, window=None)
numpy.polynomial.Laguerre.cast(series, domain=None, window=None)
numpy.polynomial.Laguerre.fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None)
numpy.polynomial.Laguerre.fromroots(roots, domain=[], window=None)
numpy.polynomial.Laguerre.identity(domain=None, window=None)
numpy.polynomial.Legendre(self, coef, domain=None, window=None)
numpy.polynomial.Legendre.basis(deg, domain=None, window=None)
numpy.polynomial.Legendre.cast(series, domain=None, window=None)
numpy.polynomial.Legendre.fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None)
numpy.polynomial.Legendre.fromroots(roots, domain=[], window=None)
numpy.polynomial.Legendre.identity(domain=None, window=None)
numpy.polynomial.Polynomial(self, coef, domain=None, window=None)
numpy.polynomial.Polynomial.basis(deg, domain=None, window=None)
numpy.polynomial.Polynomial.cast(series, domain=None, window=None)
numpy.polynomial.Polynomial.fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None)
numpy.polynomial.Polynomial.fromroots(roots, domain=[], window=None)
numpy.polynomial.Polynomial.identity(domain=None, window=None)
numpy.polynomial._polybase.ABCMeta(self, /, *args, **kwargs)
numpy.polynomial._polybase.ABCPolyBase(self, coef, domain=None, window=None)
numpy.polynomial._polybase.ABCPolyBase.basis(deg, domain=None, window=None)
numpy.polynomial._polybase.ABCPolyBase.cast(series, domain=None, window=None)
numpy.polynomial._polybase.ABCPolyBase.fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None)
numpy.polynomial._polybase.ABCPolyBase.fromroots(roots, domain=[], window=None)
numpy.polynomial._polybase.ABCPolyBase.identity(domain=None, window=None)
numpy.polynomial._polybase.Number(self, /, *args, **kwargs)
numpy.polynomial._polybase.abstractmethod(funcobj)
numpy.polynomial._polybase.abstractproperty(self, /, *args, **kwargs)
numpy.polynomial.chebyshev.ABCPolyBase(self, coef, domain=None, window=None)
numpy.polynomial.chebyshev.ABCPolyBase.basis(deg, domain=None, window=None)
numpy.polynomial.chebyshev.ABCPolyBase.cast(series, domain=None, window=None)
numpy.polynomial.chebyshev.ABCPolyBase.fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None)
numpy.polynomial.chebyshev.ABCPolyBase.fromroots(roots, domain=[], window=None)
numpy.polynomial.chebyshev.ABCPolyBase.identity(domain=None, window=None)
numpy.polynomial.chebyshev.Chebyshev(self, coef, domain=None, window=None)
numpy.polynomial.chebyshev.Chebyshev.basis(deg, domain=None, window=None)
numpy.polynomial.chebyshev.Chebyshev.cast(series, domain=None, window=None)
numpy.polynomial.chebyshev.Chebyshev.fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None)
numpy.polynomial.chebyshev.Chebyshev.fromroots(roots, domain=[], window=None)
numpy.polynomial.chebyshev.Chebyshev.identity(domain=None, window=None)
numpy.polynomial.chebyshev.Chebyshev.interpolate(func, deg, domain=None, args=())
numpy.polynomial.chebyshev._cseries_to_zseries(c)
numpy.polynomial.chebyshev._zseries_der(zs)
numpy.polynomial.chebyshev._zseries_div(z1, z2)
numpy.polynomial.chebyshev._zseries_int(zs)
numpy.polynomial.chebyshev._zseries_mul(z1, z2)
numpy.polynomial.chebyshev._zseries_to_cseries(zs)
numpy.polynomial.chebyshev.cheb2poly(c)
numpy.polynomial.chebyshev.chebadd(c1, c2)
numpy.polynomial.chebyshev.chebcompanion(c)
numpy.polynomial.chebyshev.chebder(c, m=1, scl=1, axis=0)
numpy.polynomial.chebyshev.chebdiv(c1, c2)
numpy.polynomial.chebyshev.chebfit(x, y, deg, rcond=None, full=False, w=None)
numpy.polynomial.chebyshev.chebfromroots(roots)
numpy.polynomial.chebyshev.chebgauss(deg)
numpy.polynomial.chebyshev.chebgrid2d(x, y, c)
numpy.polynomial.chebyshev.chebgrid3d(x, y, z, c)
numpy.polynomial.chebyshev.chebint(c, m=1, k=[], lbnd=0, scl=1, axis=0)
numpy.polynomial.chebyshev.chebinterpolate(func, deg, args=())
numpy.polynomial.chebyshev.chebline(off, scl)
numpy.polynomial.chebyshev.chebmul(c1, c2)
numpy.polynomial.chebyshev.chebmulx(c)
numpy.polynomial.chebyshev.chebpow(c, pow, maxpower=16)
numpy.polynomial.chebyshev.chebpts1(npts)
numpy.polynomial.chebyshev.chebpts2(npts)
numpy.polynomial.chebyshev.chebroots(c)
numpy.polynomial.chebyshev.chebsub(c1, c2)
numpy.polynomial.chebyshev.chebtrim(c, tol=0)
numpy.polynomial.chebyshev.chebval(x, c, tensor=True)
numpy.polynomial.chebyshev.chebval2d(x, y, c)
numpy.polynomial.chebyshev.chebval3d(x, y, z, c)
numpy.polynomial.chebyshev.chebvander(x, deg)
numpy.polynomial.chebyshev.chebvander2d(x, y, deg)
numpy.polynomial.chebyshev.chebvander3d(x, y, z, deg)
numpy.polynomial.chebyshev.chebweight(x)
numpy.polynomial.chebyshev.poly2cheb(pol)
numpy.polynomial.hermite.ABCPolyBase(self, coef, domain=None, window=None)
numpy.polynomial.hermite.ABCPolyBase.basis(deg, domain=None, window=None)
numpy.polynomial.hermite.ABCPolyBase.cast(series, domain=None, window=None)
numpy.polynomial.hermite.ABCPolyBase.fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None)
numpy.polynomial.hermite.ABCPolyBase.fromroots(roots, domain=[], window=None)
numpy.polynomial.hermite.ABCPolyBase.identity(domain=None, window=None)
numpy.polynomial.hermite.Hermite(self, coef, domain=None, window=None)
numpy.polynomial.hermite.Hermite.basis(deg, domain=None, window=None)
numpy.polynomial.hermite.Hermite.cast(series, domain=None, window=None)
numpy.polynomial.hermite.Hermite.fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None)
numpy.polynomial.hermite.Hermite.fromroots(roots, domain=[], window=None)
numpy.polynomial.hermite.Hermite.identity(domain=None, window=None)
numpy.polynomial.hermite._normed_hermite_n(x, n)
numpy.polynomial.hermite.herm2poly(c)
numpy.polynomial.hermite.hermadd(c1, c2)
numpy.polynomial.hermite.hermcompanion(c)
numpy.polynomial.hermite.hermder(c, m=1, scl=1, axis=0)
numpy.polynomial.hermite.hermdiv(c1, c2)
numpy.polynomial.hermite.hermfit(x, y, deg, rcond=None, full=False, w=None)
numpy.polynomial.hermite.hermfromroots(roots)
numpy.polynomial.hermite.hermgauss(deg)
numpy.polynomial.hermite.hermgrid2d(x, y, c)
numpy.polynomial.hermite.hermgrid3d(x, y, z, c)
numpy.polynomial.hermite.hermint(c, m=1, k=[], lbnd=0, scl=1, axis=0)
numpy.polynomial.hermite.hermline(off, scl)
numpy.polynomial.hermite.hermmul(c1, c2)
numpy.polynomial.hermite.hermmulx(c)
numpy.polynomial.hermite.hermpow(c, pow, maxpower=16)
numpy.polynomial.hermite.hermroots(c)
numpy.polynomial.hermite.hermsub(c1, c2)
numpy.polynomial.hermite.hermtrim(c, tol=0)
numpy.polynomial.hermite.hermval(x, c, tensor=True)
numpy.polynomial.hermite.hermval2d(x, y, c)
numpy.polynomial.hermite.hermval3d(x, y, z, c)
numpy.polynomial.hermite.hermvander(x, deg)
numpy.polynomial.hermite.hermvander2d(x, y, deg)
numpy.polynomial.hermite.hermvander3d(x, y, z, deg)
numpy.polynomial.hermite.hermweight(x)
numpy.polynomial.hermite.poly2herm(pol)
numpy.polynomial.hermite_e.ABCPolyBase(self, coef, domain=None, window=None)
numpy.polynomial.hermite_e.ABCPolyBase.basis(deg, domain=None, window=None)
numpy.polynomial.hermite_e.ABCPolyBase.cast(series, domain=None, window=None)
numpy.polynomial.hermite_e.ABCPolyBase.fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None)
numpy.polynomial.hermite_e.ABCPolyBase.fromroots(roots, domain=[], window=None)
numpy.polynomial.hermite_e.ABCPolyBase.identity(domain=None, window=None)
numpy.polynomial.hermite_e.HermiteE(self, coef, domain=None, window=None)
numpy.polynomial.hermite_e.HermiteE.basis(deg, domain=None, window=None)
numpy.polynomial.hermite_e.HermiteE.cast(series, domain=None, window=None)
numpy.polynomial.hermite_e.HermiteE.fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None)
numpy.polynomial.hermite_e.HermiteE.fromroots(roots, domain=[], window=None)
numpy.polynomial.hermite_e.HermiteE.identity(domain=None, window=None)
numpy.polynomial.hermite_e._normed_hermite_e_n(x, n)
numpy.polynomial.hermite_e.herme2poly(c)
numpy.polynomial.hermite_e.hermeadd(c1, c2)
numpy.polynomial.hermite_e.hermecompanion(c)
numpy.polynomial.hermite_e.hermeder(c, m=1, scl=1, axis=0)
numpy.polynomial.hermite_e.hermediv(c1, c2)
numpy.polynomial.hermite_e.hermefit(x, y, deg, rcond=None, full=False, w=None)
numpy.polynomial.hermite_e.hermefromroots(roots)
numpy.polynomial.hermite_e.hermegauss(deg)
numpy.polynomial.hermite_e.hermegrid2d(x, y, c)
numpy.polynomial.hermite_e.hermegrid3d(x, y, z, c)
numpy.polynomial.hermite_e.hermeint(c, m=1, k=[], lbnd=0, scl=1, axis=0)
numpy.polynomial.hermite_e.hermeline(off, scl)
numpy.polynomial.hermite_e.hermemul(c1, c2)
numpy.polynomial.hermite_e.hermemulx(c)
numpy.polynomial.hermite_e.hermepow(c, pow, maxpower=16)
numpy.polynomial.hermite_e.hermeroots(c)
numpy.polynomial.hermite_e.hermesub(c1, c2)
numpy.polynomial.hermite_e.hermetrim(c, tol=0)
numpy.polynomial.hermite_e.hermeval(x, c, tensor=True)
numpy.polynomial.hermite_e.hermeval2d(x, y, c)
numpy.polynomial.hermite_e.hermeval3d(x, y, z, c)
numpy.polynomial.hermite_e.hermevander(x, deg)
numpy.polynomial.hermite_e.hermevander2d(x, y, deg)
numpy.polynomial.hermite_e.hermevander3d(x, y, z, deg)
numpy.polynomial.hermite_e.hermeweight(x)
numpy.polynomial.hermite_e.poly2herme(pol)
numpy.polynomial.laguerre.ABCPolyBase(self, coef, domain=None, window=None)
numpy.polynomial.laguerre.ABCPolyBase.basis(deg, domain=None, window=None)
numpy.polynomial.laguerre.ABCPolyBase.cast(series, domain=None, window=None)
numpy.polynomial.laguerre.ABCPolyBase.fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None)
numpy.polynomial.laguerre.ABCPolyBase.fromroots(roots, domain=[], window=None)
numpy.polynomial.laguerre.ABCPolyBase.identity(domain=None, window=None)
numpy.polynomial.laguerre.Laguerre(self, coef, domain=None, window=None)
numpy.polynomial.laguerre.Laguerre.basis(deg, domain=None, window=None)
numpy.polynomial.laguerre.Laguerre.cast(series, domain=None, window=None)
numpy.polynomial.laguerre.Laguerre.fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None)
numpy.polynomial.laguerre.Laguerre.fromroots(roots, domain=[], window=None)
numpy.polynomial.laguerre.Laguerre.identity(domain=None, window=None)
numpy.polynomial.laguerre.lag2poly(c)
numpy.polynomial.laguerre.lagadd(c1, c2)
numpy.polynomial.laguerre.lagcompanion(c)
numpy.polynomial.laguerre.lagder(c, m=1, scl=1, axis=0)
numpy.polynomial.laguerre.lagdiv(c1, c2)
numpy.polynomial.laguerre.lagfit(x, y, deg, rcond=None, full=False, w=None)
numpy.polynomial.laguerre.lagfromroots(roots)
numpy.polynomial.laguerre.laggauss(deg)
numpy.polynomial.laguerre.laggrid2d(x, y, c)
numpy.polynomial.laguerre.laggrid3d(x, y, z, c)
numpy.polynomial.laguerre.lagint(c, m=1, k=[], lbnd=0, scl=1, axis=0)
numpy.polynomial.laguerre.lagline(off, scl)
numpy.polynomial.laguerre.lagmul(c1, c2)
numpy.polynomial.laguerre.lagmulx(c)
numpy.polynomial.laguerre.lagpow(c, pow, maxpower=16)
numpy.polynomial.laguerre.lagroots(c)
numpy.polynomial.laguerre.lagsub(c1, c2)
numpy.polynomial.laguerre.lagtrim(c, tol=0)
numpy.polynomial.laguerre.lagval(x, c, tensor=True)
numpy.polynomial.laguerre.lagval2d(x, y, c)
numpy.polynomial.laguerre.lagval3d(x, y, z, c)
numpy.polynomial.laguerre.lagvander(x, deg)
numpy.polynomial.laguerre.lagvander2d(x, y, deg)
numpy.polynomial.laguerre.lagvander3d(x, y, z, deg)
numpy.polynomial.laguerre.lagweight(x)
numpy.polynomial.laguerre.poly2lag(pol)
numpy.polynomial.legendre.ABCPolyBase(self, coef, domain=None, window=None)
numpy.polynomial.legendre.ABCPolyBase.basis(deg, domain=None, window=None)
numpy.polynomial.legendre.ABCPolyBase.cast(series, domain=None, window=None)
numpy.polynomial.legendre.ABCPolyBase.fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None)
numpy.polynomial.legendre.ABCPolyBase.fromroots(roots, domain=[], window=None)
numpy.polynomial.legendre.ABCPolyBase.identity(domain=None, window=None)
numpy.polynomial.legendre.Legendre(self, coef, domain=None, window=None)
numpy.polynomial.legendre.Legendre.basis(deg, domain=None, window=None)
numpy.polynomial.legendre.Legendre.cast(series, domain=None, window=None)
numpy.polynomial.legendre.Legendre.fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None)
numpy.polynomial.legendre.Legendre.fromroots(roots, domain=[], window=None)
numpy.polynomial.legendre.Legendre.identity(domain=None, window=None)
numpy.polynomial.legendre.leg2poly(c)
numpy.polynomial.legendre.legadd(c1, c2)
numpy.polynomial.legendre.legcompanion(c)
numpy.polynomial.legendre.legder(c, m=1, scl=1, axis=0)
numpy.polynomial.legendre.legdiv(c1, c2)
numpy.polynomial.legendre.legfit(x, y, deg, rcond=None, full=False, w=None)
numpy.polynomial.legendre.legfromroots(roots)
numpy.polynomial.legendre.leggauss(deg)
numpy.polynomial.legendre.leggrid2d(x, y, c)
numpy.polynomial.legendre.leggrid3d(x, y, z, c)
numpy.polynomial.legendre.legint(c, m=1, k=[], lbnd=0, scl=1, axis=0)
numpy.polynomial.legendre.legline(off, scl)
numpy.polynomial.legendre.legmul(c1, c2)
numpy.polynomial.legendre.legmulx(c)
numpy.polynomial.legendre.legpow(c, pow, maxpower=16)
numpy.polynomial.legendre.legroots(c)
numpy.polynomial.legendre.legsub(c1, c2)
numpy.polynomial.legendre.legtrim(c, tol=0)
numpy.polynomial.legendre.legval(x, c, tensor=True)
numpy.polynomial.legendre.legval2d(x, y, c)
numpy.polynomial.legendre.legval3d(x, y, z, c)
numpy.polynomial.legendre.legvander(x, deg)
numpy.polynomial.legendre.legvander2d(x, y, deg)
numpy.polynomial.legendre.legvander3d(x, y, z, deg)
numpy.polynomial.legendre.legweight(x)
numpy.polynomial.legendre.poly2leg(pol)
numpy.polynomial.polynomial.ABCPolyBase(self, coef, domain=None, window=None)
numpy.polynomial.polynomial.ABCPolyBase.basis(deg, domain=None, window=None)
numpy.polynomial.polynomial.ABCPolyBase.cast(series, domain=None, window=None)
numpy.polynomial.polynomial.ABCPolyBase.fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None)
numpy.polynomial.polynomial.ABCPolyBase.fromroots(roots, domain=[], window=None)
numpy.polynomial.polynomial.ABCPolyBase.identity(domain=None, window=None)
numpy.polynomial.polynomial.Polynomial(self, coef, domain=None, window=None)
numpy.polynomial.polynomial.Polynomial.basis(deg, domain=None, window=None)
numpy.polynomial.polynomial.Polynomial.cast(series, domain=None, window=None)
numpy.polynomial.polynomial.Polynomial.fit(x, y, deg, domain=None, rcond=None, full=False, w=None, window=None)
numpy.polynomial.polynomial.Polynomial.fromroots(roots, domain=[], window=None)
numpy.polynomial.polynomial.Polynomial.identity(domain=None, window=None)
numpy.polynomial.polynomial.polyadd(c1, c2)
numpy.polynomial.polynomial.polycompanion(c)
numpy.polynomial.polynomial.polyder(c, m=1, scl=1, axis=0)
numpy.polynomial.polynomial.polydiv(c1, c2)
numpy.polynomial.polynomial.polyfit(x, y, deg, rcond=None, full=False, w=None)
numpy.polynomial.polynomial.polyfromroots(roots)
numpy.polynomial.polynomial.polygrid2d(x, y, c)
numpy.polynomial.polynomial.polygrid3d(x, y, z, c)
numpy.polynomial.polynomial.polyint(c, m=1, k=[], lbnd=0, scl=1, axis=0)
numpy.polynomial.polynomial.polyline(off, scl)
numpy.polynomial.polynomial.polymul(c1, c2)
numpy.polynomial.polynomial.polymulx(c)
numpy.polynomial.polynomial.polypow(c, pow, maxpower=None)
numpy.polynomial.polynomial.polyroots(c)
numpy.polynomial.polynomial.polysub(c1, c2)
numpy.polynomial.polynomial.polytrim(c, tol=0)
numpy.polynomial.polynomial.polyval(x, c, tensor=True)
numpy.polynomial.polynomial.polyval2d(x, y, c)
numpy.polynomial.polynomial.polyval3d(x, y, z, c)
numpy.polynomial.polynomial.polyvalfromroots(x, r, tensor=True)
numpy.polynomial.polynomial.polyvander(x, deg)
numpy.polynomial.polynomial.polyvander2d(x, y, deg)
numpy.polynomial.polynomial.polyvander3d(x, y, z, deg)
numpy.polynomial.polyutils.PolyBase(self, /, *args, **kwargs)
numpy.polynomial.polyutils.PolyDomainError(self, /, *args, **kwargs)
numpy.polynomial.polyutils.PolyError(self, /, *args, **kwargs)
numpy.polynomial.polyutils.RankWarning(self, /, *args, **kwargs)
numpy.polynomial.polyutils.as_series(alist, trim=True)
numpy.polynomial.polyutils.getdomain(x)
numpy.polynomial.polyutils.mapdomain(x, old, new)
numpy.polynomial.polyutils.mapparms(old, new)
numpy.polynomial.polyutils.trimcoef(c, tol=0)
numpy.polynomial.polyutils.trimseq(seq)
numpy.random.RandomState(self, /, *args, **kwargs)
numpy.random.mtrand.RandomState(self, /, *args, **kwargs)
numpy.random_intel.RandomState(self, /, *args, **kwargs)
numpy.testing.IgnoreException(self, /, *args, **kwargs)
numpy.testing.KnownFailureException(self, /, *args, **kwargs)
numpy.testing.SkipTest(self, /, *args, **kwargs)
numpy.testing.TestCase(self, methodName='runTest')
numpy.testing.TestCase.setUpClass()
numpy.testing.TestCase.tearDownClass()
numpy.testing.Tester(self, package=None, raise_warnings='release', depth=0, check_fpu_mode=False)
numpy.testing._assert_valid_refcount(op)
numpy.testing._gen_alignment_data(dtype=<class 'numpy.float32'>, type='binary', max_size=24)
numpy.testing.assert_(val, msg='')
numpy.testing.assert_allclose(actual, desired, rtol=1e-07, atol=0, equal_nan=True, err_msg='', verbose=True)
numpy.testing.assert_almost_equal(actual, desired, decimal=7, err_msg='', verbose=True)
numpy.testing.assert_approx_equal(actual, desired, significant=7, err_msg='', verbose=True)
numpy.testing.assert_array_almost_equal(x, y, decimal=6, err_msg='', verbose=True)
numpy.testing.assert_array_almost_equal_nulp(x, y, nulp=1)
numpy.testing.assert_array_compare(comparison, x, y, err_msg='', verbose=True, header='', precision=6, equal_nan=True, equal_inf=True)
numpy.testing.assert_array_equal(x, y, err_msg='', verbose=True)
numpy.testing.assert_array_less(x, y, err_msg='', verbose=True)
numpy.testing.assert_array_max_ulp(a, b, maxulp=1, dtype=None)
numpy.testing.assert_equal(actual, desired, err_msg='', verbose=True)
numpy.testing.assert_raises_regex(exception_class, expected_regexp, *args, **kwargs)
numpy.testing.assert_string_equal(actual, desired)
numpy.testing.assert_warns(warning_class, *args, **kwargs)
numpy.testing.build_err_msg(arrays, err_msg, header='Items are not equal:', verbose=True, names=('ACTUAL', 'DESIRED'), precision=8)
numpy.testing.clear_and_catch_warnings(self, record=False, modules=())
numpy.testing.decorate_methods(cls, decorator, testmatch=None)
numpy.testing.decorators.SkipTest(self, /, *args, **kwargs)
numpy.testing.decorators.assert_warns(warning_class, *args, **kwargs)
numpy.testing.decorators.deprecated(conditional=True)
numpy.testing.decorators.knownfailureif(fail_condition, msg=None)
numpy.testing.decorators.parametrize(vars, input)
numpy.testing.decorators.setastest(tf=True)
numpy.testing.decorators.skipif(skip_condition, msg=None)
numpy.testing.decorators.slow(t)
numpy.testing.jiffies(_load_time=[])
numpy.testing.measure(code_str, times=1, label=None)
numpy.testing.memusage(processName='python', instance=0)
numpy.testing.nose_tools.decorators.SkipTest(self, /, *args, **kwargs)
numpy.testing.nose_tools.decorators.assert_warns(warning_class, *args, **kwargs)
numpy.testing.nose_tools.decorators.deprecated(conditional=True)
numpy.testing.nose_tools.decorators.knownfailureif(fail_condition, msg=None)
numpy.testing.nose_tools.decorators.parametrize(vars, input)
numpy.testing.nose_tools.decorators.setastest(tf=True)
numpy.testing.nose_tools.decorators.skipif(skip_condition, msg=None)
numpy.testing.nose_tools.decorators.slow(t)
numpy.testing.nose_tools.nosetester.NoseTester(self, package=None, raise_warnings='release', depth=0, check_fpu_mode=False)
numpy.testing.nose_tools.nosetester.basestring(self, /, *args, **kwargs)
numpy.testing.nose_tools.nosetester.get_package_name(filepath)
numpy.testing.nose_tools.nosetester.run_module_suite(file_to_run=None, argv=None)
numpy.testing.nose_tools.nosetester.suppress_warnings(self, forwarding_rule='always')
numpy.testing.nose_tools.utils.GetPerformanceAttributes(object, counter, instance=None, inum=-1, format=None, machine=None)
numpy.testing.nose_tools.utils.IgnoreException(self, /, *args, **kwargs)
numpy.testing.nose_tools.utils.KnownFailureException(self, /, *args, **kwargs)
numpy.testing.nose_tools.utils.KnownFailureTest(self, /, *args, **kwargs)
numpy.testing.nose_tools.utils.SkipTest(self, /, *args, **kwargs)
numpy.testing.nose_tools.utils.StringIO(self, /, *args, **kwargs)
numpy.testing.nose_tools.utils.WarningManager(self, record=False, module=None)
numpy.testing.nose_tools.utils.WarningMessage(self, message, category, filename, lineno, file=None, line=None)
numpy.testing.nose_tools.utils._assert_valid_refcount(op)
numpy.testing.nose_tools.utils._gen_alignment_data(dtype=<class 'numpy.float32'>, type='binary', max_size=24)
numpy.testing.nose_tools.utils._integer_repr(x, vdt, comp)
numpy.testing.nose_tools.utils.array_repr(arr, max_line_width=None, precision=None, suppress_small=None)
numpy.testing.nose_tools.utils.assert_(val, msg='')
numpy.testing.nose_tools.utils.assert_allclose(actual, desired, rtol=1e-07, atol=0, equal_nan=True, err_msg='', verbose=True)
numpy.testing.nose_tools.utils.assert_almost_equal(actual, desired, decimal=7, err_msg='', verbose=True)
numpy.testing.nose_tools.utils.assert_approx_equal(actual, desired, significant=7, err_msg='', verbose=True)
numpy.testing.nose_tools.utils.assert_array_almost_equal(x, y, decimal=6, err_msg='', verbose=True)
numpy.testing.nose_tools.utils.assert_array_almost_equal_nulp(x, y, nulp=1)
numpy.testing.nose_tools.utils.assert_array_compare(comparison, x, y, err_msg='', verbose=True, header='', precision=6, equal_nan=True, equal_inf=True)
numpy.testing.nose_tools.utils.assert_array_equal(x, y, err_msg='', verbose=True)
numpy.testing.nose_tools.utils.assert_array_less(x, y, err_msg='', verbose=True)
numpy.testing.nose_tools.utils.assert_array_max_ulp(a, b, maxulp=1, dtype=None)
numpy.testing.nose_tools.utils.assert_equal(actual, desired, err_msg='', verbose=True)
numpy.testing.nose_tools.utils.assert_raises_regex(exception_class, expected_regexp, *args, **kwargs)
numpy.testing.nose_tools.utils.assert_string_equal(actual, desired)
numpy.testing.nose_tools.utils.assert_warns(warning_class, *args, **kwargs)
numpy.testing.nose_tools.utils.build_err_msg(arrays, err_msg, header='Items are not equal:', verbose=True, names=('ACTUAL', 'DESIRED'), precision=8)
numpy.testing.nose_tools.utils.clear_and_catch_warnings(self, record=False, modules=())
numpy.testing.nose_tools.utils.decorate_methods(cls, decorator, testmatch=None)
numpy.testing.nose_tools.utils.float32(self, /, *args, **kwargs)
numpy.testing.nose_tools.utils.gisfinite(x)
numpy.testing.nose_tools.utils.gisinf(x)
numpy.testing.nose_tools.utils.gisnan(x)
numpy.testing.nose_tools.utils.integer_repr(x)
numpy.testing.nose_tools.utils.jiffies(_load_time=[])
numpy.testing.nose_tools.utils.measure(code_str, times=1, label=None)
numpy.testing.nose_tools.utils.memusage(processName='python', instance=0)
numpy.testing.nose_tools.utils.mkdtemp(suffix=None, prefix=None, dir=None)
numpy.testing.nose_tools.utils.mkstemp(suffix=None, prefix=None, dir=None, text=False)
numpy.testing.nose_tools.utils.ndarray(self, /, *args, **kwargs)
numpy.testing.nose_tools.utils.nulp_diff(x, y, dtype=None)
numpy.testing.nose_tools.utils.partial(self, /, *args, **kwargs)
numpy.testing.nose_tools.utils.print_assert_equal(test_string, actual, desired)
numpy.testing.nose_tools.utils.rundocs(filename=None, raise_on_error=True)
numpy.testing.nose_tools.utils.runstring(astr, dict)
numpy.testing.nose_tools.utils.suppress_warnings(self, forwarding_rule='always')
numpy.testing.nose_tools.utils.wraps(wrapped, assigned=('__module__', '__name__', '__qualname__', '__doc__', '__annotations__'), updated=('__dict__',))
numpy.testing.nosetester.NoseTester(self, package=None, raise_warnings='release', depth=0, check_fpu_mode=False)
numpy.testing.nosetester.get_package_name(filepath)
numpy.testing.nosetester.run_module_suite(file_to_run=None, argv=None)
numpy.testing.nosetester.suppress_warnings(self, forwarding_rule='always')
numpy.testing.print_assert_equal(test_string, actual, desired)
numpy.testing.run_module_suite(file_to_run=None, argv=None)
numpy.testing.rundocs(filename=None, raise_on_error=True)
numpy.testing.runstring(astr, dict)
numpy.testing.suppress_warnings(self, forwarding_rule='always')
numpy.testing.utils.IgnoreException(self, /, *args, **kwargs)
numpy.testing.utils.KnownFailureException(self, /, *args, **kwargs)
numpy.testing.utils.SkipTest(self, /, *args, **kwargs)
numpy.testing.utils._assert_valid_refcount(op)
numpy.testing.utils._gen_alignment_data(dtype=<class 'numpy.float32'>, type='binary', max_size=24)
numpy.testing.utils.assert_(val, msg='')
numpy.testing.utils.assert_allclose(actual, desired, rtol=1e-07, atol=0, equal_nan=True, err_msg='', verbose=True)
numpy.testing.utils.assert_almost_equal(actual, desired, decimal=7, err_msg='', verbose=True)
numpy.testing.utils.assert_approx_equal(actual, desired, significant=7, err_msg='', verbose=True)
numpy.testing.utils.assert_array_almost_equal(x, y, decimal=6, err_msg='', verbose=True)
numpy.testing.utils.assert_array_almost_equal_nulp(x, y, nulp=1)
numpy.testing.utils.assert_array_compare(comparison, x, y, err_msg='', verbose=True, header='', precision=6, equal_nan=True, equal_inf=True)
numpy.testing.utils.assert_array_equal(x, y, err_msg='', verbose=True)
numpy.testing.utils.assert_array_less(x, y, err_msg='', verbose=True)
numpy.testing.utils.assert_array_max_ulp(a, b, maxulp=1, dtype=None)
numpy.testing.utils.assert_equal(actual, desired, err_msg='', verbose=True)
numpy.testing.utils.assert_raises_regex(exception_class, expected_regexp, *args, **kwargs)
numpy.testing.utils.assert_string_equal(actual, desired)
numpy.testing.utils.assert_warns(warning_class, *args, **kwargs)
numpy.testing.utils.build_err_msg(arrays, err_msg, header='Items are not equal:', verbose=True, names=('ACTUAL', 'DESIRED'), precision=8)
numpy.testing.utils.clear_and_catch_warnings(self, record=False, modules=())
numpy.testing.utils.decorate_methods(cls, decorator, testmatch=None)
numpy.testing.utils.jiffies(_load_time=[])
numpy.testing.utils.measure(code_str, times=1, label=None)
numpy.testing.utils.memusage(processName='python', instance=0)
numpy.testing.utils.print_assert_equal(test_string, actual, desired)
numpy.testing.utils.rundocs(filename=None, raise_on_error=True)
numpy.testing.utils.runstring(astr, dict)
numpy.testing.utils.suppress_warnings(self, forwarding_rule='always')
