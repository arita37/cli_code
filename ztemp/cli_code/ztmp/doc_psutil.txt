module_name,module_version,full_name,prefix,obj_name,obj_doc,object_type,arg_full,0,1,2,3,4,5,6,7,8,9,10,11
psutil,5.4.5,psutil._common.BatteryTime,_common,BatteryTime,"Python Library Documentation: class BatteryTime in module psutil._common

class BatteryTime(enum.IntEnum)
 |  An enumeration.
 |  
 |  Method resolution order:
 |      BatteryTime
 |      enum.IntEnum
 |      builtins.int
 |      enum.Enum
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  POWER_TIME_UNKNOWN = <BatteryTime.POWER_TIME_UNKNOWN: -1>
 |  
 |  POWER_TIME_UNLIMITED = <BatteryTime.POWER_TIME_UNLIMITED: -2>
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from enum.Enum:
 |  
 |  name
 |      The name of the Enum member.
 |  
 |  value
 |      The value of the Enum member.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from enum.EnumMeta:
 |  
 |  __members__
 |      Returns a mapping of member name->value.
 |      
 |      This mapping lists all enum members, including aliases. Note that this
 |      is a read-only view of the internal mapping.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._common.BatteryTime,_common,BatteryTime,"Python Library Documentation: class BatteryTime in module psutil._common

class BatteryTime(enum.IntEnum)
 |  An enumeration.
 |  
 |  Method resolution order:
 |      BatteryTime
 |      enum.IntEnum
 |      builtins.int
 |      enum.Enum
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  POWER_TIME_UNKNOWN = <BatteryTime.POWER_TIME_UNKNOWN: -1>
 |  
 |  POWER_TIME_UNLIMITED = <BatteryTime.POWER_TIME_UNLIMITED: -2>
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from enum.Enum:
 |  
 |  name
 |      The name of the Enum member.
 |  
 |  value
 |      The value of the Enum member.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from enum.EnumMeta:
 |  
 |  __members__
 |      Returns a mapping of member name->value.
 |      
 |      This mapping lists all enum members, including aliases. Note that this
 |      is a read-only view of the internal mapping.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._common.NicDuplex,_common,NicDuplex,"Python Library Documentation: class NicDuplex in module psutil._common

class NicDuplex(enum.IntEnum)
 |  An enumeration.
 |  
 |  Method resolution order:
 |      NicDuplex
 |      enum.IntEnum
 |      builtins.int
 |      enum.Enum
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  NIC_DUPLEX_FULL = <NicDuplex.NIC_DUPLEX_FULL: 2>
 |  
 |  NIC_DUPLEX_HALF = <NicDuplex.NIC_DUPLEX_HALF: 1>
 |  
 |  NIC_DUPLEX_UNKNOWN = <NicDuplex.NIC_DUPLEX_UNKNOWN: 0>
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from enum.Enum:
 |  
 |  name
 |      The name of the Enum member.
 |  
 |  value
 |      The value of the Enum member.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from enum.EnumMeta:
 |  
 |  __members__
 |      Returns a mapping of member name->value.
 |      
 |      This mapping lists all enum members, including aliases. Note that this
 |      is a read-only view of the internal mapping.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._common.NicDuplex,_common,NicDuplex,"Python Library Documentation: class NicDuplex in module psutil._common

class NicDuplex(enum.IntEnum)
 |  An enumeration.
 |  
 |  Method resolution order:
 |      NicDuplex
 |      enum.IntEnum
 |      builtins.int
 |      enum.Enum
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  NIC_DUPLEX_FULL = <NicDuplex.NIC_DUPLEX_FULL: 2>
 |  
 |  NIC_DUPLEX_HALF = <NicDuplex.NIC_DUPLEX_HALF: 1>
 |  
 |  NIC_DUPLEX_UNKNOWN = <NicDuplex.NIC_DUPLEX_UNKNOWN: 0>
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from enum.Enum:
 |  
 |  name
 |      The name of the Enum member.
 |  
 |  value
 |      The value of the Enum member.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from enum.EnumMeta:
 |  
 |  __members__
 |      Returns a mapping of member name->value.
 |      
 |      This mapping lists all enum members, including aliases. Note that this
 |      is a read-only view of the internal mapping.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._common._WrapNumbers,_common,_WrapNumbers,"Python Library Documentation: class _WrapNumbers in module psutil._common

class _WrapNumbers(builtins.object)
 |  Watches numbers so that they don't overflow and wrap
 |  (reset to zero).
 |  
 |  Methods defined here:
 |  
 |  __init__(self)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  cache_clear(self, name=None)
 |      Clear the internal cache, optionally only for function 'name'.
 |  
 |  cache_info(self)
 |      Return internal cache dicts as a tuple of 3 elements.
 |  
 |  run(self, input_dict, name)
 |      Cache dict and sum numbers which overflow and wrap.
 |      Return an updated copy of `input_dict`
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('(self)',)",psutil,5.4.5,psutil._common._WrapNumbers,_common,_WrapNumbers,"Python Library Documentation: class _WrapNumbers in module psutil._common

class _WrapNumbers(builtins.object)
 |  Watches numbers so that they don't overflow and wrap
 |  (reset to zero).
 |  
 |  Methods defined here:
 |  
 |  __init__(self)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  cache_clear(self, name=None)
 |      Clear the internal cache, optionally only for function 'name'.
 |  
 |  cache_info(self)
 |      Return internal cache dicts as a tuple of 3 elements.
 |  
 |  run(self, input_dict, name)
 |      Cache dict and sum numbers which overflow and wrap.
 |      Return an updated copy of `input_dict`
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self)',)"
psutil,5.4.5,psutil._common.addr,_common,addr,"Python Library Documentation: class addr in module psutil._common

class addr(builtins.tuple)
 |  addr(ip, port)
 |  
 |  Method resolution order:
 |      addr
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new addr object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new addr object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, ip, port)
 |      Create new instance of addr(ip, port)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  ip
 |      Alias for field number 0
 |  
 |  port
 |      Alias for field number 1
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('ip', 'port')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._common.addr,_common,addr,"Python Library Documentation: class addr in module psutil._common

class addr(builtins.tuple)
 |  addr(ip, port)
 |  
 |  Method resolution order:
 |      addr
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new addr object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new addr object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, ip, port)
 |      Create new instance of addr(ip, port)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  ip
 |      Alias for field number 0
 |  
 |  port
 |      Alias for field number 1
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('ip', 'port')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._common.addr._make,_common.addr,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new addr object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)",psutil,5.4.5,psutil._common.addr._make,_common.addr,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new addr object from a sequence or iterable
",method,"('cls', 'iterable', 'new', 'len')","(nan, nan, <built-in method __new__ of type object at 0x00000000589BC0D0>, <built-in function len>)","(nan, nan, 'builtin_function_or_method', 'builtin_function_or_method')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)"
psutil,5.4.5,psutil._common.defaultdict,_common,defaultdict,"Python Library Documentation: class defaultdict in module collections

class defaultdict(builtins.dict)
 |  defaultdict(default_factory[, ...]) --> dict with default factory
 |  
 |  The default factory is called without arguments to produce
 |  a new value when a key is not present, in __getitem__ only.
 |  A defaultdict compares equal to a dict with the same items.
 |  All remaining arguments are treated the same as if they were
 |  passed to the dict constructor, including keyword arguments.
 |  
 |  Method resolution order:
 |      defaultdict
 |      builtins.dict
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __copy__(...)
 |      D.copy() -> a shallow copy of D.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __missing__(...)
 |      __missing__(key) # Called by __getitem__ for missing key; pseudo-code:
 |      if self.default_factory is None: raise KeyError((key,))
 |      self[key] = value = self.default_factory()
 |      return value
 |  
 |  __reduce__(...)
 |      Return state information for pickling.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  copy(...)
 |      D.copy() -> a shallow copy of D.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  default_factory
 |      Factory for default value called by __missing__().
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.dict:
 |  
 |  __contains__(self, key, /)
 |      True if D has a key k, else False.
 |  
 |  __delitem__(self, key, /)
 |      Delete self[key].
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getitem__(...)
 |      x.__getitem__(y) <==> x[y]
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __setitem__(self, key, value, /)
 |      Set self[key] to value.
 |  
 |  __sizeof__(...)
 |      D.__sizeof__() -> size of D in memory, in bytes
 |  
 |  clear(...)
 |      D.clear() -> None.  Remove all items from D.
 |  
 |  fromkeys(iterable, value=None, /) from builtins.type
 |      Returns a new dict with keys from iterable and values equal to value.
 |  
 |  get(...)
 |      D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
 |  
 |  items(...)
 |      D.items() -> a set-like object providing a view on D's items
 |  
 |  keys(...)
 |      D.keys() -> a set-like object providing a view on D's keys
 |  
 |  pop(...)
 |      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
 |      If key is not found, d is returned if given, otherwise KeyError is raised
 |  
 |  popitem(...)
 |      D.popitem() -> (k, v), remove and return some (key, value) pair as a
 |      2-tuple; but raise KeyError if D is empty.
 |  
 |  setdefault(...)
 |      D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D
 |  
 |  update(...)
 |      D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
 |      If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
 |      If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
 |      In either case, this is followed by: for k in F:  D[k] = F[k]
 |  
 |  values(...)
 |      D.values() -> an object providing a view on D's values
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from builtins.dict:
 |  
 |  __hash__ = None
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._common.defaultdict,_common,defaultdict,"Python Library Documentation: class defaultdict in module collections

class defaultdict(builtins.dict)
 |  defaultdict(default_factory[, ...]) --> dict with default factory
 |  
 |  The default factory is called without arguments to produce
 |  a new value when a key is not present, in __getitem__ only.
 |  A defaultdict compares equal to a dict with the same items.
 |  All remaining arguments are treated the same as if they were
 |  passed to the dict constructor, including keyword arguments.
 |  
 |  Method resolution order:
 |      defaultdict
 |      builtins.dict
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __copy__(...)
 |      D.copy() -> a shallow copy of D.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __missing__(...)
 |      __missing__(key) # Called by __getitem__ for missing key; pseudo-code:
 |      if self.default_factory is None: raise KeyError((key,))
 |      self[key] = value = self.default_factory()
 |      return value
 |  
 |  __reduce__(...)
 |      Return state information for pickling.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  copy(...)
 |      D.copy() -> a shallow copy of D.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  default_factory
 |      Factory for default value called by __missing__().
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.dict:
 |  
 |  __contains__(self, key, /)
 |      True if D has a key k, else False.
 |  
 |  __delitem__(self, key, /)
 |      Delete self[key].
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getitem__(...)
 |      x.__getitem__(y) <==> x[y]
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __setitem__(self, key, value, /)
 |      Set self[key] to value.
 |  
 |  __sizeof__(...)
 |      D.__sizeof__() -> size of D in memory, in bytes
 |  
 |  clear(...)
 |      D.clear() -> None.  Remove all items from D.
 |  
 |  fromkeys(iterable, value=None, /) from builtins.type
 |      Returns a new dict with keys from iterable and values equal to value.
 |  
 |  get(...)
 |      D.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.
 |  
 |  items(...)
 |      D.items() -> a set-like object providing a view on D's items
 |  
 |  keys(...)
 |      D.keys() -> a set-like object providing a view on D's keys
 |  
 |  pop(...)
 |      D.pop(k[,d]) -> v, remove specified key and return the corresponding value.
 |      If key is not found, d is returned if given, otherwise KeyError is raised
 |  
 |  popitem(...)
 |      D.popitem() -> (k, v), remove and return some (key, value) pair as a
 |      2-tuple; but raise KeyError if D is empty.
 |  
 |  setdefault(...)
 |      D.setdefault(k[,d]) -> D.get(k,d), also set D[k]=d if k not in D
 |  
 |  update(...)
 |      D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.
 |      If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]
 |      If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v
 |      In either case, this is followed by: for k in F:  D[k] = F[k]
 |  
 |  values(...)
 |      D.values() -> an object providing a view on D's values
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from builtins.dict:
 |  
 |  __hash__ = None
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._common.deprecated_method,_common,deprecated_method,"Python Library Documentation: function deprecated_method in module psutil._common

deprecated_method(replacement)
    A decorator which can be used to mark a method as deprecated
    'replcement' is the method name which will be called instead.
",function,"('(replacement)',)",psutil,5.4.5,psutil._common.deprecated_method,_common,deprecated_method,"Python Library Documentation: function deprecated_method in module psutil._common

deprecated_method(replacement)
    A decorator which can be used to mark a method as deprecated
    'replcement' is the method name which will be called instead.
",function,"('replacement',)","(nan,)","(nan,)","('arg_info',)","('(replacement)',)"
psutil,5.4.5,psutil._common.isfile_strict,_common,isfile_strict,"Python Library Documentation: function isfile_strict in module psutil._common

isfile_strict(path)
    Same as os.path.isfile() but does not swallow EACCES / EPERM
    exceptions, see:
    http://mail.python.org/pipermail/python-dev/2012-June/120787.html
",function,"('(path)',)",psutil,5.4.5,psutil._common.isfile_strict,_common,isfile_strict,"Python Library Documentation: function isfile_strict in module psutil._common

isfile_strict(path)
    Same as os.path.isfile() but does not swallow EACCES / EPERM
    exceptions, see:
    http://mail.python.org/pipermail/python-dev/2012-June/120787.html
",function,"('path',)","(nan,)","(nan,)","('arg_info',)","('(path)',)"
psutil,5.4.5,psutil._common.memoize,_common,memoize,"Python Library Documentation: function memoize in module psutil._common

memoize(fun)
    A simple memoize decorator for functions supporting (hashable)
    positional arguments.
    It also provides a cache_clear() function for clearing the cache:
    
    >>> @memoize
    ... def foo()
    ...     return 1
        ...
    >>> foo()
    1
    >>> foo.cache_clear()
    >>>
",function,"('(fun)',)",psutil,5.4.5,psutil._common.memoize,_common,memoize,"Python Library Documentation: function memoize in module psutil._common

memoize(fun)
    A simple memoize decorator for functions supporting (hashable)
    positional arguments.
    It also provides a cache_clear() function for clearing the cache:
    
    >>> @memoize
    ... def foo()
    ...     return 1
        ...
    >>> foo()
    1
    >>> foo.cache_clear()
    >>>
",function,"('fun',)","(nan,)","(nan,)","('arg_info',)","('(fun)',)"
psutil,5.4.5,psutil._common.memoize_when_activated,_common,memoize_when_activated,"Python Library Documentation: function memoize_when_activated in module psutil._common

memoize_when_activated(fun)
    A memoize decorator which is disabled by default. It can be
    activated and deactivated on request.
    For efficiency reasons it can be used only against class methods
    accepting no arguments.
    
    >>> class Foo:
    ...     @memoize
    ...     def foo()
    ...         print(1)
    ...
    >>> f = Foo()
    >>> # deactivated (default)
    >>> foo()
    1
    >>> foo()
    1
    >>>
    >>> # activated
    >>> foo.cache_activate()
    >>> foo()
    1
    >>> foo()
    >>> foo()
    >>>
",function,"('(fun)',)",psutil,5.4.5,psutil._common.memoize_when_activated,_common,memoize_when_activated,"Python Library Documentation: function memoize_when_activated in module psutil._common

memoize_when_activated(fun)
    A memoize decorator which is disabled by default. It can be
    activated and deactivated on request.
    For efficiency reasons it can be used only against class methods
    accepting no arguments.
    
    >>> class Foo:
    ...     @memoize
    ...     def foo()
    ...         print(1)
    ...
    >>> f = Foo()
    >>> # deactivated (default)
    >>> foo()
    1
    >>> foo()
    1
    >>>
    >>> # activated
    >>> foo.cache_activate()
    >>> foo()
    1
    >>> foo()
    >>> foo()
    >>>
",function,"('fun',)","(nan,)","(nan,)","('arg_info',)","('(fun)',)"
psutil,5.4.5,psutil._common.namedtuple,_common,namedtuple,"Python Library Documentation: function namedtuple in module collections

namedtuple(typename, field_names, *, verbose=False, rename=False, module=None)
    Returns a new subclass of tuple with named fields.
    
    >>> Point = namedtuple('Point', ['x', 'y'])
    >>> Point.__doc__                   # docstring for the new class
    'Point(x, y)'
    >>> p = Point(11, y=22)             # instantiate with positional args or keywords
    >>> p[0] + p[1]                     # indexable like a plain tuple
    33
    >>> x, y = p                        # unpack like a regular tuple
    >>> x, y
    (11, 22)
    >>> p.x + p.y                       # fields also accessible by name
    33
    >>> d = p._asdict()                 # convert to a dictionary
    >>> d['x']
    11
    >>> Point(**d)                      # convert from a dictionary
    Point(x=11, y=22)
    >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields
    Point(x=100, y=22)
",function,"('(typename, field_names, *, verbose=False, rename=False, module=None)',)",psutil,5.4.5,psutil._common.namedtuple,_common,namedtuple,"Python Library Documentation: function namedtuple in module collections

namedtuple(typename, field_names, *, verbose=False, rename=False, module=None)
    Returns a new subclass of tuple with named fields.
    
    >>> Point = namedtuple('Point', ['x', 'y'])
    >>> Point.__doc__                   # docstring for the new class
    'Point(x, y)'
    >>> p = Point(11, y=22)             # instantiate with positional args or keywords
    >>> p[0] + p[1]                     # indexable like a plain tuple
    33
    >>> x, y = p                        # unpack like a regular tuple
    >>> x, y
    (11, 22)
    >>> p.x + p.y                       # fields also accessible by name
    33
    >>> d = p._asdict()                 # convert to a dictionary
    >>> d['x']
    11
    >>> Point(**d)                      # convert from a dictionary
    Point(x=11, y=22)
    >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields
    Point(x=100, y=22)
",function,"('typename', 'field_names')","(nan, nan)","(nan, nan)","('arg_info', 'arg_info')","('(typename, field_names, *, verbose=False, rename=False, module=None)',)"
psutil,5.4.5,psutil._common.parse_environ_block,_common,parse_environ_block,"Python Library Documentation: function parse_environ_block in module psutil._common

parse_environ_block(data)
    Parse a C environ block of environment variables into a dictionary.
",function,"('(data)',)",psutil,5.4.5,psutil._common.parse_environ_block,_common,parse_environ_block,"Python Library Documentation: function parse_environ_block in module psutil._common

parse_environ_block(data)
    Parse a C environ block of environment variables into a dictionary.
",function,"('data',)","(nan,)","(nan,)","('arg_info',)","('(data)',)"
psutil,5.4.5,psutil._common.path_exists_strict,_common,path_exists_strict,"Python Library Documentation: function path_exists_strict in module psutil._common

path_exists_strict(path)
    Same as os.path.exists() but does not swallow EACCES / EPERM
    exceptions, see:
    http://mail.python.org/pipermail/python-dev/2012-June/120787.html
",function,"('(path)',)",psutil,5.4.5,psutil._common.path_exists_strict,_common,path_exists_strict,"Python Library Documentation: function path_exists_strict in module psutil._common

path_exists_strict(path)
    Same as os.path.exists() but does not swallow EACCES / EPERM
    exceptions, see:
    http://mail.python.org/pipermail/python-dev/2012-June/120787.html
",function,"('path',)","(nan,)","(nan,)","('arg_info',)","('(path)',)"
psutil,5.4.5,psutil._common.pconn,_common,pconn,"Python Library Documentation: class pconn in module psutil._common

class pconn(builtins.tuple)
 |  pconn(fd, family, type, laddr, raddr, status)
 |  
 |  Method resolution order:
 |      pconn
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new pconn object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new pconn object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, fd, family, type, laddr, raddr, status)
 |      Create new instance of pconn(fd, family, type, laddr, raddr, status)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  fd
 |      Alias for field number 0
 |  
 |  family
 |      Alias for field number 1
 |  
 |  type
 |      Alias for field number 2
 |  
 |  laddr
 |      Alias for field number 3
 |  
 |  raddr
 |      Alias for field number 4
 |  
 |  status
 |      Alias for field number 5
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('fd', 'family', 'type', 'laddr', 'raddr', 'status')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._common.pconn,_common,pconn,"Python Library Documentation: class pconn in module psutil._common

class pconn(builtins.tuple)
 |  pconn(fd, family, type, laddr, raddr, status)
 |  
 |  Method resolution order:
 |      pconn
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new pconn object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new pconn object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, fd, family, type, laddr, raddr, status)
 |      Create new instance of pconn(fd, family, type, laddr, raddr, status)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  fd
 |      Alias for field number 0
 |  
 |  family
 |      Alias for field number 1
 |  
 |  type
 |      Alias for field number 2
 |  
 |  laddr
 |      Alias for field number 3
 |  
 |  raddr
 |      Alias for field number 4
 |  
 |  status
 |      Alias for field number 5
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('fd', 'family', 'type', 'laddr', 'raddr', 'status')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._common.pconn._make,_common.pconn,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new pconn object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)",psutil,5.4.5,psutil._common.pconn._make,_common.pconn,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new pconn object from a sequence or iterable
",method,"('cls', 'iterable', 'new', 'len')","(nan, nan, <built-in method __new__ of type object at 0x00000000589BC0D0>, <built-in function len>)","(nan, nan, 'builtin_function_or_method', 'builtin_function_or_method')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)"
psutil,5.4.5,psutil._common.pcputimes,_common,pcputimes,"Python Library Documentation: class pcputimes in module psutil._common

class pcputimes(builtins.tuple)
 |  pcputimes(user, system, children_user, children_system)
 |  
 |  Method resolution order:
 |      pcputimes
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new pcputimes object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new pcputimes object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, user, system, children_user, children_system)
 |      Create new instance of pcputimes(user, system, children_user, children_system)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  user
 |      Alias for field number 0
 |  
 |  system
 |      Alias for field number 1
 |  
 |  children_user
 |      Alias for field number 2
 |  
 |  children_system
 |      Alias for field number 3
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('user', 'system', 'children_user', 'children_system')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._common.pcputimes,_common,pcputimes,"Python Library Documentation: class pcputimes in module psutil._common

class pcputimes(builtins.tuple)
 |  pcputimes(user, system, children_user, children_system)
 |  
 |  Method resolution order:
 |      pcputimes
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new pcputimes object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new pcputimes object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, user, system, children_user, children_system)
 |      Create new instance of pcputimes(user, system, children_user, children_system)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  user
 |      Alias for field number 0
 |  
 |  system
 |      Alias for field number 1
 |  
 |  children_user
 |      Alias for field number 2
 |  
 |  children_system
 |      Alias for field number 3
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('user', 'system', 'children_user', 'children_system')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._common.pcputimes._make,_common.pcputimes,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new pcputimes object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)",psutil,5.4.5,psutil._common.pcputimes._make,_common.pcputimes,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new pcputimes object from a sequence or iterable
",method,"('cls', 'iterable', 'new', 'len')","(nan, nan, <built-in method __new__ of type object at 0x00000000589BC0D0>, <built-in function len>)","(nan, nan, 'builtin_function_or_method', 'builtin_function_or_method')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)"
psutil,5.4.5,psutil._common.pctxsw,_common,pctxsw,"Python Library Documentation: class pctxsw in module psutil._common

class pctxsw(builtins.tuple)
 |  pctxsw(voluntary, involuntary)
 |  
 |  Method resolution order:
 |      pctxsw
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new pctxsw object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new pctxsw object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, voluntary, involuntary)
 |      Create new instance of pctxsw(voluntary, involuntary)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  voluntary
 |      Alias for field number 0
 |  
 |  involuntary
 |      Alias for field number 1
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('voluntary', 'involuntary')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._common.pctxsw,_common,pctxsw,"Python Library Documentation: class pctxsw in module psutil._common

class pctxsw(builtins.tuple)
 |  pctxsw(voluntary, involuntary)
 |  
 |  Method resolution order:
 |      pctxsw
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new pctxsw object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new pctxsw object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, voluntary, involuntary)
 |      Create new instance of pctxsw(voluntary, involuntary)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  voluntary
 |      Alias for field number 0
 |  
 |  involuntary
 |      Alias for field number 1
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('voluntary', 'involuntary')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._common.pctxsw._make,_common.pctxsw,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new pctxsw object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)",psutil,5.4.5,psutil._common.pctxsw._make,_common.pctxsw,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new pctxsw object from a sequence or iterable
",method,"('cls', 'iterable', 'new', 'len')","(nan, nan, <built-in method __new__ of type object at 0x00000000589BC0D0>, <built-in function len>)","(nan, nan, 'builtin_function_or_method', 'builtin_function_or_method')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)"
psutil,5.4.5,psutil._common.pgids,_common,pgids,"Python Library Documentation: class pgids in module psutil._common

class pgids(builtins.tuple)
 |  pgids(real, effective, saved)
 |  
 |  Method resolution order:
 |      pgids
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new pgids object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new pgids object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, real, effective, saved)
 |      Create new instance of pgids(real, effective, saved)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  real
 |      Alias for field number 0
 |  
 |  effective
 |      Alias for field number 1
 |  
 |  saved
 |      Alias for field number 2
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('real', 'effective', 'saved')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._common.pgids,_common,pgids,"Python Library Documentation: class pgids in module psutil._common

class pgids(builtins.tuple)
 |  pgids(real, effective, saved)
 |  
 |  Method resolution order:
 |      pgids
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new pgids object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new pgids object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, real, effective, saved)
 |      Create new instance of pgids(real, effective, saved)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  real
 |      Alias for field number 0
 |  
 |  effective
 |      Alias for field number 1
 |  
 |  saved
 |      Alias for field number 2
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('real', 'effective', 'saved')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._common.pgids._make,_common.pgids,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new pgids object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)",psutil,5.4.5,psutil._common.pgids._make,_common.pgids,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new pgids object from a sequence or iterable
",method,"('cls', 'iterable', 'new', 'len')","(nan, nan, <built-in method __new__ of type object at 0x00000000589BC0D0>, <built-in function len>)","(nan, nan, 'builtin_function_or_method', 'builtin_function_or_method')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)"
psutil,5.4.5,psutil._common.pio,_common,pio,"Python Library Documentation: class pio in module psutil._common

class pio(builtins.tuple)
 |  pio(read_count, write_count, read_bytes, write_bytes)
 |  
 |  Method resolution order:
 |      pio
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new pio object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new pio object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, read_count, write_count, read_bytes, write_bytes)
 |      Create new instance of pio(read_count, write_count, read_bytes, write_bytes)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  read_count
 |      Alias for field number 0
 |  
 |  write_count
 |      Alias for field number 1
 |  
 |  read_bytes
 |      Alias for field number 2
 |  
 |  write_bytes
 |      Alias for field number 3
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('read_count', 'write_count', 'read_bytes', 'write_bytes')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._common.pio,_common,pio,"Python Library Documentation: class pio in module psutil._common

class pio(builtins.tuple)
 |  pio(read_count, write_count, read_bytes, write_bytes)
 |  
 |  Method resolution order:
 |      pio
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new pio object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new pio object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, read_count, write_count, read_bytes, write_bytes)
 |      Create new instance of pio(read_count, write_count, read_bytes, write_bytes)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  read_count
 |      Alias for field number 0
 |  
 |  write_count
 |      Alias for field number 1
 |  
 |  read_bytes
 |      Alias for field number 2
 |  
 |  write_bytes
 |      Alias for field number 3
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('read_count', 'write_count', 'read_bytes', 'write_bytes')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._common.pio._make,_common.pio,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new pio object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)",psutil,5.4.5,psutil._common.pio._make,_common.pio,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new pio object from a sequence or iterable
",method,"('cls', 'iterable', 'new', 'len')","(nan, nan, <built-in method __new__ of type object at 0x00000000589BC0D0>, <built-in function len>)","(nan, nan, 'builtin_function_or_method', 'builtin_function_or_method')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)"
psutil,5.4.5,psutil._common.pionice,_common,pionice,"Python Library Documentation: class pionice in module psutil._common

class pionice(builtins.tuple)
 |  pionice(ioclass, value)
 |  
 |  Method resolution order:
 |      pionice
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new pionice object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new pionice object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, ioclass, value)
 |      Create new instance of pionice(ioclass, value)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  ioclass
 |      Alias for field number 0
 |  
 |  value
 |      Alias for field number 1
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('ioclass', 'value')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._common.pionice,_common,pionice,"Python Library Documentation: class pionice in module psutil._common

class pionice(builtins.tuple)
 |  pionice(ioclass, value)
 |  
 |  Method resolution order:
 |      pionice
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new pionice object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new pionice object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, ioclass, value)
 |      Create new instance of pionice(ioclass, value)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  ioclass
 |      Alias for field number 0
 |  
 |  value
 |      Alias for field number 1
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('ioclass', 'value')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._common.pionice._make,_common.pionice,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new pionice object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)",psutil,5.4.5,psutil._common.pionice._make,_common.pionice,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new pionice object from a sequence or iterable
",method,"('cls', 'iterable', 'new', 'len')","(nan, nan, <built-in method __new__ of type object at 0x00000000589BC0D0>, <built-in function len>)","(nan, nan, 'builtin_function_or_method', 'builtin_function_or_method')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)"
psutil,5.4.5,psutil._common.popenfile,_common,popenfile,"Python Library Documentation: class popenfile in module psutil._common

class popenfile(builtins.tuple)
 |  popenfile(path, fd)
 |  
 |  Method resolution order:
 |      popenfile
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new popenfile object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new popenfile object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, path, fd)
 |      Create new instance of popenfile(path, fd)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  path
 |      Alias for field number 0
 |  
 |  fd
 |      Alias for field number 1
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('path', 'fd')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._common.popenfile,_common,popenfile,"Python Library Documentation: class popenfile in module psutil._common

class popenfile(builtins.tuple)
 |  popenfile(path, fd)
 |  
 |  Method resolution order:
 |      popenfile
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new popenfile object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new popenfile object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, path, fd)
 |      Create new instance of popenfile(path, fd)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  path
 |      Alias for field number 0
 |  
 |  fd
 |      Alias for field number 1
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('path', 'fd')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._common.popenfile._make,_common.popenfile,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new popenfile object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)",psutil,5.4.5,psutil._common.popenfile._make,_common.popenfile,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new popenfile object from a sequence or iterable
",method,"('cls', 'iterable', 'new', 'len')","(nan, nan, <built-in method __new__ of type object at 0x00000000589BC0D0>, <built-in function len>)","(nan, nan, 'builtin_function_or_method', 'builtin_function_or_method')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)"
psutil,5.4.5,psutil._common.pthread,_common,pthread,"Python Library Documentation: class pthread in module psutil._common

class pthread(builtins.tuple)
 |  pthread(id, user_time, system_time)
 |  
 |  Method resolution order:
 |      pthread
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new pthread object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new pthread object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, id, user_time, system_time)
 |      Create new instance of pthread(id, user_time, system_time)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  id
 |      Alias for field number 0
 |  
 |  user_time
 |      Alias for field number 1
 |  
 |  system_time
 |      Alias for field number 2
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('id', 'user_time', 'system_time')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._common.pthread,_common,pthread,"Python Library Documentation: class pthread in module psutil._common

class pthread(builtins.tuple)
 |  pthread(id, user_time, system_time)
 |  
 |  Method resolution order:
 |      pthread
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new pthread object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new pthread object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, id, user_time, system_time)
 |      Create new instance of pthread(id, user_time, system_time)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  id
 |      Alias for field number 0
 |  
 |  user_time
 |      Alias for field number 1
 |  
 |  system_time
 |      Alias for field number 2
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('id', 'user_time', 'system_time')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._common.pthread._make,_common.pthread,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new pthread object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)",psutil,5.4.5,psutil._common.pthread._make,_common.pthread,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new pthread object from a sequence or iterable
",method,"('cls', 'iterable', 'new', 'len')","(nan, nan, <built-in method __new__ of type object at 0x00000000589BC0D0>, <built-in function len>)","(nan, nan, 'builtin_function_or_method', 'builtin_function_or_method')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)"
psutil,5.4.5,psutil._common.puids,_common,puids,"Python Library Documentation: class puids in module psutil._common

class puids(builtins.tuple)
 |  puids(real, effective, saved)
 |  
 |  Method resolution order:
 |      puids
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new puids object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new puids object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, real, effective, saved)
 |      Create new instance of puids(real, effective, saved)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  real
 |      Alias for field number 0
 |  
 |  effective
 |      Alias for field number 1
 |  
 |  saved
 |      Alias for field number 2
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('real', 'effective', 'saved')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._common.puids,_common,puids,"Python Library Documentation: class puids in module psutil._common

class puids(builtins.tuple)
 |  puids(real, effective, saved)
 |  
 |  Method resolution order:
 |      puids
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new puids object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new puids object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, real, effective, saved)
 |      Create new instance of puids(real, effective, saved)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  real
 |      Alias for field number 0
 |  
 |  effective
 |      Alias for field number 1
 |  
 |  saved
 |      Alias for field number 2
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('real', 'effective', 'saved')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._common.puids._make,_common.puids,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new puids object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)",psutil,5.4.5,psutil._common.puids._make,_common.puids,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new puids object from a sequence or iterable
",method,"('cls', 'iterable', 'new', 'len')","(nan, nan, <built-in method __new__ of type object at 0x00000000589BC0D0>, <built-in function len>)","(nan, nan, 'builtin_function_or_method', 'builtin_function_or_method')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)"
psutil,5.4.5,psutil._common.sbattery,_common,sbattery,"Python Library Documentation: class sbattery in module psutil._common

class sbattery(builtins.tuple)
 |  sbattery(percent, secsleft, power_plugged)
 |  
 |  Method resolution order:
 |      sbattery
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new sbattery object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new sbattery object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, percent, secsleft, power_plugged)
 |      Create new instance of sbattery(percent, secsleft, power_plugged)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  percent
 |      Alias for field number 0
 |  
 |  secsleft
 |      Alias for field number 1
 |  
 |  power_plugged
 |      Alias for field number 2
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('percent', 'secsleft', 'power_plugged')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._common.sbattery,_common,sbattery,"Python Library Documentation: class sbattery in module psutil._common

class sbattery(builtins.tuple)
 |  sbattery(percent, secsleft, power_plugged)
 |  
 |  Method resolution order:
 |      sbattery
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new sbattery object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new sbattery object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, percent, secsleft, power_plugged)
 |      Create new instance of sbattery(percent, secsleft, power_plugged)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  percent
 |      Alias for field number 0
 |  
 |  secsleft
 |      Alias for field number 1
 |  
 |  power_plugged
 |      Alias for field number 2
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('percent', 'secsleft', 'power_plugged')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._common.sbattery._make,_common.sbattery,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new sbattery object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)",psutil,5.4.5,psutil._common.sbattery._make,_common.sbattery,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new sbattery object from a sequence or iterable
",method,"('cls', 'iterable', 'new', 'len')","(nan, nan, <built-in method __new__ of type object at 0x00000000589BC0D0>, <built-in function len>)","(nan, nan, 'builtin_function_or_method', 'builtin_function_or_method')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)"
psutil,5.4.5,psutil._common.sconn,_common,sconn,"Python Library Documentation: class sconn in module psutil._common

class sconn(builtins.tuple)
 |  sconn(fd, family, type, laddr, raddr, status, pid)
 |  
 |  Method resolution order:
 |      sconn
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new sconn object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new sconn object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, fd, family, type, laddr, raddr, status, pid)
 |      Create new instance of sconn(fd, family, type, laddr, raddr, status, pid)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  fd
 |      Alias for field number 0
 |  
 |  family
 |      Alias for field number 1
 |  
 |  type
 |      Alias for field number 2
 |  
 |  laddr
 |      Alias for field number 3
 |  
 |  raddr
 |      Alias for field number 4
 |  
 |  status
 |      Alias for field number 5
 |  
 |  pid
 |      Alias for field number 6
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('fd', 'family', 'type', 'laddr', 'raddr', 'status', 'pid')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._common.sconn,_common,sconn,"Python Library Documentation: class sconn in module psutil._common

class sconn(builtins.tuple)
 |  sconn(fd, family, type, laddr, raddr, status, pid)
 |  
 |  Method resolution order:
 |      sconn
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new sconn object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new sconn object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, fd, family, type, laddr, raddr, status, pid)
 |      Create new instance of sconn(fd, family, type, laddr, raddr, status, pid)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  fd
 |      Alias for field number 0
 |  
 |  family
 |      Alias for field number 1
 |  
 |  type
 |      Alias for field number 2
 |  
 |  laddr
 |      Alias for field number 3
 |  
 |  raddr
 |      Alias for field number 4
 |  
 |  status
 |      Alias for field number 5
 |  
 |  pid
 |      Alias for field number 6
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('fd', 'family', 'type', 'laddr', 'raddr', 'status', 'pid')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._common.sconn._make,_common.sconn,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new sconn object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)",psutil,5.4.5,psutil._common.sconn._make,_common.sconn,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new sconn object from a sequence or iterable
",method,"('cls', 'iterable', 'new', 'len')","(nan, nan, <built-in method __new__ of type object at 0x00000000589BC0D0>, <built-in function len>)","(nan, nan, 'builtin_function_or_method', 'builtin_function_or_method')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)"
psutil,5.4.5,psutil._common.scpufreq,_common,scpufreq,"Python Library Documentation: class scpufreq in module psutil._common

class scpufreq(builtins.tuple)
 |  scpufreq(current, min, max)
 |  
 |  Method resolution order:
 |      scpufreq
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new scpufreq object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new scpufreq object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, current, min, max)
 |      Create new instance of scpufreq(current, min, max)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  current
 |      Alias for field number 0
 |  
 |  min
 |      Alias for field number 1
 |  
 |  max
 |      Alias for field number 2
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('current', 'min', 'max')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._common.scpufreq,_common,scpufreq,"Python Library Documentation: class scpufreq in module psutil._common

class scpufreq(builtins.tuple)
 |  scpufreq(current, min, max)
 |  
 |  Method resolution order:
 |      scpufreq
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new scpufreq object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new scpufreq object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, current, min, max)
 |      Create new instance of scpufreq(current, min, max)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  current
 |      Alias for field number 0
 |  
 |  min
 |      Alias for field number 1
 |  
 |  max
 |      Alias for field number 2
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('current', 'min', 'max')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._common.scpufreq._make,_common.scpufreq,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new scpufreq object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)",psutil,5.4.5,psutil._common.scpufreq._make,_common.scpufreq,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new scpufreq object from a sequence or iterable
",method,"('cls', 'iterable', 'new', 'len')","(nan, nan, <built-in method __new__ of type object at 0x00000000589BC0D0>, <built-in function len>)","(nan, nan, 'builtin_function_or_method', 'builtin_function_or_method')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)"
psutil,5.4.5,psutil._common.scpustats,_common,scpustats,"Python Library Documentation: class scpustats in module psutil._common

class scpustats(builtins.tuple)
 |  scpustats(ctx_switches, interrupts, soft_interrupts, syscalls)
 |  
 |  Method resolution order:
 |      scpustats
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new scpustats object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new scpustats object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, ctx_switches, interrupts, soft_interrupts, syscalls)
 |      Create new instance of scpustats(ctx_switches, interrupts, soft_interrupts, syscalls)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  ctx_switches
 |      Alias for field number 0
 |  
 |  interrupts
 |      Alias for field number 1
 |  
 |  soft_interrupts
 |      Alias for field number 2
 |  
 |  syscalls
 |      Alias for field number 3
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('ctx_switches', 'interrupts', 'soft_interrupts', 'syscalls'...
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._common.scpustats,_common,scpustats,"Python Library Documentation: class scpustats in module psutil._common

class scpustats(builtins.tuple)
 |  scpustats(ctx_switches, interrupts, soft_interrupts, syscalls)
 |  
 |  Method resolution order:
 |      scpustats
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new scpustats object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new scpustats object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, ctx_switches, interrupts, soft_interrupts, syscalls)
 |      Create new instance of scpustats(ctx_switches, interrupts, soft_interrupts, syscalls)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  ctx_switches
 |      Alias for field number 0
 |  
 |  interrupts
 |      Alias for field number 1
 |  
 |  soft_interrupts
 |      Alias for field number 2
 |  
 |  syscalls
 |      Alias for field number 3
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('ctx_switches', 'interrupts', 'soft_interrupts', 'syscalls'...
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._common.scpustats._make,_common.scpustats,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new scpustats object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)",psutil,5.4.5,psutil._common.scpustats._make,_common.scpustats,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new scpustats object from a sequence or iterable
",method,"('cls', 'iterable', 'new', 'len')","(nan, nan, <built-in method __new__ of type object at 0x00000000589BC0D0>, <built-in function len>)","(nan, nan, 'builtin_function_or_method', 'builtin_function_or_method')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)"
psutil,5.4.5,psutil._common.sdiskio,_common,sdiskio,"Python Library Documentation: class sdiskio in module psutil._common

class sdiskio(builtins.tuple)
 |  sdiskio(read_count, write_count, read_bytes, write_bytes, read_time, write_time)
 |  
 |  Method resolution order:
 |      sdiskio
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new sdiskio object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new sdiskio object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, read_count, write_count, read_bytes, write_bytes, read_time, write_time)
 |      Create new instance of sdiskio(read_count, write_count, read_bytes, write_bytes, read_time, write_time)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  read_count
 |      Alias for field number 0
 |  
 |  write_count
 |      Alias for field number 1
 |  
 |  read_bytes
 |      Alias for field number 2
 |  
 |  write_bytes
 |      Alias for field number 3
 |  
 |  read_time
 |      Alias for field number 4
 |  
 |  write_time
 |      Alias for field number 5
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('read_count', 'write_count', 'read_bytes', 'write_bytes', '...
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._common.sdiskio,_common,sdiskio,"Python Library Documentation: class sdiskio in module psutil._common

class sdiskio(builtins.tuple)
 |  sdiskio(read_count, write_count, read_bytes, write_bytes, read_time, write_time)
 |  
 |  Method resolution order:
 |      sdiskio
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new sdiskio object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new sdiskio object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, read_count, write_count, read_bytes, write_bytes, read_time, write_time)
 |      Create new instance of sdiskio(read_count, write_count, read_bytes, write_bytes, read_time, write_time)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  read_count
 |      Alias for field number 0
 |  
 |  write_count
 |      Alias for field number 1
 |  
 |  read_bytes
 |      Alias for field number 2
 |  
 |  write_bytes
 |      Alias for field number 3
 |  
 |  read_time
 |      Alias for field number 4
 |  
 |  write_time
 |      Alias for field number 5
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('read_count', 'write_count', 'read_bytes', 'write_bytes', '...
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._common.sdiskio._make,_common.sdiskio,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new sdiskio object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)",psutil,5.4.5,psutil._common.sdiskio._make,_common.sdiskio,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new sdiskio object from a sequence or iterable
",method,"('cls', 'iterable', 'new', 'len')","(nan, nan, <built-in method __new__ of type object at 0x00000000589BC0D0>, <built-in function len>)","(nan, nan, 'builtin_function_or_method', 'builtin_function_or_method')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)"
psutil,5.4.5,psutil._common.sdiskpart,_common,sdiskpart,"Python Library Documentation: class sdiskpart in module psutil._common

class sdiskpart(builtins.tuple)
 |  sdiskpart(device, mountpoint, fstype, opts)
 |  
 |  Method resolution order:
 |      sdiskpart
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new sdiskpart object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new sdiskpart object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, device, mountpoint, fstype, opts)
 |      Create new instance of sdiskpart(device, mountpoint, fstype, opts)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  device
 |      Alias for field number 0
 |  
 |  mountpoint
 |      Alias for field number 1
 |  
 |  fstype
 |      Alias for field number 2
 |  
 |  opts
 |      Alias for field number 3
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('device', 'mountpoint', 'fstype', 'opts')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._common.sdiskpart,_common,sdiskpart,"Python Library Documentation: class sdiskpart in module psutil._common

class sdiskpart(builtins.tuple)
 |  sdiskpart(device, mountpoint, fstype, opts)
 |  
 |  Method resolution order:
 |      sdiskpart
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new sdiskpart object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new sdiskpart object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, device, mountpoint, fstype, opts)
 |      Create new instance of sdiskpart(device, mountpoint, fstype, opts)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  device
 |      Alias for field number 0
 |  
 |  mountpoint
 |      Alias for field number 1
 |  
 |  fstype
 |      Alias for field number 2
 |  
 |  opts
 |      Alias for field number 3
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('device', 'mountpoint', 'fstype', 'opts')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._common.sdiskpart._make,_common.sdiskpart,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new sdiskpart object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)",psutil,5.4.5,psutil._common.sdiskpart._make,_common.sdiskpart,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new sdiskpart object from a sequence or iterable
",method,"('cls', 'iterable', 'new', 'len')","(nan, nan, <built-in method __new__ of type object at 0x00000000589BC0D0>, <built-in function len>)","(nan, nan, 'builtin_function_or_method', 'builtin_function_or_method')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)"
psutil,5.4.5,psutil._common.sdiskusage,_common,sdiskusage,"Python Library Documentation: class sdiskusage in module psutil._common

class sdiskusage(builtins.tuple)
 |  sdiskusage(total, used, free, percent)
 |  
 |  Method resolution order:
 |      sdiskusage
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new sdiskusage object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new sdiskusage object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, total, used, free, percent)
 |      Create new instance of sdiskusage(total, used, free, percent)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  total
 |      Alias for field number 0
 |  
 |  used
 |      Alias for field number 1
 |  
 |  free
 |      Alias for field number 2
 |  
 |  percent
 |      Alias for field number 3
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('total', 'used', 'free', 'percent')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._common.sdiskusage,_common,sdiskusage,"Python Library Documentation: class sdiskusage in module psutil._common

class sdiskusage(builtins.tuple)
 |  sdiskusage(total, used, free, percent)
 |  
 |  Method resolution order:
 |      sdiskusage
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new sdiskusage object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new sdiskusage object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, total, used, free, percent)
 |      Create new instance of sdiskusage(total, used, free, percent)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  total
 |      Alias for field number 0
 |  
 |  used
 |      Alias for field number 1
 |  
 |  free
 |      Alias for field number 2
 |  
 |  percent
 |      Alias for field number 3
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('total', 'used', 'free', 'percent')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._common.sdiskusage._make,_common.sdiskusage,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new sdiskusage object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)",psutil,5.4.5,psutil._common.sdiskusage._make,_common.sdiskusage,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new sdiskusage object from a sequence or iterable
",method,"('cls', 'iterable', 'new', 'len')","(nan, nan, <built-in method __new__ of type object at 0x00000000589BC0D0>, <built-in function len>)","(nan, nan, 'builtin_function_or_method', 'builtin_function_or_method')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)"
psutil,5.4.5,psutil._common.sfan,_common,sfan,"Python Library Documentation: class sfan in module psutil._common

class sfan(builtins.tuple)
 |  sfan(label, current)
 |  
 |  Method resolution order:
 |      sfan
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new sfan object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new sfan object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, label, current)
 |      Create new instance of sfan(label, current)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  label
 |      Alias for field number 0
 |  
 |  current
 |      Alias for field number 1
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('label', 'current')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._common.sfan,_common,sfan,"Python Library Documentation: class sfan in module psutil._common

class sfan(builtins.tuple)
 |  sfan(label, current)
 |  
 |  Method resolution order:
 |      sfan
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new sfan object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new sfan object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, label, current)
 |      Create new instance of sfan(label, current)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  label
 |      Alias for field number 0
 |  
 |  current
 |      Alias for field number 1
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('label', 'current')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._common.sfan._make,_common.sfan,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new sfan object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)",psutil,5.4.5,psutil._common.sfan._make,_common.sfan,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new sfan object from a sequence or iterable
",method,"('cls', 'iterable', 'new', 'len')","(nan, nan, <built-in method __new__ of type object at 0x00000000589BC0D0>, <built-in function len>)","(nan, nan, 'builtin_function_or_method', 'builtin_function_or_method')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)"
psutil,5.4.5,psutil._common.shwtemp,_common,shwtemp,"Python Library Documentation: class shwtemp in module psutil._common

class shwtemp(builtins.tuple)
 |  shwtemp(label, current, high, critical)
 |  
 |  Method resolution order:
 |      shwtemp
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new shwtemp object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new shwtemp object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, label, current, high, critical)
 |      Create new instance of shwtemp(label, current, high, critical)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  label
 |      Alias for field number 0
 |  
 |  current
 |      Alias for field number 1
 |  
 |  high
 |      Alias for field number 2
 |  
 |  critical
 |      Alias for field number 3
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('label', 'current', 'high', 'critical')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._common.shwtemp,_common,shwtemp,"Python Library Documentation: class shwtemp in module psutil._common

class shwtemp(builtins.tuple)
 |  shwtemp(label, current, high, critical)
 |  
 |  Method resolution order:
 |      shwtemp
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new shwtemp object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new shwtemp object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, label, current, high, critical)
 |      Create new instance of shwtemp(label, current, high, critical)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  label
 |      Alias for field number 0
 |  
 |  current
 |      Alias for field number 1
 |  
 |  high
 |      Alias for field number 2
 |  
 |  critical
 |      Alias for field number 3
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('label', 'current', 'high', 'critical')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._common.shwtemp._make,_common.shwtemp,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new shwtemp object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)",psutil,5.4.5,psutil._common.shwtemp._make,_common.shwtemp,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new shwtemp object from a sequence or iterable
",method,"('cls', 'iterable', 'new', 'len')","(nan, nan, <built-in method __new__ of type object at 0x00000000589BC0D0>, <built-in function len>)","(nan, nan, 'builtin_function_or_method', 'builtin_function_or_method')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)"
psutil,5.4.5,psutil._common.snetio,_common,snetio,"Python Library Documentation: class snetio in module psutil._common

class snetio(builtins.tuple)
 |  snetio(bytes_sent, bytes_recv, packets_sent, packets_recv, errin, errout, dropin, dropout)
 |  
 |  Method resolution order:
 |      snetio
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new snetio object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new snetio object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, bytes_sent, bytes_recv, packets_sent, packets_recv, errin, errout, dropin, dropout)
 |      Create new instance of snetio(bytes_sent, bytes_recv, packets_sent, packets_recv, errin, errout, dropin, dropout)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  bytes_sent
 |      Alias for field number 0
 |  
 |  bytes_recv
 |      Alias for field number 1
 |  
 |  packets_sent
 |      Alias for field number 2
 |  
 |  packets_recv
 |      Alias for field number 3
 |  
 |  errin
 |      Alias for field number 4
 |  
 |  errout
 |      Alias for field number 5
 |  
 |  dropin
 |      Alias for field number 6
 |  
 |  dropout
 |      Alias for field number 7
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('bytes_sent', 'bytes_recv', 'packets_sent', 'packets_recv',...
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._common.snetio,_common,snetio,"Python Library Documentation: class snetio in module psutil._common

class snetio(builtins.tuple)
 |  snetio(bytes_sent, bytes_recv, packets_sent, packets_recv, errin, errout, dropin, dropout)
 |  
 |  Method resolution order:
 |      snetio
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new snetio object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new snetio object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, bytes_sent, bytes_recv, packets_sent, packets_recv, errin, errout, dropin, dropout)
 |      Create new instance of snetio(bytes_sent, bytes_recv, packets_sent, packets_recv, errin, errout, dropin, dropout)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  bytes_sent
 |      Alias for field number 0
 |  
 |  bytes_recv
 |      Alias for field number 1
 |  
 |  packets_sent
 |      Alias for field number 2
 |  
 |  packets_recv
 |      Alias for field number 3
 |  
 |  errin
 |      Alias for field number 4
 |  
 |  errout
 |      Alias for field number 5
 |  
 |  dropin
 |      Alias for field number 6
 |  
 |  dropout
 |      Alias for field number 7
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('bytes_sent', 'bytes_recv', 'packets_sent', 'packets_recv',...
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._common.snetio._make,_common.snetio,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new snetio object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)",psutil,5.4.5,psutil._common.snetio._make,_common.snetio,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new snetio object from a sequence or iterable
",method,"('cls', 'iterable', 'new', 'len')","(nan, nan, <built-in method __new__ of type object at 0x00000000589BC0D0>, <built-in function len>)","(nan, nan, 'builtin_function_or_method', 'builtin_function_or_method')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)"
psutil,5.4.5,psutil._common.snic,_common,snic,"Python Library Documentation: class snic in module psutil._common

class snic(builtins.tuple)
 |  snic(family, address, netmask, broadcast, ptp)
 |  
 |  Method resolution order:
 |      snic
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new snic object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new snic object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, family, address, netmask, broadcast, ptp)
 |      Create new instance of snic(family, address, netmask, broadcast, ptp)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  family
 |      Alias for field number 0
 |  
 |  address
 |      Alias for field number 1
 |  
 |  netmask
 |      Alias for field number 2
 |  
 |  broadcast
 |      Alias for field number 3
 |  
 |  ptp
 |      Alias for field number 4
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('family', 'address', 'netmask', 'broadcast', 'ptp')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._common.snic,_common,snic,"Python Library Documentation: class snic in module psutil._common

class snic(builtins.tuple)
 |  snic(family, address, netmask, broadcast, ptp)
 |  
 |  Method resolution order:
 |      snic
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new snic object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new snic object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, family, address, netmask, broadcast, ptp)
 |      Create new instance of snic(family, address, netmask, broadcast, ptp)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  family
 |      Alias for field number 0
 |  
 |  address
 |      Alias for field number 1
 |  
 |  netmask
 |      Alias for field number 2
 |  
 |  broadcast
 |      Alias for field number 3
 |  
 |  ptp
 |      Alias for field number 4
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('family', 'address', 'netmask', 'broadcast', 'ptp')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._common.snic._make,_common.snic,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new snic object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)",psutil,5.4.5,psutil._common.snic._make,_common.snic,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new snic object from a sequence or iterable
",method,"('cls', 'iterable', 'new', 'len')","(nan, nan, <built-in method __new__ of type object at 0x00000000589BC0D0>, <built-in function len>)","(nan, nan, 'builtin_function_or_method', 'builtin_function_or_method')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)"
psutil,5.4.5,psutil._common.snicstats,_common,snicstats,"Python Library Documentation: class snicstats in module psutil._common

class snicstats(builtins.tuple)
 |  snicstats(isup, duplex, speed, mtu)
 |  
 |  Method resolution order:
 |      snicstats
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new snicstats object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new snicstats object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, isup, duplex, speed, mtu)
 |      Create new instance of snicstats(isup, duplex, speed, mtu)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  isup
 |      Alias for field number 0
 |  
 |  duplex
 |      Alias for field number 1
 |  
 |  speed
 |      Alias for field number 2
 |  
 |  mtu
 |      Alias for field number 3
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('isup', 'duplex', 'speed', 'mtu')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._common.snicstats,_common,snicstats,"Python Library Documentation: class snicstats in module psutil._common

class snicstats(builtins.tuple)
 |  snicstats(isup, duplex, speed, mtu)
 |  
 |  Method resolution order:
 |      snicstats
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new snicstats object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new snicstats object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, isup, duplex, speed, mtu)
 |      Create new instance of snicstats(isup, duplex, speed, mtu)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  isup
 |      Alias for field number 0
 |  
 |  duplex
 |      Alias for field number 1
 |  
 |  speed
 |      Alias for field number 2
 |  
 |  mtu
 |      Alias for field number 3
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('isup', 'duplex', 'speed', 'mtu')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._common.snicstats._make,_common.snicstats,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new snicstats object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)",psutil,5.4.5,psutil._common.snicstats._make,_common.snicstats,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new snicstats object from a sequence or iterable
",method,"('cls', 'iterable', 'new', 'len')","(nan, nan, <built-in method __new__ of type object at 0x00000000589BC0D0>, <built-in function len>)","(nan, nan, 'builtin_function_or_method', 'builtin_function_or_method')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)"
psutil,5.4.5,psutil._common.sockfam_to_enum,_common,sockfam_to_enum,"Python Library Documentation: function sockfam_to_enum in module psutil._common

sockfam_to_enum(num)
    Convert a numeric socket family value to an IntEnum member.
    If it's not a known member, return the numeric value itself.
",function,"('(num)',)",psutil,5.4.5,psutil._common.sockfam_to_enum,_common,sockfam_to_enum,"Python Library Documentation: function sockfam_to_enum in module psutil._common

sockfam_to_enum(num)
    Convert a numeric socket family value to an IntEnum member.
    If it's not a known member, return the numeric value itself.
",function,"('num',)","(nan,)","(nan,)","('arg_info',)","('(num)',)"
psutil,5.4.5,psutil._common.socktype_to_enum,_common,socktype_to_enum,"Python Library Documentation: function socktype_to_enum in module psutil._common

socktype_to_enum(num)
    Convert a numeric socket type value to an IntEnum member.
    If it's not a known member, return the numeric value itself.
",function,"('(num)',)",psutil,5.4.5,psutil._common.socktype_to_enum,_common,socktype_to_enum,"Python Library Documentation: function socktype_to_enum in module psutil._common

socktype_to_enum(num)
    Convert a numeric socket type value to an IntEnum member.
    If it's not a known member, return the numeric value itself.
",function,"('num',)","(nan,)","(nan,)","('arg_info',)","('(num)',)"
psutil,5.4.5,psutil._common.sswap,_common,sswap,"Python Library Documentation: class sswap in module psutil._common

class sswap(builtins.tuple)
 |  sswap(total, used, free, percent, sin, sout)
 |  
 |  Method resolution order:
 |      sswap
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new sswap object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new sswap object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, total, used, free, percent, sin, sout)
 |      Create new instance of sswap(total, used, free, percent, sin, sout)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  total
 |      Alias for field number 0
 |  
 |  used
 |      Alias for field number 1
 |  
 |  free
 |      Alias for field number 2
 |  
 |  percent
 |      Alias for field number 3
 |  
 |  sin
 |      Alias for field number 4
 |  
 |  sout
 |      Alias for field number 5
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('total', 'used', 'free', 'percent', 'sin', 'sout')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._common.sswap,_common,sswap,"Python Library Documentation: class sswap in module psutil._common

class sswap(builtins.tuple)
 |  sswap(total, used, free, percent, sin, sout)
 |  
 |  Method resolution order:
 |      sswap
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new sswap object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new sswap object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, total, used, free, percent, sin, sout)
 |      Create new instance of sswap(total, used, free, percent, sin, sout)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  total
 |      Alias for field number 0
 |  
 |  used
 |      Alias for field number 1
 |  
 |  free
 |      Alias for field number 2
 |  
 |  percent
 |      Alias for field number 3
 |  
 |  sin
 |      Alias for field number 4
 |  
 |  sout
 |      Alias for field number 5
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('total', 'used', 'free', 'percent', 'sin', 'sout')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._common.sswap._make,_common.sswap,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new sswap object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)",psutil,5.4.5,psutil._common.sswap._make,_common.sswap,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new sswap object from a sequence or iterable
",method,"('cls', 'iterable', 'new', 'len')","(nan, nan, <built-in method __new__ of type object at 0x00000000589BC0D0>, <built-in function len>)","(nan, nan, 'builtin_function_or_method', 'builtin_function_or_method')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)"
psutil,5.4.5,psutil._common.supports_ipv6,_common,supports_ipv6,"Python Library Documentation: function supports_ipv6 in module psutil._common

supports_ipv6()
    Return True if IPv6 is supported on this platform.
",function,"('()',)",psutil,5.4.5,psutil._common.supports_ipv6,_common,supports_ipv6,"Python Library Documentation: function supports_ipv6 in module psutil._common

supports_ipv6()
    Return True if IPv6 is supported on this platform.
",function,(),(),(),(),"('()',)"
psutil,5.4.5,psutil._common.suser,_common,suser,"Python Library Documentation: class suser in module psutil._common

class suser(builtins.tuple)
 |  suser(name, terminal, host, started, pid)
 |  
 |  Method resolution order:
 |      suser
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new suser object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new suser object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, name, terminal, host, started, pid)
 |      Create new instance of suser(name, terminal, host, started, pid)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |      Alias for field number 0
 |  
 |  terminal
 |      Alias for field number 1
 |  
 |  host
 |      Alias for field number 2
 |  
 |  started
 |      Alias for field number 3
 |  
 |  pid
 |      Alias for field number 4
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('name', 'terminal', 'host', 'started', 'pid')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._common.suser,_common,suser,"Python Library Documentation: class suser in module psutil._common

class suser(builtins.tuple)
 |  suser(name, terminal, host, started, pid)
 |  
 |  Method resolution order:
 |      suser
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new suser object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new suser object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, name, terminal, host, started, pid)
 |      Create new instance of suser(name, terminal, host, started, pid)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  name
 |      Alias for field number 0
 |  
 |  terminal
 |      Alias for field number 1
 |  
 |  host
 |      Alias for field number 2
 |  
 |  started
 |      Alias for field number 3
 |  
 |  pid
 |      Alias for field number 4
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('name', 'terminal', 'host', 'started', 'pid')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._common.suser._make,_common.suser,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new suser object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)",psutil,5.4.5,psutil._common.suser._make,_common.suser,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new suser object from a sequence or iterable
",method,"('cls', 'iterable', 'new', 'len')","(nan, nan, <built-in method __new__ of type object at 0x00000000589BC0D0>, <built-in function len>)","(nan, nan, 'builtin_function_or_method', 'builtin_function_or_method')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)"
psutil,5.4.5,psutil._common.usage_percent,_common,usage_percent,"Python Library Documentation: function usage_percent in module psutil._common

usage_percent(used, total, round_=None)
    Calculate percentage usage of 'used' against 'total'.
",function,"('(used, total, round_=None)',)",psutil,5.4.5,psutil._common.usage_percent,_common,usage_percent,"Python Library Documentation: function usage_percent in module psutil._common

usage_percent(used, total, round_=None)
    Calculate percentage usage of 'used' against 'total'.
",function,"('used', 'total', 'round_')","(nan, nan, None)","(nan, nan, 'NoneType')","('arg_info', 'arg_info', 'arg_info')","('(used, total, round_=None)',)"
psutil,5.4.5,psutil._common.wrap_numbers,_common,wrap_numbers,"Python Library Documentation: function wrap_numbers in module psutil._common

wrap_numbers(input_dict, name)
    Given an `input_dict` and a function `name`, adjust the numbers
    which ""wrap"" (restart from zero) across different calls by adding
    ""old value"" to ""new value"" and return an updated dict.
",function,"('(input_dict, name)',)",psutil,5.4.5,psutil._common.wrap_numbers,_common,wrap_numbers,"Python Library Documentation: function wrap_numbers in module psutil._common

wrap_numbers(input_dict, name)
    Given an `input_dict` and a function `name`, adjust the numbers
    which ""wrap"" (restart from zero) across different calls by adding
    ""old value"" to ""new value"" and return an updated dict.
",function,"('input_dict', 'name')","(nan, nan)","(nan, nan)","('arg_info', 'arg_info')","('(input_dict, name)',)"
psutil,5.4.5,psutil._compat.b,_compat,b,"Python Library Documentation: function b in module psutil._compat

b(s)
",function,"('(s)',)",psutil,5.4.5,psutil._compat.b,_compat,b,"Python Library Documentation: function b in module psutil._compat

b(s)
",function,"('s',)","(nan,)","(nan,)","('arg_info',)","('(s)',)"
psutil,5.4.5,psutil._compat.basestring,_compat,str,"Python Library Documentation: class str in module builtins

class str(object)
 |  str(object='') -> str
 |  str(bytes_or_buffer[, encoding[, errors]]) -> str
 |  
 |  Create a new string object from the given object. If encoding or
 |  errors is specified, then the object must expose a data buffer
 |  that will be decoded using the given encoding and error handler.
 |  Otherwise, returns the result of object.__str__() (if defined)
 |  or repr(object).
 |  encoding defaults to sys.getdefaultencoding().
 |  errors defaults to 'strict'.
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __format__(...)
 |      S.__format__(format_spec) -> str
 |      
 |      Return a formatted version of S as described by format_spec.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __getnewargs__(...)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  __sizeof__(...)
 |      S.__sizeof__() -> size of S in memory, in bytes
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  capitalize(...)
 |      S.capitalize() -> str
 |      
 |      Return a capitalized version of S, i.e. make the first character
 |      have upper case and the rest lower case.
 |  
 |  casefold(...)
 |      S.casefold() -> str
 |      
 |      Return a version of S suitable for caseless comparisons.
 |  
 |  center(...)
 |      S.center(width[, fillchar]) -> str
 |      
 |      Return S centered in a string of length width. Padding is
 |      done using the specified fill character (default is a space)
 |  
 |  count(...)
 |      S.count(sub[, start[, end]]) -> int
 |      
 |      Return the number of non-overlapping occurrences of substring sub in
 |      string S[start:end].  Optional arguments start and end are
 |      interpreted as in slice notation.
 |  
 |  encode(...)
 |      S.encode(encoding='utf-8', errors='strict') -> bytes
 |      
 |      Encode S using the codec registered for encoding. Default encoding
 |      is 'utf-8'. errors may be given to set a different error
 |      handling scheme. Default is 'strict' meaning that encoding errors raise
 |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
 |      'xmlcharrefreplace' as well as any other name registered with
 |      codecs.register_error that can handle UnicodeEncodeErrors.
 |  
 |  endswith(...)
 |      S.endswith(suffix[, start[, end]]) -> bool
 |      
 |      Return True if S ends with the specified suffix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      suffix can also be a tuple of strings to try.
 |  
 |  expandtabs(...)
 |      S.expandtabs(tabsize=8) -> str
 |      
 |      Return a copy of S where all tab characters are expanded using spaces.
 |      If tabsize is not given, a tab size of 8 characters is assumed.
 |  
 |  find(...)
 |      S.find(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  format(...)
 |      S.format(*args, **kwargs) -> str
 |      
 |      Return a formatted version of S, using substitutions from args and kwargs.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  format_map(...)
 |      S.format_map(mapping) -> str
 |      
 |      Return a formatted version of S, using substitutions from mapping.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  index(...)
 |      S.index(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found, 
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  isalnum(...)
 |      S.isalnum() -> bool
 |      
 |      Return True if all characters in S are alphanumeric
 |      and there is at least one character in S, False otherwise.
 |  
 |  isalpha(...)
 |      S.isalpha() -> bool
 |      
 |      Return True if all characters in S are alphabetic
 |      and there is at least one character in S, False otherwise.
 |  
 |  isdecimal(...)
 |      S.isdecimal() -> bool
 |      
 |      Return True if there are only decimal characters in S,
 |      False otherwise.
 |  
 |  isdigit(...)
 |      S.isdigit() -> bool
 |      
 |      Return True if all characters in S are digits
 |      and there is at least one character in S, False otherwise.
 |  
 |  isidentifier(...)
 |      S.isidentifier() -> bool
 |      
 |      Return True if S is a valid identifier according
 |      to the language definition.
 |      
 |      Use keyword.iskeyword() to test for reserved identifiers
 |      such as ""def"" and ""class"".
 |  
 |  islower(...)
 |      S.islower() -> bool
 |      
 |      Return True if all cased characters in S are lowercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  isnumeric(...)
 |      S.isnumeric() -> bool
 |      
 |      Return True if there are only numeric characters in S,
 |      False otherwise.
 |  
 |  isprintable(...)
 |      S.isprintable() -> bool
 |      
 |      Return True if all characters in S are considered
 |      printable in repr() or S is empty, False otherwise.
 |  
 |  isspace(...)
 |      S.isspace() -> bool
 |      
 |      Return True if all characters in S are whitespace
 |      and there is at least one character in S, False otherwise.
 |  
 |  istitle(...)
 |      S.istitle() -> bool
 |      
 |      Return True if S is a titlecased string and there is at least one
 |      character in S, i.e. upper- and titlecase characters may only
 |      follow uncased characters and lowercase characters only cased ones.
 |      Return False otherwise.
 |  
 |  isupper(...)
 |      S.isupper() -> bool
 |      
 |      Return True if all cased characters in S are uppercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  join(...)
 |      S.join(iterable) -> str
 |      
 |      Return a string which is the concatenation of the strings in the
 |      iterable.  The separator between elements is S.
 |  
 |  ljust(...)
 |      S.ljust(width[, fillchar]) -> str
 |      
 |      Return S left-justified in a Unicode string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  lower(...)
 |      S.lower() -> str
 |      
 |      Return a copy of the string S converted to lowercase.
 |  
 |  lstrip(...)
 |      S.lstrip([chars]) -> str
 |      
 |      Return a copy of the string S with leading whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  partition(...)
 |      S.partition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, and return the part before it,
 |      the separator itself, and the part after it.  If the separator is not
 |      found, return S and two empty strings.
 |  
 |  replace(...)
 |      S.replace(old, new[, count]) -> str
 |      
 |      Return a copy of S with all occurrences of substring
 |      old replaced by new.  If the optional argument count is
 |      given, only the first count occurrences are replaced.
 |  
 |  rfind(...)
 |      S.rfind(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  rindex(...)
 |      S.rindex(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  rjust(...)
 |      S.rjust(width[, fillchar]) -> str
 |      
 |      Return S right-justified in a string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  rpartition(...)
 |      S.rpartition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, starting at the end of S, and return
 |      the part before it, the separator itself, and the part after it.  If the
 |      separator is not found, return two empty strings and S.
 |  
 |  rsplit(...)
 |      S.rsplit(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string, starting at the end of the string and
 |      working to the front.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified, any whitespace string
 |      is a separator.
 |  
 |  rstrip(...)
 |      S.rstrip([chars]) -> str
 |      
 |      Return a copy of the string S with trailing whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  split(...)
 |      S.split(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified or is None, any
 |      whitespace string is a separator and empty strings are
 |      removed from the result.
 |  
 |  splitlines(...)
 |      S.splitlines([keepends]) -> list of strings
 |      
 |      Return a list of the lines in S, breaking at line boundaries.
 |      Line breaks are not included in the resulting list unless keepends
 |      is given and true.
 |  
 |  startswith(...)
 |      S.startswith(prefix[, start[, end]]) -> bool
 |      
 |      Return True if S starts with the specified prefix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      prefix can also be a tuple of strings to try.
 |  
 |  strip(...)
 |      S.strip([chars]) -> str
 |      
 |      Return a copy of the string S with leading and trailing
 |      whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  swapcase(...)
 |      S.swapcase() -> str
 |      
 |      Return a copy of S with uppercase characters converted to lowercase
 |      and vice versa.
 |  
 |  title(...)
 |      S.title() -> str
 |      
 |      Return a titlecased version of S, i.e. words start with title case
 |      characters, all remaining cased characters have lower case.
 |  
 |  translate(...)
 |      S.translate(table) -> str
 |      
 |      Return a copy of the string S in which each character has been mapped
 |      through the given translation table. The table must implement
 |      lookup/indexing via __getitem__, for instance a dictionary or list,
 |      mapping Unicode ordinals to Unicode ordinals, strings, or None. If
 |      this operation raises LookupError, the character is left untouched.
 |      Characters mapped to None are deleted.
 |  
 |  upper(...)
 |      S.upper() -> str
 |      
 |      Return a copy of S converted to uppercase.
 |  
 |  zfill(...)
 |      S.zfill(width) -> str
 |      
 |      Pad a numeric string S with zeros on the left, to fill a field
 |      of the specified width. The string S is never truncated.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  maketrans(x, y=None, z=None, /)
 |      Return a translation table usable for str.translate().
 |      
 |      If there is only one argument, it must be a dictionary mapping Unicode
 |      ordinals (integers) or characters to Unicode ordinals, strings or None.
 |      Character keys will be then converted to ordinals.
 |      If there are two arguments, they must be strings of equal length, and
 |      in the resulting dictionary, each character in x will be mapped to the
 |      character at the same position in y. If there is a third argument, it
 |      must be a string, whose characters will be mapped to None in the result.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._compat.basestring,_compat,str,"Python Library Documentation: class str in module builtins

class str(object)
 |  str(object='') -> str
 |  str(bytes_or_buffer[, encoding[, errors]]) -> str
 |  
 |  Create a new string object from the given object. If encoding or
 |  errors is specified, then the object must expose a data buffer
 |  that will be decoded using the given encoding and error handler.
 |  Otherwise, returns the result of object.__str__() (if defined)
 |  or repr(object).
 |  encoding defaults to sys.getdefaultencoding().
 |  errors defaults to 'strict'.
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __format__(...)
 |      S.__format__(format_spec) -> str
 |      
 |      Return a formatted version of S as described by format_spec.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __getnewargs__(...)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  __sizeof__(...)
 |      S.__sizeof__() -> size of S in memory, in bytes
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  capitalize(...)
 |      S.capitalize() -> str
 |      
 |      Return a capitalized version of S, i.e. make the first character
 |      have upper case and the rest lower case.
 |  
 |  casefold(...)
 |      S.casefold() -> str
 |      
 |      Return a version of S suitable for caseless comparisons.
 |  
 |  center(...)
 |      S.center(width[, fillchar]) -> str
 |      
 |      Return S centered in a string of length width. Padding is
 |      done using the specified fill character (default is a space)
 |  
 |  count(...)
 |      S.count(sub[, start[, end]]) -> int
 |      
 |      Return the number of non-overlapping occurrences of substring sub in
 |      string S[start:end].  Optional arguments start and end are
 |      interpreted as in slice notation.
 |  
 |  encode(...)
 |      S.encode(encoding='utf-8', errors='strict') -> bytes
 |      
 |      Encode S using the codec registered for encoding. Default encoding
 |      is 'utf-8'. errors may be given to set a different error
 |      handling scheme. Default is 'strict' meaning that encoding errors raise
 |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
 |      'xmlcharrefreplace' as well as any other name registered with
 |      codecs.register_error that can handle UnicodeEncodeErrors.
 |  
 |  endswith(...)
 |      S.endswith(suffix[, start[, end]]) -> bool
 |      
 |      Return True if S ends with the specified suffix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      suffix can also be a tuple of strings to try.
 |  
 |  expandtabs(...)
 |      S.expandtabs(tabsize=8) -> str
 |      
 |      Return a copy of S where all tab characters are expanded using spaces.
 |      If tabsize is not given, a tab size of 8 characters is assumed.
 |  
 |  find(...)
 |      S.find(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  format(...)
 |      S.format(*args, **kwargs) -> str
 |      
 |      Return a formatted version of S, using substitutions from args and kwargs.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  format_map(...)
 |      S.format_map(mapping) -> str
 |      
 |      Return a formatted version of S, using substitutions from mapping.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  index(...)
 |      S.index(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found, 
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  isalnum(...)
 |      S.isalnum() -> bool
 |      
 |      Return True if all characters in S are alphanumeric
 |      and there is at least one character in S, False otherwise.
 |  
 |  isalpha(...)
 |      S.isalpha() -> bool
 |      
 |      Return True if all characters in S are alphabetic
 |      and there is at least one character in S, False otherwise.
 |  
 |  isdecimal(...)
 |      S.isdecimal() -> bool
 |      
 |      Return True if there are only decimal characters in S,
 |      False otherwise.
 |  
 |  isdigit(...)
 |      S.isdigit() -> bool
 |      
 |      Return True if all characters in S are digits
 |      and there is at least one character in S, False otherwise.
 |  
 |  isidentifier(...)
 |      S.isidentifier() -> bool
 |      
 |      Return True if S is a valid identifier according
 |      to the language definition.
 |      
 |      Use keyword.iskeyword() to test for reserved identifiers
 |      such as ""def"" and ""class"".
 |  
 |  islower(...)
 |      S.islower() -> bool
 |      
 |      Return True if all cased characters in S are lowercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  isnumeric(...)
 |      S.isnumeric() -> bool
 |      
 |      Return True if there are only numeric characters in S,
 |      False otherwise.
 |  
 |  isprintable(...)
 |      S.isprintable() -> bool
 |      
 |      Return True if all characters in S are considered
 |      printable in repr() or S is empty, False otherwise.
 |  
 |  isspace(...)
 |      S.isspace() -> bool
 |      
 |      Return True if all characters in S are whitespace
 |      and there is at least one character in S, False otherwise.
 |  
 |  istitle(...)
 |      S.istitle() -> bool
 |      
 |      Return True if S is a titlecased string and there is at least one
 |      character in S, i.e. upper- and titlecase characters may only
 |      follow uncased characters and lowercase characters only cased ones.
 |      Return False otherwise.
 |  
 |  isupper(...)
 |      S.isupper() -> bool
 |      
 |      Return True if all cased characters in S are uppercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  join(...)
 |      S.join(iterable) -> str
 |      
 |      Return a string which is the concatenation of the strings in the
 |      iterable.  The separator between elements is S.
 |  
 |  ljust(...)
 |      S.ljust(width[, fillchar]) -> str
 |      
 |      Return S left-justified in a Unicode string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  lower(...)
 |      S.lower() -> str
 |      
 |      Return a copy of the string S converted to lowercase.
 |  
 |  lstrip(...)
 |      S.lstrip([chars]) -> str
 |      
 |      Return a copy of the string S with leading whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  partition(...)
 |      S.partition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, and return the part before it,
 |      the separator itself, and the part after it.  If the separator is not
 |      found, return S and two empty strings.
 |  
 |  replace(...)
 |      S.replace(old, new[, count]) -> str
 |      
 |      Return a copy of S with all occurrences of substring
 |      old replaced by new.  If the optional argument count is
 |      given, only the first count occurrences are replaced.
 |  
 |  rfind(...)
 |      S.rfind(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  rindex(...)
 |      S.rindex(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  rjust(...)
 |      S.rjust(width[, fillchar]) -> str
 |      
 |      Return S right-justified in a string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  rpartition(...)
 |      S.rpartition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, starting at the end of S, and return
 |      the part before it, the separator itself, and the part after it.  If the
 |      separator is not found, return two empty strings and S.
 |  
 |  rsplit(...)
 |      S.rsplit(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string, starting at the end of the string and
 |      working to the front.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified, any whitespace string
 |      is a separator.
 |  
 |  rstrip(...)
 |      S.rstrip([chars]) -> str
 |      
 |      Return a copy of the string S with trailing whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  split(...)
 |      S.split(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified or is None, any
 |      whitespace string is a separator and empty strings are
 |      removed from the result.
 |  
 |  splitlines(...)
 |      S.splitlines([keepends]) -> list of strings
 |      
 |      Return a list of the lines in S, breaking at line boundaries.
 |      Line breaks are not included in the resulting list unless keepends
 |      is given and true.
 |  
 |  startswith(...)
 |      S.startswith(prefix[, start[, end]]) -> bool
 |      
 |      Return True if S starts with the specified prefix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      prefix can also be a tuple of strings to try.
 |  
 |  strip(...)
 |      S.strip([chars]) -> str
 |      
 |      Return a copy of the string S with leading and trailing
 |      whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  swapcase(...)
 |      S.swapcase() -> str
 |      
 |      Return a copy of S with uppercase characters converted to lowercase
 |      and vice versa.
 |  
 |  title(...)
 |      S.title() -> str
 |      
 |      Return a titlecased version of S, i.e. words start with title case
 |      characters, all remaining cased characters have lower case.
 |  
 |  translate(...)
 |      S.translate(table) -> str
 |      
 |      Return a copy of the string S in which each character has been mapped
 |      through the given translation table. The table must implement
 |      lookup/indexing via __getitem__, for instance a dictionary or list,
 |      mapping Unicode ordinals to Unicode ordinals, strings, or None. If
 |      this operation raises LookupError, the character is left untouched.
 |      Characters mapped to None are deleted.
 |  
 |  upper(...)
 |      S.upper() -> str
 |      
 |      Return a copy of S converted to uppercase.
 |  
 |  zfill(...)
 |      S.zfill(width) -> str
 |      
 |      Pad a numeric string S with zeros on the left, to fill a field
 |      of the specified width. The string S is never truncated.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  maketrans(x, y=None, z=None, /)
 |      Return a translation table usable for str.translate().
 |      
 |      If there is only one argument, it must be a dictionary mapping Unicode
 |      ordinals (integers) or characters to Unicode ordinals, strings or None.
 |      Character keys will be then converted to ordinals.
 |      If there are two arguments, they must be strings of equal length, and
 |      in the resulting dictionary, each character in x will be mapped to the
 |      character at the same position in y. If there is a third argument, it
 |      must be a string, whose characters will be mapped to None in the result.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._compat.long,_compat,int,"Python Library Documentation: class int in module builtins

class int(object)
 |  int(x=0) -> integer
 |  int(x, base=10) -> integer
 |  
 |  Convert a number or string to an integer, or return 0 if no arguments
 |  are given.  If x is a number, return x.__int__().  For floating point
 |  numbers, this truncates towards zero.
 |  
 |  If x is not a number or if base is given, then x must be a string,
 |  bytes, or bytearray instance representing an integer literal in the
 |  given base.  The literal can be preceded by '+' or '-' and be surrounded
 |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
 |  Base 0 means to interpret the base from the string as an integer literal.
 |  >>> int('0b100', base=0)
 |  4
 |  
 |  Methods defined here:
 |  
 |  __abs__(self, /)
 |      abs(self)
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __and__(self, value, /)
 |      Return self&value.
 |  
 |  __bool__(self, /)
 |      self != 0
 |  
 |  __ceil__(...)
 |      Ceiling of an Integral returns itself.
 |  
 |  __divmod__(self, value, /)
 |      Return divmod(self, value).
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __float__(self, /)
 |      float(self)
 |  
 |  __floor__(...)
 |      Flooring an Integral returns itself.
 |  
 |  __floordiv__(self, value, /)
 |      Return self//value.
 |  
 |  __format__(...)
 |      default object formatter
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getnewargs__(...)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __index__(self, /)
 |      Return self converted to an integer, if self is suitable for use as an index into a list.
 |  
 |  __int__(self, /)
 |      int(self)
 |  
 |  __invert__(self, /)
 |      ~self
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __lshift__(self, value, /)
 |      Return self<<value.
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __neg__(self, /)
 |      -self
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __or__(self, value, /)
 |      Return self|value.
 |  
 |  __pos__(self, /)
 |      +self
 |  
 |  __pow__(self, value, mod=None, /)
 |      Return pow(self, value, mod).
 |  
 |  __radd__(self, value, /)
 |      Return value+self.
 |  
 |  __rand__(self, value, /)
 |      Return value&self.
 |  
 |  __rdivmod__(self, value, /)
 |      Return divmod(value, self).
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rfloordiv__(self, value, /)
 |      Return value//self.
 |  
 |  __rlshift__(self, value, /)
 |      Return value<<self.
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return value*self.
 |  
 |  __ror__(self, value, /)
 |      Return value|self.
 |  
 |  __round__(...)
 |      Rounding an Integral returns itself.
 |      Rounding with an ndigits argument also returns an integer.
 |  
 |  __rpow__(self, value, mod=None, /)
 |      Return pow(value, self, mod).
 |  
 |  __rrshift__(self, value, /)
 |      Return value>>self.
 |  
 |  __rshift__(self, value, /)
 |      Return self>>value.
 |  
 |  __rsub__(self, value, /)
 |      Return value-self.
 |  
 |  __rtruediv__(self, value, /)
 |      Return value/self.
 |  
 |  __rxor__(self, value, /)
 |      Return value^self.
 |  
 |  __sizeof__(...)
 |      Returns size in memory, in bytes
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  __sub__(self, value, /)
 |      Return self-value.
 |  
 |  __truediv__(self, value, /)
 |      Return self/value.
 |  
 |  __trunc__(...)
 |      Truncating an Integral returns itself.
 |  
 |  __xor__(self, value, /)
 |      Return self^value.
 |  
 |  bit_length(...)
 |      int.bit_length() -> int
 |      
 |      Number of bits necessary to represent self in binary.
 |      >>> bin(37)
 |      '0b100101'
 |      >>> (37).bit_length()
 |      6
 |  
 |  conjugate(...)
 |      Returns self, the complex conjugate of any int.
 |  
 |  from_bytes(...) from builtins.type
 |      int.from_bytes(bytes, byteorder, *, signed=False) -> int
 |      
 |      Return the integer represented by the given array of bytes.
 |      
 |      The bytes argument must be a bytes-like object (e.g. bytes or bytearray).
 |      
 |      The byteorder argument determines the byte order used to represent the
 |      integer.  If byteorder is 'big', the most significant byte is at the
 |      beginning of the byte array.  If byteorder is 'little', the most
 |      significant byte is at the end of the byte array.  To request the native
 |      byte order of the host system, use `sys.byteorder' as the byte order value.
 |      
 |      The signed keyword-only argument indicates whether two's complement is
 |      used to represent the integer.
 |  
 |  to_bytes(...)
 |      int.to_bytes(length, byteorder, *, signed=False) -> bytes
 |      
 |      Return an array of bytes representing an integer.
 |      
 |      The integer is represented using length bytes.  An OverflowError is
 |      raised if the integer is not representable with the given number of
 |      bytes.
 |      
 |      The byteorder argument determines the byte order used to represent the
 |      integer.  If byteorder is 'big', the most significant byte is at the
 |      beginning of the byte array.  If byteorder is 'little', the most
 |      significant byte is at the end of the byte array.  To request the native
 |      byte order of the host system, use `sys.byteorder' as the byte order value.
 |      
 |      The signed keyword-only argument determines whether two's complement is
 |      used to represent the integer.  If signed is False and a negative integer
 |      is given, an OverflowError is raised.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  denominator
 |      the denominator of a rational number in lowest terms
 |  
 |  imag
 |      the imaginary part of a complex number
 |  
 |  numerator
 |      the numerator of a rational number in lowest terms
 |  
 |  real
 |      the real part of a complex number
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._compat.long,_compat,int,"Python Library Documentation: class int in module builtins

class int(object)
 |  int(x=0) -> integer
 |  int(x, base=10) -> integer
 |  
 |  Convert a number or string to an integer, or return 0 if no arguments
 |  are given.  If x is a number, return x.__int__().  For floating point
 |  numbers, this truncates towards zero.
 |  
 |  If x is not a number or if base is given, then x must be a string,
 |  bytes, or bytearray instance representing an integer literal in the
 |  given base.  The literal can be preceded by '+' or '-' and be surrounded
 |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
 |  Base 0 means to interpret the base from the string as an integer literal.
 |  >>> int('0b100', base=0)
 |  4
 |  
 |  Methods defined here:
 |  
 |  __abs__(self, /)
 |      abs(self)
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __and__(self, value, /)
 |      Return self&value.
 |  
 |  __bool__(self, /)
 |      self != 0
 |  
 |  __ceil__(...)
 |      Ceiling of an Integral returns itself.
 |  
 |  __divmod__(self, value, /)
 |      Return divmod(self, value).
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __float__(self, /)
 |      float(self)
 |  
 |  __floor__(...)
 |      Flooring an Integral returns itself.
 |  
 |  __floordiv__(self, value, /)
 |      Return self//value.
 |  
 |  __format__(...)
 |      default object formatter
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getnewargs__(...)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __index__(self, /)
 |      Return self converted to an integer, if self is suitable for use as an index into a list.
 |  
 |  __int__(self, /)
 |      int(self)
 |  
 |  __invert__(self, /)
 |      ~self
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __lshift__(self, value, /)
 |      Return self<<value.
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __neg__(self, /)
 |      -self
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __or__(self, value, /)
 |      Return self|value.
 |  
 |  __pos__(self, /)
 |      +self
 |  
 |  __pow__(self, value, mod=None, /)
 |      Return pow(self, value, mod).
 |  
 |  __radd__(self, value, /)
 |      Return value+self.
 |  
 |  __rand__(self, value, /)
 |      Return value&self.
 |  
 |  __rdivmod__(self, value, /)
 |      Return divmod(value, self).
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rfloordiv__(self, value, /)
 |      Return value//self.
 |  
 |  __rlshift__(self, value, /)
 |      Return value<<self.
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return value*self.
 |  
 |  __ror__(self, value, /)
 |      Return value|self.
 |  
 |  __round__(...)
 |      Rounding an Integral returns itself.
 |      Rounding with an ndigits argument also returns an integer.
 |  
 |  __rpow__(self, value, mod=None, /)
 |      Return pow(value, self, mod).
 |  
 |  __rrshift__(self, value, /)
 |      Return value>>self.
 |  
 |  __rshift__(self, value, /)
 |      Return self>>value.
 |  
 |  __rsub__(self, value, /)
 |      Return value-self.
 |  
 |  __rtruediv__(self, value, /)
 |      Return value/self.
 |  
 |  __rxor__(self, value, /)
 |      Return value^self.
 |  
 |  __sizeof__(...)
 |      Returns size in memory, in bytes
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  __sub__(self, value, /)
 |      Return self-value.
 |  
 |  __truediv__(self, value, /)
 |      Return self/value.
 |  
 |  __trunc__(...)
 |      Truncating an Integral returns itself.
 |  
 |  __xor__(self, value, /)
 |      Return self^value.
 |  
 |  bit_length(...)
 |      int.bit_length() -> int
 |      
 |      Number of bits necessary to represent self in binary.
 |      >>> bin(37)
 |      '0b100101'
 |      >>> (37).bit_length()
 |      6
 |  
 |  conjugate(...)
 |      Returns self, the complex conjugate of any int.
 |  
 |  from_bytes(...) from builtins.type
 |      int.from_bytes(bytes, byteorder, *, signed=False) -> int
 |      
 |      Return the integer represented by the given array of bytes.
 |      
 |      The bytes argument must be a bytes-like object (e.g. bytes or bytearray).
 |      
 |      The byteorder argument determines the byte order used to represent the
 |      integer.  If byteorder is 'big', the most significant byte is at the
 |      beginning of the byte array.  If byteorder is 'little', the most
 |      significant byte is at the end of the byte array.  To request the native
 |      byte order of the host system, use `sys.byteorder' as the byte order value.
 |      
 |      The signed keyword-only argument indicates whether two's complement is
 |      used to represent the integer.
 |  
 |  to_bytes(...)
 |      int.to_bytes(length, byteorder, *, signed=False) -> bytes
 |      
 |      Return an array of bytes representing an integer.
 |      
 |      The integer is represented using length bytes.  An OverflowError is
 |      raised if the integer is not representable with the given number of
 |      bytes.
 |      
 |      The byteorder argument determines the byte order used to represent the
 |      integer.  If byteorder is 'big', the most significant byte is at the
 |      beginning of the byte array.  If byteorder is 'little', the most
 |      significant byte is at the end of the byte array.  To request the native
 |      byte order of the host system, use `sys.byteorder' as the byte order value.
 |      
 |      The signed keyword-only argument determines whether two's complement is
 |      used to represent the integer.  If signed is False and a negative integer
 |      is given, an OverflowError is raised.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  denominator
 |      the denominator of a rational number in lowest terms
 |  
 |  imag
 |      the imaginary part of a complex number
 |  
 |  numerator
 |      the numerator of a rational number in lowest terms
 |  
 |  real
 |      the real part of a complex number
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._compat.lru_cache,_compat,lru_cache,"Python Library Documentation: function lru_cache in module functools

lru_cache(maxsize=128, typed=False)
    Least-recently-used cache decorator.
    
    If *maxsize* is set to None, the LRU features are disabled and the cache
    can grow without bound.
    
    If *typed* is True, arguments of different types will be cached separately.
    For example, f(3.0) and f(3) will be treated as distinct calls with
    distinct results.
    
    Arguments to the cached function must be hashable.
    
    View the cache statistics named tuple (hits, misses, maxsize, currsize)
    with f.cache_info().  Clear the cache and statistics with f.cache_clear().
    Access the underlying function with f.__wrapped__.
    
    See:  http://en.wikipedia.org/wiki/Cache_algorithms#Least_Recently_Used
",function,"('(maxsize=128, typed=False)',)",psutil,5.4.5,psutil._compat.lru_cache,_compat,lru_cache,"Python Library Documentation: function lru_cache in module functools

lru_cache(maxsize=128, typed=False)
    Least-recently-used cache decorator.
    
    If *maxsize* is set to None, the LRU features are disabled and the cache
    can grow without bound.
    
    If *typed* is True, arguments of different types will be cached separately.
    For example, f(3.0) and f(3) will be treated as distinct calls with
    distinct results.
    
    Arguments to the cached function must be hashable.
    
    View the cache statistics named tuple (hits, misses, maxsize, currsize)
    with f.cache_info().  Clear the cache and statistics with f.cache_clear().
    Access the underlying function with f.__wrapped__.
    
    See:  http://en.wikipedia.org/wiki/Cache_algorithms#Least_Recently_Used
",function,"('maxsize', 'typed')","(128, False)","('int', 'bool')","('arg_info', 'arg_info')","('(maxsize=128, typed=False)',)"
psutil,5.4.5,psutil._compat.u,_compat,u,"Python Library Documentation: function u in module psutil._compat

u(s)
",function,"('(s)',)",psutil,5.4.5,psutil._compat.u,_compat,u,"Python Library Documentation: function u in module psutil._compat

u(s)
",function,"('s',)","(nan,)","(nan,)","('arg_info',)","('(s)',)"
psutil,5.4.5,psutil._compat.unicode,_compat,str,"Python Library Documentation: class str in module builtins

class str(object)
 |  str(object='') -> str
 |  str(bytes_or_buffer[, encoding[, errors]]) -> str
 |  
 |  Create a new string object from the given object. If encoding or
 |  errors is specified, then the object must expose a data buffer
 |  that will be decoded using the given encoding and error handler.
 |  Otherwise, returns the result of object.__str__() (if defined)
 |  or repr(object).
 |  encoding defaults to sys.getdefaultencoding().
 |  errors defaults to 'strict'.
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __format__(...)
 |      S.__format__(format_spec) -> str
 |      
 |      Return a formatted version of S as described by format_spec.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __getnewargs__(...)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  __sizeof__(...)
 |      S.__sizeof__() -> size of S in memory, in bytes
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  capitalize(...)
 |      S.capitalize() -> str
 |      
 |      Return a capitalized version of S, i.e. make the first character
 |      have upper case and the rest lower case.
 |  
 |  casefold(...)
 |      S.casefold() -> str
 |      
 |      Return a version of S suitable for caseless comparisons.
 |  
 |  center(...)
 |      S.center(width[, fillchar]) -> str
 |      
 |      Return S centered in a string of length width. Padding is
 |      done using the specified fill character (default is a space)
 |  
 |  count(...)
 |      S.count(sub[, start[, end]]) -> int
 |      
 |      Return the number of non-overlapping occurrences of substring sub in
 |      string S[start:end].  Optional arguments start and end are
 |      interpreted as in slice notation.
 |  
 |  encode(...)
 |      S.encode(encoding='utf-8', errors='strict') -> bytes
 |      
 |      Encode S using the codec registered for encoding. Default encoding
 |      is 'utf-8'. errors may be given to set a different error
 |      handling scheme. Default is 'strict' meaning that encoding errors raise
 |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
 |      'xmlcharrefreplace' as well as any other name registered with
 |      codecs.register_error that can handle UnicodeEncodeErrors.
 |  
 |  endswith(...)
 |      S.endswith(suffix[, start[, end]]) -> bool
 |      
 |      Return True if S ends with the specified suffix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      suffix can also be a tuple of strings to try.
 |  
 |  expandtabs(...)
 |      S.expandtabs(tabsize=8) -> str
 |      
 |      Return a copy of S where all tab characters are expanded using spaces.
 |      If tabsize is not given, a tab size of 8 characters is assumed.
 |  
 |  find(...)
 |      S.find(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  format(...)
 |      S.format(*args, **kwargs) -> str
 |      
 |      Return a formatted version of S, using substitutions from args and kwargs.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  format_map(...)
 |      S.format_map(mapping) -> str
 |      
 |      Return a formatted version of S, using substitutions from mapping.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  index(...)
 |      S.index(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found, 
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  isalnum(...)
 |      S.isalnum() -> bool
 |      
 |      Return True if all characters in S are alphanumeric
 |      and there is at least one character in S, False otherwise.
 |  
 |  isalpha(...)
 |      S.isalpha() -> bool
 |      
 |      Return True if all characters in S are alphabetic
 |      and there is at least one character in S, False otherwise.
 |  
 |  isdecimal(...)
 |      S.isdecimal() -> bool
 |      
 |      Return True if there are only decimal characters in S,
 |      False otherwise.
 |  
 |  isdigit(...)
 |      S.isdigit() -> bool
 |      
 |      Return True if all characters in S are digits
 |      and there is at least one character in S, False otherwise.
 |  
 |  isidentifier(...)
 |      S.isidentifier() -> bool
 |      
 |      Return True if S is a valid identifier according
 |      to the language definition.
 |      
 |      Use keyword.iskeyword() to test for reserved identifiers
 |      such as ""def"" and ""class"".
 |  
 |  islower(...)
 |      S.islower() -> bool
 |      
 |      Return True if all cased characters in S are lowercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  isnumeric(...)
 |      S.isnumeric() -> bool
 |      
 |      Return True if there are only numeric characters in S,
 |      False otherwise.
 |  
 |  isprintable(...)
 |      S.isprintable() -> bool
 |      
 |      Return True if all characters in S are considered
 |      printable in repr() or S is empty, False otherwise.
 |  
 |  isspace(...)
 |      S.isspace() -> bool
 |      
 |      Return True if all characters in S are whitespace
 |      and there is at least one character in S, False otherwise.
 |  
 |  istitle(...)
 |      S.istitle() -> bool
 |      
 |      Return True if S is a titlecased string and there is at least one
 |      character in S, i.e. upper- and titlecase characters may only
 |      follow uncased characters and lowercase characters only cased ones.
 |      Return False otherwise.
 |  
 |  isupper(...)
 |      S.isupper() -> bool
 |      
 |      Return True if all cased characters in S are uppercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  join(...)
 |      S.join(iterable) -> str
 |      
 |      Return a string which is the concatenation of the strings in the
 |      iterable.  The separator between elements is S.
 |  
 |  ljust(...)
 |      S.ljust(width[, fillchar]) -> str
 |      
 |      Return S left-justified in a Unicode string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  lower(...)
 |      S.lower() -> str
 |      
 |      Return a copy of the string S converted to lowercase.
 |  
 |  lstrip(...)
 |      S.lstrip([chars]) -> str
 |      
 |      Return a copy of the string S with leading whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  partition(...)
 |      S.partition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, and return the part before it,
 |      the separator itself, and the part after it.  If the separator is not
 |      found, return S and two empty strings.
 |  
 |  replace(...)
 |      S.replace(old, new[, count]) -> str
 |      
 |      Return a copy of S with all occurrences of substring
 |      old replaced by new.  If the optional argument count is
 |      given, only the first count occurrences are replaced.
 |  
 |  rfind(...)
 |      S.rfind(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  rindex(...)
 |      S.rindex(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  rjust(...)
 |      S.rjust(width[, fillchar]) -> str
 |      
 |      Return S right-justified in a string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  rpartition(...)
 |      S.rpartition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, starting at the end of S, and return
 |      the part before it, the separator itself, and the part after it.  If the
 |      separator is not found, return two empty strings and S.
 |  
 |  rsplit(...)
 |      S.rsplit(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string, starting at the end of the string and
 |      working to the front.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified, any whitespace string
 |      is a separator.
 |  
 |  rstrip(...)
 |      S.rstrip([chars]) -> str
 |      
 |      Return a copy of the string S with trailing whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  split(...)
 |      S.split(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified or is None, any
 |      whitespace string is a separator and empty strings are
 |      removed from the result.
 |  
 |  splitlines(...)
 |      S.splitlines([keepends]) -> list of strings
 |      
 |      Return a list of the lines in S, breaking at line boundaries.
 |      Line breaks are not included in the resulting list unless keepends
 |      is given and true.
 |  
 |  startswith(...)
 |      S.startswith(prefix[, start[, end]]) -> bool
 |      
 |      Return True if S starts with the specified prefix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      prefix can also be a tuple of strings to try.
 |  
 |  strip(...)
 |      S.strip([chars]) -> str
 |      
 |      Return a copy of the string S with leading and trailing
 |      whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  swapcase(...)
 |      S.swapcase() -> str
 |      
 |      Return a copy of S with uppercase characters converted to lowercase
 |      and vice versa.
 |  
 |  title(...)
 |      S.title() -> str
 |      
 |      Return a titlecased version of S, i.e. words start with title case
 |      characters, all remaining cased characters have lower case.
 |  
 |  translate(...)
 |      S.translate(table) -> str
 |      
 |      Return a copy of the string S in which each character has been mapped
 |      through the given translation table. The table must implement
 |      lookup/indexing via __getitem__, for instance a dictionary or list,
 |      mapping Unicode ordinals to Unicode ordinals, strings, or None. If
 |      this operation raises LookupError, the character is left untouched.
 |      Characters mapped to None are deleted.
 |  
 |  upper(...)
 |      S.upper() -> str
 |      
 |      Return a copy of S converted to uppercase.
 |  
 |  zfill(...)
 |      S.zfill(width) -> str
 |      
 |      Pad a numeric string S with zeros on the left, to fill a field
 |      of the specified width. The string S is never truncated.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  maketrans(x, y=None, z=None, /)
 |      Return a translation table usable for str.translate().
 |      
 |      If there is only one argument, it must be a dictionary mapping Unicode
 |      ordinals (integers) or characters to Unicode ordinals, strings or None.
 |      Character keys will be then converted to ordinals.
 |      If there are two arguments, they must be strings of equal length, and
 |      in the resulting dictionary, each character in x will be mapped to the
 |      character at the same position in y. If there is a third argument, it
 |      must be a string, whose characters will be mapped to None in the result.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._compat.unicode,_compat,str,"Python Library Documentation: class str in module builtins

class str(object)
 |  str(object='') -> str
 |  str(bytes_or_buffer[, encoding[, errors]]) -> str
 |  
 |  Create a new string object from the given object. If encoding or
 |  errors is specified, then the object must expose a data buffer
 |  that will be decoded using the given encoding and error handler.
 |  Otherwise, returns the result of object.__str__() (if defined)
 |  or repr(object).
 |  encoding defaults to sys.getdefaultencoding().
 |  errors defaults to 'strict'.
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __format__(...)
 |      S.__format__(format_spec) -> str
 |      
 |      Return a formatted version of S as described by format_spec.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __getnewargs__(...)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  __sizeof__(...)
 |      S.__sizeof__() -> size of S in memory, in bytes
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  capitalize(...)
 |      S.capitalize() -> str
 |      
 |      Return a capitalized version of S, i.e. make the first character
 |      have upper case and the rest lower case.
 |  
 |  casefold(...)
 |      S.casefold() -> str
 |      
 |      Return a version of S suitable for caseless comparisons.
 |  
 |  center(...)
 |      S.center(width[, fillchar]) -> str
 |      
 |      Return S centered in a string of length width. Padding is
 |      done using the specified fill character (default is a space)
 |  
 |  count(...)
 |      S.count(sub[, start[, end]]) -> int
 |      
 |      Return the number of non-overlapping occurrences of substring sub in
 |      string S[start:end].  Optional arguments start and end are
 |      interpreted as in slice notation.
 |  
 |  encode(...)
 |      S.encode(encoding='utf-8', errors='strict') -> bytes
 |      
 |      Encode S using the codec registered for encoding. Default encoding
 |      is 'utf-8'. errors may be given to set a different error
 |      handling scheme. Default is 'strict' meaning that encoding errors raise
 |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
 |      'xmlcharrefreplace' as well as any other name registered with
 |      codecs.register_error that can handle UnicodeEncodeErrors.
 |  
 |  endswith(...)
 |      S.endswith(suffix[, start[, end]]) -> bool
 |      
 |      Return True if S ends with the specified suffix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      suffix can also be a tuple of strings to try.
 |  
 |  expandtabs(...)
 |      S.expandtabs(tabsize=8) -> str
 |      
 |      Return a copy of S where all tab characters are expanded using spaces.
 |      If tabsize is not given, a tab size of 8 characters is assumed.
 |  
 |  find(...)
 |      S.find(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  format(...)
 |      S.format(*args, **kwargs) -> str
 |      
 |      Return a formatted version of S, using substitutions from args and kwargs.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  format_map(...)
 |      S.format_map(mapping) -> str
 |      
 |      Return a formatted version of S, using substitutions from mapping.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  index(...)
 |      S.index(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found, 
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  isalnum(...)
 |      S.isalnum() -> bool
 |      
 |      Return True if all characters in S are alphanumeric
 |      and there is at least one character in S, False otherwise.
 |  
 |  isalpha(...)
 |      S.isalpha() -> bool
 |      
 |      Return True if all characters in S are alphabetic
 |      and there is at least one character in S, False otherwise.
 |  
 |  isdecimal(...)
 |      S.isdecimal() -> bool
 |      
 |      Return True if there are only decimal characters in S,
 |      False otherwise.
 |  
 |  isdigit(...)
 |      S.isdigit() -> bool
 |      
 |      Return True if all characters in S are digits
 |      and there is at least one character in S, False otherwise.
 |  
 |  isidentifier(...)
 |      S.isidentifier() -> bool
 |      
 |      Return True if S is a valid identifier according
 |      to the language definition.
 |      
 |      Use keyword.iskeyword() to test for reserved identifiers
 |      such as ""def"" and ""class"".
 |  
 |  islower(...)
 |      S.islower() -> bool
 |      
 |      Return True if all cased characters in S are lowercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  isnumeric(...)
 |      S.isnumeric() -> bool
 |      
 |      Return True if there are only numeric characters in S,
 |      False otherwise.
 |  
 |  isprintable(...)
 |      S.isprintable() -> bool
 |      
 |      Return True if all characters in S are considered
 |      printable in repr() or S is empty, False otherwise.
 |  
 |  isspace(...)
 |      S.isspace() -> bool
 |      
 |      Return True if all characters in S are whitespace
 |      and there is at least one character in S, False otherwise.
 |  
 |  istitle(...)
 |      S.istitle() -> bool
 |      
 |      Return True if S is a titlecased string and there is at least one
 |      character in S, i.e. upper- and titlecase characters may only
 |      follow uncased characters and lowercase characters only cased ones.
 |      Return False otherwise.
 |  
 |  isupper(...)
 |      S.isupper() -> bool
 |      
 |      Return True if all cased characters in S are uppercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  join(...)
 |      S.join(iterable) -> str
 |      
 |      Return a string which is the concatenation of the strings in the
 |      iterable.  The separator between elements is S.
 |  
 |  ljust(...)
 |      S.ljust(width[, fillchar]) -> str
 |      
 |      Return S left-justified in a Unicode string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  lower(...)
 |      S.lower() -> str
 |      
 |      Return a copy of the string S converted to lowercase.
 |  
 |  lstrip(...)
 |      S.lstrip([chars]) -> str
 |      
 |      Return a copy of the string S with leading whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  partition(...)
 |      S.partition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, and return the part before it,
 |      the separator itself, and the part after it.  If the separator is not
 |      found, return S and two empty strings.
 |  
 |  replace(...)
 |      S.replace(old, new[, count]) -> str
 |      
 |      Return a copy of S with all occurrences of substring
 |      old replaced by new.  If the optional argument count is
 |      given, only the first count occurrences are replaced.
 |  
 |  rfind(...)
 |      S.rfind(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  rindex(...)
 |      S.rindex(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  rjust(...)
 |      S.rjust(width[, fillchar]) -> str
 |      
 |      Return S right-justified in a string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  rpartition(...)
 |      S.rpartition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, starting at the end of S, and return
 |      the part before it, the separator itself, and the part after it.  If the
 |      separator is not found, return two empty strings and S.
 |  
 |  rsplit(...)
 |      S.rsplit(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string, starting at the end of the string and
 |      working to the front.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified, any whitespace string
 |      is a separator.
 |  
 |  rstrip(...)
 |      S.rstrip([chars]) -> str
 |      
 |      Return a copy of the string S with trailing whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  split(...)
 |      S.split(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified or is None, any
 |      whitespace string is a separator and empty strings are
 |      removed from the result.
 |  
 |  splitlines(...)
 |      S.splitlines([keepends]) -> list of strings
 |      
 |      Return a list of the lines in S, breaking at line boundaries.
 |      Line breaks are not included in the resulting list unless keepends
 |      is given and true.
 |  
 |  startswith(...)
 |      S.startswith(prefix[, start[, end]]) -> bool
 |      
 |      Return True if S starts with the specified prefix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      prefix can also be a tuple of strings to try.
 |  
 |  strip(...)
 |      S.strip([chars]) -> str
 |      
 |      Return a copy of the string S with leading and trailing
 |      whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  swapcase(...)
 |      S.swapcase() -> str
 |      
 |      Return a copy of S with uppercase characters converted to lowercase
 |      and vice versa.
 |  
 |  title(...)
 |      S.title() -> str
 |      
 |      Return a titlecased version of S, i.e. words start with title case
 |      characters, all remaining cased characters have lower case.
 |  
 |  translate(...)
 |      S.translate(table) -> str
 |      
 |      Return a copy of the string S in which each character has been mapped
 |      through the given translation table. The table must implement
 |      lookup/indexing via __getitem__, for instance a dictionary or list,
 |      mapping Unicode ordinals to Unicode ordinals, strings, or None. If
 |      this operation raises LookupError, the character is left untouched.
 |      Characters mapped to None are deleted.
 |  
 |  upper(...)
 |      S.upper() -> str
 |      
 |      Return a copy of S converted to uppercase.
 |  
 |  zfill(...)
 |      S.zfill(width) -> str
 |      
 |      Pad a numeric string S with zeros on the left, to fill a field
 |      of the specified width. The string S is never truncated.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  maketrans(x, y=None, z=None, /)
 |      Return a translation table usable for str.translate().
 |      
 |      If there is only one argument, it must be a dictionary mapping Unicode
 |      ordinals (integers) or characters to Unicode ordinals, strings or None.
 |      Character keys will be then converted to ordinals.
 |      If there are two arguments, they must be strings of equal length, and
 |      in the resulting dictionary, each character in x will be mapped to the
 |      character at the same position in y. If there is a third argument, it
 |      must be a string, whose characters will be mapped to None in the result.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._compat.which,_compat,which,"Python Library Documentation: function which in module shutil

which(cmd, mode=1, path=None)
    Given a command, mode, and a PATH string, return the path which
    conforms to the given mode on the PATH, or None if there is no such
    file.
    
    `mode` defaults to os.F_OK | os.X_OK. `path` defaults to the result
    of os.environ.get(""PATH""), or can be overridden with a custom search
    path.
",function,"('(cmd, mode=1, path=None)',)",psutil,5.4.5,psutil._compat.which,_compat,which,"Python Library Documentation: function which in module shutil

which(cmd, mode=1, path=None)
    Given a command, mode, and a PATH string, return the path which
    conforms to the given mode on the PATH, or None if there is no such
    file.
    
    `mode` defaults to os.F_OK | os.X_OK. `path` defaults to the result
    of os.environ.get(""PATH""), or can be overridden with a custom search
    path.
",function,"('cmd', 'mode', 'path')","(nan, 1, None)","(nan, 'int', 'NoneType')","('arg_info', 'arg_info', 'arg_info')","('(cmd, mode=1, path=None)',)"
psutil,5.4.5,psutil._compat.xrange,_compat,range,"Python Library Documentation: class range in module builtins

class range(object)
 |  range(stop) -> range object
 |  range(start, stop[, step]) -> range object
 |  
 |  Return an object that produces a sequence of integers from start (inclusive)
 |  to stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.
 |  start defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.
 |  These are exactly the valid indices for a list of 4 elements.
 |  When step is given, it specifies the increment (or decrement).
 |  
 |  Methods defined here:
 |  
 |  __bool__(self, /)
 |      self != 0
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __reversed__(...)
 |      Return a reverse iterator.
 |  
 |  count(...)
 |      rangeobject.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      rangeobject.index(value, [start, [stop]]) -> integer -- return index of value.
 |      Raise ValueError if the value is not present.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  start
 |  
 |  step
 |  
 |  stop
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._compat.xrange,_compat,range,"Python Library Documentation: class range in module builtins

class range(object)
 |  range(stop) -> range object
 |  range(start, stop[, step]) -> range object
 |  
 |  Return an object that produces a sequence of integers from start (inclusive)
 |  to stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.
 |  start defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.
 |  These are exactly the valid indices for a list of 4 elements.
 |  When step is given, it specifies the increment (or decrement).
 |  
 |  Methods defined here:
 |  
 |  __bool__(self, /)
 |      self != 0
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __reversed__(...)
 |      Return a reverse iterator.
 |  
 |  count(...)
 |      rangeobject.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      rangeobject.index(value, [start, [stop]]) -> integer -- return index of value.
 |      Raise ValueError if the value is not present.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  start
 |  
 |  step
 |  
 |  stop
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._exceptions.AccessDenied,_exceptions,AccessDenied,"Python Library Documentation: class AccessDenied in module psutil._exceptions

class AccessDenied(Error)
 |  Exception raised when permission to perform an action is denied.
 |  
 |  Method resolution order:
 |      AccessDenied
 |      Error
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, pid=None, name=None, msg=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Error:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __str__ = __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Error:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, pid=None, name=None, msg=None)',)",psutil,5.4.5,psutil._exceptions.AccessDenied,_exceptions,AccessDenied,"Python Library Documentation: class AccessDenied in module psutil._exceptions

class AccessDenied(Error)
 |  Exception raised when permission to perform an action is denied.
 |  
 |  Method resolution order:
 |      AccessDenied
 |      Error
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, pid=None, name=None, msg=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Error:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __str__ = __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Error:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('self', 'pid', 'name', 'msg')","(nan, None, None, None)","(nan, 'NoneType', 'NoneType', 'NoneType')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(self, pid=None, name=None, msg=None)',)"
psutil,5.4.5,psutil._exceptions.Error,_exceptions,Error,"Python Library Documentation: class Error in module psutil._exceptions

class Error(builtins.Exception)
 |  Base exception class. All other psutil exceptions inherit
 |  from this one.
 |  
 |  Method resolution order:
 |      Error
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, msg='')
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __str__ = __repr__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"(""(self, msg='')"",)",psutil,5.4.5,psutil._exceptions.Error,_exceptions,Error,"Python Library Documentation: class Error in module psutil._exceptions

class Error(builtins.Exception)
 |  Base exception class. All other psutil exceptions inherit
 |  from this one.
 |  
 |  Method resolution order:
 |      Error
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, msg='')
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __str__ = __repr__(self)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('self', 'msg')","(nan, '')","(nan, nan)","('arg_info', 'arg_info')","(""(self, msg='')"",)"
psutil,5.4.5,psutil._exceptions.NoSuchProcess,_exceptions,NoSuchProcess,"Python Library Documentation: class NoSuchProcess in module psutil._exceptions

class NoSuchProcess(Error)
 |  Exception raised when a process with a certain PID doesn't
 |  or no longer exists.
 |  
 |  Method resolution order:
 |      NoSuchProcess
 |      Error
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, pid, name=None, msg=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Error:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __str__ = __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Error:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, pid, name=None, msg=None)',)",psutil,5.4.5,psutil._exceptions.NoSuchProcess,_exceptions,NoSuchProcess,"Python Library Documentation: class NoSuchProcess in module psutil._exceptions

class NoSuchProcess(Error)
 |  Exception raised when a process with a certain PID doesn't
 |  or no longer exists.
 |  
 |  Method resolution order:
 |      NoSuchProcess
 |      Error
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, pid, name=None, msg=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Error:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __str__ = __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Error:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('self', 'pid', 'name', 'msg')","(nan, nan, None, None)","(nan, nan, 'NoneType', 'NoneType')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(self, pid, name=None, msg=None)',)"
psutil,5.4.5,psutil._exceptions.TimeoutExpired,_exceptions,TimeoutExpired,"Python Library Documentation: class TimeoutExpired in module psutil._exceptions

class TimeoutExpired(Error)
 |  Raised on Process.wait(timeout) if timeout expires and process
 |  is still alive.
 |  
 |  Method resolution order:
 |      TimeoutExpired
 |      Error
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, seconds, pid=None, name=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Error:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __str__ = __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Error:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, seconds, pid=None, name=None)',)",psutil,5.4.5,psutil._exceptions.TimeoutExpired,_exceptions,TimeoutExpired,"Python Library Documentation: class TimeoutExpired in module psutil._exceptions

class TimeoutExpired(Error)
 |  Raised on Process.wait(timeout) if timeout expires and process
 |  is still alive.
 |  
 |  Method resolution order:
 |      TimeoutExpired
 |      Error
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, seconds, pid=None, name=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Error:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __str__ = __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Error:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('self', 'seconds', 'pid', 'name')","(nan, nan, None, None)","(nan, nan, 'NoneType', 'NoneType')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(self, seconds, pid=None, name=None)',)"
psutil,5.4.5,psutil._exceptions.ZombieProcess,_exceptions,ZombieProcess,"Python Library Documentation: class ZombieProcess in module psutil._exceptions

class ZombieProcess(NoSuchProcess)
 |  Exception raised when querying a zombie process. This is
 |  raised on OSX, BSD and Solaris only, and not always: depending
 |  on the query the OS may be able to succeed anyway.
 |  On Linux all zombie processes are querable (hence this is never
 |  raised). Windows doesn't have zombie processes.
 |  
 |  Method resolution order:
 |      ZombieProcess
 |      NoSuchProcess
 |      Error
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, pid, name=None, ppid=None, msg=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Error:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __str__ = __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Error:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, pid, name=None, ppid=None, msg=None)',)",psutil,5.4.5,psutil._exceptions.ZombieProcess,_exceptions,ZombieProcess,"Python Library Documentation: class ZombieProcess in module psutil._exceptions

class ZombieProcess(NoSuchProcess)
 |  Exception raised when querying a zombie process. This is
 |  raised on OSX, BSD and Solaris only, and not always: depending
 |  on the query the OS may be able to succeed anyway.
 |  On Linux all zombie processes are querable (hence this is never
 |  raised). Windows doesn't have zombie processes.
 |  
 |  Method resolution order:
 |      ZombieProcess
 |      NoSuchProcess
 |      Error
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, pid, name=None, ppid=None, msg=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Error:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __str__ = __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Error:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('self', 'pid', 'name', 'ppid', 'msg')","(nan, nan, None, None, None)","(nan, nan, 'NoneType', 'NoneType', 'NoneType')","('arg_info', 'arg_info', 'arg_info', 'arg_info', 'arg_info')","('(self, pid, name=None, ppid=None, msg=None)',)"
psutil,5.4.5,psutil._psutil_windows.TimeoutAbandoned,_psutil_windows,TimeoutAbandoned,"Python Library Documentation: class TimeoutAbandoned

class TimeoutAbandoned(builtins.Exception)
 |  Common base class for all non-exit exceptions.
 |  
 |  Method resolution order:
 |      TimeoutAbandoned
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Data descriptors defined here:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._psutil_windows.TimeoutAbandoned,_psutil_windows,TimeoutAbandoned,"Python Library Documentation: class TimeoutAbandoned

class TimeoutAbandoned(builtins.Exception)
 |  Common base class for all non-exit exceptions.
 |  
 |  Method resolution order:
 |      TimeoutAbandoned
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Data descriptors defined here:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._psutil_windows.TimeoutExpired,_psutil_windows,TimeoutExpired,"Python Library Documentation: class TimeoutExpired

class TimeoutExpired(builtins.Exception)
 |  Common base class for all non-exit exceptions.
 |  
 |  Method resolution order:
 |      TimeoutExpired
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Data descriptors defined here:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._psutil_windows.TimeoutExpired,_psutil_windows,TimeoutExpired,"Python Library Documentation: class TimeoutExpired

class TimeoutExpired(builtins.Exception)
 |  Common base class for all non-exit exceptions.
 |  
 |  Method resolution order:
 |      TimeoutExpired
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Data descriptors defined here:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __init__(self, /, *args, **kwargs)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._pswindows.AccessDenied,_pswindows,AccessDenied,"Python Library Documentation: class AccessDenied in module psutil._exceptions

class AccessDenied(Error)
 |  Exception raised when permission to perform an action is denied.
 |  
 |  Method resolution order:
 |      AccessDenied
 |      Error
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, pid=None, name=None, msg=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Error:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __str__ = __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Error:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, pid=None, name=None, msg=None)',)",psutil,5.4.5,psutil._pswindows.AccessDenied,_pswindows,AccessDenied,"Python Library Documentation: class AccessDenied in module psutil._exceptions

class AccessDenied(Error)
 |  Exception raised when permission to perform an action is denied.
 |  
 |  Method resolution order:
 |      AccessDenied
 |      Error
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, pid=None, name=None, msg=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Error:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __str__ = __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Error:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('self', 'pid', 'name', 'msg')","(nan, None, None, None)","(nan, 'NoneType', 'NoneType', 'NoneType')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(self, pid=None, name=None, msg=None)',)"
psutil,5.4.5,psutil._pswindows.AddressFamily,_pswindows,AddressFamily,"Python Library Documentation: class AddressFamily in module psutil._pswindows

class AddressFamily(enum.IntEnum)
 |  An enumeration.
 |  
 |  Method resolution order:
 |      AddressFamily
 |      enum.IntEnum
 |      builtins.int
 |      enum.Enum
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  AF_LINK = <AddressFamily.AF_LINK: -1>
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from enum.Enum:
 |  
 |  name
 |      The name of the Enum member.
 |  
 |  value
 |      The value of the Enum member.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from enum.EnumMeta:
 |  
 |  __members__
 |      Returns a mapping of member name->value.
 |      
 |      This mapping lists all enum members, including aliases. Note that this
 |      is a read-only view of the internal mapping.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._pswindows.AddressFamily,_pswindows,AddressFamily,"Python Library Documentation: class AddressFamily in module psutil._pswindows

class AddressFamily(enum.IntEnum)
 |  An enumeration.
 |  
 |  Method resolution order:
 |      AddressFamily
 |      enum.IntEnum
 |      builtins.int
 |      enum.Enum
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  AF_LINK = <AddressFamily.AF_LINK: -1>
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from enum.Enum:
 |  
 |  name
 |      The name of the Enum member.
 |  
 |  value
 |      The value of the Enum member.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from enum.EnumMeta:
 |  
 |  __members__
 |      Returns a mapping of member name->value.
 |      
 |      This mapping lists all enum members, including aliases. Note that this
 |      is a read-only view of the internal mapping.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._pswindows.NoSuchProcess,_pswindows,NoSuchProcess,"Python Library Documentation: class NoSuchProcess in module psutil._exceptions

class NoSuchProcess(Error)
 |  Exception raised when a process with a certain PID doesn't
 |  or no longer exists.
 |  
 |  Method resolution order:
 |      NoSuchProcess
 |      Error
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, pid, name=None, msg=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Error:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __str__ = __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Error:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, pid, name=None, msg=None)',)",psutil,5.4.5,psutil._pswindows.NoSuchProcess,_pswindows,NoSuchProcess,"Python Library Documentation: class NoSuchProcess in module psutil._exceptions

class NoSuchProcess(Error)
 |  Exception raised when a process with a certain PID doesn't
 |  or no longer exists.
 |  
 |  Method resolution order:
 |      NoSuchProcess
 |      Error
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, pid, name=None, msg=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Error:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __str__ = __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Error:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('self', 'pid', 'name', 'msg')","(nan, nan, None, None)","(nan, nan, 'NoneType', 'NoneType')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(self, pid, name=None, msg=None)',)"
psutil,5.4.5,psutil._pswindows.Priority,_pswindows,Priority,"Python Library Documentation: class Priority in module psutil._pswindows

class Priority(enum.IntEnum)
 |  An enumeration.
 |  
 |  Method resolution order:
 |      Priority
 |      enum.IntEnum
 |      builtins.int
 |      enum.Enum
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  ABOVE_NORMAL_PRIORITY_CLASS = <Priority.ABOVE_NORMAL_PRIORITY_CLASS: 3...
 |  
 |  BELOW_NORMAL_PRIORITY_CLASS = <Priority.BELOW_NORMAL_PRIORITY_CLASS: 1...
 |  
 |  HIGH_PRIORITY_CLASS = <Priority.HIGH_PRIORITY_CLASS: 128>
 |  
 |  IDLE_PRIORITY_CLASS = <Priority.IDLE_PRIORITY_CLASS: 64>
 |  
 |  NORMAL_PRIORITY_CLASS = <Priority.NORMAL_PRIORITY_CLASS: 32>
 |  
 |  REALTIME_PRIORITY_CLASS = <Priority.REALTIME_PRIORITY_CLASS: 256>
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from enum.Enum:
 |  
 |  name
 |      The name of the Enum member.
 |  
 |  value
 |      The value of the Enum member.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from enum.EnumMeta:
 |  
 |  __members__
 |      Returns a mapping of member name->value.
 |      
 |      This mapping lists all enum members, including aliases. Note that this
 |      is a read-only view of the internal mapping.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._pswindows.Priority,_pswindows,Priority,"Python Library Documentation: class Priority in module psutil._pswindows

class Priority(enum.IntEnum)
 |  An enumeration.
 |  
 |  Method resolution order:
 |      Priority
 |      enum.IntEnum
 |      builtins.int
 |      enum.Enum
 |      builtins.object
 |  
 |  Data and other attributes defined here:
 |  
 |  ABOVE_NORMAL_PRIORITY_CLASS = <Priority.ABOVE_NORMAL_PRIORITY_CLASS: 3...
 |  
 |  BELOW_NORMAL_PRIORITY_CLASS = <Priority.BELOW_NORMAL_PRIORITY_CLASS: 1...
 |  
 |  HIGH_PRIORITY_CLASS = <Priority.HIGH_PRIORITY_CLASS: 128>
 |  
 |  IDLE_PRIORITY_CLASS = <Priority.IDLE_PRIORITY_CLASS: 64>
 |  
 |  NORMAL_PRIORITY_CLASS = <Priority.NORMAL_PRIORITY_CLASS: 32>
 |  
 |  REALTIME_PRIORITY_CLASS = <Priority.REALTIME_PRIORITY_CLASS: 256>
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from enum.Enum:
 |  
 |  name
 |      The name of the Enum member.
 |  
 |  value
 |      The value of the Enum member.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from enum.EnumMeta:
 |  
 |  __members__
 |      Returns a mapping of member name->value.
 |      
 |      This mapping lists all enum members, including aliases. Note that this
 |      is a read-only view of the internal mapping.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._pswindows.Process,_pswindows,Process,"Python Library Documentation: class Process in module psutil._pswindows

class Process(builtins.object)
 |  Wrapper class around underlying C implementation.
 |  
 |  Methods defined here:
 |  
 |  __init__(self, pid)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  cmdline(self)
 |  
 |  connections(self, kind='inet')
 |  
 |  cpu_affinity_get(self)
 |  
 |  cpu_affinity_set(self, value)
 |  
 |  cpu_times(self)
 |  
 |  create_time(self)
 |  
 |  cwd(self)
 |  
 |  environ(self)
 |  
 |  exe(self)
 |  
 |  io_counters(self)
 |  
 |  ionice_get(self)
 |  
 |  ionice_set(self, value, _)
 |  
 |  kill(self)
 |  
 |  memory_full_info(self)
 |  
 |  memory_info(self)
 |  
 |  memory_maps(self)
 |  
 |  name(self)
 |      Return process name, which on Windows is always the final
 |      part of the executable.
 |  
 |  nice_get(self)
 |  
 |  nice_set(self, value)
 |  
 |  num_ctx_switches(self)
 |  
 |  num_handles(self)
 |  
 |  num_threads(self)
 |  
 |  oneshot_enter(self)
 |  
 |  oneshot_exit(self)
 |  
 |  oneshot_info(self)
 |      Return multiple information about this process as a
 |      raw tuple.
 |  
 |  open_files(self)
 |  
 |  ppid(self)
 |  
 |  resume(self)
 |  
 |  send_signal(self, sig)
 |  
 |  status(self)
 |  
 |  suspend(self)
 |  
 |  threads(self)
 |  
 |  username(self)
 |  
 |  wait(self, timeout=None)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  pid
",class,"('(self, pid)',)",psutil,5.4.5,psutil._pswindows.Process,_pswindows,Process,"Python Library Documentation: class Process in module psutil._pswindows

class Process(builtins.object)
 |  Wrapper class around underlying C implementation.
 |  
 |  Methods defined here:
 |  
 |  __init__(self, pid)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  cmdline(self)
 |  
 |  connections(self, kind='inet')
 |  
 |  cpu_affinity_get(self)
 |  
 |  cpu_affinity_set(self, value)
 |  
 |  cpu_times(self)
 |  
 |  create_time(self)
 |  
 |  cwd(self)
 |  
 |  environ(self)
 |  
 |  exe(self)
 |  
 |  io_counters(self)
 |  
 |  ionice_get(self)
 |  
 |  ionice_set(self, value, _)
 |  
 |  kill(self)
 |  
 |  memory_full_info(self)
 |  
 |  memory_info(self)
 |  
 |  memory_maps(self)
 |  
 |  name(self)
 |      Return process name, which on Windows is always the final
 |      part of the executable.
 |  
 |  nice_get(self)
 |  
 |  nice_set(self, value)
 |  
 |  num_ctx_switches(self)
 |  
 |  num_handles(self)
 |  
 |  num_threads(self)
 |  
 |  oneshot_enter(self)
 |  
 |  oneshot_exit(self)
 |  
 |  oneshot_info(self)
 |      Return multiple information about this process as a
 |      raw tuple.
 |  
 |  open_files(self)
 |  
 |  ppid(self)
 |  
 |  resume(self)
 |  
 |  send_signal(self, sig)
 |  
 |  status(self)
 |  
 |  suspend(self)
 |  
 |  threads(self)
 |  
 |  username(self)
 |  
 |  wait(self, timeout=None)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  pid
",class,"('self', 'pid')","(nan, nan)","(nan, nan)","('arg_info', 'arg_info')","('(self, pid)',)"
psutil,5.4.5,psutil._pswindows.TimeoutExpired,_pswindows,TimeoutExpired,"Python Library Documentation: class TimeoutExpired in module psutil._exceptions

class TimeoutExpired(Error)
 |  Raised on Process.wait(timeout) if timeout expires and process
 |  is still alive.
 |  
 |  Method resolution order:
 |      TimeoutExpired
 |      Error
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, seconds, pid=None, name=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Error:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __str__ = __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Error:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('(self, seconds, pid=None, name=None)',)",psutil,5.4.5,psutil._pswindows.TimeoutExpired,_pswindows,TimeoutExpired,"Python Library Documentation: class TimeoutExpired in module psutil._exceptions

class TimeoutExpired(Error)
 |  Raised on Process.wait(timeout) if timeout expires and process
 |  is still alive.
 |  
 |  Method resolution order:
 |      TimeoutExpired
 |      Error
 |      builtins.Exception
 |      builtins.BaseException
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __init__(self, seconds, pid=None, name=None)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from Error:
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __str__ = __repr__(self)
 |      Return repr(self).
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from Error:
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.Exception:
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.BaseException:
 |  
 |  __delattr__(self, name, /)
 |      Implement delattr(self, name).
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __setattr__(self, name, value, /)
 |      Implement setattr(self, name, value).
 |  
 |  __setstate__(...)
 |  
 |  with_traceback(...)
 |      Exception.with_traceback(tb) --
 |      set self.__traceback__ to tb and return self.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from builtins.BaseException:
 |  
 |  __cause__
 |      exception cause
 |  
 |  __context__
 |      exception context
 |  
 |  __dict__
 |  
 |  __suppress_context__
 |  
 |  __traceback__
 |  
 |  args
",class,"('self', 'seconds', 'pid', 'name')","(nan, nan, None, None)","(nan, nan, 'NoneType', 'NoneType')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(self, seconds, pid=None, name=None)',)"
psutil,5.4.5,psutil._pswindows.WindowsService,_pswindows,WindowsService,"Python Library Documentation: class WindowsService in module psutil._pswindows

class WindowsService(builtins.object)
 |  Represents an installed Windows service.
 |  
 |  Methods defined here:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __init__(self, name, display_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __ne__(self, other)
 |      Return self!=value.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __str__(self)
 |      Return str(self).
 |  
 |  as_dict(self)
 |      Utility method retrieving all the information above as a
 |      dictionary.
 |  
 |  binpath(self)
 |      The fully qualified path to the service binary/exe file as
 |      a string, including command line arguments.
 |  
 |  description(self)
 |      Service long description.
 |  
 |  display_name(self)
 |      The service display name. The value is cached when this class
 |      is instantiated.
 |  
 |  name(self)
 |      The service name. This string is how a service is referenced
 |      and can be passed to win_service_get() to get a new
 |      WindowsService instance.
 |  
 |  pid(self)
 |      The process PID, if any, else None. This can be passed
 |      to Process class to control the service's process.
 |  
 |  start_type(self)
 |      A string which can either be ""automatic"", ""manual"" or
 |      ""disabled"".
 |  
 |  status(self)
 |      Service status as a string.
 |  
 |  username(self)
 |      The name of the user that owns this service.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __hash__ = None
",class,"('(self, name, display_name)',)",psutil,5.4.5,psutil._pswindows.WindowsService,_pswindows,WindowsService,"Python Library Documentation: class WindowsService in module psutil._pswindows

class WindowsService(builtins.object)
 |  Represents an installed Windows service.
 |  
 |  Methods defined here:
 |  
 |  __eq__(self, other)
 |      Return self==value.
 |  
 |  __init__(self, name, display_name)
 |      Initialize self.  See help(type(self)) for accurate signature.
 |  
 |  __ne__(self, other)
 |      Return self!=value.
 |  
 |  __repr__(self)
 |      Return repr(self).
 |  
 |  __str__(self)
 |      Return str(self).
 |  
 |  as_dict(self)
 |      Utility method retrieving all the information above as a
 |      dictionary.
 |  
 |  binpath(self)
 |      The fully qualified path to the service binary/exe file as
 |      a string, including command line arguments.
 |  
 |  description(self)
 |      Service long description.
 |  
 |  display_name(self)
 |      The service display name. The value is cached when this class
 |      is instantiated.
 |  
 |  name(self)
 |      The service name. This string is how a service is referenced
 |      and can be passed to win_service_get() to get a new
 |      WindowsService instance.
 |  
 |  pid(self)
 |      The process PID, if any, else None. This can be passed
 |      to Process class to control the service's process.
 |  
 |  start_type(self)
 |      A string which can either be ""automatic"", ""manual"" or
 |      ""disabled"".
 |  
 |  status(self)
 |      Service status as a string.
 |  
 |  username(self)
 |      The name of the user that owns this service.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  __dict__
 |      dictionary for instance variables (if defined)
 |  
 |  __weakref__
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  __hash__ = None
",class,"('self', 'name', 'display_name')","(nan, nan, nan)","(nan, nan, nan)","('arg_info', 'arg_info', 'arg_info')","('(self, name, display_name)',)"
psutil,5.4.5,psutil._pswindows.boot_time,_pswindows,boot_time,"Python Library Documentation: function boot_time in module psutil._pswindows

boot_time()
    The system boot time expressed in seconds since the epoch.
",function,"('()',)",psutil,5.4.5,psutil._pswindows.boot_time,_pswindows,boot_time,"Python Library Documentation: function boot_time in module psutil._pswindows

boot_time()
    The system boot time expressed in seconds since the epoch.
",function,(),(),(),(),"('()',)"
psutil,5.4.5,psutil._pswindows.cpu_count_logical,_pswindows,cpu_count_logical,"Python Library Documentation: function cpu_count_logical in module psutil._pswindows

cpu_count_logical()
    Return the number of logical CPUs in the system.
",function,"('()',)",psutil,5.4.5,psutil._pswindows.cpu_count_logical,_pswindows,cpu_count_logical,"Python Library Documentation: function cpu_count_logical in module psutil._pswindows

cpu_count_logical()
    Return the number of logical CPUs in the system.
",function,(),(),(),(),"('()',)"
psutil,5.4.5,psutil._pswindows.cpu_count_physical,_pswindows,cpu_count_physical,"Python Library Documentation: function cpu_count_physical in module psutil._pswindows

cpu_count_physical()
    Return the number of physical CPU cores in the system.
",function,"('()',)",psutil,5.4.5,psutil._pswindows.cpu_count_physical,_pswindows,cpu_count_physical,"Python Library Documentation: function cpu_count_physical in module psutil._pswindows

cpu_count_physical()
    Return the number of physical CPU cores in the system.
",function,(),(),(),(),"('()',)"
psutil,5.4.5,psutil._pswindows.cpu_freq,_pswindows,cpu_freq,"Python Library Documentation: function cpu_freq in module psutil._pswindows

cpu_freq()
    Return CPU frequency.
    On Windows per-cpu frequency is not supported.
",function,"('()',)",psutil,5.4.5,psutil._pswindows.cpu_freq,_pswindows,cpu_freq,"Python Library Documentation: function cpu_freq in module psutil._pswindows

cpu_freq()
    Return CPU frequency.
    On Windows per-cpu frequency is not supported.
",function,(),(),(),(),"('()',)"
psutil,5.4.5,psutil._pswindows.cpu_stats,_pswindows,cpu_stats,"Python Library Documentation: function cpu_stats in module psutil._pswindows

cpu_stats()
    Return CPU statistics.
",function,"('()',)",psutil,5.4.5,psutil._pswindows.cpu_stats,_pswindows,cpu_stats,"Python Library Documentation: function cpu_stats in module psutil._pswindows

cpu_stats()
    Return CPU statistics.
",function,(),(),(),(),"('()',)"
psutil,5.4.5,psutil._pswindows.cpu_times,_pswindows,cpu_times,"Python Library Documentation: function cpu_times in module psutil._pswindows

cpu_times()
    Return system CPU times as a named tuple.
",function,"('()',)",psutil,5.4.5,psutil._pswindows.cpu_times,_pswindows,cpu_times,"Python Library Documentation: function cpu_times in module psutil._pswindows

cpu_times()
    Return system CPU times as a named tuple.
",function,(),(),(),(),"('()',)"
psutil,5.4.5,psutil._pswindows.disk_partitions,_pswindows,disk_partitions,"Python Library Documentation: function disk_partitions in module psutil._pswindows

disk_partitions(all)
    Return disk partitions.
",function,"('(all)',)",psutil,5.4.5,psutil._pswindows.disk_partitions,_pswindows,disk_partitions,"Python Library Documentation: function disk_partitions in module psutil._pswindows

disk_partitions(all)
    Return disk partitions.
",function,"('all',)","(nan,)","(nan,)","('arg_info',)","('(all)',)"
psutil,5.4.5,psutil._pswindows.disk_usage,_pswindows,disk_usage,"Python Library Documentation: function disk_usage in module psutil._pswindows

disk_usage(path)
    Return disk usage associated with path.
",function,"('(path)',)",psutil,5.4.5,psutil._pswindows.disk_usage,_pswindows,disk_usage,"Python Library Documentation: function disk_usage in module psutil._pswindows

disk_usage(path)
    Return disk usage associated with path.
",function,"('path',)","(nan,)","(nan,)","('arg_info',)","('(path)',)"
psutil,5.4.5,psutil._pswindows.isfile_strict,_pswindows,isfile_strict,"Python Library Documentation: function isfile_strict in module psutil._common

isfile_strict(path)
    Same as os.path.isfile() but does not swallow EACCES / EPERM
    exceptions, see:
    http://mail.python.org/pipermail/python-dev/2012-June/120787.html
",function,"('(path)',)",psutil,5.4.5,psutil._pswindows.isfile_strict,_pswindows,isfile_strict,"Python Library Documentation: function isfile_strict in module psutil._common

isfile_strict(path)
    Same as os.path.isfile() but does not swallow EACCES / EPERM
    exceptions, see:
    http://mail.python.org/pipermail/python-dev/2012-June/120787.html
",function,"('path',)","(nan,)","(nan,)","('arg_info',)","('(path)',)"
psutil,5.4.5,psutil._pswindows.long,_pswindows,int,"Python Library Documentation: class int in module builtins

class int(object)
 |  int(x=0) -> integer
 |  int(x, base=10) -> integer
 |  
 |  Convert a number or string to an integer, or return 0 if no arguments
 |  are given.  If x is a number, return x.__int__().  For floating point
 |  numbers, this truncates towards zero.
 |  
 |  If x is not a number or if base is given, then x must be a string,
 |  bytes, or bytearray instance representing an integer literal in the
 |  given base.  The literal can be preceded by '+' or '-' and be surrounded
 |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
 |  Base 0 means to interpret the base from the string as an integer literal.
 |  >>> int('0b100', base=0)
 |  4
 |  
 |  Methods defined here:
 |  
 |  __abs__(self, /)
 |      abs(self)
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __and__(self, value, /)
 |      Return self&value.
 |  
 |  __bool__(self, /)
 |      self != 0
 |  
 |  __ceil__(...)
 |      Ceiling of an Integral returns itself.
 |  
 |  __divmod__(self, value, /)
 |      Return divmod(self, value).
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __float__(self, /)
 |      float(self)
 |  
 |  __floor__(...)
 |      Flooring an Integral returns itself.
 |  
 |  __floordiv__(self, value, /)
 |      Return self//value.
 |  
 |  __format__(...)
 |      default object formatter
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getnewargs__(...)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __index__(self, /)
 |      Return self converted to an integer, if self is suitable for use as an index into a list.
 |  
 |  __int__(self, /)
 |      int(self)
 |  
 |  __invert__(self, /)
 |      ~self
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __lshift__(self, value, /)
 |      Return self<<value.
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __neg__(self, /)
 |      -self
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __or__(self, value, /)
 |      Return self|value.
 |  
 |  __pos__(self, /)
 |      +self
 |  
 |  __pow__(self, value, mod=None, /)
 |      Return pow(self, value, mod).
 |  
 |  __radd__(self, value, /)
 |      Return value+self.
 |  
 |  __rand__(self, value, /)
 |      Return value&self.
 |  
 |  __rdivmod__(self, value, /)
 |      Return divmod(value, self).
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rfloordiv__(self, value, /)
 |      Return value//self.
 |  
 |  __rlshift__(self, value, /)
 |      Return value<<self.
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return value*self.
 |  
 |  __ror__(self, value, /)
 |      Return value|self.
 |  
 |  __round__(...)
 |      Rounding an Integral returns itself.
 |      Rounding with an ndigits argument also returns an integer.
 |  
 |  __rpow__(self, value, mod=None, /)
 |      Return pow(value, self, mod).
 |  
 |  __rrshift__(self, value, /)
 |      Return value>>self.
 |  
 |  __rshift__(self, value, /)
 |      Return self>>value.
 |  
 |  __rsub__(self, value, /)
 |      Return value-self.
 |  
 |  __rtruediv__(self, value, /)
 |      Return value/self.
 |  
 |  __rxor__(self, value, /)
 |      Return value^self.
 |  
 |  __sizeof__(...)
 |      Returns size in memory, in bytes
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  __sub__(self, value, /)
 |      Return self-value.
 |  
 |  __truediv__(self, value, /)
 |      Return self/value.
 |  
 |  __trunc__(...)
 |      Truncating an Integral returns itself.
 |  
 |  __xor__(self, value, /)
 |      Return self^value.
 |  
 |  bit_length(...)
 |      int.bit_length() -> int
 |      
 |      Number of bits necessary to represent self in binary.
 |      >>> bin(37)
 |      '0b100101'
 |      >>> (37).bit_length()
 |      6
 |  
 |  conjugate(...)
 |      Returns self, the complex conjugate of any int.
 |  
 |  from_bytes(...) from builtins.type
 |      int.from_bytes(bytes, byteorder, *, signed=False) -> int
 |      
 |      Return the integer represented by the given array of bytes.
 |      
 |      The bytes argument must be a bytes-like object (e.g. bytes or bytearray).
 |      
 |      The byteorder argument determines the byte order used to represent the
 |      integer.  If byteorder is 'big', the most significant byte is at the
 |      beginning of the byte array.  If byteorder is 'little', the most
 |      significant byte is at the end of the byte array.  To request the native
 |      byte order of the host system, use `sys.byteorder' as the byte order value.
 |      
 |      The signed keyword-only argument indicates whether two's complement is
 |      used to represent the integer.
 |  
 |  to_bytes(...)
 |      int.to_bytes(length, byteorder, *, signed=False) -> bytes
 |      
 |      Return an array of bytes representing an integer.
 |      
 |      The integer is represented using length bytes.  An OverflowError is
 |      raised if the integer is not representable with the given number of
 |      bytes.
 |      
 |      The byteorder argument determines the byte order used to represent the
 |      integer.  If byteorder is 'big', the most significant byte is at the
 |      beginning of the byte array.  If byteorder is 'little', the most
 |      significant byte is at the end of the byte array.  To request the native
 |      byte order of the host system, use `sys.byteorder' as the byte order value.
 |      
 |      The signed keyword-only argument determines whether two's complement is
 |      used to represent the integer.  If signed is False and a negative integer
 |      is given, an OverflowError is raised.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  denominator
 |      the denominator of a rational number in lowest terms
 |  
 |  imag
 |      the imaginary part of a complex number
 |  
 |  numerator
 |      the numerator of a rational number in lowest terms
 |  
 |  real
 |      the real part of a complex number
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._pswindows.long,_pswindows,int,"Python Library Documentation: class int in module builtins

class int(object)
 |  int(x=0) -> integer
 |  int(x, base=10) -> integer
 |  
 |  Convert a number or string to an integer, or return 0 if no arguments
 |  are given.  If x is a number, return x.__int__().  For floating point
 |  numbers, this truncates towards zero.
 |  
 |  If x is not a number or if base is given, then x must be a string,
 |  bytes, or bytearray instance representing an integer literal in the
 |  given base.  The literal can be preceded by '+' or '-' and be surrounded
 |  by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
 |  Base 0 means to interpret the base from the string as an integer literal.
 |  >>> int('0b100', base=0)
 |  4
 |  
 |  Methods defined here:
 |  
 |  __abs__(self, /)
 |      abs(self)
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __and__(self, value, /)
 |      Return self&value.
 |  
 |  __bool__(self, /)
 |      self != 0
 |  
 |  __ceil__(...)
 |      Ceiling of an Integral returns itself.
 |  
 |  __divmod__(self, value, /)
 |      Return divmod(self, value).
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __float__(self, /)
 |      float(self)
 |  
 |  __floor__(...)
 |      Flooring an Integral returns itself.
 |  
 |  __floordiv__(self, value, /)
 |      Return self//value.
 |  
 |  __format__(...)
 |      default object formatter
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getnewargs__(...)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __index__(self, /)
 |      Return self converted to an integer, if self is suitable for use as an index into a list.
 |  
 |  __int__(self, /)
 |      int(self)
 |  
 |  __invert__(self, /)
 |      ~self
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __lshift__(self, value, /)
 |      Return self<<value.
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __neg__(self, /)
 |      -self
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __or__(self, value, /)
 |      Return self|value.
 |  
 |  __pos__(self, /)
 |      +self
 |  
 |  __pow__(self, value, mod=None, /)
 |      Return pow(self, value, mod).
 |  
 |  __radd__(self, value, /)
 |      Return value+self.
 |  
 |  __rand__(self, value, /)
 |      Return value&self.
 |  
 |  __rdivmod__(self, value, /)
 |      Return divmod(value, self).
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rfloordiv__(self, value, /)
 |      Return value//self.
 |  
 |  __rlshift__(self, value, /)
 |      Return value<<self.
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return value*self.
 |  
 |  __ror__(self, value, /)
 |      Return value|self.
 |  
 |  __round__(...)
 |      Rounding an Integral returns itself.
 |      Rounding with an ndigits argument also returns an integer.
 |  
 |  __rpow__(self, value, mod=None, /)
 |      Return pow(value, self, mod).
 |  
 |  __rrshift__(self, value, /)
 |      Return value>>self.
 |  
 |  __rshift__(self, value, /)
 |      Return self>>value.
 |  
 |  __rsub__(self, value, /)
 |      Return value-self.
 |  
 |  __rtruediv__(self, value, /)
 |      Return value/self.
 |  
 |  __rxor__(self, value, /)
 |      Return value^self.
 |  
 |  __sizeof__(...)
 |      Returns size in memory, in bytes
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  __sub__(self, value, /)
 |      Return self-value.
 |  
 |  __truediv__(self, value, /)
 |      Return self/value.
 |  
 |  __trunc__(...)
 |      Truncating an Integral returns itself.
 |  
 |  __xor__(self, value, /)
 |      Return self^value.
 |  
 |  bit_length(...)
 |      int.bit_length() -> int
 |      
 |      Number of bits necessary to represent self in binary.
 |      >>> bin(37)
 |      '0b100101'
 |      >>> (37).bit_length()
 |      6
 |  
 |  conjugate(...)
 |      Returns self, the complex conjugate of any int.
 |  
 |  from_bytes(...) from builtins.type
 |      int.from_bytes(bytes, byteorder, *, signed=False) -> int
 |      
 |      Return the integer represented by the given array of bytes.
 |      
 |      The bytes argument must be a bytes-like object (e.g. bytes or bytearray).
 |      
 |      The byteorder argument determines the byte order used to represent the
 |      integer.  If byteorder is 'big', the most significant byte is at the
 |      beginning of the byte array.  If byteorder is 'little', the most
 |      significant byte is at the end of the byte array.  To request the native
 |      byte order of the host system, use `sys.byteorder' as the byte order value.
 |      
 |      The signed keyword-only argument indicates whether two's complement is
 |      used to represent the integer.
 |  
 |  to_bytes(...)
 |      int.to_bytes(length, byteorder, *, signed=False) -> bytes
 |      
 |      Return an array of bytes representing an integer.
 |      
 |      The integer is represented using length bytes.  An OverflowError is
 |      raised if the integer is not representable with the given number of
 |      bytes.
 |      
 |      The byteorder argument determines the byte order used to represent the
 |      integer.  If byteorder is 'big', the most significant byte is at the
 |      beginning of the byte array.  If byteorder is 'little', the most
 |      significant byte is at the end of the byte array.  To request the native
 |      byte order of the host system, use `sys.byteorder' as the byte order value.
 |      
 |      The signed keyword-only argument determines whether two's complement is
 |      used to represent the integer.  If signed is False and a negative integer
 |      is given, an OverflowError is raised.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  denominator
 |      the denominator of a rational number in lowest terms
 |  
 |  imag
 |      the imaginary part of a complex number
 |  
 |  numerator
 |      the numerator of a rational number in lowest terms
 |  
 |  real
 |      the real part of a complex number
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._pswindows.lru_cache,_pswindows,lru_cache,"Python Library Documentation: function lru_cache in module functools

lru_cache(maxsize=128, typed=False)
    Least-recently-used cache decorator.
    
    If *maxsize* is set to None, the LRU features are disabled and the cache
    can grow without bound.
    
    If *typed* is True, arguments of different types will be cached separately.
    For example, f(3.0) and f(3) will be treated as distinct calls with
    distinct results.
    
    Arguments to the cached function must be hashable.
    
    View the cache statistics named tuple (hits, misses, maxsize, currsize)
    with f.cache_info().  Clear the cache and statistics with f.cache_clear().
    Access the underlying function with f.__wrapped__.
    
    See:  http://en.wikipedia.org/wiki/Cache_algorithms#Least_Recently_Used
",function,"('(maxsize=128, typed=False)',)",psutil,5.4.5,psutil._pswindows.lru_cache,_pswindows,lru_cache,"Python Library Documentation: function lru_cache in module functools

lru_cache(maxsize=128, typed=False)
    Least-recently-used cache decorator.
    
    If *maxsize* is set to None, the LRU features are disabled and the cache
    can grow without bound.
    
    If *typed* is True, arguments of different types will be cached separately.
    For example, f(3.0) and f(3) will be treated as distinct calls with
    distinct results.
    
    Arguments to the cached function must be hashable.
    
    View the cache statistics named tuple (hits, misses, maxsize, currsize)
    with f.cache_info().  Clear the cache and statistics with f.cache_clear().
    Access the underlying function with f.__wrapped__.
    
    See:  http://en.wikipedia.org/wiki/Cache_algorithms#Least_Recently_Used
",function,"('maxsize', 'typed')","(128, False)","('int', 'bool')","('arg_info', 'arg_info')","('(maxsize=128, typed=False)',)"
psutil,5.4.5,psutil._pswindows.memoize_when_activated,_pswindows,memoize_when_activated,"Python Library Documentation: function memoize_when_activated in module psutil._common

memoize_when_activated(fun)
    A memoize decorator which is disabled by default. It can be
    activated and deactivated on request.
    For efficiency reasons it can be used only against class methods
    accepting no arguments.
    
    >>> class Foo:
    ...     @memoize
    ...     def foo()
    ...         print(1)
    ...
    >>> f = Foo()
    >>> # deactivated (default)
    >>> foo()
    1
    >>> foo()
    1
    >>>
    >>> # activated
    >>> foo.cache_activate()
    >>> foo()
    1
    >>> foo()
    >>> foo()
    >>>
",function,"('(fun)',)",psutil,5.4.5,psutil._pswindows.memoize_when_activated,_pswindows,memoize_when_activated,"Python Library Documentation: function memoize_when_activated in module psutil._common

memoize_when_activated(fun)
    A memoize decorator which is disabled by default. It can be
    activated and deactivated on request.
    For efficiency reasons it can be used only against class methods
    accepting no arguments.
    
    >>> class Foo:
    ...     @memoize
    ...     def foo()
    ...         print(1)
    ...
    >>> f = Foo()
    >>> # deactivated (default)
    >>> foo()
    1
    >>> foo()
    1
    >>>
    >>> # activated
    >>> foo.cache_activate()
    >>> foo()
    1
    >>> foo()
    >>> foo()
    >>>
",function,"('fun',)","(nan,)","(nan,)","('arg_info',)","('(fun)',)"
psutil,5.4.5,psutil._pswindows.namedtuple,_pswindows,namedtuple,"Python Library Documentation: function namedtuple in module collections

namedtuple(typename, field_names, *, verbose=False, rename=False, module=None)
    Returns a new subclass of tuple with named fields.
    
    >>> Point = namedtuple('Point', ['x', 'y'])
    >>> Point.__doc__                   # docstring for the new class
    'Point(x, y)'
    >>> p = Point(11, y=22)             # instantiate with positional args or keywords
    >>> p[0] + p[1]                     # indexable like a plain tuple
    33
    >>> x, y = p                        # unpack like a regular tuple
    >>> x, y
    (11, 22)
    >>> p.x + p.y                       # fields also accessible by name
    33
    >>> d = p._asdict()                 # convert to a dictionary
    >>> d['x']
    11
    >>> Point(**d)                      # convert from a dictionary
    Point(x=11, y=22)
    >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields
    Point(x=100, y=22)
",function,"('(typename, field_names, *, verbose=False, rename=False, module=None)',)",psutil,5.4.5,psutil._pswindows.namedtuple,_pswindows,namedtuple,"Python Library Documentation: function namedtuple in module collections

namedtuple(typename, field_names, *, verbose=False, rename=False, module=None)
    Returns a new subclass of tuple with named fields.
    
    >>> Point = namedtuple('Point', ['x', 'y'])
    >>> Point.__doc__                   # docstring for the new class
    'Point(x, y)'
    >>> p = Point(11, y=22)             # instantiate with positional args or keywords
    >>> p[0] + p[1]                     # indexable like a plain tuple
    33
    >>> x, y = p                        # unpack like a regular tuple
    >>> x, y
    (11, 22)
    >>> p.x + p.y                       # fields also accessible by name
    33
    >>> d = p._asdict()                 # convert to a dictionary
    >>> d['x']
    11
    >>> Point(**d)                      # convert from a dictionary
    Point(x=11, y=22)
    >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields
    Point(x=100, y=22)
",function,"('typename', 'field_names')","(nan, nan)","(nan, nan)","('arg_info', 'arg_info')","('(typename, field_names, *, verbose=False, rename=False, module=None)',)"
psutil,5.4.5,psutil._pswindows.net_connections,_pswindows,net_connections,"Python Library Documentation: function net_connections in module psutil._pswindows

net_connections(kind, _pid=-1)
    Return socket connections.  If pid == -1 return system-wide
    connections (as opposed to connections opened by one process only).
",function,"('(kind, _pid=-1)',)",psutil,5.4.5,psutil._pswindows.net_connections,_pswindows,net_connections,"Python Library Documentation: function net_connections in module psutil._pswindows

net_connections(kind, _pid=-1)
    Return socket connections.  If pid == -1 return system-wide
    connections (as opposed to connections opened by one process only).
",function,"('kind', '_pid')","(nan, -1)","(nan, 'int')","('arg_info', 'arg_info')","('(kind, _pid=-1)',)"
psutil,5.4.5,psutil._pswindows.net_if_addrs,_pswindows,net_if_addrs,"Python Library Documentation: function net_if_addrs in module psutil._pswindows

net_if_addrs()
    Return the addresses associated to each NIC.
",function,"('()',)",psutil,5.4.5,psutil._pswindows.net_if_addrs,_pswindows,net_if_addrs,"Python Library Documentation: function net_if_addrs in module psutil._pswindows

net_if_addrs()
    Return the addresses associated to each NIC.
",function,(),(),(),(),"('()',)"
psutil,5.4.5,psutil._pswindows.net_if_stats,_pswindows,net_if_stats,"Python Library Documentation: function net_if_stats in module psutil._pswindows

net_if_stats()
    Get NIC stats (isup, duplex, speed, mtu).
",function,"('()',)",psutil,5.4.5,psutil._pswindows.net_if_stats,_pswindows,net_if_stats,"Python Library Documentation: function net_if_stats in module psutil._pswindows

net_if_stats()
    Get NIC stats (isup, duplex, speed, mtu).
",function,(),(),(),(),"('()',)"
psutil,5.4.5,psutil._pswindows.net_io_counters,_pswindows,net_io_counters,"Python Library Documentation: function net_io_counters in module psutil._pswindows

net_io_counters()
    Return network I/O statistics for every network interface
    installed on the system as a dict of raw tuples.
",function,"('()',)",psutil,5.4.5,psutil._pswindows.net_io_counters,_pswindows,net_io_counters,"Python Library Documentation: function net_io_counters in module psutil._pswindows

net_io_counters()
    Return network I/O statistics for every network interface
    installed on the system as a dict of raw tuples.
",function,(),(),(),(),"('()',)"
psutil,5.4.5,psutil._pswindows.parse_environ_block,_pswindows,parse_environ_block,"Python Library Documentation: function parse_environ_block in module psutil._common

parse_environ_block(data)
    Parse a C environ block of environment variables into a dictionary.
",function,"('(data)',)",psutil,5.4.5,psutil._pswindows.parse_environ_block,_pswindows,parse_environ_block,"Python Library Documentation: function parse_environ_block in module psutil._common

parse_environ_block(data)
    Parse a C environ block of environment variables into a dictionary.
",function,"('data',)","(nan,)","(nan,)","('arg_info',)","('(data)',)"
psutil,5.4.5,psutil._pswindows.per_cpu_times,_pswindows,per_cpu_times,"Python Library Documentation: function per_cpu_times in module psutil._pswindows

per_cpu_times()
    Return system per-CPU times as a list of named tuples.
",function,"('()',)",psutil,5.4.5,psutil._pswindows.per_cpu_times,_pswindows,per_cpu_times,"Python Library Documentation: function per_cpu_times in module psutil._pswindows

per_cpu_times()
    Return system per-CPU times as a list of named tuples.
",function,(),(),(),(),"('()',)"
psutil,5.4.5,psutil._pswindows.pfullmem,_pswindows,pfullmem,"Python Library Documentation: class pfullmem in module psutil._pswindows

class pfullmem(builtins.tuple)
 |  pfullmem(rss, vms, num_page_faults, peak_wset, wset, peak_paged_pool, paged_pool, peak_nonpaged_pool, nonpaged_pool, pagefile, peak_pagefile, private, uss)
 |  
 |  Method resolution order:
 |      pfullmem
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new pfullmem object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new pfullmem object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, rss, vms, num_page_faults, peak_wset, wset, peak_paged_pool, paged_pool, peak_nonpaged_pool, nonpaged_pool, pagefile, peak_pagefile, private, uss)
 |      Create new instance of pfullmem(rss, vms, num_page_faults, peak_wset, wset, peak_paged_pool, paged_pool, peak_nonpaged_pool, nonpaged_pool, pagefile, peak_pagefile, private, uss)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  rss
 |      Alias for field number 0
 |  
 |  vms
 |      Alias for field number 1
 |  
 |  num_page_faults
 |      Alias for field number 2
 |  
 |  peak_wset
 |      Alias for field number 3
 |  
 |  wset
 |      Alias for field number 4
 |  
 |  peak_paged_pool
 |      Alias for field number 5
 |  
 |  paged_pool
 |      Alias for field number 6
 |  
 |  peak_nonpaged_pool
 |      Alias for field number 7
 |  
 |  nonpaged_pool
 |      Alias for field number 8
 |  
 |  pagefile
 |      Alias for field number 9
 |  
 |  peak_pagefile
 |      Alias for field number 10
 |  
 |  private
 |      Alias for field number 11
 |  
 |  uss
 |      Alias for field number 12
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('rss', 'vms', 'num_page_faults', 'peak_wset', 'wset', 'peak...
 |  
 |  _source = ""from builtins import property as _property, tupl...temgette...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._pswindows.pfullmem,_pswindows,pfullmem,"Python Library Documentation: class pfullmem in module psutil._pswindows

class pfullmem(builtins.tuple)
 |  pfullmem(rss, vms, num_page_faults, peak_wset, wset, peak_paged_pool, paged_pool, peak_nonpaged_pool, nonpaged_pool, pagefile, peak_pagefile, private, uss)
 |  
 |  Method resolution order:
 |      pfullmem
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new pfullmem object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new pfullmem object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, rss, vms, num_page_faults, peak_wset, wset, peak_paged_pool, paged_pool, peak_nonpaged_pool, nonpaged_pool, pagefile, peak_pagefile, private, uss)
 |      Create new instance of pfullmem(rss, vms, num_page_faults, peak_wset, wset, peak_paged_pool, paged_pool, peak_nonpaged_pool, nonpaged_pool, pagefile, peak_pagefile, private, uss)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  rss
 |      Alias for field number 0
 |  
 |  vms
 |      Alias for field number 1
 |  
 |  num_page_faults
 |      Alias for field number 2
 |  
 |  peak_wset
 |      Alias for field number 3
 |  
 |  wset
 |      Alias for field number 4
 |  
 |  peak_paged_pool
 |      Alias for field number 5
 |  
 |  paged_pool
 |      Alias for field number 6
 |  
 |  peak_nonpaged_pool
 |      Alias for field number 7
 |  
 |  nonpaged_pool
 |      Alias for field number 8
 |  
 |  pagefile
 |      Alias for field number 9
 |  
 |  peak_pagefile
 |      Alias for field number 10
 |  
 |  private
 |      Alias for field number 11
 |  
 |  uss
 |      Alias for field number 12
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('rss', 'vms', 'num_page_faults', 'peak_wset', 'wset', 'peak...
 |  
 |  _source = ""from builtins import property as _property, tupl...temgette...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._pswindows.pfullmem._make,_pswindows.pfullmem,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new pfullmem object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)",psutil,5.4.5,psutil._pswindows.pfullmem._make,_pswindows.pfullmem,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new pfullmem object from a sequence or iterable
",method,"('cls', 'iterable', 'new', 'len')","(nan, nan, <built-in method __new__ of type object at 0x00000000589BC0D0>, <built-in function len>)","(nan, nan, 'builtin_function_or_method', 'builtin_function_or_method')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)"
psutil,5.4.5,psutil._pswindows.pio,_pswindows,pio,"Python Library Documentation: class pio in module psutil._pswindows

class pio(builtins.tuple)
 |  pio(read_count, write_count, read_bytes, write_bytes, other_count, other_bytes)
 |  
 |  Method resolution order:
 |      pio
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new pio object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new pio object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, read_count, write_count, read_bytes, write_bytes, other_count, other_bytes)
 |      Create new instance of pio(read_count, write_count, read_bytes, write_bytes, other_count, other_bytes)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  read_count
 |      Alias for field number 0
 |  
 |  write_count
 |      Alias for field number 1
 |  
 |  read_bytes
 |      Alias for field number 2
 |  
 |  write_bytes
 |      Alias for field number 3
 |  
 |  other_count
 |      Alias for field number 4
 |  
 |  other_bytes
 |      Alias for field number 5
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('read_count', 'write_count', 'read_bytes', 'write_bytes', '...
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._pswindows.pio,_pswindows,pio,"Python Library Documentation: class pio in module psutil._pswindows

class pio(builtins.tuple)
 |  pio(read_count, write_count, read_bytes, write_bytes, other_count, other_bytes)
 |  
 |  Method resolution order:
 |      pio
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new pio object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new pio object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, read_count, write_count, read_bytes, write_bytes, other_count, other_bytes)
 |      Create new instance of pio(read_count, write_count, read_bytes, write_bytes, other_count, other_bytes)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  read_count
 |      Alias for field number 0
 |  
 |  write_count
 |      Alias for field number 1
 |  
 |  read_bytes
 |      Alias for field number 2
 |  
 |  write_bytes
 |      Alias for field number 3
 |  
 |  other_count
 |      Alias for field number 4
 |  
 |  other_bytes
 |      Alias for field number 5
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('read_count', 'write_count', 'read_bytes', 'write_bytes', '...
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._pswindows.pio._make,_pswindows.pio,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new pio object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)",psutil,5.4.5,psutil._pswindows.pio._make,_pswindows.pio,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new pio object from a sequence or iterable
",method,"('cls', 'iterable', 'new', 'len')","(nan, nan, <built-in method __new__ of type object at 0x00000000589BC0D0>, <built-in function len>)","(nan, nan, 'builtin_function_or_method', 'builtin_function_or_method')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)"
psutil,5.4.5,psutil._pswindows.pmem,_pswindows,pmem,"Python Library Documentation: class pmem in module psutil._pswindows

class pmem(builtins.tuple)
 |  pmem(rss, vms, num_page_faults, peak_wset, wset, peak_paged_pool, paged_pool, peak_nonpaged_pool, nonpaged_pool, pagefile, peak_pagefile, private)
 |  
 |  Method resolution order:
 |      pmem
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new pmem object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new pmem object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, rss, vms, num_page_faults, peak_wset, wset, peak_paged_pool, paged_pool, peak_nonpaged_pool, nonpaged_pool, pagefile, peak_pagefile, private)
 |      Create new instance of pmem(rss, vms, num_page_faults, peak_wset, wset, peak_paged_pool, paged_pool, peak_nonpaged_pool, nonpaged_pool, pagefile, peak_pagefile, private)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  rss
 |      Alias for field number 0
 |  
 |  vms
 |      Alias for field number 1
 |  
 |  num_page_faults
 |      Alias for field number 2
 |  
 |  peak_wset
 |      Alias for field number 3
 |  
 |  wset
 |      Alias for field number 4
 |  
 |  peak_paged_pool
 |      Alias for field number 5
 |  
 |  paged_pool
 |      Alias for field number 6
 |  
 |  peak_nonpaged_pool
 |      Alias for field number 7
 |  
 |  nonpaged_pool
 |      Alias for field number 8
 |  
 |  pagefile
 |      Alias for field number 9
 |  
 |  peak_pagefile
 |      Alias for field number 10
 |  
 |  private
 |      Alias for field number 11
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('rss', 'vms', 'num_page_faults', 'peak_wset', 'wset', 'peak...
 |  
 |  _source = ""from builtins import property as _property, tupl...temgette...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._pswindows.pmem,_pswindows,pmem,"Python Library Documentation: class pmem in module psutil._pswindows

class pmem(builtins.tuple)
 |  pmem(rss, vms, num_page_faults, peak_wset, wset, peak_paged_pool, paged_pool, peak_nonpaged_pool, nonpaged_pool, pagefile, peak_pagefile, private)
 |  
 |  Method resolution order:
 |      pmem
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new pmem object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new pmem object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, rss, vms, num_page_faults, peak_wset, wset, peak_paged_pool, paged_pool, peak_nonpaged_pool, nonpaged_pool, pagefile, peak_pagefile, private)
 |      Create new instance of pmem(rss, vms, num_page_faults, peak_wset, wset, peak_paged_pool, paged_pool, peak_nonpaged_pool, nonpaged_pool, pagefile, peak_pagefile, private)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  rss
 |      Alias for field number 0
 |  
 |  vms
 |      Alias for field number 1
 |  
 |  num_page_faults
 |      Alias for field number 2
 |  
 |  peak_wset
 |      Alias for field number 3
 |  
 |  wset
 |      Alias for field number 4
 |  
 |  peak_paged_pool
 |      Alias for field number 5
 |  
 |  paged_pool
 |      Alias for field number 6
 |  
 |  peak_nonpaged_pool
 |      Alias for field number 7
 |  
 |  nonpaged_pool
 |      Alias for field number 8
 |  
 |  pagefile
 |      Alias for field number 9
 |  
 |  peak_pagefile
 |      Alias for field number 10
 |  
 |  private
 |      Alias for field number 11
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('rss', 'vms', 'num_page_faults', 'peak_wset', 'wset', 'peak...
 |  
 |  _source = ""from builtins import property as _property, tupl...temgette...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._pswindows.pmem._make,_pswindows.pmem,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new pmem object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)",psutil,5.4.5,psutil._pswindows.pmem._make,_pswindows.pmem,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new pmem object from a sequence or iterable
",method,"('cls', 'iterable', 'new', 'len')","(nan, nan, <built-in method __new__ of type object at 0x00000000589BC0D0>, <built-in function len>)","(nan, nan, 'builtin_function_or_method', 'builtin_function_or_method')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)"
psutil,5.4.5,psutil._pswindows.pmmap_ext,_pswindows,pmmap_ext,"Python Library Documentation: class pmmap_ext in module psutil._pswindows

class pmmap_ext(builtins.tuple)
 |  pmmap_ext(addr, perms, path, rss)
 |  
 |  Method resolution order:
 |      pmmap_ext
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new pmmap_ext object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new pmmap_ext object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, addr, perms, path, rss)
 |      Create new instance of pmmap_ext(addr, perms, path, rss)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  addr
 |      Alias for field number 0
 |  
 |  perms
 |      Alias for field number 1
 |  
 |  path
 |      Alias for field number 2
 |  
 |  rss
 |      Alias for field number 3
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('addr', 'perms', 'path', 'rss')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._pswindows.pmmap_ext,_pswindows,pmmap_ext,"Python Library Documentation: class pmmap_ext in module psutil._pswindows

class pmmap_ext(builtins.tuple)
 |  pmmap_ext(addr, perms, path, rss)
 |  
 |  Method resolution order:
 |      pmmap_ext
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new pmmap_ext object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new pmmap_ext object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, addr, perms, path, rss)
 |      Create new instance of pmmap_ext(addr, perms, path, rss)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  addr
 |      Alias for field number 0
 |  
 |  perms
 |      Alias for field number 1
 |  
 |  path
 |      Alias for field number 2
 |  
 |  rss
 |      Alias for field number 3
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('addr', 'perms', 'path', 'rss')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._pswindows.pmmap_ext._make,_pswindows.pmmap_ext,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new pmmap_ext object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)",psutil,5.4.5,psutil._pswindows.pmmap_ext._make,_pswindows.pmmap_ext,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new pmmap_ext object from a sequence or iterable
",method,"('cls', 'iterable', 'new', 'len')","(nan, nan, <built-in method __new__ of type object at 0x00000000589BC0D0>, <built-in function len>)","(nan, nan, 'builtin_function_or_method', 'builtin_function_or_method')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)"
psutil,5.4.5,psutil._pswindows.pmmap_grouped,_pswindows,pmmap_grouped,"Python Library Documentation: class pmmap_grouped in module psutil._pswindows

class pmmap_grouped(builtins.tuple)
 |  pmmap_grouped(path, rss)
 |  
 |  Method resolution order:
 |      pmmap_grouped
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new pmmap_grouped object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new pmmap_grouped object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, path, rss)
 |      Create new instance of pmmap_grouped(path, rss)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  path
 |      Alias for field number 0
 |  
 |  rss
 |      Alias for field number 1
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('path', 'rss')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._pswindows.pmmap_grouped,_pswindows,pmmap_grouped,"Python Library Documentation: class pmmap_grouped in module psutil._pswindows

class pmmap_grouped(builtins.tuple)
 |  pmmap_grouped(path, rss)
 |  
 |  Method resolution order:
 |      pmmap_grouped
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new pmmap_grouped object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new pmmap_grouped object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, path, rss)
 |      Create new instance of pmmap_grouped(path, rss)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  path
 |      Alias for field number 0
 |  
 |  rss
 |      Alias for field number 1
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('path', 'rss')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._pswindows.pmmap_grouped._make,_pswindows.pmmap_grouped,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new pmmap_grouped object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)",psutil,5.4.5,psutil._pswindows.pmmap_grouped._make,_pswindows.pmmap_grouped,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new pmmap_grouped object from a sequence or iterable
",method,"('cls', 'iterable', 'new', 'len')","(nan, nan, <built-in method __new__ of type object at 0x00000000589BC0D0>, <built-in function len>)","(nan, nan, 'builtin_function_or_method', 'builtin_function_or_method')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)"
psutil,5.4.5,psutil._pswindows.py2_strencode,_pswindows,py2_strencode,"Python Library Documentation: function py2_strencode in module psutil._pswindows

py2_strencode(s)
    Encode a unicode string to a byte string by using the default fs
    encoding + ""replace"" error handler.
",function,"('(s)',)",psutil,5.4.5,psutil._pswindows.py2_strencode,_pswindows,py2_strencode,"Python Library Documentation: function py2_strencode in module psutil._pswindows

py2_strencode(s)
    Encode a unicode string to a byte string by using the default fs
    encoding + ""replace"" error handler.
",function,"('s',)","(nan,)","(nan,)","('arg_info',)","('(s)',)"
psutil,5.4.5,psutil._pswindows.scputimes,_pswindows,scputimes,"Python Library Documentation: class scputimes in module psutil._pswindows

class scputimes(builtins.tuple)
 |  scputimes(user, system, idle, interrupt, dpc)
 |  
 |  Method resolution order:
 |      scputimes
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new scputimes object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new scputimes object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, user, system, idle, interrupt, dpc)
 |      Create new instance of scputimes(user, system, idle, interrupt, dpc)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  user
 |      Alias for field number 0
 |  
 |  system
 |      Alias for field number 1
 |  
 |  idle
 |      Alias for field number 2
 |  
 |  interrupt
 |      Alias for field number 3
 |  
 |  dpc
 |      Alias for field number 4
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('user', 'system', 'idle', 'interrupt', 'dpc')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._pswindows.scputimes,_pswindows,scputimes,"Python Library Documentation: class scputimes in module psutil._pswindows

class scputimes(builtins.tuple)
 |  scputimes(user, system, idle, interrupt, dpc)
 |  
 |  Method resolution order:
 |      scputimes
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new scputimes object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new scputimes object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, user, system, idle, interrupt, dpc)
 |      Create new instance of scputimes(user, system, idle, interrupt, dpc)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  user
 |      Alias for field number 0
 |  
 |  system
 |      Alias for field number 1
 |  
 |  idle
 |      Alias for field number 2
 |  
 |  interrupt
 |      Alias for field number 3
 |  
 |  dpc
 |      Alias for field number 4
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('user', 'system', 'idle', 'interrupt', 'dpc')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._pswindows.scputimes._make,_pswindows.scputimes,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new scputimes object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)",psutil,5.4.5,psutil._pswindows.scputimes._make,_pswindows.scputimes,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new scputimes object from a sequence or iterable
",method,"('cls', 'iterable', 'new', 'len')","(nan, nan, <built-in method __new__ of type object at 0x00000000589BC0D0>, <built-in function len>)","(nan, nan, 'builtin_function_or_method', 'builtin_function_or_method')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)"
psutil,5.4.5,psutil._pswindows.sensors_battery,_pswindows,sensors_battery,"Python Library Documentation: function sensors_battery in module psutil._pswindows

sensors_battery()
    Return battery information.
",function,"('()',)",psutil,5.4.5,psutil._pswindows.sensors_battery,_pswindows,sensors_battery,"Python Library Documentation: function sensors_battery in module psutil._pswindows

sensors_battery()
    Return battery information.
",function,(),(),(),(),"('()',)"
psutil,5.4.5,psutil._pswindows.sockfam_to_enum,_pswindows,sockfam_to_enum,"Python Library Documentation: function sockfam_to_enum in module psutil._common

sockfam_to_enum(num)
    Convert a numeric socket family value to an IntEnum member.
    If it's not a known member, return the numeric value itself.
",function,"('(num)',)",psutil,5.4.5,psutil._pswindows.sockfam_to_enum,_pswindows,sockfam_to_enum,"Python Library Documentation: function sockfam_to_enum in module psutil._common

sockfam_to_enum(num)
    Convert a numeric socket family value to an IntEnum member.
    If it's not a known member, return the numeric value itself.
",function,"('num',)","(nan,)","(nan,)","('arg_info',)","('(num)',)"
psutil,5.4.5,psutil._pswindows.socktype_to_enum,_pswindows,socktype_to_enum,"Python Library Documentation: function socktype_to_enum in module psutil._common

socktype_to_enum(num)
    Convert a numeric socket type value to an IntEnum member.
    If it's not a known member, return the numeric value itself.
",function,"('(num)',)",psutil,5.4.5,psutil._pswindows.socktype_to_enum,_pswindows,socktype_to_enum,"Python Library Documentation: function socktype_to_enum in module psutil._common

socktype_to_enum(num)
    Convert a numeric socket type value to an IntEnum member.
    If it's not a known member, return the numeric value itself.
",function,"('num',)","(nan,)","(nan,)","('arg_info',)","('(num)',)"
psutil,5.4.5,psutil._pswindows.svmem,_pswindows,svmem,"Python Library Documentation: class svmem in module psutil._pswindows

class svmem(builtins.tuple)
 |  svmem(total, available, percent, used, free)
 |  
 |  Method resolution order:
 |      svmem
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new svmem object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new svmem object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, total, available, percent, used, free)
 |      Create new instance of svmem(total, available, percent, used, free)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  total
 |      Alias for field number 0
 |  
 |  available
 |      Alias for field number 1
 |  
 |  percent
 |      Alias for field number 2
 |  
 |  used
 |      Alias for field number 3
 |  
 |  free
 |      Alias for field number 4
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('total', 'available', 'percent', 'used', 'free')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._pswindows.svmem,_pswindows,svmem,"Python Library Documentation: class svmem in module psutil._pswindows

class svmem(builtins.tuple)
 |  svmem(total, available, percent, used, free)
 |  
 |  Method resolution order:
 |      svmem
 |      builtins.tuple
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  __getnewargs__(self)
 |      Return self as a plain tuple.  Used by copy and pickle.
 |  
 |  __repr__(self)
 |      Return a nicely formatted representation string
 |  
 |  _asdict(self)
 |      Return a new OrderedDict which maps field names to their values.
 |  
 |  _replace(_self, **kwds)
 |      Return a new svmem object replacing specified fields with new values
 |  
 |  ----------------------------------------------------------------------
 |  Class methods defined here:
 |  
 |  _make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) from builtins.type
 |      Make a new svmem object from a sequence or iterable
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  __new__(_cls, total, available, percent, used, free)
 |      Create new instance of svmem(total, available, percent, used, free)
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  total
 |      Alias for field number 0
 |  
 |  available
 |      Alias for field number 1
 |  
 |  percent
 |      Alias for field number 2
 |  
 |  used
 |      Alias for field number 3
 |  
 |  free
 |      Alias for field number 4
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |  
 |  _fields = ('total', 'available', 'percent', 'used', 'free')
 |  
 |  _source = ""from builtins import property as _property, tupl..._itemget...
 |  
 |  ----------------------------------------------------------------------
 |  Methods inherited from builtins.tuple:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  count(...)
 |      T.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      T.index(value, [start, [stop]]) -> integer -- return first index of value.
 |      Raises ValueError if the value is not present.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._pswindows.svmem._make,_pswindows.svmem,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new svmem object from a sequence or iterable
",method,"('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)",psutil,5.4.5,psutil._pswindows.svmem._make,_pswindows.svmem,_make,"Python Library Documentation: method _make

_make(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>) method of builtins.type instance
    Make a new svmem object from a sequence or iterable
",method,"('cls', 'iterable', 'new', 'len')","(nan, nan, <built-in method __new__ of type object at 0x00000000589BC0D0>, <built-in function len>)","(nan, nan, 'builtin_function_or_method', 'builtin_function_or_method')","('arg_info', 'arg_info', 'arg_info', 'arg_info')","('(iterable, new=<built-in method __new__ of type object at 0x00000000589BC0D0>, len=<built-in function len>)',)"
psutil,5.4.5,psutil._pswindows.swap_memory,_pswindows,swap_memory,"Python Library Documentation: function swap_memory in module psutil._pswindows

swap_memory()
    Swap system memory as a (total, used, free, sin, sout) tuple.
",function,"('()',)",psutil,5.4.5,psutil._pswindows.swap_memory,_pswindows,swap_memory,"Python Library Documentation: function swap_memory in module psutil._pswindows

swap_memory()
    Swap system memory as a (total, used, free, sin, sout) tuple.
",function,(),(),(),(),"('()',)"
psutil,5.4.5,psutil._pswindows.unicode,_pswindows,str,"Python Library Documentation: class str in module builtins

class str(object)
 |  str(object='') -> str
 |  str(bytes_or_buffer[, encoding[, errors]]) -> str
 |  
 |  Create a new string object from the given object. If encoding or
 |  errors is specified, then the object must expose a data buffer
 |  that will be decoded using the given encoding and error handler.
 |  Otherwise, returns the result of object.__str__() (if defined)
 |  or repr(object).
 |  encoding defaults to sys.getdefaultencoding().
 |  errors defaults to 'strict'.
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __format__(...)
 |      S.__format__(format_spec) -> str
 |      
 |      Return a formatted version of S as described by format_spec.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __getnewargs__(...)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  __sizeof__(...)
 |      S.__sizeof__() -> size of S in memory, in bytes
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  capitalize(...)
 |      S.capitalize() -> str
 |      
 |      Return a capitalized version of S, i.e. make the first character
 |      have upper case and the rest lower case.
 |  
 |  casefold(...)
 |      S.casefold() -> str
 |      
 |      Return a version of S suitable for caseless comparisons.
 |  
 |  center(...)
 |      S.center(width[, fillchar]) -> str
 |      
 |      Return S centered in a string of length width. Padding is
 |      done using the specified fill character (default is a space)
 |  
 |  count(...)
 |      S.count(sub[, start[, end]]) -> int
 |      
 |      Return the number of non-overlapping occurrences of substring sub in
 |      string S[start:end].  Optional arguments start and end are
 |      interpreted as in slice notation.
 |  
 |  encode(...)
 |      S.encode(encoding='utf-8', errors='strict') -> bytes
 |      
 |      Encode S using the codec registered for encoding. Default encoding
 |      is 'utf-8'. errors may be given to set a different error
 |      handling scheme. Default is 'strict' meaning that encoding errors raise
 |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
 |      'xmlcharrefreplace' as well as any other name registered with
 |      codecs.register_error that can handle UnicodeEncodeErrors.
 |  
 |  endswith(...)
 |      S.endswith(suffix[, start[, end]]) -> bool
 |      
 |      Return True if S ends with the specified suffix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      suffix can also be a tuple of strings to try.
 |  
 |  expandtabs(...)
 |      S.expandtabs(tabsize=8) -> str
 |      
 |      Return a copy of S where all tab characters are expanded using spaces.
 |      If tabsize is not given, a tab size of 8 characters is assumed.
 |  
 |  find(...)
 |      S.find(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  format(...)
 |      S.format(*args, **kwargs) -> str
 |      
 |      Return a formatted version of S, using substitutions from args and kwargs.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  format_map(...)
 |      S.format_map(mapping) -> str
 |      
 |      Return a formatted version of S, using substitutions from mapping.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  index(...)
 |      S.index(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found, 
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  isalnum(...)
 |      S.isalnum() -> bool
 |      
 |      Return True if all characters in S are alphanumeric
 |      and there is at least one character in S, False otherwise.
 |  
 |  isalpha(...)
 |      S.isalpha() -> bool
 |      
 |      Return True if all characters in S are alphabetic
 |      and there is at least one character in S, False otherwise.
 |  
 |  isdecimal(...)
 |      S.isdecimal() -> bool
 |      
 |      Return True if there are only decimal characters in S,
 |      False otherwise.
 |  
 |  isdigit(...)
 |      S.isdigit() -> bool
 |      
 |      Return True if all characters in S are digits
 |      and there is at least one character in S, False otherwise.
 |  
 |  isidentifier(...)
 |      S.isidentifier() -> bool
 |      
 |      Return True if S is a valid identifier according
 |      to the language definition.
 |      
 |      Use keyword.iskeyword() to test for reserved identifiers
 |      such as ""def"" and ""class"".
 |  
 |  islower(...)
 |      S.islower() -> bool
 |      
 |      Return True if all cased characters in S are lowercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  isnumeric(...)
 |      S.isnumeric() -> bool
 |      
 |      Return True if there are only numeric characters in S,
 |      False otherwise.
 |  
 |  isprintable(...)
 |      S.isprintable() -> bool
 |      
 |      Return True if all characters in S are considered
 |      printable in repr() or S is empty, False otherwise.
 |  
 |  isspace(...)
 |      S.isspace() -> bool
 |      
 |      Return True if all characters in S are whitespace
 |      and there is at least one character in S, False otherwise.
 |  
 |  istitle(...)
 |      S.istitle() -> bool
 |      
 |      Return True if S is a titlecased string and there is at least one
 |      character in S, i.e. upper- and titlecase characters may only
 |      follow uncased characters and lowercase characters only cased ones.
 |      Return False otherwise.
 |  
 |  isupper(...)
 |      S.isupper() -> bool
 |      
 |      Return True if all cased characters in S are uppercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  join(...)
 |      S.join(iterable) -> str
 |      
 |      Return a string which is the concatenation of the strings in the
 |      iterable.  The separator between elements is S.
 |  
 |  ljust(...)
 |      S.ljust(width[, fillchar]) -> str
 |      
 |      Return S left-justified in a Unicode string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  lower(...)
 |      S.lower() -> str
 |      
 |      Return a copy of the string S converted to lowercase.
 |  
 |  lstrip(...)
 |      S.lstrip([chars]) -> str
 |      
 |      Return a copy of the string S with leading whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  partition(...)
 |      S.partition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, and return the part before it,
 |      the separator itself, and the part after it.  If the separator is not
 |      found, return S and two empty strings.
 |  
 |  replace(...)
 |      S.replace(old, new[, count]) -> str
 |      
 |      Return a copy of S with all occurrences of substring
 |      old replaced by new.  If the optional argument count is
 |      given, only the first count occurrences are replaced.
 |  
 |  rfind(...)
 |      S.rfind(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  rindex(...)
 |      S.rindex(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  rjust(...)
 |      S.rjust(width[, fillchar]) -> str
 |      
 |      Return S right-justified in a string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  rpartition(...)
 |      S.rpartition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, starting at the end of S, and return
 |      the part before it, the separator itself, and the part after it.  If the
 |      separator is not found, return two empty strings and S.
 |  
 |  rsplit(...)
 |      S.rsplit(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string, starting at the end of the string and
 |      working to the front.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified, any whitespace string
 |      is a separator.
 |  
 |  rstrip(...)
 |      S.rstrip([chars]) -> str
 |      
 |      Return a copy of the string S with trailing whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  split(...)
 |      S.split(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified or is None, any
 |      whitespace string is a separator and empty strings are
 |      removed from the result.
 |  
 |  splitlines(...)
 |      S.splitlines([keepends]) -> list of strings
 |      
 |      Return a list of the lines in S, breaking at line boundaries.
 |      Line breaks are not included in the resulting list unless keepends
 |      is given and true.
 |  
 |  startswith(...)
 |      S.startswith(prefix[, start[, end]]) -> bool
 |      
 |      Return True if S starts with the specified prefix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      prefix can also be a tuple of strings to try.
 |  
 |  strip(...)
 |      S.strip([chars]) -> str
 |      
 |      Return a copy of the string S with leading and trailing
 |      whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  swapcase(...)
 |      S.swapcase() -> str
 |      
 |      Return a copy of S with uppercase characters converted to lowercase
 |      and vice versa.
 |  
 |  title(...)
 |      S.title() -> str
 |      
 |      Return a titlecased version of S, i.e. words start with title case
 |      characters, all remaining cased characters have lower case.
 |  
 |  translate(...)
 |      S.translate(table) -> str
 |      
 |      Return a copy of the string S in which each character has been mapped
 |      through the given translation table. The table must implement
 |      lookup/indexing via __getitem__, for instance a dictionary or list,
 |      mapping Unicode ordinals to Unicode ordinals, strings, or None. If
 |      this operation raises LookupError, the character is left untouched.
 |      Characters mapped to None are deleted.
 |  
 |  upper(...)
 |      S.upper() -> str
 |      
 |      Return a copy of S converted to uppercase.
 |  
 |  zfill(...)
 |      S.zfill(width) -> str
 |      
 |      Pad a numeric string S with zeros on the left, to fill a field
 |      of the specified width. The string S is never truncated.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  maketrans(x, y=None, z=None, /)
 |      Return a translation table usable for str.translate().
 |      
 |      If there is only one argument, it must be a dictionary mapping Unicode
 |      ordinals (integers) or characters to Unicode ordinals, strings or None.
 |      Character keys will be then converted to ordinals.
 |      If there are two arguments, they must be strings of equal length, and
 |      in the resulting dictionary, each character in x will be mapped to the
 |      character at the same position in y. If there is a third argument, it
 |      must be a string, whose characters will be mapped to None in the result.
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._pswindows.unicode,_pswindows,str,"Python Library Documentation: class str in module builtins

class str(object)
 |  str(object='') -> str
 |  str(bytes_or_buffer[, encoding[, errors]]) -> str
 |  
 |  Create a new string object from the given object. If encoding or
 |  errors is specified, then the object must expose a data buffer
 |  that will be decoded using the given encoding and error handler.
 |  Otherwise, returns the result of object.__str__() (if defined)
 |  or repr(object).
 |  encoding defaults to sys.getdefaultencoding().
 |  errors defaults to 'strict'.
 |  
 |  Methods defined here:
 |  
 |  __add__(self, value, /)
 |      Return self+value.
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __format__(...)
 |      S.__format__(format_spec) -> str
 |      
 |      Return a formatted version of S as described by format_spec.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __getnewargs__(...)
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __mod__(self, value, /)
 |      Return self%value.
 |  
 |  __mul__(self, value, /)
 |      Return self*value.n
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __rmod__(self, value, /)
 |      Return value%self.
 |  
 |  __rmul__(self, value, /)
 |      Return self*value.
 |  
 |  __sizeof__(...)
 |      S.__sizeof__() -> size of S in memory, in bytes
 |  
 |  __str__(self, /)
 |      Return str(self).
 |  
 |  capitalize(...)
 |      S.capitalize() -> str
 |      
 |      Return a capitalized version of S, i.e. make the first character
 |      have upper case and the rest lower case.
 |  
 |  casefold(...)
 |      S.casefold() -> str
 |      
 |      Return a version of S suitable for caseless comparisons.
 |  
 |  center(...)
 |      S.center(width[, fillchar]) -> str
 |      
 |      Return S centered in a string of length width. Padding is
 |      done using the specified fill character (default is a space)
 |  
 |  count(...)
 |      S.count(sub[, start[, end]]) -> int
 |      
 |      Return the number of non-overlapping occurrences of substring sub in
 |      string S[start:end].  Optional arguments start and end are
 |      interpreted as in slice notation.
 |  
 |  encode(...)
 |      S.encode(encoding='utf-8', errors='strict') -> bytes
 |      
 |      Encode S using the codec registered for encoding. Default encoding
 |      is 'utf-8'. errors may be given to set a different error
 |      handling scheme. Default is 'strict' meaning that encoding errors raise
 |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and
 |      'xmlcharrefreplace' as well as any other name registered with
 |      codecs.register_error that can handle UnicodeEncodeErrors.
 |  
 |  endswith(...)
 |      S.endswith(suffix[, start[, end]]) -> bool
 |      
 |      Return True if S ends with the specified suffix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      suffix can also be a tuple of strings to try.
 |  
 |  expandtabs(...)
 |      S.expandtabs(tabsize=8) -> str
 |      
 |      Return a copy of S where all tab characters are expanded using spaces.
 |      If tabsize is not given, a tab size of 8 characters is assumed.
 |  
 |  find(...)
 |      S.find(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  format(...)
 |      S.format(*args, **kwargs) -> str
 |      
 |      Return a formatted version of S, using substitutions from args and kwargs.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  format_map(...)
 |      S.format_map(mapping) -> str
 |      
 |      Return a formatted version of S, using substitutions from mapping.
 |      The substitutions are identified by braces ('{' and '}').
 |  
 |  index(...)
 |      S.index(sub[, start[, end]]) -> int
 |      
 |      Return the lowest index in S where substring sub is found, 
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  isalnum(...)
 |      S.isalnum() -> bool
 |      
 |      Return True if all characters in S are alphanumeric
 |      and there is at least one character in S, False otherwise.
 |  
 |  isalpha(...)
 |      S.isalpha() -> bool
 |      
 |      Return True if all characters in S are alphabetic
 |      and there is at least one character in S, False otherwise.
 |  
 |  isdecimal(...)
 |      S.isdecimal() -> bool
 |      
 |      Return True if there are only decimal characters in S,
 |      False otherwise.
 |  
 |  isdigit(...)
 |      S.isdigit() -> bool
 |      
 |      Return True if all characters in S are digits
 |      and there is at least one character in S, False otherwise.
 |  
 |  isidentifier(...)
 |      S.isidentifier() -> bool
 |      
 |      Return True if S is a valid identifier according
 |      to the language definition.
 |      
 |      Use keyword.iskeyword() to test for reserved identifiers
 |      such as ""def"" and ""class"".
 |  
 |  islower(...)
 |      S.islower() -> bool
 |      
 |      Return True if all cased characters in S are lowercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  isnumeric(...)
 |      S.isnumeric() -> bool
 |      
 |      Return True if there are only numeric characters in S,
 |      False otherwise.
 |  
 |  isprintable(...)
 |      S.isprintable() -> bool
 |      
 |      Return True if all characters in S are considered
 |      printable in repr() or S is empty, False otherwise.
 |  
 |  isspace(...)
 |      S.isspace() -> bool
 |      
 |      Return True if all characters in S are whitespace
 |      and there is at least one character in S, False otherwise.
 |  
 |  istitle(...)
 |      S.istitle() -> bool
 |      
 |      Return True if S is a titlecased string and there is at least one
 |      character in S, i.e. upper- and titlecase characters may only
 |      follow uncased characters and lowercase characters only cased ones.
 |      Return False otherwise.
 |  
 |  isupper(...)
 |      S.isupper() -> bool
 |      
 |      Return True if all cased characters in S are uppercase and there is
 |      at least one cased character in S, False otherwise.
 |  
 |  join(...)
 |      S.join(iterable) -> str
 |      
 |      Return a string which is the concatenation of the strings in the
 |      iterable.  The separator between elements is S.
 |  
 |  ljust(...)
 |      S.ljust(width[, fillchar]) -> str
 |      
 |      Return S left-justified in a Unicode string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  lower(...)
 |      S.lower() -> str
 |      
 |      Return a copy of the string S converted to lowercase.
 |  
 |  lstrip(...)
 |      S.lstrip([chars]) -> str
 |      
 |      Return a copy of the string S with leading whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  partition(...)
 |      S.partition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, and return the part before it,
 |      the separator itself, and the part after it.  If the separator is not
 |      found, return S and two empty strings.
 |  
 |  replace(...)
 |      S.replace(old, new[, count]) -> str
 |      
 |      Return a copy of S with all occurrences of substring
 |      old replaced by new.  If the optional argument count is
 |      given, only the first count occurrences are replaced.
 |  
 |  rfind(...)
 |      S.rfind(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Return -1 on failure.
 |  
 |  rindex(...)
 |      S.rindex(sub[, start[, end]]) -> int
 |      
 |      Return the highest index in S where substring sub is found,
 |      such that sub is contained within S[start:end].  Optional
 |      arguments start and end are interpreted as in slice notation.
 |      
 |      Raises ValueError when the substring is not found.
 |  
 |  rjust(...)
 |      S.rjust(width[, fillchar]) -> str
 |      
 |      Return S right-justified in a string of length width. Padding is
 |      done using the specified fill character (default is a space).
 |  
 |  rpartition(...)
 |      S.rpartition(sep) -> (head, sep, tail)
 |      
 |      Search for the separator sep in S, starting at the end of S, and return
 |      the part before it, the separator itself, and the part after it.  If the
 |      separator is not found, return two empty strings and S.
 |  
 |  rsplit(...)
 |      S.rsplit(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string, starting at the end of the string and
 |      working to the front.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified, any whitespace string
 |      is a separator.
 |  
 |  rstrip(...)
 |      S.rstrip([chars]) -> str
 |      
 |      Return a copy of the string S with trailing whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  split(...)
 |      S.split(sep=None, maxsplit=-1) -> list of strings
 |      
 |      Return a list of the words in S, using sep as the
 |      delimiter string.  If maxsplit is given, at most maxsplit
 |      splits are done. If sep is not specified or is None, any
 |      whitespace string is a separator and empty strings are
 |      removed from the result.
 |  
 |  splitlines(...)
 |      S.splitlines([keepends]) -> list of strings
 |      
 |      Return a list of the lines in S, breaking at line boundaries.
 |      Line breaks are not included in the resulting list unless keepends
 |      is given and true.
 |  
 |  startswith(...)
 |      S.startswith(prefix[, start[, end]]) -> bool
 |      
 |      Return True if S starts with the specified prefix, False otherwise.
 |      With optional start, test S beginning at that position.
 |      With optional end, stop comparing S at that position.
 |      prefix can also be a tuple of strings to try.
 |  
 |  strip(...)
 |      S.strip([chars]) -> str
 |      
 |      Return a copy of the string S with leading and trailing
 |      whitespace removed.
 |      If chars is given and not None, remove characters in chars instead.
 |  
 |  swapcase(...)
 |      S.swapcase() -> str
 |      
 |      Return a copy of S with uppercase characters converted to lowercase
 |      and vice versa.
 |  
 |  title(...)
 |      S.title() -> str
 |      
 |      Return a titlecased version of S, i.e. words start with title case
 |      characters, all remaining cased characters have lower case.
 |  
 |  translate(...)
 |      S.translate(table) -> str
 |      
 |      Return a copy of the string S in which each character has been mapped
 |      through the given translation table. The table must implement
 |      lookup/indexing via __getitem__, for instance a dictionary or list,
 |      mapping Unicode ordinals to Unicode ordinals, strings, or None. If
 |      this operation raises LookupError, the character is left untouched.
 |      Characters mapped to None are deleted.
 |  
 |  upper(...)
 |      S.upper() -> str
 |      
 |      Return a copy of S converted to uppercase.
 |  
 |  zfill(...)
 |      S.zfill(width) -> str
 |      
 |      Pad a numeric string S with zeros on the left, to fill a field
 |      of the specified width. The string S is never truncated.
 |  
 |  ----------------------------------------------------------------------
 |  Static methods defined here:
 |  
 |  maketrans(x, y=None, z=None, /)
 |      Return a translation table usable for str.translate().
 |      
 |      If there is only one argument, it must be a dictionary mapping Unicode
 |      ordinals (integers) or characters to Unicode ordinals, strings or None.
 |      Character keys will be then converted to ordinals.
 |      If there are two arguments, they must be strings of equal length, and
 |      in the resulting dictionary, each character in x will be mapped to the
 |      character at the same position in y. If there is a third argument, it
 |      must be a string, whose characters will be mapped to None in the result.
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
psutil,5.4.5,psutil._pswindows.usage_percent,_pswindows,usage_percent,"Python Library Documentation: function usage_percent in module psutil._common

usage_percent(used, total, round_=None)
    Calculate percentage usage of 'used' against 'total'.
",function,"('(used, total, round_=None)',)",psutil,5.4.5,psutil._pswindows.usage_percent,_pswindows,usage_percent,"Python Library Documentation: function usage_percent in module psutil._common

usage_percent(used, total, round_=None)
    Calculate percentage usage of 'used' against 'total'.
",function,"('used', 'total', 'round_')","(nan, nan, None)","(nan, nan, 'NoneType')","('arg_info', 'arg_info', 'arg_info')","('(used, total, round_=None)',)"
psutil,5.4.5,psutil._pswindows.users,_pswindows,users,"Python Library Documentation: function users in module psutil._pswindows

users()
    Return currently connected users as a list of namedtuples.
",function,"('()',)",psutil,5.4.5,psutil._pswindows.users,_pswindows,users,"Python Library Documentation: function users in module psutil._pswindows

users()
    Return currently connected users as a list of namedtuples.
",function,(),(),(),(),"('()',)"
psutil,5.4.5,psutil._pswindows.virtual_memory,_pswindows,virtual_memory,"Python Library Documentation: function virtual_memory in module psutil._pswindows

virtual_memory()
    System virtual memory as a namedtuple.
",function,"('()',)",psutil,5.4.5,psutil._pswindows.virtual_memory,_pswindows,virtual_memory,"Python Library Documentation: function virtual_memory in module psutil._pswindows

virtual_memory()
    System virtual memory as a namedtuple.
",function,(),(),(),(),"('()',)"
psutil,5.4.5,psutil._pswindows.win_service_get,_pswindows,win_service_get,"Python Library Documentation: function win_service_get in module psutil._pswindows

win_service_get(name)
    Open a Windows service and return it as a WindowsService instance.
",function,"('(name)',)",psutil,5.4.5,psutil._pswindows.win_service_get,_pswindows,win_service_get,"Python Library Documentation: function win_service_get in module psutil._pswindows

win_service_get(name)
    Open a Windows service and return it as a WindowsService instance.
",function,"('name',)","(nan,)","(nan,)","('arg_info',)","('(name)',)"
psutil,5.4.5,psutil._pswindows.win_service_iter,_pswindows,win_service_iter,"Python Library Documentation: function win_service_iter in module psutil._pswindows

win_service_iter()
    Yields a list of WindowsService instances.
",function,"('()',)",psutil,5.4.5,psutil._pswindows.win_service_iter,_pswindows,win_service_iter,"Python Library Documentation: function win_service_iter in module psutil._pswindows

win_service_iter()
    Yields a list of WindowsService instances.
",function,(),(),(),(),"('()',)"
psutil,5.4.5,psutil._pswindows.wrap_exceptions,_pswindows,wrap_exceptions,"Python Library Documentation: function wrap_exceptions in module psutil._pswindows

wrap_exceptions(fun)
    Decorator which translates bare OSError and WindowsError
    exceptions into NoSuchProcess and AccessDenied.
",function,"('(fun)',)",psutil,5.4.5,psutil._pswindows.wrap_exceptions,_pswindows,wrap_exceptions,"Python Library Documentation: function wrap_exceptions in module psutil._pswindows

wrap_exceptions(fun)
    Decorator which translates bare OSError and WindowsError
    exceptions into NoSuchProcess and AccessDenied.
",function,"('fun',)","(nan,)","(nan,)","('arg_info',)","('(fun)',)"
psutil,5.4.5,psutil._pswindows.xrange,_pswindows,range,"Python Library Documentation: class range in module builtins

class range(object)
 |  range(stop) -> range object
 |  range(start, stop[, step]) -> range object
 |  
 |  Return an object that produces a sequence of integers from start (inclusive)
 |  to stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.
 |  start defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.
 |  These are exactly the valid indices for a list of 4 elements.
 |  When step is given, it specifies the increment (or decrement).
 |  
 |  Methods defined here:
 |  
 |  __bool__(self, /)
 |      self != 0
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __reversed__(...)
 |      Return a reverse iterator.
 |  
 |  count(...)
 |      rangeobject.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      rangeobject.index(value, [start, [stop]]) -> integer -- return index of value.
 |      Raise ValueError if the value is not present.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  start
 |  
 |  step
 |  
 |  stop
",class,"('(self, /, *args, **kwargs)',)",psutil,5.4.5,psutil._pswindows.xrange,_pswindows,range,"Python Library Documentation: class range in module builtins

class range(object)
 |  range(stop) -> range object
 |  range(start, stop[, step]) -> range object
 |  
 |  Return an object that produces a sequence of integers from start (inclusive)
 |  to stop (exclusive) by step.  range(i, j) produces i, i+1, i+2, ..., j-1.
 |  start defaults to 0, and stop is omitted!  range(4) produces 0, 1, 2, 3.
 |  These are exactly the valid indices for a list of 4 elements.
 |  When step is given, it specifies the increment (or decrement).
 |  
 |  Methods defined here:
 |  
 |  __bool__(self, /)
 |      self != 0
 |  
 |  __contains__(self, key, /)
 |      Return key in self.
 |  
 |  __eq__(self, value, /)
 |      Return self==value.
 |  
 |  __ge__(self, value, /)
 |      Return self>=value.
 |  
 |  __getattribute__(self, name, /)
 |      Return getattr(self, name).
 |  
 |  __getitem__(self, key, /)
 |      Return self[key].
 |  
 |  __gt__(self, value, /)
 |      Return self>value.
 |  
 |  __hash__(self, /)
 |      Return hash(self).
 |  
 |  __iter__(self, /)
 |      Implement iter(self).
 |  
 |  __le__(self, value, /)
 |      Return self<=value.
 |  
 |  __len__(self, /)
 |      Return len(self).
 |  
 |  __lt__(self, value, /)
 |      Return self<value.
 |  
 |  __ne__(self, value, /)
 |      Return self!=value.
 |  
 |  __new__(*args, **kwargs) from builtins.type
 |      Create and return a new object.  See help(type) for accurate signature.
 |  
 |  __reduce__(...)
 |      helper for pickle
 |  
 |  __repr__(self, /)
 |      Return repr(self).
 |  
 |  __reversed__(...)
 |      Return a reverse iterator.
 |  
 |  count(...)
 |      rangeobject.count(value) -> integer -- return number of occurrences of value
 |  
 |  index(...)
 |      rangeobject.index(value, [start, [stop]]) -> integer -- return index of value.
 |      Raise ValueError if the value is not present.
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors defined here:
 |  
 |  start
 |  
 |  step
 |  
 |  stop
",class,"('self',)","(nan,)","(nan,)","('arg_info',)","('(self, /, *args, **kwargs)',)"
