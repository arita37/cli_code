{
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\data.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\distri_torch.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\models.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\optim.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\pipeline.py": [
    [
      {
        "name": "Pipe",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "Pipe": [
        {
          "name": "__init__",
          "args": [
            "self",
            "pipe_list",
            "in_pars",
            "out_pars"
          ],
          "kwargs": [
            [
              "compute_pars",
              "None"
            ]
          ],
          "pack": {
            "kwargs": "kw"
          }
        },
        {
          "name": "run",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_fitted_pipe_list",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "key",
              "\"\""
            ]
          ],
          "pack": {}
        },
        {
          "name": "get_checkpoint",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_model_path",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\util.py": [
    [
      {
        "name": "to_namespace",
        "indent": 0.0,
        "inherits": "object"
      },
      {
        "name": "Model_empty",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "to_namespace": [
        {
          "name": "__init__",
          "args": [
            "self",
            "adict"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get",
          "args": [
            "self",
            "key"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "Model_empty": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "model_pars",
              "None"
            ],
            [
              "data_pars",
              "None"
            ],
            [
              "compute_pars",
              "None"
            ]
          ],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\ztest.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\ztest_structure.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\__init__.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_chatbot\\__init__.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_chatbot\\diag_gpt\\Chatbot_run.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_chatbot\\diag_gpt\\myChatbot.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_dev\\ml_mosaic.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_dev\\mytest.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_dev\\__init__.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_dev\\dev\\ml_mosaic.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_dev\\dev\\mytest.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_flow\\mlflow_run.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_flow\\__init__.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_flow\\dev\\mlflow_run.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_gluon\\gluon_automl.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "model_pars",
              "None"
            ],
            [
              "compute_pars",
              "None"
            ]
          ],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_gluon\\gluon_deepar.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "model_pars",
              "None"
            ],
            [
              "data_pars",
              "None"
            ],
            [
              "compute_pars",
              "None"
            ]
          ],
          "pack": {
            "kwargs": "kwargs"
          }
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_gluon\\gluon_ffn.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "model_pars",
              "None"
            ],
            [
              "data_pars",
              "None"
            ],
            [
              "compute_pars",
              "None"
            ]
          ],
          "pack": {
            "kwargs": "kwargs"
          }
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_gluon\\gluon_prophet.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "model_pars",
              "None"
            ],
            [
              "data_pars",
              "None"
            ],
            [
              "compute_pars",
              "None"
            ]
          ],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_gluon\\model_template.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "model_pars",
              "None"
            ],
            [
              "compute_pars",
              "None"
            ]
          ],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_gluon\\util.py": [
    [
      {
        "name": "Model_empty",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "Model_empty": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "model_pars",
              "None"
            ],
            [
              "compute_pars",
              "None"
            ]
          ],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_gluon\\util_autogluon.py": [
    [
      {
        "name": "Model_empty",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "Model_empty": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "model_pars",
              "None"
            ],
            [
              "compute_pars",
              "None"
            ]
          ],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_gluon\\__init__.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\00_template.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "Model_empty",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "model_pars",
              "None"
            ],
            [
              "data_pars",
              "None"
            ],
            [
              "compute_pars",
              "None"
            ]
          ],
          "pack": {
            "kwargs": "kwargs"
          }
        }
      ],
      "Model_empty": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "model_pars",
              "None"
            ],
            [
              "compute_pars",
              "None"
            ]
          ],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\00_template_keras.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "Model_empty",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "model_pars",
              "None"
            ],
            [
              "data_pars",
              "None"
            ],
            [
              "compute_pars",
              "None"
            ]
          ],
          "pack": {
            "kwargs": "kwargs"
          }
        }
      ],
      "Model_empty": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "model_pars",
              "None"
            ],
            [
              "compute_pars",
              "None"
            ]
          ],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\01_deepctr.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "model_pars",
              "None"
            ],
            [
              "data_pars",
              "None"
            ],
            [
              "compute_pars",
              "None"
            ]
          ],
          "pack": {
            "kwargs": "kwargs"
          }
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\02_cnn.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "model_pars",
              "None"
            ],
            [
              "compute_pars",
              "None"
            ],
            [
              "data_pars",
              "None"
            ]
          ],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\charcnn.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "model_pars",
              "None"
            ],
            [
              "data_pars",
              "None"
            ],
            [
              "compute_pars",
              "None"
            ]
          ],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\namentity_crm_bilstm.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "model_pars",
              "None"
            ],
            [
              "data_pars",
              "None"
            ],
            [
              "compute_pars",
              "None"
            ]
          ],
          "pack": {
            "kwargs": "kwargs"
          }
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\preprocess.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\textcnn.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": []
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\textvae.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "CustomVariationalLayer",
        "indent": 3.0,
        "inherits": "Layer"
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "model_pars",
              "None"
            ],
            [
              "data_pars",
              "None"
            ],
            [
              "compute_pars",
              "None"
            ]
          ],
          "pack": {}
        }
      ],
      "CustomVariationalLayer": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {
            "kwargs": "kwargs"
          }
        },
        {
          "name": "vae_loss",
          "args": [
            "self",
            "x",
            "x_decoded_mean"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "call",
          "args": [
            "self",
            "inputs"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\util.py": [
    [
      {
        "name": "Model_empty",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "Model_empty": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "model_pars",
              "None"
            ],
            [
              "compute_pars",
              "None"
            ]
          ],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\__init__.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\no_03_textcnn.py": [
    [
      {
        "name": "data_loader",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "data_provider",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "data_loader": [],
      "data_provider": [],
      "Model": []
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\__init__.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\char_cnn\\data_utils.py": [
    [
      {
        "name": "Data",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "Data": [
        {
          "name": "__init__",
          "args": [
            "self",
            "data_source"
          ],
          "kwargs": [
            [
              "alphabet",
              "\"abcdefghijklmnopqrstuvwxyz0123456789-"
            ]
          ],
          "pack": {}
        },
        {
          "name": "load_data",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_all_data",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "str_to_indexes",
          "args": [
            "self",
            "s"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\char_cnn\\main.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\char_cnn\\models\\char_cnn_kim.py": [
    [
      {
        "name": "CharCNNKim",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "CharCNNKim": [
        {
          "name": "__init__",
          "args": [
            "self",
            "input_size",
            "alphabet_size",
            "embedding_size",
            "conv_layers",
            "fully_connected_layers",
            "num_of_classes",
            "dropout_p"
          ],
          "kwargs": [
            [
              "optimizer",
              "'adam'"
            ],
            [
              "loss",
              "'categorical_crossentropy'"
            ]
          ],
          "pack": {}
        },
        {
          "name": "_build_model",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "train",
          "args": [
            "self",
            "training_inputs",
            "training_labels",
            "validation_inputs",
            "validation_labels",
            "epochs",
            "batch_size"
          ],
          "kwargs": [
            [
              "checkpoint_every",
              "100"
            ]
          ],
          "pack": {}
        },
        {
          "name": "test",
          "args": [
            "self",
            "testing_inputs",
            "testing_labels",
            "batch_size"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\char_cnn\\models\\char_cnn_zhang.py": [
    [
      {
        "name": "CharCNNZhang",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "CharCNNZhang": [
        {
          "name": "__init__",
          "args": [
            "self",
            "input_size",
            "alphabet_size",
            "embedding_size",
            "conv_layers",
            "fully_connected_layers",
            "num_of_classes",
            "threshold",
            "dropout_p"
          ],
          "kwargs": [
            [
              "optimizer",
              "'adam'"
            ],
            [
              "loss",
              "'categorical_crossentropy'"
            ]
          ],
          "pack": {}
        },
        {
          "name": "_build_model",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "train",
          "args": [
            "self",
            "training_inputs",
            "training_labels",
            "validation_inputs",
            "validation_labels",
            "epochs",
            "batch_size"
          ],
          "kwargs": [
            [
              "checkpoint_every",
              "100"
            ]
          ],
          "pack": {}
        },
        {
          "name": "test",
          "args": [
            "self",
            "testing_inputs",
            "testing_labels",
            "batch_size"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\char_cnn\\models\\char_tcn.py": [
    [
      {
        "name": "CharTCN",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "CharTCN": [
        {
          "name": "__init__",
          "args": [
            "self",
            "input_size",
            "alphabet_size",
            "embedding_size",
            "conv_layers",
            "fully_connected_layers",
            "num_of_classes",
            "threshold",
            "dropout_p"
          ],
          "kwargs": [
            [
              "optimizer",
              "'adam'"
            ],
            [
              "loss",
              "'categorical_crossentropy'"
            ]
          ],
          "pack": {}
        },
        {
          "name": "_build_model",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "train",
          "args": [
            "self",
            "training_inputs",
            "training_labels",
            "validation_inputs",
            "validation_labels",
            "epochs",
            "batch_size"
          ],
          "kwargs": [
            [
              "checkpoint_every",
              "100"
            ]
          ],
          "pack": {}
        },
        {
          "name": "test",
          "args": [
            "self",
            "testing_inputs",
            "testing_labels",
            "batch_size"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\char_cnn\\models\\__init__.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\examples\\run_classification_criteo.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\examples\\run_classification_criteo_hash.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\examples\\run_classification_criteo_multi_gpu.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\examples\\run_dien.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\examples\\run_din.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\examples\\run_dsin.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\examples\\run_multivalue_movielens.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\examples\\run_multivalue_movielens_hash.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\examples\\run_regression_movielens.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\FastText\\fast_text.py": [
    [
      {
        "name": "FastText",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "FastText": [
        {
          "name": "__init__",
          "args": [
            "self",
            "maxlen",
            "max_features",
            "embedding_dims"
          ],
          "kwargs": [
            [
              "class_num",
              "1"
            ],
            [
              "last_activation",
              "'sigmoid'"
            ]
          ],
          "pack": {}
        },
        {
          "name": "get_model",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\FastText\\main.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\graph_cnn_text\\build_graph.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\graph_cnn_text\\inits.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\graph_cnn_text\\layers.py": [
    [
      {
        "name": "Layer",
        "indent": 0.0,
        "inherits": "object"
      },
      {
        "name": "Dense",
        "indent": 0.0,
        "inherits": "Layer"
      },
      {
        "name": "GraphConvolution",
        "indent": 0.0,
        "inherits": "Layer"
      }
    ],
    {
      "Layer": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "edge_type",
              "()"
            ],
            [
              "num_types",
              "-1"
            ]
          ],
          "pack": {
            "kwargs": "kwargs"
          }
        },
        {
          "name": "_call",
          "args": [
            "self",
            "inputs"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "__call__",
          "args": [
            "self",
            "inputs"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_log_vars",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "Dense": [
        {
          "name": "__init__",
          "args": [
            "self",
            "input_dim",
            "output_dim",
            "placeholders"
          ],
          "kwargs": [
            [
              "dropout",
              "0."
            ],
            [
              "sparse_inputs",
              "False"
            ],
            [
              "act",
              "tf.nn.relu"
            ],
            [
              "bias",
              "False"
            ],
            [
              "featureless",
              "False"
            ]
          ],
          "pack": {
            "kwargs": "kwargs"
          }
        },
        {
          "name": "_call",
          "args": [
            "self",
            "inputs"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "GraphConvolution": [
        {
          "name": "__init__",
          "args": [
            "self",
            "input_dim",
            "output_dim",
            "placeholders"
          ],
          "kwargs": [
            [
              "dropout",
              "0."
            ],
            [
              "sparse_inputs",
              "False"
            ],
            [
              "act",
              "tf.nn.relu"
            ],
            [
              "bias",
              "False"
            ],
            [
              "featureless",
              "False"
            ]
          ],
          "pack": {
            "kwargs": "kwargs"
          }
        },
        {
          "name": "_call",
          "args": [
            "self",
            "inputs"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\graph_cnn_text\\metrics.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\graph_cnn_text\\models.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": "object"
      },
      {
        "name": "GCN",
        "indent": 0.0,
        "inherits": "Model"
      },
      {
        "name": "RGCN",
        "indent": 0.0,
        "inherits": "Model"
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {
            "kwargs": "kwargs"
          }
        },
        {
          "name": "_build",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "build",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "predict",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_loss",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_accuracy",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "save",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "sess",
              "None"
            ]
          ],
          "pack": {}
        },
        {
          "name": "load",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "sess",
              "None"
            ]
          ],
          "pack": {}
        }
      ],
      "GCN": [
        {
          "name": "__init__",
          "args": [
            "self",
            "placeholders",
            "input_dim"
          ],
          "kwargs": [],
          "pack": {
            "kwargs": "kwargs"
          }
        },
        {
          "name": "_loss",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_accuracy",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_build",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "predict",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "RGCN": [
        {
          "name": "__init__",
          "args": [
            "self",
            "placeholders",
            "num_feat",
            "nonzero_feat",
            "edge_types"
          ],
          "kwargs": [],
          "pack": {
            "kwargs": "kwargs"
          }
        },
        {
          "name": "_build",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_loss",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_accuracy",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\graph_cnn_text\\remove_words.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\graph_cnn_text\\train.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\graph_cnn_text\\tsne.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\graph_cnn_text\\utils.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\graph_cnn_text\\__init__.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\HAN\\attention.py": [
    [
      {
        "name": "Attention",
        "indent": 0.0,
        "inherits": "Layer"
      }
    ],
    {
      "Attention": [
        {
          "name": "__init__",
          "args": [
            "self",
            "step_dim"
          ],
          "kwargs": [
            [
              "W_regularizer",
              "None"
            ],
            [
              "b_regularizer",
              "None"
            ],
            [
              "W_constraint",
              "None"
            ],
            [
              "b_constraint",
              "None"
            ],
            [
              "bias",
              "True"
            ]
          ],
          "pack": {
            "kwargs": "kwargs"
          }
        },
        {
          "name": "build",
          "args": [
            "self",
            "input_shape"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "compute_mask",
          "args": [
            "self",
            "input"
          ],
          "kwargs": [
            [
              "input_mask",
              "None"
            ]
          ],
          "pack": {}
        },
        {
          "name": "call",
          "args": [
            "self",
            "x"
          ],
          "kwargs": [
            [
              "mask",
              "None"
            ]
          ],
          "pack": {}
        },
        {
          "name": "compute_output_shape",
          "args": [
            "self",
            "input_shape"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\HAN\\han.py": [
    [
      {
        "name": "HAN",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "HAN": [
        {
          "name": "__init__",
          "args": [
            "self",
            "maxlen_sentence",
            "maxlen_word",
            "max_features",
            "embedding_dims"
          ],
          "kwargs": [
            [
              "class_num",
              "1"
            ],
            [
              "last_activation",
              "'sigmoid'"
            ]
          ],
          "pack": {}
        },
        {
          "name": "get_model",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\HAN\\main.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\RCNN\\main.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\RCNN\\rcnn.py": [
    [
      {
        "name": "RCNN",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "RCNN": [
        {
          "name": "__init__",
          "args": [
            "self",
            "maxlen",
            "max_features",
            "embedding_dims"
          ],
          "kwargs": [
            [
              "class_num",
              "1"
            ],
            [
              "last_activation",
              "'sigmoid'"
            ]
          ],
          "pack": {}
        },
        {
          "name": "get_model",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\RCNNVariant\\main.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\RCNNVariant\\rcnn_variant.py": [
    [
      {
        "name": "RCNNVariant",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "RCNNVariant": [
        {
          "name": "__init__",
          "args": [
            "self",
            "maxlen",
            "max_features",
            "embedding_dims"
          ],
          "kwargs": [
            [
              "class_num",
              "1"
            ],
            [
              "last_activation",
              "'sigmoid'"
            ]
          ],
          "pack": {}
        },
        {
          "name": "get_model",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\TextAttBiRNN\\attention.py": [
    [
      {
        "name": "Attention",
        "indent": 0.0,
        "inherits": "Layer"
      }
    ],
    {
      "Attention": [
        {
          "name": "__init__",
          "args": [
            "self",
            "step_dim"
          ],
          "kwargs": [
            [
              "W_regularizer",
              "None"
            ],
            [
              "b_regularizer",
              "None"
            ],
            [
              "W_constraint",
              "None"
            ],
            [
              "b_constraint",
              "None"
            ],
            [
              "bias",
              "True"
            ]
          ],
          "pack": {
            "kwargs": "kwargs"
          }
        },
        {
          "name": "build",
          "args": [
            "self",
            "input_shape"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "compute_mask",
          "args": [
            "self",
            "input"
          ],
          "kwargs": [
            [
              "input_mask",
              "None"
            ]
          ],
          "pack": {}
        },
        {
          "name": "call",
          "args": [
            "self",
            "x"
          ],
          "kwargs": [
            [
              "mask",
              "None"
            ]
          ],
          "pack": {}
        },
        {
          "name": "compute_output_shape",
          "args": [
            "self",
            "input_shape"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\TextAttBiRNN\\main.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\TextAttBiRNN\\text_att_birnn.py": [
    [
      {
        "name": "TextAttBiRNN",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "TextAttBiRNN": [
        {
          "name": "__init__",
          "args": [
            "self",
            "maxlen",
            "max_features",
            "embedding_dims"
          ],
          "kwargs": [
            [
              "class_num",
              "1"
            ],
            [
              "last_activation",
              "'sigmoid'"
            ]
          ],
          "pack": {}
        },
        {
          "name": "get_model",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\TextBiRNN\\main.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\TextBiRNN\\text_birnn.py": [
    [
      {
        "name": "TextBiRNN",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "TextBiRNN": [
        {
          "name": "__init__",
          "args": [
            "self",
            "maxlen",
            "max_features",
            "embedding_dims"
          ],
          "kwargs": [
            [
              "class_num",
              "1"
            ],
            [
              "last_activation",
              "'sigmoid'"
            ]
          ],
          "pack": {}
        },
        {
          "name": "get_model",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\textcnn_\\main.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\textcnn_\\text_cnn.py": [
    [
      {
        "name": "TextCNN",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "TextCNN": [
        {
          "name": "__init__",
          "args": [
            "self",
            "maxlen",
            "max_features",
            "embedding_dims"
          ],
          "kwargs": [
            [
              "class_num",
              "1"
            ],
            [
              "last_activation",
              "'sigmoid'"
            ]
          ],
          "pack": {}
        },
        {
          "name": "get_model",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\textcnn_\\__init__.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\TextRNN\\main.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\TextRNN\\text_rnn.py": [
    [
      {
        "name": "TextRNN",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "TextRNN": [
        {
          "name": "__init__",
          "args": [
            "self",
            "maxlen",
            "max_features",
            "embedding_dims"
          ],
          "kwargs": [
            [
              "class_num",
              "1"
            ],
            [
              "last_activation",
              "'sigmoid'"
            ]
          ],
          "pack": {}
        },
        {
          "name": "get_model",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\bow.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\build_corpus.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\build_graph.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\doc2vec.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\inits.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\layers.py": [
    [
      {
        "name": "Layer",
        "indent": 0.0,
        "inherits": "object"
      },
      {
        "name": "Dense",
        "indent": 0.0,
        "inherits": "Layer"
      },
      {
        "name": "GraphConvolution",
        "indent": 0.0,
        "inherits": "Layer"
      }
    ],
    {
      "Layer": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {
            "kwargs": "kwargs"
          }
        },
        {
          "name": "_call",
          "args": [
            "self",
            "inputs"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "__call__",
          "args": [
            "self",
            "inputs"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_log_vars",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "Dense": [
        {
          "name": "__init__",
          "args": [
            "self",
            "input_dim",
            "output_dim",
            "placeholders"
          ],
          "kwargs": [
            [
              "dropout",
              "0."
            ],
            [
              "sparse_inputs",
              "False"
            ],
            [
              "act",
              "tf.nn.relu"
            ],
            [
              "bias",
              "False"
            ],
            [
              "featureless",
              "False"
            ]
          ],
          "pack": {
            "kwargs": "kwargs"
          }
        },
        {
          "name": "_call",
          "args": [
            "self",
            "inputs"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "GraphConvolution": [
        {
          "name": "__init__",
          "args": [
            "self",
            "input_dim",
            "output_dim",
            "placeholders"
          ],
          "kwargs": [
            [
              "dropout",
              "0."
            ],
            [
              "sparse_inputs",
              "False"
            ],
            [
              "act",
              "tf.nn.relu"
            ],
            [
              "bias",
              "False"
            ],
            [
              "featureless",
              "False"
            ]
          ],
          "pack": {
            "kwargs": "kwargs"
          }
        },
        {
          "name": "_call",
          "args": [
            "self",
            "inputs"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\metrics.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\models.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": "object"
      },
      {
        "name": "MLP",
        "indent": 0.0,
        "inherits": "Model"
      },
      {
        "name": "GCN",
        "indent": 0.0,
        "inherits": "Model"
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {
            "kwargs": "kwargs"
          }
        },
        {
          "name": "_build",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "build",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "predict",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_loss",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_accuracy",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "save",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "sess",
              "None"
            ]
          ],
          "pack": {}
        },
        {
          "name": "load",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "sess",
              "None"
            ]
          ],
          "pack": {}
        }
      ],
      "MLP": [
        {
          "name": "__init__",
          "args": [
            "self",
            "placeholders",
            "input_dim"
          ],
          "kwargs": [],
          "pack": {
            "kwargs": "kwargs"
          }
        },
        {
          "name": "_loss",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_accuracy",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_build",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "predict",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "GCN": [
        {
          "name": "__init__",
          "args": [
            "self",
            "placeholders",
            "input_dim"
          ],
          "kwargs": [],
          "pack": {
            "kwargs": "kwargs"
          }
        },
        {
          "name": "_loss",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_accuracy",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_build",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "predict",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\plot_dim.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\plot_prop.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\plot_window.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\prepare_data.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\remove_words.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\train.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\utils.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\visualize.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\visualize_words.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\wordnet.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\__init__.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_rank\\LambdaRank.py": [
    [
      {
        "name": "LambdaRank",
        "indent": 0.0,
        "inherits": "nn.Module"
      }
    ],
    {
      "LambdaRank": [
        {
          "name": "__init__",
          "args": [
            "self",
            "net_structures"
          ],
          "kwargs": [
            [
              "leaky_relu",
              "False"
            ],
            [
              "sigma",
              "1.0"
            ],
            [
              "double_precision",
              "False"
            ]
          ],
          "pack": {}
        },
        {
          "name": "forward",
          "args": [
            "self",
            "input1"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "dump_param",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_rank\\load_mslr.py": [
    [
      {
        "name": "DataLoader",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "DataLoader": [
        {
          "name": "__init__",
          "args": [
            "self",
            "path"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_num_pairs",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_num_sessions",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_load_mslr",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_parse_feature_and_label",
          "args": [
            "self",
            "df"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "generate_query_pairs",
          "args": [
            "self",
            "df",
            "qid"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "generate_query_pair_batch",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "df",
              "None"
            ],
            [
              "batchsize",
              "2000"
            ]
          ],
          "pack": {}
        },
        {
          "name": "generate_query_batch",
          "args": [
            "self",
            "df"
          ],
          "kwargs": [
            [
              "batchsize",
              "100000"
            ]
          ],
          "pack": {}
        },
        {
          "name": "generate_batch_per_query",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "df",
              "None"
            ]
          ],
          "pack": {}
        },
        {
          "name": "load",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "train_scaler_and_transform",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "apply_scaler",
          "args": [
            "self",
            "scaler"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_rank\\metrics.py": [
    [
      {
        "name": "DCG",
        "indent": 0.0,
        "inherits": "object"
      },
      {
        "name": "NDCG",
        "indent": 0.0,
        "inherits": "DCG"
      }
    ],
    {
      "DCG": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "k",
              "10"
            ],
            [
              "gain_type",
              "'exp2'"
            ]
          ],
          "pack": {}
        },
        {
          "name": "evaluate",
          "args": [
            "self",
            "targets"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_get_gain",
          "args": [
            "self",
            "targets"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_get_discount",
          "args": [
            "self",
            "k"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_make_discount",
          "args": [
            "n"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "NDCG": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "k",
              "10"
            ],
            [
              "gain_type",
              "'exp2'"
            ]
          ],
          "pack": {}
        },
        {
          "name": "evaluate",
          "args": [
            "self",
            "targets"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "maxDCG",
          "args": [
            "self",
            "targets"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_rank\\RankNet.py": [
    [
      {
        "name": "RankNet",
        "indent": 0.0,
        "inherits": "nn.Module"
      },
      {
        "name": "RankNetPairs",
        "indent": 0.0,
        "inherits": "RankNet"
      }
    ],
    {
      "RankNet": [
        {
          "name": "__init__",
          "args": [
            "self",
            "net_structures"
          ],
          "kwargs": [
            [
              "double_precision",
              "False"
            ]
          ],
          "pack": {}
        },
        {
          "name": "forward",
          "args": [
            "self",
            "input1"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "dump_param",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "RankNetPairs": [
        {
          "name": "__init__",
          "args": [
            "self",
            "net_structures"
          ],
          "kwargs": [
            [
              "double_precision",
              "False"
            ]
          ],
          "pack": {}
        },
        {
          "name": "forward",
          "args": [
            "self",
            "input1",
            "input2"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_rank\\utils.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_rank\\__init__.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_rank\\dev\\LambdaRank.py": [
    [
      {
        "name": "LambdaRank",
        "indent": 0.0,
        "inherits": "nn.Module"
      }
    ],
    {
      "LambdaRank": [
        {
          "name": "__init__",
          "args": [
            "self",
            "net_structures"
          ],
          "kwargs": [
            [
              "leaky_relu",
              "False"
            ],
            [
              "sigma",
              "1.0"
            ],
            [
              "double_precision",
              "False"
            ]
          ],
          "pack": {}
        },
        {
          "name": "forward",
          "args": [
            "self",
            "input1"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "dump_param",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_rank\\dev\\load_mslr.py": [
    [
      {
        "name": "DataLoader",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "DataLoader": [
        {
          "name": "__init__",
          "args": [
            "self",
            "path"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_num_pairs",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_num_sessions",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_load_mslr",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_parse_feature_and_label",
          "args": [
            "self",
            "df"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "generate_query_pairs",
          "args": [
            "self",
            "df",
            "qid"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "generate_query_pair_batch",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "df",
              "None"
            ],
            [
              "batchsize",
              "2000"
            ]
          ],
          "pack": {}
        },
        {
          "name": "generate_query_batch",
          "args": [
            "self",
            "df"
          ],
          "kwargs": [
            [
              "batchsize",
              "100000"
            ]
          ],
          "pack": {}
        },
        {
          "name": "generate_batch_per_query",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "df",
              "None"
            ]
          ],
          "pack": {}
        },
        {
          "name": "load",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "train_scaler_and_transform",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "apply_scaler",
          "args": [
            "self",
            "scaler"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_rank\\dev\\metrics.py": [
    [
      {
        "name": "DCG",
        "indent": 0.0,
        "inherits": "object"
      },
      {
        "name": "NDCG",
        "indent": 0.0,
        "inherits": "DCG"
      }
    ],
    {
      "DCG": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "k",
              "10"
            ],
            [
              "gain_type",
              "'exp2'"
            ]
          ],
          "pack": {}
        },
        {
          "name": "evaluate",
          "args": [
            "self",
            "targets"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_get_gain",
          "args": [
            "self",
            "targets"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_get_discount",
          "args": [
            "self",
            "k"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_make_discount",
          "args": [
            "n"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "NDCG": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "k",
              "10"
            ],
            [
              "gain_type",
              "'exp2'"
            ]
          ],
          "pack": {}
        },
        {
          "name": "evaluate",
          "args": [
            "self",
            "targets"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "maxDCG",
          "args": [
            "self",
            "targets"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_rank\\dev\\RankNet.py": [
    [
      {
        "name": "RankNet",
        "indent": 0.0,
        "inherits": "nn.Module"
      },
      {
        "name": "RankNetPairs",
        "indent": 0.0,
        "inherits": "RankNet"
      }
    ],
    {
      "RankNet": [
        {
          "name": "__init__",
          "args": [
            "self",
            "net_structures"
          ],
          "kwargs": [
            [
              "double_precision",
              "False"
            ]
          ],
          "pack": {}
        },
        {
          "name": "forward",
          "args": [
            "self",
            "input1"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "dump_param",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "RankNetPairs": [
        {
          "name": "__init__",
          "args": [
            "self",
            "net_structures"
          ],
          "kwargs": [
            [
              "double_precision",
              "False"
            ]
          ],
          "pack": {}
        },
        {
          "name": "forward",
          "args": [
            "self",
            "input1",
            "input2"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_rank\\dev\\utils.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_sklearn\\lightgbm.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": "\n\n\n    object"
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "model_pars",
              "None"
            ],
            [
              "data_pars",
              "None"
            ],
            [
              "compute_pars",
              "None"
            ]
          ],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_sklearn\\model.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_sklearn\\model_lightgbm.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "model_pars",
              "None"
            ],
            [
              "data_pars",
              "None"
            ],
            [
              "compute_pars",
              "None"
            ]
          ],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_sklearn\\model_sklearn.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "model_pars",
              "None"
            ],
            [
              "data_pars",
              "None"
            ],
            [
              "compute_pars",
              "None"
            ]
          ],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_sklearn\\sklearn.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "model_pars",
              "None"
            ],
            [
              "data_pars",
              "None"
            ],
            [
              "compute_pars",
              "None"
            ]
          ],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_sklearn\\__init__.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\02_mlp.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": "nn.Module"
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "forward",
          "args": [
            "self",
            "x"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\03_nbeats.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\cnn_classifier.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": "nn.Module"
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "forward",
          "args": [
            "self",
            "x"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "log_weights",
          "args": [
            "self",
            "step"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "to",
          "args": [],
          "kwargs": [],
          "pack": {
            "args": "arg",
            "kwargs": "kwarg"
          }
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\data_prep.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\mlp.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": "nn.Module"
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "forward",
          "args": [
            "self",
            "x"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\nbeats.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\pplm.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": []
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\sentence_transformer.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "Model_empty",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "args",
            "device"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "Model_empty": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "model_pars",
              "None"
            ],
            [
              "compute_pars",
              "None"
            ]
          ],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\textcnn.py": [
    [
      {
        "name": "TextCNN",
        "indent": 0.0,
        "inherits": "nn.Module"
      }
    ],
    {
      "TextCNN": [
        {
          "name": "tokenizer",
          "args": [
            "text"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "model_pars",
              "None"
            ]
          ],
          "pack": {
            "kwargs": "kwargs"
          }
        },
        {
          "name": "rebuild_embed",
          "args": [
            "self",
            "vocab_built"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "forward",
          "args": [
            "self",
            "x"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\torchhub.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\transformer_classifier.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "model_pars",
              "None"
            ],
            [
              "data_pars",
              "None"
            ],
            [
              "compute_pars",
              "None"
            ]
          ],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\transformer_classifier2.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "Model_empty",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "Model": [],
      "Model_empty": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "model_pars",
              "None"
            ],
            [
              "compute_pars",
              "None"
            ]
          ],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\transformer_sentence.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": []
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\util_data.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\util_transformer.py": [
    [
      {
        "name": "InputExample",
        "indent": 0.0,
        "inherits": "object"
      },
      {
        "name": "InputFeatures",
        "indent": 0.0,
        "inherits": "object"
      },
      {
        "name": "DataProcessor",
        "indent": 0.0,
        "inherits": "object"
      },
      {
        "name": "BinaryProcessor",
        "indent": 0.0,
        "inherits": "DataProcessor"
      }
    ],
    {
      "InputExample": [
        {
          "name": "__init__",
          "args": [
            "self",
            "guid",
            "text_a"
          ],
          "kwargs": [
            [
              "text_b",
              "None"
            ],
            [
              "label",
              "None"
            ]
          ],
          "pack": {}
        }
      ],
      "InputFeatures": [
        {
          "name": "__init__",
          "args": [
            "self",
            "input_ids",
            "input_mask",
            "segment_ids",
            "label_id"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "DataProcessor": [
        {
          "name": "get_train_examples",
          "args": [
            "self",
            "data_dir"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_dev_examples",
          "args": [
            "self",
            "data_dir"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_labels",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_read_tsv",
          "args": [
            "cls",
            "input_file"
          ],
          "kwargs": [
            [
              "quotechar",
              "None"
            ]
          ],
          "pack": {}
        }
      ],
      "BinaryProcessor": [
        {
          "name": "get_train_examples",
          "args": [
            "self",
            "data_dir"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_dev_examples",
          "args": [
            "self",
            "data_dir"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_labels",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_create_examples",
          "args": [
            "self",
            "lines",
            "set_type"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\__init__.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\nbeats\\data.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\nbeats\\model.py": [
    [
      {
        "name": "Block",
        "indent": 0.0,
        "inherits": "nn.Module"
      },
      {
        "name": "SeasonalityBlock",
        "indent": 0.0,
        "inherits": "Block"
      },
      {
        "name": "TrendBlock",
        "indent": 0.0,
        "inherits": "Block"
      },
      {
        "name": "GenericBlock",
        "indent": 0.0,
        "inherits": "Block"
      },
      {
        "name": "NBeatsNet",
        "indent": 0.0,
        "inherits": "nn.Module"
      }
    ],
    {
      "Block": [
        {
          "name": "__init__",
          "args": [
            "self",
            "units",
            "thetas_dim",
            "device"
          ],
          "kwargs": [
            [
              "backcast_length",
              "10"
            ],
            [
              "forecast_length",
              "5"
            ],
            [
              "share_thetas",
              "False"
            ]
          ],
          "pack": {}
        },
        {
          "name": "forward",
          "args": [
            "self",
            "x"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "__str__",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "SeasonalityBlock": [
        {
          "name": "__init__",
          "args": [
            "self",
            "units",
            "thetas_dim",
            "device"
          ],
          "kwargs": [
            [
              "backcast_length",
              "10"
            ],
            [
              "forecast_length",
              "5"
            ]
          ],
          "pack": {}
        },
        {
          "name": "forward",
          "args": [
            "self",
            "x"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "TrendBlock": [
        {
          "name": "__init__",
          "args": [
            "self",
            "units",
            "thetas_dim",
            "device"
          ],
          "kwargs": [
            [
              "backcast_length",
              "10"
            ],
            [
              "forecast_length",
              "5"
            ]
          ],
          "pack": {}
        },
        {
          "name": "forward",
          "args": [
            "self",
            "x"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "GenericBlock": [
        {
          "name": "__init__",
          "args": [
            "self",
            "units",
            "thetas_dim",
            "device"
          ],
          "kwargs": [
            [
              "backcast_length",
              "10"
            ],
            [
              "forecast_length",
              "5"
            ]
          ],
          "pack": {}
        },
        {
          "name": "forward",
          "args": [
            "self",
            "x"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "NBeatsNet": [
        {
          "name": "__init__",
          "args": [
            "self",
            "device"
          ],
          "kwargs": [
            [
              "stack_types",
              "[TREND_BLOCK, SEASONALITY_BLOCK]"
            ],
            [
              "nb_blocks_per_stack",
              "3"
            ],
            [
              "forecast_length",
              "5"
            ],
            [
              "backcast_length",
              "10"
            ],
            [
              "thetas_dims",
              "[4, 8]"
            ],
            [
              "share_weights_in_stack",
              "False"
            ],
            [
              "hidden_layer_units",
              "256"
            ]
          ],
          "pack": {}
        },
        {
          "name": "create_stack",
          "args": [
            "self",
            "stack_id"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "select_block",
          "args": [
            "block_type"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "forward",
          "args": [
            "self",
            "backcast"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\nbeats\\nbeats.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "learning_rate",
              "0.001"
            ],
            [
              "num_layers",
              "2"
            ],
            [
              "size",
              "None"
            ],
            [
              "size_layer",
              "128"
            ],
            [
              "output_size",
              "None"
            ],
            [
              "forget_bias",
              "0.1"
            ],
            [
              "timestep",
              "5"
            ],
            [
              "epoch",
              "5"
            ]
          ],
          "pack": {}
        },
        {
          "name": "plot_model",
          "args": [
            "x",
            "target",
            "grad_step"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\nbeats\\nbeats_sample.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\nbeats\\trainer.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\nbeats\\__init__.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\pplm\\pplm_classification_head.py": [
    [
      {
        "name": "ClassificationHead",
        "indent": 0.0,
        "inherits": "torch.nn.Module"
      }
    ],
    {
      "ClassificationHead": [
        {
          "name": "__init__",
          "args": [
            "self",
            "class_size",
            "embed_size"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "forward",
          "args": [
            "self",
            "hidden_state"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\pplm\\run_pplm.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\pplm\\run_pplm_discrim_train.py": [
    [
      {
        "name": "Discriminator",
        "indent": 0.0,
        "inherits": "torch.nn.Module"
      },
      {
        "name": "Dataset",
        "indent": 0.0,
        "inherits": "data.Dataset"
      }
    ],
    {
      "Discriminator": [
        {
          "name": "__init__",
          "args": [
            "self",
            "class_size"
          ],
          "kwargs": [
            [
              "pretrained_model",
              "\"gpt2-medium\""
            ],
            [
              "cached_mode",
              "False"
            ],
            [
              "device",
              "'cpu'"
            ]
          ],
          "pack": {}
        },
        {
          "name": "get_classifier",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "train_custom",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "avg_representation",
          "args": [
            "self",
            "x"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "forward",
          "args": [
            "self",
            "x"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "Dataset": [
        {
          "name": "__init__",
          "args": [
            "self",
            "X",
            "y"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "__len__",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "__getitem__",
          "args": [
            "self",
            "index"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "pad_sequences",
          "args": [
            "sequences"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\pplm\\__init__.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\pplm\\pplm_transformer\\pplm.py": [
    [
      {
        "name": "ClassificationHead",
        "indent": 0.0,
        "inherits": "torch.nn.Module"
      },
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "ClassificationHead": [
        {
          "name": "__init__",
          "args": [
            "self",
            "class_size",
            "embed_size"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "forward",
          "args": [
            "self",
            "hidden_state"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "args",
            "device"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "add",
          "args": [],
          "kwargs": [],
          "pack": {
            "args": "k",
            "kwargs": "kw"
          }
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\pplm\\pplm_transformer\\pplm_classification_head.py": [
    [
      {
        "name": "ClassificationHead",
        "indent": 0.0,
        "inherits": "torch.nn.Module"
      }
    ],
    {
      "ClassificationHead": [
        {
          "name": "__init__",
          "args": [
            "self",
            "class_size",
            "embed_size"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "forward",
          "args": [
            "self",
            "hidden_state"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\pplm\\pplm_transformer\\pplm_train.py": [
    [
      {
        "name": "Discriminator",
        "indent": 0.0,
        "inherits": "torch.nn.Module"
      },
      {
        "name": "Dataset",
        "indent": 0.0,
        "inherits": "data.Dataset"
      }
    ],
    {
      "Discriminator": [
        {
          "name": "__init__",
          "args": [
            "self",
            "class_size"
          ],
          "kwargs": [
            [
              "pretrained_model",
              "\"gpt2-medium\""
            ],
            [
              "cached_mode",
              "False"
            ],
            [
              "device",
              "\"cpu\""
            ]
          ],
          "pack": {}
        },
        {
          "name": "get_classifier",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "train_custom",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "avg_representation",
          "args": [
            "self",
            "x"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "forward",
          "args": [
            "self",
            "x"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "Dataset": [
        {
          "name": "__init__",
          "args": [
            "self",
            "X",
            "y"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "__len__",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "__getitem__",
          "args": [
            "self",
            "index"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "pad_sequences",
          "args": [
            "sequences"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\pplm\\pplm_transformer\\run_pplm.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\pplm\\pplm_transformer\\run_pplm_discrim_train.py": [
    [
      {
        "name": "Discriminator",
        "indent": 0.0,
        "inherits": "torch.nn.Module"
      },
      {
        "name": "Dataset",
        "indent": 0.0,
        "inherits": "data.Dataset"
      }
    ],
    {
      "Discriminator": [
        {
          "name": "__init__",
          "args": [
            "self",
            "class_size"
          ],
          "kwargs": [
            [
              "pretrained_model",
              "\"gpt2-medium\""
            ],
            [
              "cached_mode",
              "False"
            ],
            [
              "device",
              "\"cpu\""
            ]
          ],
          "pack": {}
        },
        {
          "name": "get_classifier",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "train_custom",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "avg_representation",
          "args": [
            "self",
            "x"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "forward",
          "args": [
            "self",
            "x"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "Dataset": [
        {
          "name": "__init__",
          "args": [
            "self",
            "X",
            "y"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "__len__",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "__getitem__",
          "args": [
            "self",
            "index"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "pad_sequences",
          "args": [
            "sequences"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\pplm\\pplm_transformer\\__init__.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\cli_generate_data.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\network_test.py": [
    [
      {
        "name": "View",
        "indent": 0.0,
        "inherits": "nn.Module"
      },
      {
        "name": "BetaVAE_new",
        "indent": 0.0,
        "inherits": "nn.Module"
      },
      {
        "name": "BetaVAE_H",
        "indent": 0.0,
        "inherits": "nn.Module"
      }
    ],
    {
      "View": [
        {
          "name": "__init__",
          "args": [
            "self",
            "size"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "forward",
          "args": [
            "self",
            "tensor"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "BetaVAE_new": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "z_dim",
              "10"
            ],
            [
              "nc",
              "3"
            ]
          ],
          "pack": {}
        },
        {
          "name": "weight_init",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "forward",
          "args": [
            "self",
            "x"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_encode",
          "args": [
            "self",
            "x"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_decode",
          "args": [
            "self",
            "z"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "BetaVAE_H": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "z_dim",
              "10"
            ],
            [
              "nc",
              "3"
            ]
          ],
          "pack": {}
        },
        {
          "name": "weight_init",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "forward",
          "args": [
            "self",
            "x"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_encode",
          "args": [
            "self",
            "x"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_decode",
          "args": [
            "self",
            "z"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\util.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\__init__.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\models\\cli.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\models\\__init__.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\models\\Beta_VAE\\dataset.py": [
    [
      {
        "name": "CustomImageFolder",
        "indent": 0.0,
        "inherits": "ImageFolder"
      },
      {
        "name": "CustomTensorDataset",
        "indent": 0.0,
        "inherits": "Dataset"
      }
    ],
    {
      "CustomImageFolder": [
        {
          "name": "__init__",
          "args": [
            "self",
            "root"
          ],
          "kwargs": [
            [
              "transform",
              "None"
            ]
          ],
          "pack": {}
        },
        {
          "name": "__getitem__",
          "args": [
            "self",
            "index"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "CustomTensorDataset": [
        {
          "name": "__init__",
          "args": [
            "self",
            "data_tensor"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "__getitem__",
          "args": [
            "self",
            "index"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "__len__",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\models\\Beta_VAE\\main.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\models\\Beta_VAE\\model.py": [
    [
      {
        "name": "View",
        "indent": 0.0,
        "inherits": "nn.Module"
      },
      {
        "name": "BetaVAE_H_4_nn",
        "indent": 0.0,
        "inherits": "nn.Module"
      },
      {
        "name": "BetaVAE_H",
        "indent": 0.0,
        "inherits": "nn.Module"
      },
      {
        "name": "BetaVAE_B",
        "indent": 0.0,
        "inherits": "BetaVAE_H"
      }
    ],
    {
      "View": [
        {
          "name": "__init__",
          "args": [
            "self",
            "size"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "forward",
          "args": [
            "self",
            "tensor"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "BetaVAE_H_4_nn": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "z_dim",
              "10"
            ],
            [
              "nc",
              "3"
            ]
          ],
          "pack": {}
        },
        {
          "name": "weight_init",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "forward",
          "args": [
            "self",
            "x"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_encode",
          "args": [
            "self",
            "x"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_decode",
          "args": [
            "self",
            "z"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "BetaVAE_H": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "z_dim",
              "10"
            ],
            [
              "nc",
              "3"
            ]
          ],
          "pack": {}
        },
        {
          "name": "weight_init",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "forward",
          "args": [
            "self",
            "x"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_encode",
          "args": [
            "self",
            "x"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_decode",
          "args": [
            "self",
            "z"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "BetaVAE_B": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "z_dim",
              "10"
            ],
            [
              "nc",
              "1"
            ]
          ],
          "pack": {}
        },
        {
          "name": "weight_init",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "forward",
          "args": [
            "self",
            "x"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_encode",
          "args": [
            "self",
            "x"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_decode",
          "args": [
            "self",
            "z"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\models\\Beta_VAE\\solver.py": [
    [
      {
        "name": "DataGather",
        "indent": 0.0,
        "inherits": "object"
      },
      {
        "name": "Solver",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "DataGather": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_empty_data_dict",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "insert",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {
            "kwargs": "kwargs"
          }
        },
        {
          "name": "flush",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "Solver": [
        {
          "name": "__init__",
          "args": [
            "self",
            "args"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "train",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "viz_reconstruction",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "viz_lines",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "viz_traverse",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "limit",
              "3"
            ],
            [
              "inter",
              "2/3"
            ],
            [
              "loc",
              "-1"
            ]
          ],
          "pack": {}
        },
        {
          "name": "net_mode",
          "args": [
            "self",
            "train"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "save_checkpoint",
          "args": [
            "self",
            "filename"
          ],
          "kwargs": [
            [
              "silent",
              "True"
            ]
          ],
          "pack": {}
        },
        {
          "name": "load_checkpoint",
          "args": [
            "self",
            "filename"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\models\\Beta_VAE\\utils.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\models\\Beta_VAE\\__init__.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\models\\Beta_VAE_fft\\dataset.py": [
    [
      {
        "name": "CustomImageFolder",
        "indent": 0.0,
        "inherits": "ImageFolder"
      },
      {
        "name": "CustomTensorDataset",
        "indent": 0.0,
        "inherits": "Dataset"
      }
    ],
    {
      "CustomImageFolder": [
        {
          "name": "__init__",
          "args": [
            "self",
            "root"
          ],
          "kwargs": [
            [
              "transform",
              "None"
            ]
          ],
          "pack": {}
        },
        {
          "name": "__getitem__",
          "args": [
            "self",
            "index"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "CustomTensorDataset": [
        {
          "name": "__init__",
          "args": [
            "self",
            "data_tensor"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "__getitem__",
          "args": [
            "self",
            "index"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "__len__",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\models\\Beta_VAE_fft\\main.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\models\\Beta_VAE_fft\\model.py": [
    [
      {
        "name": "View",
        "indent": 0.0,
        "inherits": "nn.Module"
      },
      {
        "name": "BetaVAE_fft",
        "indent": 0.0,
        "inherits": "nn.Module"
      },
      {
        "name": "BetaVAE_H",
        "indent": 0.0,
        "inherits": "nn.Module"
      },
      {
        "name": "BetaVAE_B",
        "indent": 0.0,
        "inherits": "BetaVAE_H"
      }
    ],
    {
      "View": [
        {
          "name": "__init__",
          "args": [
            "self",
            "size"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "forward",
          "args": [
            "self",
            "tensor"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "BetaVAE_fft": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "z_dim",
              "10"
            ],
            [
              "nc",
              "3"
            ]
          ],
          "pack": {}
        },
        {
          "name": "weight_init",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "forward",
          "args": [
            "self",
            "x"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_encode",
          "args": [
            "self",
            "x"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_decode",
          "args": [
            "self",
            "z"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "BetaVAE_H": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "z_dim",
              "10"
            ],
            [
              "nc",
              "3"
            ]
          ],
          "pack": {}
        },
        {
          "name": "weight_init",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "forward",
          "args": [
            "self",
            "x"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_encode",
          "args": [
            "self",
            "x"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_decode",
          "args": [
            "self",
            "z"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "BetaVAE_B": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "z_dim",
              "10"
            ],
            [
              "nc",
              "1"
            ]
          ],
          "pack": {}
        },
        {
          "name": "weight_init",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "forward",
          "args": [
            "self",
            "x"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_encode",
          "args": [
            "self",
            "x"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_decode",
          "args": [
            "self",
            "z"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\models\\Beta_VAE_fft\\solver.py": [
    [
      {
        "name": "DataGather",
        "indent": 0.0,
        "inherits": "object"
      },
      {
        "name": "Solver",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "DataGather": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_empty_data_dict",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "insert",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {
            "kwargs": "kwargs"
          }
        },
        {
          "name": "flush",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "Solver": [
        {
          "name": "__init__",
          "args": [
            "self",
            "args"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "train",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "viz_reconstruction",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "viz_lines",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "viz_traverse",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "limit",
              "3"
            ],
            [
              "inter",
              "2/3"
            ],
            [
              "loc",
              "-1"
            ]
          ],
          "pack": {}
        },
        {
          "name": "net_mode",
          "args": [
            "self",
            "train"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "save_checkpoint",
          "args": [
            "self",
            "filename"
          ],
          "kwargs": [
            [
              "silent",
              "True"
            ]
          ],
          "pack": {}
        },
        {
          "name": "load_checkpoint",
          "args": [
            "self",
            "filename"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\models\\Beta_VAE_fft\\utils.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\models\\Beta_VAE_fft\\__init__.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\10_encoder_vanilla.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "learning_rate",
            "num_layers",
            "size",
            "size_layer",
            "output_size"
          ],
          "kwargs": [
            [
              "forget_bias",
              "0.1"
            ],
            [
              "epoch",
              "500"
            ],
            [
              "timestep",
              "5"
            ]
          ],
          "pack": {}
        },
        {
          "name": "build_model",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "anchor",
          "args": [
            "signal",
            "weight"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\11_bidirectional_vanilla.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "learning_rate",
            "num_layers",
            "size",
            "size_layer",
            "output_size"
          ],
          "kwargs": [
            [
              "forget_bias",
              "0.1"
            ],
            [
              "epoch",
              "500"
            ],
            [
              "timestep",
              "5"
            ]
          ],
          "pack": {}
        },
        {
          "name": "anchor",
          "args": [
            "signal",
            "weight"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\12_vanilla_2path.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "learning_rate",
            "num_layers",
            "size",
            "size_layer",
            "output_size"
          ],
          "kwargs": [
            [
              "forget_bias",
              "0.1"
            ],
            [
              "epoch",
              "500"
            ],
            [
              "timestep",
              "5"
            ]
          ],
          "pack": {}
        },
        {
          "name": "anchor",
          "args": [
            "signal",
            "weight"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\13_lstm_seq2seq.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "learning_rate",
            "num_layers",
            "size",
            "size_layer",
            "output_size"
          ],
          "kwargs": [
            [
              "forget_bias",
              "0.1"
            ],
            [
              "epoch",
              "500"
            ],
            [
              "timestep",
              "5"
            ]
          ],
          "pack": {}
        },
        {
          "name": "anchor",
          "args": [
            "signal",
            "weight"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\14_lstm_attention.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "learning_rate",
            "num_layers",
            "size",
            "size_layer",
            "output_size"
          ],
          "kwargs": [
            [
              "forget_bias",
              "0.1"
            ],
            [
              "attention_size",
              "10"
            ],
            [
              "epoch",
              "500"
            ],
            [
              "timestep",
              "5"
            ]
          ],
          "pack": {}
        },
        {
          "name": "anchor",
          "args": [
            "signal",
            "weight"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\15_lstm_seq2seq_attention.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "learning_rate",
            "num_layers",
            "size",
            "size_layer",
            "output_size"
          ],
          "kwargs": [
            [
              "forget_bias",
              "0.1"
            ],
            [
              "attention_size",
              "10"
            ],
            [
              "epoch",
              "500"
            ],
            [
              "timestep",
              "5"
            ]
          ],
          "pack": {}
        },
        {
          "name": "anchor",
          "args": [
            "signal",
            "weight"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\16_lstm_seq2seq_bidirectional.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "learning_rate",
            "num_layers",
            "size",
            "size_layer",
            "output_size"
          ],
          "kwargs": [
            [
              "forget_bias",
              "0.1"
            ],
            [
              "epoch",
              "500"
            ],
            [
              "timestep",
              "5"
            ]
          ],
          "pack": {}
        },
        {
          "name": "anchor",
          "args": [
            "signal",
            "weight"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\17_lstm_seq2seq_bidirectional_attention.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "learning_rate",
            "num_layers",
            "size",
            "size_layer",
            "output_size"
          ],
          "kwargs": [
            [
              "forget_bias",
              "0.1"
            ],
            [
              "attention_size",
              "10"
            ],
            [
              "epoch",
              "500"
            ],
            [
              "timestep",
              "5"
            ]
          ],
          "pack": {}
        },
        {
          "name": "anchor",
          "args": [
            "signal",
            "weight"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\18_lstm_attention_scaleddot.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "learning_rate",
            "num_layers",
            "size",
            "size_layer",
            "output_size",
            "seq_len"
          ],
          "kwargs": [
            [
              "forget_bias",
              "0.1"
            ],
            [
              "epoch",
              "500"
            ]
          ],
          "pack": {}
        },
        {
          "name": "anchor",
          "args": [
            "signal",
            "weight"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\19_lstm_dilated.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "steps",
            "dimension_input",
            "dimension_output"
          ],
          "kwargs": [
            [
              "learning_rate",
              "0.001"
            ],
            [
              "hidden_structs",
              "[20]"
            ],
            [
              "dilations",
              "[1, 1, 1, 1]"
            ],
            [
              "epoch",
              "500"
            ]
          ],
          "pack": {}
        },
        {
          "name": "anchor",
          "args": [
            "signal",
            "weight"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\1_lstm.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "model_pars",
              "None"
            ],
            [
              "data_pars",
              "None"
            ],
            [
              "compute_pars",
              "None"
            ]
          ],
          "pack": {
            "kwargs": "kwargs"
          }
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\20_only_attention.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "seq_len",
            "learning_rate",
            "dimension_input",
            "dimension_output"
          ],
          "kwargs": [
            [
              "epoch",
              "100"
            ]
          ],
          "pack": {}
        },
        {
          "name": "anchor",
          "args": [
            "signal",
            "weight"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\21_multihead_attention.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "dimension_input",
            "dimension_output",
            "seq_len",
            "learning_rate"
          ],
          "kwargs": [
            [
              "num_heads",
              "8"
            ],
            [
              "attn_windows",
              "range(1, 6)"
            ],
            [
              "epoch",
              "1"
            ]
          ],
          "pack": {}
        },
        {
          "name": "multihead_attn",
          "args": [
            "self",
            "inputs",
            "masks"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "window_mask",
          "args": [
            "self",
            "h_w"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "anchor",
          "args": [
            "signal",
            "weight"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\22_lstm_bahdanau.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "learning_rate",
            "num_layers",
            "size",
            "size_layer",
            "output_size"
          ],
          "kwargs": [
            [
              "forget_bias",
              "0.1"
            ],
            [
              "attention_size",
              "10"
            ],
            [
              "epoch",
              "100"
            ],
            [
              "timestep",
              "5"
            ]
          ],
          "pack": {}
        },
        {
          "name": "anchor",
          "args": [
            "signal",
            "weight"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\23_lstm_luong.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "learning_rate",
            "num_layers",
            "size",
            "size_layer",
            "output_size"
          ],
          "kwargs": [
            [
              "forget_bias",
              "0.1"
            ],
            [
              "attention_size",
              "10"
            ],
            [
              "epoch",
              "100"
            ],
            [
              "timestep",
              "5"
            ]
          ],
          "pack": {}
        },
        {
          "name": "anchor",
          "args": [
            "signal",
            "weight"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\24_lstm_luong_bahdanau.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "learning_rate",
            "num_layers",
            "size",
            "size_layer",
            "output_size"
          ],
          "kwargs": [
            [
              "forget_bias",
              "0.1"
            ],
            [
              "attention_size",
              "10"
            ],
            [
              "epoch",
              "1"
            ],
            [
              "timestep",
              "5"
            ]
          ],
          "pack": {}
        },
        {
          "name": "anchor",
          "args": [
            "signal",
            "weight"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\25_dnc.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "learning_rate",
            "size",
            "size_layer",
            "output_size",
            "epoch",
            "timestep",
            "access_config",
            "controller_config",
            "clip_value"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\26_lstm_residual.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "learning_rate",
            "num_layers",
            "size",
            "size_layer",
            "output_size"
          ],
          "kwargs": [
            [
              "epoch",
              "1"
            ],
            [
              "timestep",
              "5"
            ]
          ],
          "pack": {}
        },
        {
          "name": "anchor",
          "args": [
            "signal",
            "weight"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\27_byte_net.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "size",
            "output_size",
            "channels",
            "encoder_dilations",
            "encoder_filter_width"
          ],
          "kwargs": [
            [
              "learning_rate",
              "0.001"
            ],
            [
              "beta1",
              "0.5"
            ],
            [
              "epoch",
              "1"
            ],
            [
              "timestep",
              "5"
            ]
          ],
          "pack": {}
        },
        {
          "name": "anchor",
          "args": [
            "signal",
            "weight"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\28_attention_is_all_you_need.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "size_layer",
            "embedded_size",
            "learning_rate",
            "size",
            "output_size"
          ],
          "kwargs": [
            [
              "num_blocks",
              "2"
            ],
            [
              "num_heads",
              "8"
            ],
            [
              "min_freq",
              "50"
            ],
            [
              "epoch",
              "1"
            ],
            [
              "timestep",
              "5"
            ]
          ],
          "pack": {}
        },
        {
          "name": "anchor",
          "args": [
            "signal",
            "weight"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\29_fairseq.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "n_layers",
            "size",
            "output_size",
            "emb_size",
            "n_hidden",
            "n_attn_heads",
            "learning_rate"
          ],
          "kwargs": [
            [
              "epoch",
              "1"
            ],
            [
              "timestep",
              "5"
            ]
          ],
          "pack": {}
        },
        {
          "name": "anchor",
          "args": [
            "signal",
            "weight"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\2_encoder_lstm.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "learning_rate",
            "num_layers",
            "size",
            "size_layer",
            "output_size"
          ],
          "kwargs": [
            [
              "forget_bias",
              "0.1"
            ],
            [
              "epoch",
              "5"
            ],
            [
              "timestep",
              "5"
            ]
          ],
          "pack": {}
        },
        {
          "name": "build_model",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "anchor",
          "args": [
            "signal",
            "weight"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\3_bidirectional_lstm.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "learning_rate",
            "num_layers",
            "size",
            "size_layer",
            "output_size"
          ],
          "kwargs": [
            [
              "forget_bias",
              "0.1"
            ],
            [
              "epoch",
              "500"
            ],
            [
              "timestep",
              "5"
            ]
          ],
          "pack": {}
        },
        {
          "name": "anchor",
          "args": [
            "signal",
            "weight"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\4_lstm_2path.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "learning_rate",
            "num_layers",
            "size",
            "size_layer",
            "output_size"
          ],
          "kwargs": [
            [
              "forget_bias",
              "0.1"
            ],
            [
              "timestep",
              "5"
            ],
            [
              "epoch",
              "10"
            ]
          ],
          "pack": {}
        },
        {
          "name": "anchor",
          "args": [
            "signal",
            "weight"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\50lstm attention.py": [
    [
      {
        "name": "AttentionModel",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "AttentionModel": [
        {
          "name": "__init__",
          "args": [
            "self",
            "x",
            "y",
            "layer_1_rnn_units"
          ],
          "kwargs": [
            [
              "attn_dense_nodes",
              "0"
            ],
            [
              "epochs",
              "100"
            ],
            [
              "batch_size",
              "128"
            ],
            [
              "shared_attention_layer",
              "True"
            ],
            [
              "chg_yield",
              "False"
            ],
            [
              "float_type",
              "'float32'"
            ],
            [
              "regularization",
              "(0.00001, '00001')"
            ],
            [
              "window",
              "52"
            ],
            [
              "predict",
              "1"
            ]
          ],
          "pack": {}
        },
        {
          "name": "delete_model",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "load_model",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "save_model",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "set_learning",
          "args": [
            "self",
            "learning"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "make_shared_layers",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "build_attention_rnn",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "fit_model",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "calculate_attentions",
          "args": [
            "self",
            "x_data"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "heatmap",
          "args": [
            "self",
            "data"
          ],
          "kwargs": [
            [
              "title_supplement",
              "None"
            ]
          ],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\5_gru.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "learning_rate",
            "num_layers",
            "size",
            "size_layer",
            "output_size"
          ],
          "kwargs": [
            [
              "forget_bias",
              "0.1"
            ],
            [
              "epoch",
              "1"
            ],
            [
              "timestep",
              "5"
            ]
          ],
          "pack": {}
        },
        {
          "name": "anchor",
          "args": [
            "signal",
            "weight"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\6_encoder_gru.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "learning_rate",
            "num_layers",
            "size",
            "size_layer",
            "output_size"
          ],
          "kwargs": [
            [
              "forget_bias",
              "0.1"
            ],
            [
              "timestep",
              "5"
            ],
            [
              "epoch",
              "1"
            ]
          ],
          "pack": {}
        },
        {
          "name": "build_model",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "anchor",
          "args": [
            "signal",
            "weight"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\7_bidirectional_gru.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "learning_rate",
            "num_layers",
            "size",
            "size_layer",
            "output_size"
          ],
          "kwargs": [
            [
              "forget_bias",
              "0.1"
            ],
            [
              "epoch",
              "500"
            ],
            [
              "timestep",
              "5"
            ]
          ],
          "pack": {}
        },
        {
          "name": "anchor",
          "args": [
            "signal",
            "weight"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\8_gru_2path.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "learning_rate",
            "num_layers",
            "size",
            "size_layer",
            "output_size"
          ],
          "kwargs": [
            [
              "forget_bias",
              "0.1"
            ],
            [
              "epoch",
              "500"
            ],
            [
              "timestep",
              "5"
            ]
          ],
          "pack": {}
        },
        {
          "name": "anchor",
          "args": [
            "signal",
            "weight"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\9_vanilla.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "learning_rate",
            "num_layers",
            "size",
            "size_layer",
            "output_size"
          ],
          "kwargs": [
            [
              "forget_bias",
              "0.1"
            ],
            [
              "epoch",
              "500"
            ],
            [
              "timestep",
              "5"
            ]
          ],
          "pack": {}
        },
        {
          "name": "anchor",
          "args": [
            "signal",
            "weight"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\access.py": [
    [
      {
        "name": "MemoryAccess",
        "indent": 0.0,
        "inherits": "snt.RNNCore"
      }
    ],
    {
      "MemoryAccess": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "memory_size",
              "128"
            ],
            [
              "word_size",
              "20"
            ],
            [
              "num_reads",
              "1"
            ],
            [
              "num_writes",
              "1"
            ],
            [
              "name",
              "\"memory_access\""
            ]
          ],
          "pack": {}
        },
        {
          "name": "_build",
          "args": [
            "self",
            "inputs",
            "prev_state"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_read_inputs",
          "args": [
            "self",
            "inputs"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_write_weights",
          "args": [
            "self",
            "inputs",
            "memory",
            "usage"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_read_weights",
          "args": [
            "self",
            "inputs",
            "memory",
            "prev_read_weights",
            "link"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "state_size",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "output_size",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\addressing.py": [
    [
      {
        "name": "CosineWeights",
        "indent": 0.0,
        "inherits": "snt.AbstractModule"
      },
      {
        "name": "TemporalLinkage",
        "indent": 0.0,
        "inherits": "snt.RNNCore"
      },
      {
        "name": "Freeness",
        "indent": 0.0,
        "inherits": "snt.RNNCore"
      }
    ],
    {
      "CosineWeights": [
        {
          "name": "__init__",
          "args": [
            "self",
            "num_heads",
            "word_size"
          ],
          "kwargs": [
            [
              "strength_op",
              "tf.nn.softplus"
            ],
            [
              "name",
              "\"cosine_weights\""
            ]
          ],
          "pack": {}
        },
        {
          "name": "_build",
          "args": [
            "self",
            "memory",
            "keys",
            "strengths"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "TemporalLinkage": [
        {
          "name": "__init__",
          "args": [
            "self",
            "memory_size",
            "num_writes"
          ],
          "kwargs": [
            [
              "name",
              "\"temporal_linkage\""
            ]
          ],
          "pack": {}
        },
        {
          "name": "_build",
          "args": [
            "self",
            "write_weights",
            "prev_state"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "directional_read_weights",
          "args": [
            "self",
            "link",
            "prev_read_weights",
            "forward"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_link",
          "args": [
            "self",
            "prev_link",
            "prev_precedence_weights",
            "write_weights"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_precedence_weights",
          "args": [
            "self",
            "prev_precedence_weights",
            "write_weights"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "state_size",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "Freeness": [
        {
          "name": "__init__",
          "args": [
            "self",
            "memory_size"
          ],
          "kwargs": [
            [
              "name",
              "\"freeness\""
            ]
          ],
          "pack": {}
        },
        {
          "name": "_build",
          "args": [
            "self",
            "write_weights",
            "free_gate",
            "read_weights",
            "prev_usage"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "write_allocation_weights",
          "args": [
            "self",
            "usage",
            "write_gates",
            "num_writes"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_usage_after_write",
          "args": [
            "self",
            "prev_usage",
            "write_weights"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_usage_after_read",
          "args": [
            "self",
            "prev_usage",
            "free_gate",
            "read_weights"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_allocation",
          "args": [
            "self",
            "usage"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "state_size",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\autoencoder.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\dnc.py": [
    [
      {
        "name": "DNC",
        "indent": 0.0,
        "inherits": "snt.RNNCore"
      }
    ],
    {
      "DNC": [
        {
          "name": "__init__",
          "args": [
            "self",
            "access_config",
            "controller_config",
            "output_size"
          ],
          "kwargs": [
            [
              "clip_value",
              "None"
            ],
            [
              "name",
              "\"dnc\""
            ]
          ],
          "pack": {}
        },
        {
          "name": "_clip_if_enabled",
          "args": [
            "self",
            "x"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_build",
          "args": [
            "self",
            "inputs",
            "prev_state"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "initial_state",
          "args": [
            "self",
            "batch_size"
          ],
          "kwargs": [
            [
              "dtype",
              "tf.float32"
            ]
          ],
          "pack": {}
        },
        {
          "name": "state_size",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "output_size",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\util.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\__init__.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\deepar\\settings.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\deepar\\__init__.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\deepar\\dataset\\time_series.py": [
    [
      {
        "name": "MockTs",
        "indent": 0.0,
        "inherits": "Dataset"
      },
      {
        "name": "TimeSeries",
        "indent": 0.0,
        "inherits": "Dataset"
      }
    ],
    {
      "MockTs": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "t_min",
              "0"
            ],
            [
              "t_max",
              "30"
            ],
            [
              "resolution",
              ".1"
            ]
          ],
          "pack": {}
        },
        {
          "name": "_time_series",
          "args": [
            "t"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "next_batch",
          "args": [
            "self",
            "batch_size",
            "n_steps"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "mock_ts",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "generate_test_data",
          "args": [
            "self",
            "n_steps"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "TimeSeries": [
        {
          "name": "__init__",
          "args": [
            "self",
            "pandas_df"
          ],
          "kwargs": [
            [
              "one_hot_root_list",
              "None"
            ],
            [
              "grouping_variable",
              "'category'"
            ],
            [
              "scaler",
              "None"
            ]
          ],
          "pack": {}
        },
        {
          "name": "_one_hot_padding",
          "args": [
            "self",
            "pandas_df",
            "padding_df"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_pad_ts",
          "args": [
            "self",
            "pandas_df",
            "desired_len"
          ],
          "kwargs": [
            [
              "padding_val",
              "0"
            ]
          ],
          "pack": {}
        },
        {
          "name": "_sample_ts",
          "args": [
            "pandas_df",
            "desired_len"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "next_batch",
          "args": [
            "self",
            "batch_size",
            "n_steps"
          ],
          "kwargs": [
            [
              "target_var",
              "'target'"
            ],
            [
              "verbose",
              "False"
            ],
            [
              "padding_value",
              "0"
            ]
          ],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\deepar\\dataset\\__init__.py": [
    [
      {
        "name": "Dataset",
        "indent": 0.0,
        "inherits": "ABC"
      }
    ],
    {
      "Dataset": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "next_batch",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {
            "kwargs": "kwargs"
          }
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\deepar\\model\\layers.py": [
    [
      {
        "name": "GaussianLayer",
        "indent": 0.0,
        "inherits": "Layer"
      }
    ],
    {
      "GaussianLayer": [
        {
          "name": "__init__",
          "args": [
            "self",
            "output_dim"
          ],
          "kwargs": [],
          "pack": {
            "kwargs": "kwargs"
          }
        },
        {
          "name": "build",
          "args": [
            "self",
            "input_shape"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "call",
          "args": [
            "self",
            "x"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "compute_output_shape",
          "args": [
            "self",
            "input_shape"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\deepar\\model\\loss.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\deepar\\model\\lstm.py": [
    [
      {
        "name": "DeepAR",
        "indent": 0.0,
        "inherits": "NNModel"
      }
    ],
    {
      "DeepAR": [
        {
          "name": "__init__",
          "args": [
            "self",
            "ts_obj"
          ],
          "kwargs": [
            [
              "steps_per_epoch",
              "50"
            ],
            [
              "epochs",
              "100"
            ],
            [
              "loss",
              "gaussian_likelihood"
            ],
            [
              "optimizer",
              "'adam'"
            ],
            [
              "with_custom_nn_structure",
              "None"
            ]
          ],
          "pack": {}
        },
        {
          "name": "basic_structure",
          "args": [],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "instantiate_and_fit",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "verbose",
              "False"
            ]
          ],
          "pack": {}
        },
        {
          "name": "model",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "predict_theta_from_input",
          "args": [
            "self",
            "input_list"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\deepar\\model\\__init__.py": [
    [
      {
        "name": "NNModel",
        "indent": 0.0,
        "inherits": "ABC"
      }
    ],
    {
      "NNModel": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "net_structure",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {
            "kwargs": "kwargs"
          }
        },
        {
          "name": "instantiate_and_fit",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {
            "kwargs": "kwargs"
          }
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\deepar\\utils\\__init__.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\0_template_rl.py": [
    [
      {
        "name": "to_name",
        "indent": 0.0,
        "inherits": "object"
      },
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "Agent",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "to_name": [],
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "history"
          ],
          "kwargs": [
            [
              "params",
              "{}"
            ]
          ],
          "pack": {}
        }
      ],
      "Agent": [
        {
          "name": "__init__",
          "args": [
            "self",
            "history",
            "do_action"
          ],
          "kwargs": [
            [
              "params",
              "{}"
            ]
          ],
          "pack": {}
        },
        {
          "name": "predict_action",
          "args": [
            "self",
            "inputs"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_predicted_action",
          "args": [
            "self",
            "sequence"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_state",
          "args": [
            "self",
            "t"
          ],
          "kwargs": [
            [
              "state",
              "None"
            ],
            [
              "history",
              "None"
            ],
            [
              "reward",
              "None"
            ]
          ],
          "pack": {}
        },
        {
          "name": "discount_rewards",
          "args": [
            "self",
            "r"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "run_sequence",
          "args": [
            "self",
            "history",
            "do_action",
            "params"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "train",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "n_iters",
              "1"
            ],
            [
              "n_log_freq",
              "1"
            ],
            [
              "state_initial",
              "None"
            ],
            [
              "reward_initial",
              "None"
            ]
          ],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\1.turtle-agent.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\10.duel-q-learning-agent.py": [
    [
      {
        "name": "Agent",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Agent": [
        {
          "name": "__init__",
          "args": [
            "self",
            "state_size",
            "window_size",
            "trend",
            "skip",
            "batch_size"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "act",
          "args": [
            "self",
            "state"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_state",
          "args": [
            "self",
            "t"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "replay",
          "args": [
            "self",
            "batch_size"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "buy",
          "args": [
            "self",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "train",
          "args": [
            "self",
            "iterations",
            "checkpoint",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\11.double-duel-q-learning-agent.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "Agent",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "input_size",
            "output_size",
            "layer_size",
            "learning_rate"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "Agent": [
        {
          "name": "__init__",
          "args": [
            "self",
            "state_size",
            "window_size",
            "trend",
            "skip"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_assign",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_memorize",
          "args": [
            "self",
            "state",
            "action",
            "reward",
            "new_state",
            "done"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_select_action",
          "args": [
            "self",
            "state"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_construct_memories",
          "args": [
            "self",
            "replay"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "predict",
          "args": [
            "self",
            "inputs"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_predicted_action",
          "args": [
            "self",
            "sequence"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_state",
          "args": [
            "self",
            "t"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "buy",
          "args": [
            "self",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "train",
          "args": [
            "self",
            "iterations",
            "checkpoint",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\12.duel-recurrent-q-learning-agent.py": [
    [
      {
        "name": "Agent",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Agent": [
        {
          "name": "__init__",
          "args": [
            "self",
            "state_size",
            "window_size",
            "trend",
            "skip"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_memorize",
          "args": [
            "self",
            "state",
            "action",
            "reward",
            "new_state",
            "dead",
            "rnn_state"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_construct_memories",
          "args": [
            "self",
            "replay"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_state",
          "args": [
            "self",
            "t"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "buy",
          "args": [
            "self",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "train",
          "args": [
            "self",
            "iterations",
            "checkpoint",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\13.double-duel-recurrent-q-learning-agent.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "Agent",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "input_size",
            "output_size",
            "layer_size",
            "learning_rate",
            "name"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "Agent": [
        {
          "name": "__init__",
          "args": [
            "self",
            "state_size",
            "window_size",
            "trend",
            "skip"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_assign",
          "args": [
            "self",
            "from_name",
            "to_name"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_memorize",
          "args": [
            "self",
            "state",
            "action",
            "reward",
            "new_state",
            "dead",
            "rnn_state"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_select_action",
          "args": [
            "self",
            "state"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_construct_memories",
          "args": [
            "self",
            "replay"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_state",
          "args": [
            "self",
            "t"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "buy",
          "args": [
            "self",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "train",
          "args": [
            "self",
            "iterations",
            "checkpoint",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\14.actor-critic-agent.py": [
    [
      {
        "name": "Actor",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "Critic",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "Agent",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Actor": [
        {
          "name": "__init__",
          "args": [
            "self",
            "name",
            "input_size",
            "output_size",
            "size_layer"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "Critic": [
        {
          "name": "__init__",
          "args": [
            "self",
            "name",
            "input_size",
            "output_size",
            "size_layer",
            "learning_rate"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "Agent": [
        {
          "name": "__init__",
          "args": [
            "self",
            "state_size",
            "window_size",
            "trend",
            "skip"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_assign",
          "args": [
            "self",
            "from_name",
            "to_name"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_memorize",
          "args": [
            "self",
            "state",
            "action",
            "reward",
            "new_state",
            "dead"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_select_action",
          "args": [
            "self",
            "state"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_construct_memories_and_train",
          "args": [
            "self",
            "replay"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_state",
          "args": [
            "self",
            "t"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "buy",
          "args": [
            "self",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "train",
          "args": [
            "self",
            "iterations",
            "checkpoint",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\15.actor-critic-duel-agent.py": [
    [
      {
        "name": "Actor",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "Critic",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "Agent",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Actor": [
        {
          "name": "__init__",
          "args": [
            "self",
            "name",
            "input_size",
            "output_size",
            "size_layer"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "Critic": [
        {
          "name": "__init__",
          "args": [
            "self",
            "name",
            "input_size",
            "output_size",
            "size_layer",
            "learning_rate"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "Agent": [
        {
          "name": "__init__",
          "args": [
            "self",
            "state_size",
            "window_size",
            "trend",
            "skip"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_assign",
          "args": [
            "self",
            "from_name",
            "to_name"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_memorize",
          "args": [
            "self",
            "state",
            "action",
            "reward",
            "new_state",
            "dead"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_select_action",
          "args": [
            "self",
            "state"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_construct_memories_and_train",
          "args": [
            "self",
            "replay"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_state",
          "args": [
            "self",
            "t"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "buy",
          "args": [
            "self",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "train",
          "args": [
            "self",
            "iterations",
            "checkpoint",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\16.actor-critic-recurrent-agent.py": [
    [
      {
        "name": "Actor",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "Critic",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "Agent",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Actor": [
        {
          "name": "__init__",
          "args": [
            "self",
            "name",
            "input_size",
            "output_size",
            "size_layer"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "Critic": [
        {
          "name": "__init__",
          "args": [
            "self",
            "name",
            "input_size",
            "output_size",
            "size_layer",
            "learning_rate"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "Agent": [
        {
          "name": "__init__",
          "args": [
            "self",
            "state_size",
            "window_size",
            "trend",
            "skip"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_assign",
          "args": [
            "self",
            "from_name",
            "to_name"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_memorize",
          "args": [
            "self",
            "state",
            "action",
            "reward",
            "new_state",
            "dead",
            "rnn_state"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_select_action",
          "args": [
            "self",
            "state"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_construct_memories_and_train",
          "args": [
            "self",
            "replay"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_state",
          "args": [
            "self",
            "t"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "buy",
          "args": [
            "self",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "train",
          "args": [
            "self",
            "iterations",
            "checkpoint",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\17.actor-critic-duel-recurrent-agent.py": [
    [
      {
        "name": "Actor",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "Critic",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "Agent",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Actor": [
        {
          "name": "__init__",
          "args": [
            "self",
            "name",
            "input_size",
            "output_size",
            "size_layer"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "Critic": [
        {
          "name": "__init__",
          "args": [
            "self",
            "name",
            "input_size",
            "output_size",
            "size_layer",
            "learning_rate"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "Agent": [
        {
          "name": "__init__",
          "args": [
            "self",
            "state_size",
            "window_size",
            "trend",
            "skip"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_assign",
          "args": [
            "self",
            "from_name",
            "to_name"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_memorize",
          "args": [
            "self",
            "state",
            "action",
            "reward",
            "new_state",
            "dead",
            "rnn_state"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_select_action",
          "args": [
            "self",
            "state"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_construct_memories_and_train",
          "args": [
            "self",
            "replay"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_state",
          "args": [
            "self",
            "t"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "buy",
          "args": [
            "self",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "train",
          "args": [
            "self",
            "iterations",
            "checkpoint",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\18.curiosity-q-learning-agent.py": [
    [
      {
        "name": "Agent",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Agent": [
        {
          "name": "__init__",
          "args": [
            "self",
            "state_size",
            "window_size",
            "trend",
            "skip"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_memorize",
          "args": [
            "self",
            "state",
            "action",
            "reward",
            "new_state",
            "done"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_state",
          "args": [
            "self",
            "t"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "predict",
          "args": [
            "self",
            "inputs"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_predicted_action",
          "args": [
            "self",
            "sequence"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_select_action",
          "args": [
            "self",
            "state"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_construct_memories",
          "args": [
            "self",
            "replay"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "buy",
          "args": [
            "self",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "train",
          "args": [
            "self",
            "iterations",
            "checkpoint",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\19.recurrent-curiosity-q-learning-agent.py": [
    [
      {
        "name": "Agent",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Agent": [
        {
          "name": "__init__",
          "args": [
            "self",
            "state_size",
            "window_size",
            "trend",
            "skip"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_memorize",
          "args": [
            "self",
            "state",
            "action",
            "reward",
            "new_state",
            "done",
            "rnn_state"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_state",
          "args": [
            "self",
            "t"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_construct_memories",
          "args": [
            "self",
            "replay"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "buy",
          "args": [
            "self",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "train",
          "args": [
            "self",
            "iterations",
            "checkpoint",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\2.moving-average-agent.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\20.duel-curiosity-q-learning-agent.py": [
    [
      {
        "name": "Agent",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Agent": [
        {
          "name": "__init__",
          "args": [
            "self",
            "state_size",
            "window_size",
            "trend",
            "skip"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_memorize",
          "args": [
            "self",
            "state",
            "action",
            "reward",
            "new_state",
            "done"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_state",
          "args": [
            "self",
            "t"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "predict",
          "args": [
            "self",
            "inputs"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_predicted_action",
          "args": [
            "self",
            "sequence"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_select_action",
          "args": [
            "self",
            "state"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_construct_memories",
          "args": [
            "self",
            "replay"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "buy",
          "args": [
            "self",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "train",
          "args": [
            "self",
            "iterations",
            "checkpoint",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\21.neuro-evolution-agent.py": [
    [
      {
        "name": "neuralnetwork",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "NeuroEvolution",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "neuralnetwork": [
        {
          "name": "__init__",
          "args": [
            "self",
            "id_"
          ],
          "kwargs": [
            [
              "hidden_size",
              "128"
            ]
          ],
          "pack": {}
        }
      ],
      "NeuroEvolution": [
        {
          "name": "__init__",
          "args": [
            "self",
            "population_size",
            "mutation_rate",
            "model_generator",
            "state_size",
            "window_size",
            "trend",
            "skip",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_initialize_population",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "mutate",
          "args": [
            "self",
            "individual"
          ],
          "kwargs": [
            [
              "scale",
              "1.0"
            ]
          ],
          "pack": {}
        },
        {
          "name": "inherit_weights",
          "args": [
            "self",
            "parent",
            "child"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "crossover",
          "args": [
            "self",
            "parent1",
            "parent2"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_state",
          "args": [
            "self",
            "t"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "act",
          "args": [
            "self",
            "p",
            "state"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "buy",
          "args": [
            "self",
            "individual"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "calculate_fitness",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "evolve",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "generations",
              "20"
            ],
            [
              "checkpoint",
              "5"
            ]
          ],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\22.neuro-evolution-novelty-search-agent.py": [
    [
      {
        "name": "neuralnetwork",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "NeuroEvolution",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "neuralnetwork": [
        {
          "name": "__init__",
          "args": [
            "self",
            "id_"
          ],
          "kwargs": [
            [
              "hidden_size",
              "128"
            ]
          ],
          "pack": {}
        }
      ],
      "NeuroEvolution": [
        {
          "name": "__init__",
          "args": [
            "self",
            "population_size",
            "mutation_rate",
            "model_generator",
            "state_size",
            "window_size",
            "trend",
            "skip",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_initialize_population",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_memorize",
          "args": [
            "self",
            "q",
            "i",
            "limit"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "mutate",
          "args": [
            "self",
            "individual"
          ],
          "kwargs": [
            [
              "scale",
              "1.0"
            ]
          ],
          "pack": {}
        },
        {
          "name": "inherit_weights",
          "args": [
            "self",
            "parent",
            "child"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "crossover",
          "args": [
            "self",
            "parent1",
            "parent2"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_state",
          "args": [
            "self",
            "t"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "act",
          "args": [
            "self",
            "p",
            "state"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "buy",
          "args": [
            "self",
            "individual"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "calculate_fitness",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "evaluate",
          "args": [
            "self",
            "individual",
            "backlog",
            "pop"
          ],
          "kwargs": [
            [
              "k",
              "4"
            ]
          ],
          "pack": {}
        },
        {
          "name": "evolve",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "generations",
              "20"
            ],
            [
              "checkpoint",
              "5"
            ]
          ],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\3.signal-rolling-agent.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\4.policy-gradient-agent_old.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "Agent",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "to_name",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "state_size",
            "window_size",
            "trend",
            "skip",
            "iterations",
            "initial_reward"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "Agent": [
        {
          "name": "__init__",
          "args": [
            "self",
            "state_size",
            "window_size",
            "trend",
            "skip"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "predict",
          "args": [
            "self",
            "inputs"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_state",
          "args": [
            "self",
            "t"
          ],
          "kwargs": [
            [
              "reward_state",
              "None"
            ]
          ],
          "pack": {}
        },
        {
          "name": "discount_rewards",
          "args": [
            "self",
            "r"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_predicted_action",
          "args": [
            "self",
            "sequence"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "predict_sequence",
          "args": [
            "self",
            "trend_input",
            "do_action"
          ],
          "kwargs": [
            [
              "param",
              "None"
            ]
          ],
          "pack": {}
        },
        {
          "name": "buy",
          "args": [
            "self",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "train",
          "args": [
            "self",
            "iterations",
            "checkpoint",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "to_name": []
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\4_policy-gradient-agent.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "Agent",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "to_name",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "state_size",
            "window_size",
            "trend",
            "skip",
            "iterations",
            "initial_reward"
          ],
          "kwargs": [
            [
              "checkpoint",
              "10"
            ]
          ],
          "pack": {}
        }
      ],
      "Agent": [
        {
          "name": "__init__",
          "args": [
            "self",
            "state_size",
            "window_size",
            "trend",
            "skip"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "predict",
          "args": [
            "self",
            "inputs"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_state",
          "args": [
            "self",
            "t"
          ],
          "kwargs": [
            [
              "reward_state",
              "None"
            ]
          ],
          "pack": {}
        },
        {
          "name": "discount_rewards",
          "args": [
            "self",
            "r"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_predicted_action",
          "args": [
            "self",
            "sequence"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "predict_sequence",
          "args": [
            "self",
            "pars"
          ],
          "kwargs": [
            [
              "trend_history",
              "None"
            ]
          ],
          "pack": {}
        },
        {
          "name": "train",
          "args": [
            "self",
            "iterations",
            "checkpoint",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "to_name": []
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\5_q-learning-agent.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "Agent",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "to_name",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "state_size",
            "window_size",
            "trend",
            "skip",
            "iterations",
            "initial_reward"
          ],
          "kwargs": [
            [
              "checkpoint",
              "10"
            ]
          ],
          "pack": {}
        }
      ],
      "Agent": [
        {
          "name": "__init__",
          "args": [
            "self",
            "state_size",
            "window_size",
            "trend",
            "skip",
            "batch_size"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "act",
          "args": [
            "self",
            "state"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_state",
          "args": [
            "self",
            "t"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "replay",
          "args": [
            "self",
            "batch_size"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "predict_sequence",
          "args": [
            "self",
            "pars"
          ],
          "kwargs": [
            [
              "trend_history",
              "None"
            ]
          ],
          "pack": {}
        },
        {
          "name": "train",
          "args": [
            "self",
            "iterations",
            "checkpoint",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "to_name": []
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\6_evolution-strategy-agent.py": [
    [
      {
        "name": "Deep_Evolution_Strategy",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "Agent",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "to_name",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "Deep_Evolution_Strategy": [
        {
          "name": "__init__",
          "args": [
            "self",
            "weights",
            "reward_function",
            "population_size",
            "sigma",
            "learning_rate"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_get_weight_from_population",
          "args": [
            "self",
            "weights",
            "population"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_weights",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "train",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "epoch",
              "100"
            ],
            [
              "print_every",
              "1"
            ]
          ],
          "pack": {}
        }
      ],
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "input_size",
            "layer_size",
            "output_size",
            "window_size",
            "skip",
            "initial_money"
          ],
          "kwargs": [
            [
              "iterations",
              "500"
            ],
            [
              "checkpoint",
              "10"
            ]
          ],
          "pack": {}
        },
        {
          "name": "predict",
          "args": [
            "self",
            "inputs"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_weights",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "set_weights",
          "args": [
            "self",
            "weights"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "Agent": [
        {
          "name": "__init__",
          "args": [
            "self",
            "model",
            "window_size",
            "trend",
            "skip",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "act",
          "args": [
            "self",
            "sequence"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_state",
          "args": [
            "self",
            "t"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_reward",
          "args": [
            "self",
            "weights"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "fit",
          "args": [
            "self",
            "iterations",
            "checkpoint"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "run_sequence",
          "args": [
            "self",
            "df_test"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "to_name": []
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\7.double-q-learning-agent.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "QModel",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "Agent",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "window_size",
            "trend",
            "skip",
            "iterations",
            "initial_reward"
          ],
          "kwargs": [
            [
              "checkpoint",
              "10"
            ]
          ],
          "pack": {}
        }
      ],
      "QModel": [
        {
          "name": "__init__",
          "args": [
            "self",
            "input_size",
            "output_size",
            "layer_size",
            "learning_rate"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "Agent": [
        {
          "name": "__init__",
          "args": [
            "self",
            "state_size",
            "window_size",
            "trend",
            "skip"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_assign",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_memorize",
          "args": [
            "self",
            "state",
            "action",
            "reward",
            "new_state",
            "done"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_select_action",
          "args": [
            "self",
            "state"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_construct_memories",
          "args": [
            "self",
            "replay"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "predict",
          "args": [
            "self",
            "inputs"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_predicted_action",
          "args": [
            "self",
            "sequence"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_state",
          "args": [
            "self",
            "t"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "run_sequence",
          "args": [
            "self",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "train",
          "args": [
            "self",
            "iterations",
            "checkpoint",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\8.recurrent-q-learning-agent.py": [
    [
      {
        "name": "Agent",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Agent": [
        {
          "name": "__init__",
          "args": [
            "self",
            "state_size",
            "window_size",
            "trend",
            "skip"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_memorize",
          "args": [
            "self",
            "state",
            "action",
            "reward",
            "new_state",
            "dead",
            "rnn_state"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_construct_memories",
          "args": [
            "self",
            "replay"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_state",
          "args": [
            "self",
            "t"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "buy",
          "args": [
            "self",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "train",
          "args": [
            "self",
            "iterations",
            "checkpoint",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\9.double-recurrent-q-learning-agent.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "Agent",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "input_size",
            "output_size",
            "layer_size",
            "learning_rate",
            "name"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "Agent": [
        {
          "name": "__init__",
          "args": [
            "self",
            "state_size",
            "window_size",
            "trend",
            "skip"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_assign",
          "args": [
            "self",
            "from_name",
            "to_name"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_memorize",
          "args": [
            "self",
            "state",
            "action",
            "reward",
            "new_state",
            "dead",
            "rnn_state"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_select_action",
          "args": [
            "self",
            "state"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_construct_memories",
          "args": [
            "self",
            "replay"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_state",
          "args": [
            "self",
            "t"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "buy",
          "args": [
            "self",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "train",
          "args": [
            "self",
            "iterations",
            "checkpoint",
            "initial_money"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\updated-NES-google.py": [
    [
      {
        "name": "Deep_Evolution_Strategy",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "Agent",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Deep_Evolution_Strategy": [
        {
          "name": "__init__",
          "args": [
            "self",
            "weights",
            "reward_function",
            "population_size",
            "sigma",
            "learning_rate"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "_get_weight_from_population",
          "args": [
            "self",
            "weights",
            "population"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_weights",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "train",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "epoch",
              "100"
            ],
            [
              "print_every",
              "1"
            ]
          ],
          "pack": {}
        }
      ],
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self",
            "input_size",
            "layer_size",
            "output_size"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "predict",
          "args": [
            "self",
            "inputs"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_weights",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "set_weights",
          "args": [
            "self",
            "weights"
          ],
          "kwargs": [],
          "pack": {}
        }
      ],
      "Agent": [
        {
          "name": "__init__",
          "args": [
            "self",
            "model",
            "money",
            "max_buy",
            "max_sell",
            "close",
            "window_size",
            "skip"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "act",
          "args": [
            "self",
            "sequence"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "get_reward",
          "args": [
            "self",
            "weights"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "fit",
          "args": [
            "self",
            "iterations",
            "checkpoint"
          ],
          "kwargs": [],
          "pack": {}
        },
        {
          "name": "buy",
          "args": [
            "self"
          ],
          "kwargs": [],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\__init__.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\preprocess\\__init__.py": [
    [],
    {}
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\template\\00_template_keras.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      },
      {
        "name": "Model_empty",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "model_pars",
              "None"
            ],
            [
              "data_pars",
              "None"
            ],
            [
              "compute_pars",
              "None"
            ]
          ],
          "pack": {
            "kwargs": "kwargs"
          }
        }
      ],
      "Model_empty": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "model_pars",
              "None"
            ],
            [
              "compute_pars",
              "None"
            ]
          ],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\template\\model_xxx.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": []
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\template\\zarchive\\gluonts_model.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": "object"
      }
    ],
    {
      "Model": [
        {
          "name": "__init__",
          "args": [
            "self"
          ],
          "kwargs": [
            [
              "model_pars",
              "None"
            ],
            [
              "compute_pars",
              "None"
            ]
          ],
          "pack": {}
        }
      ]
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\template\\zarchive\\model_tf_sequential.py": [
    [
      {
        "name": "Model",
        "indent": 0.0,
        "inherits": ""
      }
    ],
    {
      "Model": []
    }
  ]
}