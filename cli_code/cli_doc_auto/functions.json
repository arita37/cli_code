{
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\data.py": [
    {
      "name": "import_data_tch",
      "args": [],
      "kwargs": [
        [
          "name",
          "\"\""
        ],
        [
          "mode",
          "\"train\""
        ],
        [
          "node_id",
          "0"
        ],
        [
          "data_folder_root",
          "\"\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "import_data_fromfile",
      "args": [],
      "kwargs": [],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "import_data_dask",
      "args": [],
      "kwargs": [],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "os_package_root_path",
      "args": [
        "filepath"
      ],
      "kwargs": [
        [
          "sublevel",
          "0"
        ],
        [
          "path_add",
          "\"\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_dataset",
      "args": [
        "data_pars"
      ],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\distri_torch.py": [
    {
      "name": "load_arguments",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "train",
      "args": [
        "epoch"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "metric_average",
      "args": [
        "val",
        "name"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\models.py": [
    {
      "name": "module_env_build",
      "args": [],
      "kwargs": [
        [
          "model_uri",
          "\"\""
        ],
        [
          "verbose",
          "0"
        ],
        [
          "env_build",
          "0"
        ]
      ],
      "pack": {}
    },
    {
      "name": "module_load",
      "args": [],
      "kwargs": [
        [
          "model_uri",
          "\"\""
        ],
        [
          "verbose",
          "0"
        ],
        [
          "env_build",
          "0"
        ]
      ],
      "pack": {}
    },
    {
      "name": "module_load_full",
      "args": [],
      "kwargs": [
        [
          "model_uri",
          "\"\""
        ],
        [
          "model_pars",
          "None"
        ],
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "choice",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwarg"
      }
    },
    {
      "name": "model_create",
      "args": [
        "module"
      ],
      "kwargs": [
        [
          "model_pars",
          "None"
        ],
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwarg"
      }
    },
    {
      "name": "fit",
      "args": [
        "module",
        "model"
      ],
      "kwargs": [
        [
          "sess",
          "None"
        ],
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwarg"
      }
    },
    {
      "name": "predict",
      "args": [
        "module",
        "model"
      ],
      "kwargs": [
        [
          "sess",
          "None"
        ],
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwarg"
      }
    },
    {
      "name": "fit_metrics",
      "args": [
        "module",
        "model"
      ],
      "kwargs": [
        [
          "sess",
          "None"
        ],
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwarg"
      }
    },
    {
      "name": "get_params",
      "args": [
        "module",
        "params_pars"
      ],
      "kwargs": [],
      "pack": {
        "kwargs": "kwarg"
      }
    },
    {
      "name": "metrics",
      "args": [
        "module",
        "model"
      ],
      "kwargs": [
        [
          "sess",
          "None"
        ],
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwarg"
      }
    },
    {
      "name": "load",
      "args": [
        "module",
        "load_pars"
      ],
      "kwargs": [],
      "pack": {
        "kwargs": "kwarg"
      }
    },
    {
      "name": "save",
      "args": [
        "module",
        "model",
        "session",
        "save_pars"
      ],
      "kwargs": [],
      "pack": {
        "kwargs": "kwarg"
      }
    },
    {
      "name": "test_all",
      "args": [],
      "kwargs": [
        [
          "folder",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "test",
      "args": [
        "modelname"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "test_global",
      "args": [
        "modelname"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "test_api",
      "args": [],
      "kwargs": [
        [
          "model_uri",
          "\"model_xxxx/yyyy.py\""
        ],
        [
          "param_pars",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "test_module",
      "args": [],
      "kwargs": [
        [
          "model_uri",
          "\"model_xxxx/yyyy.py\""
        ],
        [
          "param_pars",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "config_get_pars",
      "args": [
        "config_file"
      ],
      "kwargs": [
        [
          "config_mode",
          "\"test\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "config_generate_json",
      "args": [
        "modelname"
      ],
      "kwargs": [
        [
          "to_path",
          "\"ztest/new_model/\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "os_folder_copy",
      "args": [
        "src",
        "dst"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "config_init",
      "args": [],
      "kwargs": [
        [
          "to_path",
          "\".\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "config_model_list",
      "args": [],
      "kwargs": [
        [
          "folder",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "cli_load_arguments",
      "args": [],
      "kwargs": [
        [
          "config_file",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "main",
      "args": [],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\optim.py": [
    {
      "name": "optim",
      "args": [],
      "kwargs": [
        [
          "model_uri",
          "\"model_tf.1_lstm.py\""
        ],
        [
          "hypermodel_pars",
          "{}"
        ],
        [
          "model_pars",
          "{}"
        ],
        [
          "data_pars",
          "{}"
        ],
        [
          "compute_pars",
          "{}"
        ],
        [
          "out_pars",
          "{}"
        ]
      ],
      "pack": {}
    },
    {
      "name": "optim_optuna",
      "args": [],
      "kwargs": [
        [
          "model_uri",
          "\"model_tf.1_lstm.py\""
        ],
        [
          "hypermodel_pars",
          "{}"
        ],
        [
          "model_pars",
          "{}"
        ],
        [
          "data_pars",
          "{}"
        ],
        [
          "compute_pars",
          "{\"method\" : \"normal/prune\", 'ntrials': 2, \"metric_target\": \"loss\" }"
        ],
        [
          "out_pars",
          "{}"
        ]
      ],
      "pack": {}
    },
    {
      "name": "optim_skopt",
      "args": [],
      "kwargs": [
        [
          "model_uri",
          "\"model_tf.1_lstm.py\""
        ],
        [
          "hypermodel_pars",
          "{}"
        ],
        [
          "model_pars",
          "{}"
        ],
        [
          "data_pars",
          "{}"
        ],
        [
          "compute_pars",
          "{\"method\" : \"normal/prune\", 'ntrials': 2, \"metric_target\": \"loss\" }"
        ],
        [
          "out_pars",
          "{}"
        ]
      ],
      "pack": {}
    },
    {
      "name": "post_process_best",
      "args": [
        "model",
        "model_uri",
        "model_pars_update",
        "data_pars",
        "compute_pars",
        "out_pars"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "test_json",
      "args": [],
      "kwargs": [
        [
          "path_json",
          "\"\""
        ],
        [
          "config_mode",
          "\"test\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "test_fast",
      "args": [],
      "kwargs": [
        [
          "ntrials",
          "2"
        ]
      ],
      "pack": {}
    },
    {
      "name": "test_all",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "cli_load_arguments",
      "args": [],
      "kwargs": [
        [
          "config_file",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "main",
      "args": [],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\pipeline.py": [
    {
      "name": "os_package_root_path",
      "args": [
        "filepath"
      ],
      "kwargs": [
        [
          "sublevel",
          "0"
        ],
        [
          "path_add",
          "\"\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "log",
      "args": [],
      "kwargs": [
        [
          "n",
          "0"
        ],
        [
          "m",
          "1"
        ]
      ],
      "pack": {
        "args": "s"
      }
    },
    {
      "name": "pd_na_values",
      "args": [
        "df"
      ],
      "kwargs": [
        [
          "cols",
          "None"
        ],
        [
          "default",
          "0.0"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "generate_data",
      "args": [
        "df"
      ],
      "kwargs": [
        [
          "num_data",
          "0"
        ],
        [
          "means",
          "[]"
        ],
        [
          "cov",
          "[[1, 0]"
        ]
      ],
      "pack": {}
    },
    {
      "name": "drop_cols",
      "args": [
        "df"
      ],
      "kwargs": [
        [
          "cols",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "pd_concat",
      "args": [
        "df1",
        "df2",
        "colid1"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "pipe_split",
      "args": [
        "in_pars",
        "out_pars",
        "compute_pars"
      ],
      "kwargs": [],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "pipe_merge",
      "args": [
        "in_pars",
        "out_pars"
      ],
      "kwargs": [
        [
          "compute_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "pipe_load",
      "args": [
        "df"
      ],
      "kwargs": [],
      "pack": {
        "kwargs": "in_pars"
      }
    },
    {
      "name": "pipe_run_inference",
      "args": [
        "pipe_list",
        "in_pars",
        "out_pars"
      ],
      "kwargs": [
        [
          "compute_pars",
          "None"
        ],
        [
          "checkpoint",
          "True"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "pipe_checkpoint",
      "args": [
        "df"
      ],
      "kwargs": [],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "load_model",
      "args": [
        "path"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "save_model",
      "args": [
        "model",
        "path"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "get_params",
      "args": [],
      "kwargs": [
        [
          "choice",
          "\"\""
        ],
        [
          "data_path",
          "\"dataset/\""
        ],
        [
          "config_mode",
          "\"test\""
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"/dataset/\""
        ],
        [
          "pars_choice",
          "\"colnum\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\util.py": [
    {
      "name": "log",
      "args": [],
      "kwargs": [
        [
          "n",
          "0"
        ],
        [
          "m",
          "1"
        ]
      ],
      "pack": {
        "args": "s"
      }
    },
    {
      "name": "os_folder_copy",
      "args": [
        "src",
        "dst"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "os_get_file",
      "args": [],
      "kwargs": [
        [
          "folder",
          "None"
        ],
        [
          "block_list",
          "[]"
        ],
        [
          "pattern",
          "r'*.py'"
        ]
      ],
      "pack": {}
    },
    {
      "name": "model_get_list",
      "args": [],
      "kwargs": [
        [
          "folder",
          "None"
        ],
        [
          "block_list",
          "[]"
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_recursive_files2",
      "args": [
        "folderPath",
        "ext"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "get_recursive_files3",
      "args": [
        "folderPath",
        "ext"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "get_model_uri",
      "args": [
        "file"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "get_recursive_files",
      "args": [
        "folderPath"
      ],
      "kwargs": [
        [
          "ext",
          "'/*model*/*.py'"
        ]
      ],
      "pack": {}
    },
    {
      "name": "path_norm",
      "args": [],
      "kwargs": [
        [
          "path",
          "\"\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "os_package_root_path",
      "args": [],
      "kwargs": [
        [
          "filepath",
          "\"\""
        ],
        [
          "sublevel",
          "0"
        ],
        [
          "path_add",
          "\"\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "os_file_current_path",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "test_module",
      "args": [],
      "kwargs": [
        [
          "model_uri",
          "\"model_tf/1_lstm.py\""
        ],
        [
          "data_path",
          "\"dataset/\""
        ],
        [
          "pars_choice",
          "\"json\""
        ],
        [
          "reset",
          "True"
        ]
      ],
      "pack": {}
    },
    {
      "name": "load_root_config",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "get_pretrained_path",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "params_json_load",
      "args": [
        "path"
      ],
      "kwargs": [
        [
          "config_mode",
          "\"test\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "load_config",
      "args": [
        "args",
        "config_file",
        "config_mode"
      ],
      "kwargs": [
        [
          "verbose",
          "0"
        ]
      ],
      "pack": {}
    },
    {
      "name": "val",
      "args": [
        "x",
        "xdefault"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "env_conda_build",
      "args": [],
      "kwargs": [
        [
          "env_pars",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "env_pip_requirement",
      "args": [],
      "kwargs": [
        [
          "env_pars",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "env_pip_check",
      "args": [],
      "kwargs": [
        [
          "env_pars",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "env_build",
      "args": [
        "model_uri",
        "env_pars"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "tf_deprecation",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "os_path_split",
      "args": [
        "path"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "load",
      "args": [
        "load_pars"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "save",
      "args": [],
      "kwargs": [
        [
          "model",
          "None"
        ],
        [
          "session",
          "None"
        ],
        [
          "save_pars",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "load_tf",
      "args": [],
      "kwargs": [
        [
          "load_pars",
          "\"\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "save_tf",
      "args": [],
      "kwargs": [
        [
          "model",
          "None"
        ],
        [
          "sess",
          "None"
        ],
        [
          "save_pars",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "load_tch",
      "args": [
        "load_pars"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "save_tch",
      "args": [],
      "kwargs": [
        [
          "model",
          "None"
        ],
        [
          "optimizer",
          "None"
        ],
        [
          "save_pars",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "save_tch_checkpoint",
      "args": [
        "model",
        "optimiser",
        "save_pars"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "load_tch_checkpoint",
      "args": [
        "model",
        "optimiser",
        "load_pars"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "load_pkl",
      "args": [
        "load_pars"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "save_pkl",
      "args": [],
      "kwargs": [
        [
          "model",
          "None"
        ],
        [
          "save_pars",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "load_keras",
      "args": [
        "load_pars"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "save_keras",
      "args": [],
      "kwargs": [
        [
          "model",
          "None"
        ],
        [
          "session",
          "None"
        ],
        [
          "save_pars",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "load_gluon",
      "args": [
        "load_pars"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "save_gluon",
      "args": [],
      "kwargs": [
        [
          "model",
          "None"
        ],
        [
          "session",
          "None"
        ],
        [
          "save_pars",
          "None"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\ztest.py": [
    {
      "name": "os_file_current_path",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "test_model_structure",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "test_import",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "test_all",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "test_list",
      "args": [
        "mlist"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "test_custom",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "cli_load_arguments",
      "args": [],
      "kwargs": [
        [
          "config_file",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "main",
      "args": [],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\ztest_structure.py": [
    {
      "name": "get_recursive_files",
      "args": [
        "folderPath"
      ],
      "kwargs": [
        [
          "ext",
          "'/*model*/*.py'"
        ]
      ],
      "pack": {}
    },
    {
      "name": "log",
      "args": [],
      "kwargs": [
        [
          "n",
          "0"
        ],
        [
          "m",
          "1"
        ]
      ],
      "pack": {
        "args": "s"
      }
    },
    {
      "name": "os_package_root_path",
      "args": [
        "filepath"
      ],
      "kwargs": [
        [
          "sublevel",
          "0"
        ],
        [
          "path_add",
          "\"\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "os_file_current_path",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "model_get_list",
      "args": [],
      "kwargs": [
        [
          "folder",
          "None"
        ],
        [
          "block_list",
          "[]"
        ]
      ],
      "pack": {}
    },
    {
      "name": "find_in_list",
      "args": [
        "x",
        "llist"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "code_check",
      "args": [],
      "kwargs": [
        [
          "sign_list",
          "None"
        ],
        [
          "model_list",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "main",
      "args": [],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\__init__.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_chatbot\\__init__.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_chatbot\\diag_gpt\\Chatbot_run.py": [
    {
      "name": "reinput",
      "args": [
        "user_msg"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "top_p_filtering",
      "args": [
        "logits"
      ],
      "kwargs": [
        [
          "top_p",
          "0.9"
        ],
        [
          "filter_value",
          "-float('Inf')"
        ]
      ],
      "pack": {}
    },
    {
      "name": "recalc",
      "args": [],
      "kwargs": [
        [
          "p",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "generate",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "home",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "get_bot_response",
      "args": [],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_chatbot\\diag_gpt\\myChatbot.py": [
    {
      "name": "reinput",
      "args": [
        "user_msg"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "top_p_filtering",
      "args": [
        "logits"
      ],
      "kwargs": [
        [
          "top_p",
          "0.9"
        ],
        [
          "filter_value",
          "-float('Inf')"
        ]
      ],
      "pack": {}
    },
    {
      "name": "recalc",
      "args": [],
      "kwargs": [
        [
          "p",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "generate",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "home",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "get_bot_response",
      "args": [],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_dev\\ml_mosaic.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_dev\\mytest.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_dev\\__init__.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_dev\\dev\\ml_mosaic.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_dev\\dev\\mytest.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_flow\\mlflow_run.py": [
    {
      "name": "log_scalar",
      "args": [
        "name",
        "value",
        "step"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "tfboard_writer_create",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "mlflow_add",
      "args": [
        "args"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "tfboard_add_weights",
      "args": [
        "step"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "session_init",
      "args": [
        "args"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "cli_load_arguments",
      "args": [],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_flow\\__init__.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_flow\\dev\\mlflow_run.py": [
    {
      "name": "log_scalar",
      "args": [
        "name",
        "value",
        "step"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "tfboard_writer_create",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "mlflow_add",
      "args": [
        "args"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "tfboard_add_weights",
      "args": [
        "step"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "session_init",
      "args": [
        "args"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "cli_load_arguments",
      "args": [],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_gluon\\gluon_automl.py": [
    {
      "name": "path_setup",
      "args": [],
      "kwargs": [
        [
          "out_folder",
          "\"\""
        ],
        [
          "sublevel",
          "0"
        ],
        [
          "data_path",
          "\"dataset/\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "_config_process",
      "args": [
        "config"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "get_params",
      "args": [],
      "kwargs": [
        [
          "choice",
          "\"\""
        ],
        [
          "data_path",
          "\"dataset/\""
        ],
        [
          "config_mode",
          "\"test\""
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/\""
        ],
        [
          "pars_choice",
          "\"json\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_gluon\\gluon_deepar.py": [
    {
      "name": "get_params",
      "args": [],
      "kwargs": [
        [
          "choice",
          "\"\""
        ],
        [
          "data_path",
          "\"dataset/timeseries/\""
        ],
        [
          "config_mode",
          "\"test\""
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/\""
        ],
        [
          "choice",
          "\"\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_gluon\\gluon_ffn.py": [
    {
      "name": "get_params",
      "args": [],
      "kwargs": [
        [
          "choice",
          "\"\""
        ],
        [
          "data_path",
          "\"dataset/timeseries/\""
        ],
        [
          "config_mode",
          "\"test\""
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/\""
        ],
        [
          "choice",
          "\"test01\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_gluon\\gluon_prophet.py": [
    {
      "name": "get_params",
      "args": [],
      "kwargs": [
        [
          "choice",
          "\"\""
        ],
        [
          "data_path",
          "\"dataset/\""
        ],
        [
          "config_mode",
          "\"test\""
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/\""
        ],
        [
          "choice",
          "\"\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_gluon\\model_template.py": [
    {
      "name": "get_params",
      "args": [],
      "kwargs": [
        [
          "choice",
          "0"
        ],
        [
          "data_path",
          "\"dataset/\""
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "test2",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/\""
        ],
        [
          "out_path",
          "\"GLUON/gluon.png\""
        ],
        [
          "reset",
          "True"
        ]
      ],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_gluon\\util.py": [
    {
      "name": "os_package_root_path",
      "args": [
        "filepath"
      ],
      "kwargs": [
        [
          "sublevel",
          "0"
        ],
        [
          "path_add",
          "\"\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "log",
      "args": [],
      "kwargs": [
        [
          "n",
          "0"
        ],
        [
          "m",
          "1"
        ]
      ],
      "pack": {
        "args": "s"
      }
    },
    {
      "name": "_config_process",
      "args": [
        "data_path"
      ],
      "kwargs": [
        [
          "config_mode",
          "\"test\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_dataset",
      "args": [
        "data_pars"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "fit",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "sess",
          "None"
        ],
        [
          "data_pars",
          "None"
        ],
        [
          "model_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ],
        [
          "session",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "predict",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "sess",
          "None"
        ],
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "metrics",
      "args": [
        "ypred",
        "data_pars"
      ],
      "kwargs": [
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "plot_prob_forecasts",
      "args": [
        "ypred"
      ],
      "kwargs": [
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "plot_predict",
      "args": [
        "item_metrics"
      ],
      "kwargs": [
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "save",
      "args": [
        "model",
        "path"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "load",
      "args": [
        "path"
      ],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_gluon\\util_autogluon.py": [
    {
      "name": "os_package_root_path",
      "args": [
        "filepath"
      ],
      "kwargs": [
        [
          "sublevel",
          "0"
        ],
        [
          "path_add",
          "\"\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "log",
      "args": [],
      "kwargs": [
        [
          "n",
          "0"
        ],
        [
          "m",
          "1"
        ]
      ],
      "pack": {
        "args": "s"
      }
    },
    {
      "name": "_get_dataset_from_aws",
      "args": [],
      "kwargs": [],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "import_data_fromfile",
      "args": [],
      "kwargs": [],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "get_dataset",
      "args": [],
      "kwargs": [],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "fit",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "model_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ],
        [
          "session",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "predict",
      "args": [
        "model",
        "data_pars"
      ],
      "kwargs": [
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "metrics",
      "args": [
        "model",
        "ypred",
        "ytrue",
        "data_pars"
      ],
      "kwargs": [
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "save",
      "args": [
        "model",
        "out_pars"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "load",
      "args": [
        "path"
      ],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_gluon\\__init__.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\00_template.py": [
    {
      "name": "os_package_root_path",
      "args": [
        "filepath"
      ],
      "kwargs": [
        [
          "sublevel",
          "0"
        ],
        [
          "path_add",
          "\"\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "log",
      "args": [],
      "kwargs": [
        [
          "n",
          "0"
        ],
        [
          "m",
          "1"
        ]
      ],
      "pack": {
        "args": "s"
      }
    },
    {
      "name": "_preprocess_XXXX",
      "args": [
        "df"
      ],
      "kwargs": [],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "get_dataset",
      "args": [],
      "kwargs": [],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "fit",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "session",
          "None"
        ],
        [
          "data_pars",
          "None"
        ],
        [
          "model_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "predict",
      "args": [
        "model",
        "data_pars"
      ],
      "kwargs": [
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "metrics",
      "args": [
        "ypred",
        "data_pars"
      ],
      "kwargs": [
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "reset_model",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "save",
      "args": [
        "model",
        "path"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "load",
      "args": [
        "path"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "path_setup",
      "args": [],
      "kwargs": [
        [
          "out_folder",
          "\"\""
        ],
        [
          "sublevel",
          "0"
        ],
        [
          "data_path",
          "\"dataset/\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_params",
      "args": [],
      "kwargs": [
        [
          "choice",
          "0"
        ],
        [
          "data_path",
          "\"dataset/\""
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/\""
        ],
        [
          "pars_choice",
          "0"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\00_template_keras.py": [
    {
      "name": "os_package_root_path",
      "args": [
        "filepath"
      ],
      "kwargs": [
        [
          "sublevel",
          "0"
        ],
        [
          "path_add",
          "\"\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "log",
      "args": [],
      "kwargs": [
        [
          "n",
          "0"
        ],
        [
          "m",
          "1"
        ]
      ],
      "pack": {
        "args": "s"
      }
    },
    {
      "name": "_preprocess_XXXX",
      "args": [
        "df"
      ],
      "kwargs": [],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "get_dataset",
      "args": [],
      "kwargs": [],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "fit",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "session",
          "None"
        ],
        [
          "data_pars",
          "None"
        ],
        [
          "model_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "predict",
      "args": [
        "model",
        "data_pars"
      ],
      "kwargs": [
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "metrics",
      "args": [
        "ypred",
        "data_pars"
      ],
      "kwargs": [
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "reset_model",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "save",
      "args": [
        "model",
        "path"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "load",
      "args": [
        "path"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "path_setup",
      "args": [],
      "kwargs": [
        [
          "out_folder",
          "\"\""
        ],
        [
          "sublevel",
          "0"
        ],
        [
          "data_path",
          "\"dataset/\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_params",
      "args": [],
      "kwargs": [
        [
          "choice",
          "0"
        ],
        [
          "data_path",
          "\"dataset/\""
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/\""
        ],
        [
          "pars_choice",
          "0"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\01_deepctr.py": [
    {
      "name": "_preprocess_criteo",
      "args": [
        "df"
      ],
      "kwargs": [],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "_preprocess_movielens",
      "args": [
        "df"
      ],
      "kwargs": [],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "get_dataset",
      "args": [],
      "kwargs": [
        [
          "data_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "fit",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "session",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "data_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "predict",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "session",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "data_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "metrics",
      "args": [
        "ypred"
      ],
      "kwargs": [
        [
          "ytrue",
          "None"
        ],
        [
          "session",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "data_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "reset_model",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "path_setup",
      "args": [],
      "kwargs": [
        [
          "out_folder",
          "\"\""
        ],
        [
          "sublevel",
          "0"
        ],
        [
          "data_path",
          "\"dataset/\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "_config_process",
      "args": [
        "config"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "config_load",
      "args": [
        "data_path",
        "file_default",
        "config_mode"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "get_params",
      "args": [],
      "kwargs": [
        [
          "choice",
          "\"\""
        ],
        [
          "data_path",
          "\"dataset/\""
        ],
        [
          "config_mode",
          "\"test\""
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/\""
        ],
        [
          "pars_choice",
          "0"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\02_cnn.py": [
    {
      "name": "os_package_root_path",
      "args": [
        "filepath"
      ],
      "kwargs": [
        [
          "sublevel",
          "0"
        ],
        [
          "path_add",
          "\"\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "log",
      "args": [],
      "kwargs": [
        [
          "n",
          "0"
        ],
        [
          "m",
          "1"
        ]
      ],
      "pack": {
        "args": "s"
      }
    },
    {
      "name": "get_dataset",
      "args": [
        "data_params"
      ],
      "kwargs": [],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "fit",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "model_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ],
        [
          "session",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "predict",
      "args": [
        "model",
        "data_pars"
      ],
      "kwargs": [
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "metrics",
      "args": [
        "ypred",
        "data_pars"
      ],
      "kwargs": [
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "get_params",
      "args": [],
      "kwargs": [
        [
          "choice",
          "0"
        ],
        [
          "data_path",
          "\"dataset/\""
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "test2",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/\""
        ],
        [
          "out_path",
          "\"keras/keras.png\""
        ],
        [
          "reset",
          "True"
        ]
      ],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\charcnn.py": [
    {
      "name": "fit",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "fit_metrics",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "predict",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "sess",
          "None"
        ],
        [
          "data_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "reset_model",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "save",
      "args": [],
      "kwargs": [
        [
          "model",
          "None"
        ],
        [
          "session",
          "None"
        ],
        [
          "save_pars",
          "{}"
        ]
      ],
      "pack": {}
    },
    {
      "name": "load",
      "args": [],
      "kwargs": [
        [
          "load_pars",
          "{}"
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_dataset",
      "args": [],
      "kwargs": [
        [
          "data_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "get_params",
      "args": [],
      "kwargs": [
        [
          "param_pars",
          "{}"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/\""
        ],
        [
          "pars_choice",
          "\"json\""
        ],
        [
          "config_mode",
          "\"test\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\namentity_crm_bilstm.py": [
    {
      "name": "fit",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "fit_metrics",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "predict",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "sess",
          "None"
        ],
        [
          "data_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "reset_model",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "save",
      "args": [],
      "kwargs": [
        [
          "model",
          "None"
        ],
        [
          "session",
          "None"
        ],
        [
          "save_pars",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "load",
      "args": [
        "load_pars"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "get_dataset",
      "args": [
        "data_pars"
      ],
      "kwargs": [],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "_preprocess_test",
      "args": [
        "data_pars"
      ],
      "kwargs": [],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "get_params",
      "args": [],
      "kwargs": [
        [
          "param_pars",
          "{}"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/\""
        ],
        [
          "pars_choice",
          "\"json\""
        ],
        [
          "config_mode",
          "\"test\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\preprocess.py": [
    {
      "name": "os_package_root_path",
      "args": [
        "filepath"
      ],
      "kwargs": [
        [
          "sublevel",
          "0"
        ],
        [
          "path_add",
          "\"\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "log",
      "args": [],
      "kwargs": [
        [
          "n",
          "0"
        ],
        [
          "m",
          "1"
        ]
      ],
      "pack": {
        "args": "s"
      }
    },
    {
      "name": "_preprocess_criteo",
      "args": [
        "df"
      ],
      "kwargs": [],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "_preprocess_movielens",
      "args": [
        "df"
      ],
      "kwargs": [],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "_preprocess_none",
      "args": [
        "df"
      ],
      "kwargs": [],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "get_dataset",
      "args": [],
      "kwargs": [],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/\""
        ],
        [
          "pars_choice",
          "0"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\textcnn.py": [
    {
      "name": "fit",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "fit_metrics",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "predict",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "sess",
          "None"
        ],
        [
          "data_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "reset_model",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "save",
      "args": [],
      "kwargs": [
        [
          "model",
          "None"
        ],
        [
          "session",
          "None"
        ],
        [
          "save_pars",
          "{}"
        ]
      ],
      "pack": {}
    },
    {
      "name": "load",
      "args": [],
      "kwargs": [
        [
          "load_pars",
          "{}"
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_dataset",
      "args": [],
      "kwargs": [
        [
          "data_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "get_params",
      "args": [],
      "kwargs": [
        [
          "param_pars",
          "{}"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/\""
        ],
        [
          "pars_choice",
          "\"json\""
        ],
        [
          "config_mode",
          "\"test\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\textvae.py": [
    {
      "name": "fit",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "fit_metrics",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "predict",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "sess",
          "None"
        ],
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "reset_model",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "save",
      "args": [],
      "kwargs": [
        [
          "model",
          "None"
        ],
        [
          "session",
          "None"
        ],
        [
          "save_pars",
          "{}"
        ]
      ],
      "pack": {}
    },
    {
      "name": "load",
      "args": [],
      "kwargs": [
        [
          "load_pars",
          "{}"
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_dataset",
      "args": [],
      "kwargs": [
        [
          "data_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "get_params",
      "args": [],
      "kwargs": [
        [
          "param_pars",
          "{}"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/\""
        ],
        [
          "pars_choice",
          "\"json\""
        ],
        [
          "config_mode",
          "\"test\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\util.py": [
    {
      "name": "os_package_root_path",
      "args": [
        "filepath"
      ],
      "kwargs": [
        [
          "sublevel",
          "0"
        ],
        [
          "path_add",
          "\"\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "log",
      "args": [],
      "kwargs": [
        [
          "n",
          "0"
        ],
        [
          "m",
          "1"
        ]
      ],
      "pack": {
        "args": "s"
      }
    },
    {
      "name": "_config_process",
      "args": [
        "data_path"
      ],
      "kwargs": [
        [
          "config_mode",
          "\"test\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_dataset",
      "args": [],
      "kwargs": [],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "fit",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "model_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ],
        [
          "session",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "predict",
      "args": [
        "model",
        "data_pars"
      ],
      "kwargs": [
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "metrics",
      "args": [
        "ypred",
        "data_pars"
      ],
      "kwargs": [
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "save",
      "args": [
        "model",
        "path"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "load",
      "args": [
        "path"
      ],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\__init__.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\no_03_textcnn.py": [
    {
      "name": "log",
      "args": [],
      "kwargs": [
        [
          "n",
          "0"
        ],
        [
          "m",
          "1"
        ]
      ],
      "pack": {
        "args": "s"
      }
    },
    {
      "name": "os_module_path",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "path_setup",
      "args": [],
      "kwargs": [
        [
          "out_folder",
          "\"\""
        ],
        [
          "sublevel",
          "0"
        ],
        [
          "data_path",
          "\"dataset/\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_params",
      "args": [],
      "kwargs": [
        [
          "choice",
          "\"\""
        ],
        [
          "data_path",
          "\"./dataset/\""
        ],
        [
          "config_mode",
          "\"test\""
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "get_pre_train_word2vec",
      "args": [
        "model",
        "index2word",
        "vocab_size"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "fit",
      "args": [
        "model",
        "Xtrain",
        "ytrain"
      ],
      "kwargs": [
        [
          "compute_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "metrics",
      "args": [
        "ytrue",
        "ypred"
      ],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "predict",
      "args": [
        "model",
        "Xtest",
        "ytest"
      ],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "reset_model",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "save",
      "args": [
        "model",
        "path"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "load",
      "args": [
        "path"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/\""
        ],
        [
          "pars_choice",
          "\"json\""
        ],
        [
          "reset",
          "True"
        ]
      ],
      "pack": {}
    },
    {
      "name": "test2",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/\""
        ],
        [
          "pars_choice",
          "\"json\""
        ],
        [
          "reset",
          "True"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\__init__.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\char_cnn\\data_utils.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\char_cnn\\main.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\char_cnn\\models\\char_cnn_kim.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\char_cnn\\models\\char_cnn_zhang.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\char_cnn\\models\\char_tcn.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\char_cnn\\models\\__init__.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\examples\\run_classification_criteo.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\examples\\run_classification_criteo_hash.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\examples\\run_classification_criteo_multi_gpu.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\examples\\run_dien.py": [
    {
      "name": "get_xy_fd",
      "args": [],
      "kwargs": [
        [
          "use_neg",
          "False"
        ],
        [
          "hash_flag",
          "False"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\examples\\run_din.py": [
    {
      "name": "get_xy_fd",
      "args": [],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\examples\\run_dsin.py": [
    {
      "name": "get_xy_fd",
      "args": [],
      "kwargs": [
        [
          "hash_flag",
          "False"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\examples\\run_multivalue_movielens.py": [
    {
      "name": "split",
      "args": [
        "x"
      ],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\examples\\run_multivalue_movielens_hash.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\examples\\run_regression_movielens.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\FastText\\fast_text.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\FastText\\main.py": [
    {
      "name": "create_ngram_set",
      "args": [
        "input_list"
      ],
      "kwargs": [
        [
          "ngram_value",
          "2"
        ]
      ],
      "pack": {}
    },
    {
      "name": "add_ngram",
      "args": [
        "sequences",
        "token_indice"
      ],
      "kwargs": [
        [
          "ngram_range",
          "2"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\graph_cnn_text\\build_graph.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\graph_cnn_text\\inits.py": [
    {
      "name": "uniform",
      "args": [
        "shape"
      ],
      "kwargs": [
        [
          "scale",
          "0.05"
        ],
        [
          "name",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "glorot",
      "args": [
        "shape"
      ],
      "kwargs": [
        [
          "name",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "weight_variable_glorot",
      "args": [
        "input_dim",
        "output_dim"
      ],
      "kwargs": [
        [
          "name",
          "\"\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "zeros",
      "args": [
        "shape"
      ],
      "kwargs": [
        [
          "name",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "ones",
      "args": [
        "shape"
      ],
      "kwargs": [
        [
          "name",
          "None"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\graph_cnn_text\\layers.py": [
    {
      "name": "get_layer_uid",
      "args": [],
      "kwargs": [
        [
          "layer_name",
          "''"
        ]
      ],
      "pack": {}
    },
    {
      "name": "sparse_dropout",
      "args": [
        "x",
        "keep_prob",
        "noise_shape"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "dropout_sparse",
      "args": [
        "x",
        "keep_prob",
        "num_nonzero_elems"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "dot",
      "args": [
        "x",
        "y"
      ],
      "kwargs": [
        [
          "sparse",
          "False"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\graph_cnn_text\\metrics.py": [
    {
      "name": "masked_softmax_cross_entropy",
      "args": [
        "preds",
        "labels",
        "mask"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "masked_accuracy",
      "args": [
        "preds",
        "labels",
        "mask"
      ],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\graph_cnn_text\\models.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\graph_cnn_text\\remove_words.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\graph_cnn_text\\train.py": [
    {
      "name": "evaluate",
      "args": [
        "features",
        "support",
        "labels",
        "mask",
        "placeholders"
      ],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\graph_cnn_text\\tsne.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\graph_cnn_text\\utils.py": [
    {
      "name": "parse_index_file",
      "args": [
        "filename"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "sample_mask",
      "args": [
        "idx",
        "l"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "load_data",
      "args": [
        "dataset_str"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "load_corpus",
      "args": [
        "dataset_str"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "load_corpus_multimodal",
      "args": [
        "dataset_str"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "load_corpus_kg",
      "args": [
        "dataset_str"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "sparse_to_tuple",
      "args": [
        "sparse_mx"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "preprocess_features",
      "args": [
        "features"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "normalize_adj",
      "args": [
        "adj"
      ],
      "kwargs": [
        [
          "symmetric",
          "True"
        ]
      ],
      "pack": {}
    },
    {
      "name": "preprocess_adj",
      "args": [
        "adj"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "preprocess_graph",
      "args": [
        "adj"
      ],
      "kwargs": [
        [
          "symmetric",
          "True"
        ]
      ],
      "pack": {}
    },
    {
      "name": "construct_feed_dict",
      "args": [
        "features",
        "support",
        "labels",
        "labels_mask",
        "placeholders"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "build_feed_dict",
      "args": [
        "labels",
        "labels_mask",
        "adj",
        "edge_types",
        "feat",
        "placeholders"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "chebyshev_polynomials",
      "args": [
        "adj",
        "k"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "loadWord2Vec",
      "args": [
        "filename"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "clean_str",
      "args": [
        "string"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "word_synonyms",
      "args": [
        "word"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "synonimize",
      "args": [
        "word"
      ],
      "kwargs": [
        [
          "pos",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "wordnet_id_synset_dict",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "wordnet_id_num_dict",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "wordnet_defs",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "read_triples",
      "args": [
        "file_path"
      ],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\graph_cnn_text\\__init__.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\HAN\\attention.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\HAN\\han.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\HAN\\main.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\RCNN\\main.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\RCNN\\rcnn.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\RCNNVariant\\main.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\RCNNVariant\\rcnn_variant.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\TextAttBiRNN\\attention.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\TextAttBiRNN\\main.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\TextAttBiRNN\\text_att_birnn.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\TextBiRNN\\main.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\TextBiRNN\\text_birnn.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\textcnn_\\main.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\textcnn_\\text_cnn.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\textcnn_\\__init__.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\TextRNN\\main.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\TextRNN\\text_rnn.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\bow.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\build_corpus.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\build_graph.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\doc2vec.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\inits.py": [
    {
      "name": "uniform",
      "args": [
        "shape"
      ],
      "kwargs": [
        [
          "scale",
          "0.05"
        ],
        [
          "name",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "glorot",
      "args": [
        "shape"
      ],
      "kwargs": [
        [
          "name",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "zeros",
      "args": [
        "shape"
      ],
      "kwargs": [
        [
          "name",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "ones",
      "args": [
        "shape"
      ],
      "kwargs": [
        [
          "name",
          "None"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\layers.py": [
    {
      "name": "get_layer_uid",
      "args": [],
      "kwargs": [
        [
          "layer_name",
          "''"
        ]
      ],
      "pack": {}
    },
    {
      "name": "sparse_dropout",
      "args": [
        "x",
        "keep_prob",
        "noise_shape"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "dot",
      "args": [
        "x",
        "y"
      ],
      "kwargs": [
        [
          "sparse",
          "False"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\metrics.py": [
    {
      "name": "masked_softmax_cross_entropy",
      "args": [
        "preds",
        "labels",
        "mask"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "masked_accuracy",
      "args": [
        "preds",
        "labels",
        "mask"
      ],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\models.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\plot_dim.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\plot_prop.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\plot_window.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\prepare_data.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\remove_words.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\train.py": [
    {
      "name": "evaluate",
      "args": [
        "features",
        "support",
        "labels",
        "mask",
        "placeholders"
      ],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\utils.py": [
    {
      "name": "parse_index_file",
      "args": [
        "filename"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "sample_mask",
      "args": [
        "idx",
        "l"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "load_data",
      "args": [
        "dataset_str"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "load_corpus",
      "args": [
        "dataset_str"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "sparse_to_tuple",
      "args": [
        "sparse_mx"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "preprocess_features",
      "args": [
        "features"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "normalize_adj",
      "args": [
        "adj"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "preprocess_adj",
      "args": [
        "adj"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "construct_feed_dict",
      "args": [
        "features",
        "support",
        "labels",
        "labels_mask",
        "placeholders"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "chebyshev_polynomials",
      "args": [
        "adj",
        "k"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "loadWord2Vec",
      "args": [
        "filename"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "clean_str",
      "args": [
        "string"
      ],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\visualize.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\visualize_words.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\wordnet.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_keras\\raw\\text_graph_cnn2\\__init__.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_rank\\LambdaRank.py": [
    {
      "name": "train",
      "args": [],
      "kwargs": [
        [
          "start_epoch",
          "0"
        ],
        [
          "additional_epoch",
          "100"
        ],
        [
          "lr",
          "0.0001"
        ],
        [
          "optim",
          "\"adam\""
        ],
        [
          "leaky_relu",
          "False"
        ],
        [
          "ndcg_gain_in_train",
          "\"exp2\""
        ],
        [
          "sigma",
          "1.0"
        ],
        [
          "double_precision",
          "False"
        ],
        [
          "standardize",
          "False"
        ],
        [
          "small_dataset",
          "False"
        ],
        [
          "debug",
          "False"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_rank\\load_mslr.py": [
    {
      "name": "get_time",
      "args": [],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_rank\\metrics.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_rank\\RankNet.py": [
    {
      "name": "train_rank_net",
      "args": [],
      "kwargs": [
        [
          "start_epoch",
          "0"
        ],
        [
          "additional_epoch",
          "100"
        ],
        [
          "lr",
          "0.0001"
        ],
        [
          "optim",
          "\"adam\""
        ],
        [
          "train_algo",
          "SUM_SESSION"
        ],
        [
          "double_precision",
          "False"
        ],
        [
          "standardize",
          "False"
        ],
        [
          "small_dataset",
          "False"
        ],
        [
          "debug",
          "False"
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_train_inference_net",
      "args": [
        "train_algo",
        "num_features",
        "start_epoch",
        "double_precision"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "baseline_pairwise_training_loop",
      "args": [
        "epoch",
        "net",
        "loss_func",
        "optimizer",
        "train_loader"
      ],
      "kwargs": [
        [
          "batch_size",
          "100000"
        ],
        [
          "precision",
          "torch.float32"
        ],
        [
          "device",
          "\"cpu\""
        ],
        [
          "debug",
          "False"
        ]
      ],
      "pack": {}
    },
    {
      "name": "factorized_training_loop",
      "args": [
        "epoch",
        "net",
        "loss_func",
        "optimizer",
        "train_loader"
      ],
      "kwargs": [
        [
          "batch_size",
          "200"
        ],
        [
          "sigma",
          "1.0"
        ],
        [
          "training_algo",
          "SUM_SESSION"
        ],
        [
          "precision",
          "torch.float32"
        ],
        [
          "device",
          "\"cpu\""
        ],
        [
          "debug",
          "False"
        ]
      ],
      "pack": {}
    },
    {
      "name": "eval_model",
      "args": [
        "inference_model",
        "device",
        "df_valid",
        "valid_loader"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "load_from_ckpt",
      "args": [
        "ckpt_file",
        "epoch",
        "model"
      ],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_rank\\utils.py": [
    {
      "name": "get_device",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "get_ckptdir",
      "args": [
        "net_name",
        "net_structure"
      ],
      "kwargs": [
        [
          "sigma",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "save_to_ckpt",
      "args": [
        "ckpt_file",
        "epoch",
        "model",
        "optimizer",
        "lr_scheduler"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "load_train_vali_data",
      "args": [
        "data_fold"
      ],
      "kwargs": [
        [
          "small_dataset",
          "False"
        ]
      ],
      "pack": {}
    },
    {
      "name": "init_weights",
      "args": [
        "m"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "eval_cross_entropy_loss",
      "args": [
        "model",
        "device",
        "loader"
      ],
      "kwargs": [
        [
          "phase",
          "\"Eval\""
        ],
        [
          "sigma",
          "1.0"
        ]
      ],
      "pack": {}
    },
    {
      "name": "eval_ndcg_at_k",
      "args": [
        "inference_model",
        "device",
        "df_valid",
        "valid_loader",
        "batch_size",
        "k_list"
      ],
      "kwargs": [
        [
          "phase",
          "\"Eval\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "str2bool",
      "args": [
        "v"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "get_args_parser",
      "args": [],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_rank\\__init__.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_rank\\dev\\LambdaRank.py": [
    {
      "name": "train",
      "args": [],
      "kwargs": [
        [
          "start_epoch",
          "0"
        ],
        [
          "additional_epoch",
          "100"
        ],
        [
          "lr",
          "0.0001"
        ],
        [
          "optim",
          "\"adam\""
        ],
        [
          "leaky_relu",
          "False"
        ],
        [
          "ndcg_gain_in_train",
          "\"exp2\""
        ],
        [
          "sigma",
          "1.0"
        ],
        [
          "double_precision",
          "False"
        ],
        [
          "standardize",
          "False"
        ],
        [
          "small_dataset",
          "False"
        ],
        [
          "debug",
          "False"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_rank\\dev\\load_mslr.py": [
    {
      "name": "get_time",
      "args": [],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_rank\\dev\\metrics.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_rank\\dev\\RankNet.py": [
    {
      "name": "train_rank_net",
      "args": [],
      "kwargs": [
        [
          "start_epoch",
          "0"
        ],
        [
          "additional_epoch",
          "100"
        ],
        [
          "lr",
          "0.0001"
        ],
        [
          "optim",
          "\"adam\""
        ],
        [
          "train_algo",
          "SUM_SESSION"
        ],
        [
          "double_precision",
          "False"
        ],
        [
          "standardize",
          "False"
        ],
        [
          "small_dataset",
          "False"
        ],
        [
          "debug",
          "False"
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_train_inference_net",
      "args": [
        "train_algo",
        "num_features",
        "start_epoch",
        "double_precision"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "baseline_pairwise_training_loop",
      "args": [
        "epoch",
        "net",
        "loss_func",
        "optimizer",
        "train_loader"
      ],
      "kwargs": [
        [
          "batch_size",
          "100000"
        ],
        [
          "precision",
          "torch.float32"
        ],
        [
          "device",
          "\"cpu\""
        ],
        [
          "debug",
          "False"
        ]
      ],
      "pack": {}
    },
    {
      "name": "factorized_training_loop",
      "args": [
        "epoch",
        "net",
        "loss_func",
        "optimizer",
        "train_loader"
      ],
      "kwargs": [
        [
          "batch_size",
          "200"
        ],
        [
          "sigma",
          "1.0"
        ],
        [
          "training_algo",
          "SUM_SESSION"
        ],
        [
          "precision",
          "torch.float32"
        ],
        [
          "device",
          "\"cpu\""
        ],
        [
          "debug",
          "False"
        ]
      ],
      "pack": {}
    },
    {
      "name": "eval_model",
      "args": [
        "inference_model",
        "device",
        "df_valid",
        "valid_loader"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "load_from_ckpt",
      "args": [
        "ckpt_file",
        "epoch",
        "model"
      ],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_rank\\dev\\utils.py": [
    {
      "name": "get_device",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "get_ckptdir",
      "args": [
        "net_name",
        "net_structure"
      ],
      "kwargs": [
        [
          "sigma",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "save_to_ckpt",
      "args": [
        "ckpt_file",
        "epoch",
        "model",
        "optimizer",
        "lr_scheduler"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "load_train_vali_data",
      "args": [
        "data_fold"
      ],
      "kwargs": [
        [
          "small_dataset",
          "False"
        ]
      ],
      "pack": {}
    },
    {
      "name": "init_weights",
      "args": [
        "m"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "eval_cross_entropy_loss",
      "args": [
        "model",
        "device",
        "loader"
      ],
      "kwargs": [
        [
          "phase",
          "\"Eval\""
        ],
        [
          "sigma",
          "1.0"
        ]
      ],
      "pack": {}
    },
    {
      "name": "eval_ndcg_at_k",
      "args": [
        "inference_model",
        "device",
        "df_valid",
        "valid_loader",
        "batch_size",
        "k_list"
      ],
      "kwargs": [
        [
          "phase",
          "\"Eval\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "str2bool",
      "args": [
        "v"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "get_args_parser",
      "args": [],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_sklearn\\lightgbm.py": [
    {
      "name": "fit",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "fit_metrics",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "predict",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "sess",
          "None"
        ],
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "reset_model",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "save",
      "args": [],
      "kwargs": [
        [
          "model",
          "None"
        ],
        [
          "session",
          "None"
        ],
        [
          "save_pars",
          "{}"
        ]
      ],
      "pack": {}
    },
    {
      "name": "load",
      "args": [],
      "kwargs": [
        [
          "load_pars",
          "{}"
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_dataset",
      "args": [],
      "kwargs": [
        [
          "data_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "path_setup",
      "args": [],
      "kwargs": [
        [
          "out_folder",
          "\"ztest\""
        ],
        [
          "sublevel",
          "0"
        ],
        [
          "data_path",
          "\"dataset/\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_params",
      "args": [],
      "kwargs": [
        [
          "param_pars",
          "{}"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/\""
        ],
        [
          "pars_choice",
          "\"json\""
        ],
        [
          "config_mode",
          "\"test\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_sklearn\\model.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_sklearn\\model_lightgbm.py": [
    {
      "name": "fit",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "fit_metrics",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "predict",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "sess",
          "None"
        ],
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "reset_model",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "save",
      "args": [],
      "kwargs": [
        [
          "model",
          "None"
        ],
        [
          "session",
          "None"
        ],
        [
          "save_pars",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "load",
      "args": [],
      "kwargs": [
        [
          "load_pars",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_dataset",
      "args": [],
      "kwargs": [
        [
          "data_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "get_params",
      "args": [],
      "kwargs": [
        [
          "param_pars",
          "{}"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/\""
        ],
        [
          "pars_choice",
          "\"json\""
        ],
        [
          "config_mode",
          "\"test\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_sklearn\\model_sklearn.py": [
    {
      "name": "fit",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "fit_metrics",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "predict",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "sess",
          "None"
        ],
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "reset_model",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "save",
      "args": [],
      "kwargs": [
        [
          "model",
          "None"
        ],
        [
          "session",
          "None"
        ],
        [
          "save_pars",
          "{}"
        ]
      ],
      "pack": {}
    },
    {
      "name": "load",
      "args": [],
      "kwargs": [
        [
          "load_pars",
          "{}"
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_dataset",
      "args": [],
      "kwargs": [
        [
          "data_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "get_params",
      "args": [],
      "kwargs": [
        [
          "param_pars",
          "{}"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/\""
        ],
        [
          "pars_choice",
          "\"json\""
        ],
        [
          "config_mode",
          "\"test\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_sklearn\\sklearn.py": [
    {
      "name": "fit",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "fit_metrics",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "predict",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "sess",
          "None"
        ],
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "reset_model",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "save",
      "args": [],
      "kwargs": [
        [
          "model",
          "None"
        ],
        [
          "session",
          "None"
        ],
        [
          "save_pars",
          "{}"
        ]
      ],
      "pack": {}
    },
    {
      "name": "load",
      "args": [],
      "kwargs": [
        [
          "load_pars",
          "{}"
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_dataset",
      "args": [],
      "kwargs": [
        [
          "data_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "path_setup",
      "args": [],
      "kwargs": [
        [
          "out_folder",
          "\"ztest\""
        ],
        [
          "sublevel",
          "0"
        ],
        [
          "data_path",
          "\"dataset/\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_params",
      "args": [],
      "kwargs": [
        [
          "param_pars",
          "{}"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/\""
        ],
        [
          "pars_choice",
          "\"json\""
        ],
        [
          "config_mode",
          "\"test\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_sklearn\\__init__.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\02_mlp.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\03_nbeats.py": [
    {
      "name": "get_dataset",
      "args": [],
      "kwargs": [],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "data_generator",
      "args": [
        "x_full",
        "y_full",
        "bs"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "fit",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "fit_simple",
      "args": [
        "net",
        "optimiser",
        "data_generator",
        "on_save_callback",
        "device",
        "data_pars",
        "out_pars"
      ],
      "kwargs": [
        [
          "max_grad_steps",
          "500"
        ]
      ],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "plot",
      "args": [
        "net",
        "x",
        "target",
        "backcast_length",
        "forecast_length",
        "grad_step"
      ],
      "kwargs": [
        [
          "out_path",
          "\"./\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "plot_model",
      "args": [
        "net",
        "x",
        "target",
        "grad_step",
        "data_pars"
      ],
      "kwargs": [
        [
          "disable_plot",
          "False"
        ]
      ],
      "pack": {}
    },
    {
      "name": "plot_predict",
      "args": [
        "x_test",
        "y_test",
        "p",
        "data_pars",
        "compute_pars",
        "out_pars"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "save_checkpoint",
      "args": [
        "model",
        "optimiser",
        "grad_step"
      ],
      "kwargs": [
        [
          "CHECKPOINT_NAME",
          "\"mycheckpoint\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "load_checkpoint",
      "args": [
        "model",
        "optimiser"
      ],
      "kwargs": [
        [
          "CHECKPOINT_NAME",
          "'nbeats-fiting-checkpoint.th'"
        ]
      ],
      "pack": {}
    },
    {
      "name": "save",
      "args": [
        "model",
        "session",
        "save_pars"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "load",
      "args": [
        "load_pars"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "get_params",
      "args": [
        "param_pars"
      ],
      "kwargs": [],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/milk.csv\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\cnn_classifier.py": [
    {
      "name": "get_pars",
      "args": [],
      "kwargs": [
        [
          "choice",
          "\"test\""
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "get_dataset",
      "args": [
        "data_params"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "fit",
      "args": [
        "model",
        "data_pars"
      ],
      "kwargs": [
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "predict",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "sess",
          "None"
        ],
        [
          "compute_params",
          "None"
        ],
        [
          "data_params",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "predict_proba",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "sess",
          "None"
        ],
        [
          "compute_params",
          "None"
        ],
        [
          "data_params",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "metrics",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "sess",
          "None"
        ],
        [
          "data_params",
          "{}"
        ],
        [
          "compute_params",
          "{}"
        ]
      ],
      "pack": {}
    },
    {
      "name": "test",
      "args": [
        "arg"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "_train",
      "args": [
        "epoch",
        "model",
        "train_loader"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "_eval_metrics",
      "args": [
        "model",
        "epoch",
        "test_loader"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "_log_scalar",
      "args": [
        "name",
        "value",
        "step"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "cli_load_arguments",
      "args": [],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\data_prep.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\mlp.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\nbeats.py": [
    {
      "name": "os_package_root_path",
      "args": [
        "filepath"
      ],
      "kwargs": [
        [
          "sublevel",
          "0"
        ],
        [
          "path_add",
          "\"\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "log",
      "args": [],
      "kwargs": [
        [
          "n",
          "0"
        ],
        [
          "m",
          "1"
        ]
      ],
      "pack": {
        "args": "s"
      }
    },
    {
      "name": "get_dataset",
      "args": [],
      "kwargs": [],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "data_generator",
      "args": [
        "x_full",
        "y_full",
        "bs"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "fit",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "fit_simple",
      "args": [
        "net",
        "optimiser",
        "data_generator",
        "on_save_callback",
        "device",
        "data_pars"
      ],
      "kwargs": [
        [
          "max_grad_steps",
          "500"
        ]
      ],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "plot",
      "args": [
        "net",
        "x",
        "target",
        "backcast_length",
        "forecast_length",
        "grad_step"
      ],
      "kwargs": [
        [
          "out_path",
          "\"./\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "plot_model",
      "args": [
        "net",
        "x",
        "target",
        "grad_step",
        "data_pars"
      ],
      "kwargs": [
        [
          "disable_plot",
          "False"
        ]
      ],
      "pack": {}
    },
    {
      "name": "plot_predict",
      "args": [
        "x_test",
        "y_test",
        "p",
        "data_pars",
        "compute_pars",
        "out_pars"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "save",
      "args": [
        "model",
        "optimiser",
        "grad_step"
      ],
      "kwargs": [
        [
          "CHECKPOINT_NAME",
          "\"mycheckpoint\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "load",
      "args": [
        "model",
        "optimiser"
      ],
      "kwargs": [
        [
          "CHECKPOINT_NAME",
          "'nbeats-fiting-checkpoint.th'"
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_params",
      "args": [],
      "kwargs": [
        [
          "choice",
          "0"
        ],
        [
          "data_path",
          "\"dataset/\""
        ],
        [
          "config_mode",
          "\"test\""
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "test2",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/milk.csv\""
        ],
        [
          "out_path",
          "\"n_beats_test{}.png\""
        ],
        [
          "reset",
          "True"
        ]
      ],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/milk.csv\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\pplm.py": [
    {
      "name": "path_setup",
      "args": [],
      "kwargs": [
        [
          "out_folder",
          "\"\""
        ],
        [
          "sublevel",
          "0"
        ],
        [
          "data_path",
          "\"dataset/\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "generate",
      "args": [
        "cond_text",
        "bag_of_words"
      ],
      "kwargs": [
        [
          "discrim",
          "None"
        ],
        [
          "class_label",
          "-1"
        ]
      ],
      "pack": {}
    },
    {
      "name": "fit",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "predict",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "sess",
          "None"
        ],
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "get_dataset",
      "args": [],
      "kwargs": [
        [
          "data_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "get_params",
      "args": [],
      "kwargs": [
        [
          "param_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\sentence_transformer.py": [
    {
      "name": "os_package_root_path",
      "args": [
        "filepath"
      ],
      "kwargs": [
        [
          "sublevel",
          "0"
        ],
        [
          "path_add",
          "\"\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "log",
      "args": [],
      "kwargs": [
        [
          "n",
          "0"
        ],
        [
          "m",
          "1"
        ]
      ],
      "pack": {
        "args": "s"
      }
    },
    {
      "name": "_preprocess_XXXX",
      "args": [
        "df"
      ],
      "kwargs": [],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "get_dataset",
      "args": [
        "task",
        "tokenizer"
      ],
      "kwargs": [
        [
          "evaluate",
          "False"
        ]
      ],
      "pack": {}
    },
    {
      "name": "fit",
      "args": [
        "train_dataset",
        "model",
        "tokenizer"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "data_pars"
      ],
      "kwargs": [
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "get_mismatched",
      "args": [
        "labels",
        "preds"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "get_eval_report",
      "args": [
        "labels",
        "preds"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "metrics",
      "args": [
        "task_name",
        "preds",
        "labels"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "evaluate",
      "args": [
        "model",
        "tokenizer"
      ],
      "kwargs": [
        [
          "prefix",
          "\"\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "reset_model",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "save",
      "args": [
        "model",
        "path"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "load",
      "args": [
        "path"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "path_setup",
      "args": [],
      "kwargs": [
        [
          "out_folder",
          "\"\""
        ],
        [
          "sublevel",
          "0"
        ],
        [
          "data_path",
          "\"dataset/\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_params",
      "args": [],
      "kwargs": [
        [
          "choice",
          "0"
        ],
        [
          "data_path",
          "\"dataset/\""
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/\""
        ],
        [
          "pars_choice",
          "0"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\textcnn.py": [
    {
      "name": "_train",
      "args": [
        "m",
        "device",
        "train_itr",
        "optimizer",
        "epoch",
        "max_epoch"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "_valid",
      "args": [
        "m",
        "device",
        "test_itr"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "_get_device",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "get_config_file",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "get_data_file",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "split_train_valid",
      "args": [
        "path_data",
        "path_train",
        "path_valid"
      ],
      "kwargs": [
        [
          "frac",
          "0.7"
        ]
      ],
      "pack": {}
    },
    {
      "name": "clean_str",
      "args": [
        "string"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "create_tabular_dataset",
      "args": [
        "path_train",
        "path_valid"
      ],
      "kwargs": [
        [
          "lang",
          "'en'"
        ],
        [
          "pretrained_emb",
          "'glove.6B.300d'"
        ]
      ],
      "pack": {}
    },
    {
      "name": "create_data_iterator",
      "args": [
        "tr_batch_size",
        "val_batch_size",
        "tabular_train",
        "tabular_valid",
        "d"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "get_params",
      "args": [],
      "kwargs": [
        [
          "param_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "metric",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "fit",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "sess",
          "None"
        ],
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "get_dataset",
      "args": [],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "predict",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "save",
      "args": [
        "model",
        "path"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "load",
      "args": [
        "path"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\torchhub.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\transformer_classifier.py": [
    {
      "name": "_preprocess_XXXX",
      "args": [
        "df"
      ],
      "kwargs": [],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "load_and_cache_examples",
      "args": [
        "task",
        "tokenizer"
      ],
      "kwargs": [
        [
          "evaluate",
          "False"
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_dataset",
      "args": [
        "task",
        "tokenizer"
      ],
      "kwargs": [
        [
          "evaluate",
          "False"
        ]
      ],
      "pack": {}
    },
    {
      "name": "fit",
      "args": [
        "train_dataset",
        "model",
        "tokenizer"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "get_mismatched",
      "args": [
        "labels",
        "preds"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "get_eval_report",
      "args": [
        "labels",
        "preds"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "metrics",
      "args": [
        "task_name",
        "preds",
        "labels"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "fit_metrics",
      "args": [
        "model",
        "tokenizer",
        "model_pars",
        "data_pars",
        "out_pars",
        "compute_pars"
      ],
      "kwargs": [
        [
          "prefix",
          "\"\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "reset_model",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "save",
      "args": [],
      "kwargs": [
        [
          "model",
          "None"
        ],
        [
          "session",
          "None"
        ],
        [
          "save_pars",
          "{}"
        ]
      ],
      "pack": {}
    },
    {
      "name": "load",
      "args": [],
      "kwargs": [
        [
          "load_pars",
          "{}"
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_params",
      "args": [],
      "kwargs": [
        [
          "param_pars",
          "{}"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "test",
      "args": [
        "data_path",
        "model_pars",
        "data_pars",
        "compute_pars",
        "out_pars"
      ],
      "kwargs": [
        [
          "pars_choice",
          "0"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\transformer_classifier2.py": [
    {
      "name": "_preprocess_XXXX",
      "args": [
        "df"
      ],
      "kwargs": [],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "get_dataset",
      "args": [],
      "kwargs": [
        [
          "data_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "fit",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "model_pars",
          "{}"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "args": "args",
        "kwargs": "kw"
      }
    },
    {
      "name": "predict",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "sess",
          "None"
        ],
        [
          "data_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "get_mismatched",
      "args": [
        "labels",
        "preds"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "get_eval_report",
      "args": [
        "labels",
        "preds"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "metrics",
      "args": [
        "task_name",
        "preds",
        "labels"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "evaluate",
      "args": [
        "model",
        "tokenizer"
      ],
      "kwargs": [
        [
          "prefix",
          "\"\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "reset_model",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "save",
      "args": [
        "model",
        "out_pars"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "load",
      "args": [],
      "kwargs": [
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "path_setup",
      "args": [],
      "kwargs": [
        [
          "out_folder",
          "\"\""
        ],
        [
          "sublevel",
          "0"
        ],
        [
          "data_path",
          "\"dataset/\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_params",
      "args": [],
      "kwargs": [
        [
          "choice",
          "0"
        ],
        [
          "data_path",
          "\"dataset/\""
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "metrics_evaluate",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/\""
        ],
        [
          "pars_choice",
          "0"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\transformer_sentence.py": [
    {
      "name": "fit",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "model_pars",
          "{}"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "args": "args",
        "kwargs": "kw"
      }
    },
    {
      "name": "fit_metrics",
      "args": [
        "model"
      ],
      "kwargs": [],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "predict",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "sess",
          "None"
        ],
        [
          "data_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "reset_model",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "save",
      "args": [
        "model",
        "out_pars"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "load",
      "args": [],
      "kwargs": [
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_dataset",
      "args": [],
      "kwargs": [
        [
          "data_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "get_params",
      "args": [
        "param_pars"
      ],
      "kwargs": [],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/\""
        ],
        [
          "pars_choice",
          "\"test01\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\util_data.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\util_transformer.py": [
    {
      "name": "convert_example_to_feature",
      "args": [
        "example_row"
      ],
      "kwargs": [
        [
          "pad_token",
          "0"
        ],
        [
          "sequence_a_segment_id",
          "0"
        ],
        [
          "sequence_b_segment_id",
          "1"
        ],
        [
          "cls_token_segment_id",
          "1"
        ],
        [
          "pad_token_segment_id",
          "0"
        ],
        [
          "mask_padding_with_zero",
          "True"
        ],
        [
          "sep_token_extra",
          "False"
        ]
      ],
      "pack": {}
    },
    {
      "name": "convert_examples_to_features",
      "args": [
        "examples",
        "label_list",
        "max_seq_length",
        "tokenizer",
        "output_mode"
      ],
      "kwargs": [
        [
          "cls_token_at_end",
          "False"
        ],
        [
          "sep_token_extra",
          "False"
        ],
        [
          "pad_on_left",
          "False"
        ],
        [
          "cls_token",
          "'[CLS]'"
        ],
        [
          "sep_token",
          "'[SEP]'"
        ],
        [
          "pad_token",
          "0"
        ],
        [
          "sequence_a_segment_id",
          "0"
        ],
        [
          "sequence_b_segment_id",
          "1"
        ],
        [
          "cls_token_segment_id",
          "1"
        ],
        [
          "pad_token_segment_id",
          "0"
        ],
        [
          "mask_padding_with_zero",
          "True"
        ],
        [
          "process_count",
          "cpu_count()"
        ]
      ],
      "pack": {}
    },
    {
      "name": "_truncate_seq_pair",
      "args": [
        "tokens_a",
        "tokens_b",
        "max_length"
      ],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\__init__.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\nbeats\\data.py": [
    {
      "name": "get_data",
      "args": [
        "num_samples",
        "backcast_length",
        "forecast_length"
      ],
      "kwargs": [
        [
          "signal_type",
          "'seasonality'"
        ],
        [
          "random",
          "False"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\nbeats\\model.py": [
    {
      "name": "seasonality_model",
      "args": [
        "thetas",
        "t",
        "device"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "trend_model",
      "args": [
        "thetas",
        "t",
        "device"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "linspace",
      "args": [
        "backcast_length",
        "forecast_length"
      ],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\nbeats\\nbeats.py": [
    {
      "name": "fit",
      "args": [
        "model",
        "data_pars"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "stats_compute",
      "args": [
        "model",
        "sess",
        "df"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "data_pars"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "reset_model",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "fit",
      "args": [
        "model",
        "data_pars"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "simple_fit",
      "args": [
        "net",
        "optimiser",
        "data_generator",
        "on_save_callback",
        "device"
      ],
      "kwargs": [
        [
          "max_grad_steps",
          "10000"
        ]
      ],
      "pack": {}
    },
    {
      "name": "save",
      "args": [
        "model",
        "optimiser",
        "grad_step"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "load",
      "args": [
        "model",
        "optimiser"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "plot",
      "args": [
        "net",
        "x",
        "target",
        "backcast_length",
        "forecast_length",
        "grad_step"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "get_script_arguments",
      "args": [],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\nbeats\\nbeats_sample.py": [
    {
      "name": "plot_scatter",
      "args": [],
      "kwargs": [],
      "pack": {
        "args": "args",
        "kwargs": "kwargs"
      }
    },
    {
      "name": "data_generator",
      "args": [
        "x_full",
        "y_full",
        "bs"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "train_100_grad_steps",
      "args": [
        "data",
        "device",
        "net",
        "optimiser",
        "test_losses"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "eval_test",
      "args": [
        "backcast_length",
        "forecast_length",
        "net",
        "norm_constant",
        "test_losses",
        "x_test",
        "y_test"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "data_load",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "fit",
      "args": [],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\nbeats\\trainer.py": [
    {
      "name": "get_script_arguments",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "fit",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "simple_fit",
      "args": [
        "net",
        "optimiser",
        "data_generator",
        "on_save_callback",
        "device"
      ],
      "kwargs": [
        [
          "max_grad_steps",
          "10000"
        ]
      ],
      "pack": {}
    },
    {
      "name": "save",
      "args": [
        "model",
        "optimiser",
        "grad_step"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "load",
      "args": [
        "model",
        "optimiser"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "plot",
      "args": [
        "net",
        "x",
        "target",
        "backcast_length",
        "forecast_length",
        "grad_step"
      ],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\nbeats\\__init__.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\pplm\\pplm_classification_head.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\pplm\\run_pplm.py": [
    {
      "name": "to_var",
      "args": [
        "x"
      ],
      "kwargs": [
        [
          "requires_grad",
          "False"
        ],
        [
          "volatile",
          "False"
        ],
        [
          "device",
          "'cuda'"
        ]
      ],
      "pack": {}
    },
    {
      "name": "top_k_filter",
      "args": [
        "logits",
        "k"
      ],
      "kwargs": [
        [
          "probs",
          "False"
        ]
      ],
      "pack": {}
    },
    {
      "name": "perturb_past",
      "args": [
        "past",
        "model",
        "last"
      ],
      "kwargs": [
        [
          "unpert_past",
          "None"
        ],
        [
          "unpert_logits",
          "None"
        ],
        [
          "accumulated_hidden",
          "None"
        ],
        [
          "grad_norms",
          "None"
        ],
        [
          "stepsize",
          "0.01"
        ],
        [
          "one_hot_bows_vectors",
          "None"
        ],
        [
          "classifier",
          "None"
        ],
        [
          "class_label",
          "None"
        ],
        [
          "loss_type",
          "0"
        ],
        [
          "num_iterations",
          "3"
        ],
        [
          "horizon_length",
          "1"
        ],
        [
          "window_length",
          "0"
        ],
        [
          "decay",
          "False"
        ],
        [
          "gamma",
          "1.5"
        ],
        [
          "kl_scale",
          "0.01"
        ],
        [
          "device",
          "'cuda'"
        ],
        [
          "verbosity_level",
          "REGULAR"
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_classifier",
      "args": [
        "name"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "get_bag_of_words_indices",
      "args": [
        "bag_of_words_ids_or_paths"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "full_text_generation",
      "args": [
        "model",
        "tokenizer"
      ],
      "kwargs": [
        [
          "context",
          "None"
        ],
        [
          "num_samples",
          "1"
        ],
        [
          "device",
          "\"cuda\""
        ],
        [
          "bag_of_words",
          "None"
        ],
        [
          "discrim",
          "None"
        ],
        [
          "class_label",
          "None"
        ],
        [
          "length",
          "100"
        ],
        [
          "stepsize",
          "0.02"
        ],
        [
          "temperature",
          "1.0"
        ],
        [
          "top_k",
          "10"
        ],
        [
          "sample",
          "True"
        ],
        [
          "num_iterations",
          "3"
        ],
        [
          "grad_length",
          "10000"
        ],
        [
          "horizon_length",
          "1"
        ],
        [
          "window_length",
          "0"
        ],
        [
          "decay",
          "False"
        ],
        [
          "gamma",
          "1.5"
        ],
        [
          "gm_scale",
          "0.9"
        ],
        [
          "kl_scale",
          "0.01"
        ],
        [
          "verbosity_level",
          "REGULAR"
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "generate_text_pplm",
      "args": [
        "model",
        "tokenizer"
      ],
      "kwargs": [
        [
          "context",
          "None"
        ],
        [
          "past",
          "None"
        ],
        [
          "device",
          "\"cuda\""
        ],
        [
          "perturb",
          "True"
        ],
        [
          "bow_indices",
          "None"
        ],
        [
          "classifier",
          "None"
        ],
        [
          "class_label",
          "None"
        ],
        [
          "loss_type",
          "0"
        ],
        [
          "length",
          "100"
        ],
        [
          "stepsize",
          "0.02"
        ],
        [
          "temperature",
          "1.0"
        ],
        [
          "top_k",
          "10"
        ],
        [
          "sample",
          "True"
        ],
        [
          "num_iterations",
          "3"
        ],
        [
          "grad_length",
          "10000"
        ],
        [
          "horizon_length",
          "1"
        ],
        [
          "window_length",
          "0"
        ],
        [
          "decay",
          "False"
        ],
        [
          "gamma",
          "1.5"
        ],
        [
          "gm_scale",
          "0.9"
        ],
        [
          "kl_scale",
          "0.01"
        ],
        [
          "verbosity_level",
          "REGULAR"
        ]
      ],
      "pack": {}
    },
    {
      "name": "set_generic_model_params",
      "args": [
        "discrim_weights",
        "discrim_meta"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "run_pplm_example",
      "args": [],
      "kwargs": [
        [
          "pretrained_model",
          "\"gpt2-medium\""
        ],
        [
          "cond_text",
          "\"\""
        ],
        [
          "uncond",
          "False"
        ],
        [
          "num_samples",
          "1"
        ],
        [
          "bag_of_words",
          "None"
        ],
        [
          "discrim",
          "None"
        ],
        [
          "discrim_weights",
          "None"
        ],
        [
          "discrim_meta",
          "None"
        ],
        [
          "class_label",
          "-1"
        ],
        [
          "length",
          "100"
        ],
        [
          "stepsize",
          "0.02"
        ],
        [
          "temperature",
          "1.0"
        ],
        [
          "top_k",
          "10"
        ],
        [
          "sample",
          "True"
        ],
        [
          "num_iterations",
          "3"
        ],
        [
          "grad_length",
          "10000"
        ],
        [
          "horizon_length",
          "1"
        ],
        [
          "window_length",
          "0"
        ],
        [
          "decay",
          "False"
        ],
        [
          "gamma",
          "1.5"
        ],
        [
          "gm_scale",
          "0.9"
        ],
        [
          "kl_scale",
          "0.01"
        ],
        [
          "seed",
          "0"
        ],
        [
          "no_cuda",
          "False"
        ],
        [
          "colorama",
          "False"
        ],
        [
          "verbosity",
          "'regular'"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\pplm\\run_pplm_discrim_train.py": [
    {
      "name": "collate_fn",
      "args": [
        "data"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "cached_collate_fn",
      "args": [
        "data"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "train_epoch",
      "args": [
        "data_loader",
        "discriminator",
        "optimizer"
      ],
      "kwargs": [
        [
          "epoch",
          "0"
        ],
        [
          "log_interval",
          "10"
        ],
        [
          "device",
          "'cpu'"
        ]
      ],
      "pack": {}
    },
    {
      "name": "evaluate_performance",
      "args": [
        "data_loader",
        "discriminator"
      ],
      "kwargs": [
        [
          "device",
          "'cpu'"
        ]
      ],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "input_sentence",
        "model",
        "classes"
      ],
      "kwargs": [
        [
          "cached",
          "False"
        ],
        [
          "device",
          "'cpu'"
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_cached_data_loader",
      "args": [
        "dataset",
        "batch_size",
        "discriminator"
      ],
      "kwargs": [
        [
          "shuffle",
          "False"
        ],
        [
          "device",
          "'cpu'"
        ]
      ],
      "pack": {}
    },
    {
      "name": "train_discriminator",
      "args": [
        "dataset"
      ],
      "kwargs": [
        [
          "dataset_fp",
          "None"
        ],
        [
          "pretrained_model",
          "\"gpt2-medium\""
        ],
        [
          "epochs",
          "10"
        ],
        [
          "batch_size",
          "64"
        ],
        [
          "log_interval",
          "10"
        ],
        [
          "save_model",
          "False"
        ],
        [
          "cached",
          "False"
        ],
        [
          "no_cuda",
          "False"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\pplm\\__init__.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\pplm\\pplm_transformer\\pplm.py": [
    {
      "name": "to_var",
      "args": [
        "x"
      ],
      "kwargs": [
        [
          "requires_grad",
          "False"
        ],
        [
          "volatile",
          "False"
        ],
        [
          "device",
          "\"cuda\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "top_k_filter",
      "args": [
        "logits",
        "k"
      ],
      "kwargs": [
        [
          "probs",
          "False"
        ]
      ],
      "pack": {}
    },
    {
      "name": "perturb_past",
      "args": [
        "past",
        "model",
        "last"
      ],
      "kwargs": [
        [
          "unpert_past",
          "None"
        ],
        [
          "unpert_logits",
          "None"
        ],
        [
          "accumulated_hidden",
          "None"
        ],
        [
          "grad_norms",
          "None"
        ],
        [
          "stepsize",
          "0.01"
        ],
        [
          "one_hot_bows_vectors",
          "None"
        ],
        [
          "classifier",
          "None"
        ],
        [
          "class_label",
          "None"
        ],
        [
          "loss_type",
          "0"
        ],
        [
          "num_iterations",
          "3"
        ],
        [
          "horizon_length",
          "1"
        ],
        [
          "window_length",
          "0"
        ],
        [
          "decay",
          "False"
        ],
        [
          "gamma",
          "1.5"
        ],
        [
          "kl_scale",
          "0.01"
        ],
        [
          "device",
          "\"cuda\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_classifier",
      "args": [
        "name"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "get_bag_of_words_indices",
      "args": [
        "bag_of_words_ids_or_paths"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "full_text_generation",
      "args": [
        "model",
        "tokenizer"
      ],
      "kwargs": [
        [
          "context",
          "None"
        ],
        [
          "num_samples",
          "1"
        ],
        [
          "device",
          "\"cuda\""
        ],
        [
          "bag_of_words",
          "None"
        ],
        [
          "discrim",
          "None"
        ],
        [
          "class_label",
          "None"
        ],
        [
          "length",
          "100"
        ],
        [
          "stepsize",
          "0.02"
        ],
        [
          "temperature",
          "1.0"
        ],
        [
          "top_k",
          "10"
        ],
        [
          "sample",
          "False"
        ],
        [
          "num_iterations",
          "3"
        ],
        [
          "grad_length",
          "10000"
        ],
        [
          "horizon_length",
          "1"
        ],
        [
          "window_length",
          "0"
        ],
        [
          "decay",
          "False"
        ],
        [
          "gamma",
          "1.5"
        ],
        [
          "gm_scale",
          "0.9"
        ],
        [
          "kl_scale",
          "0.01"
        ],
        [
          "repetition_penalty",
          "1.0"
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "generate_text_pplm",
      "args": [
        "model",
        "tokenizer"
      ],
      "kwargs": [
        [
          "context",
          "None"
        ],
        [
          "past",
          "None"
        ],
        [
          "device",
          "\"cuda\""
        ],
        [
          "perturb",
          "True"
        ],
        [
          "bow_indices",
          "None"
        ],
        [
          "classifier",
          "None"
        ],
        [
          "class_label",
          "None"
        ],
        [
          "loss_type",
          "0"
        ],
        [
          "length",
          "100"
        ],
        [
          "stepsize",
          "0.02"
        ],
        [
          "temperature",
          "1.0"
        ],
        [
          "top_k",
          "10"
        ],
        [
          "sample",
          "False"
        ],
        [
          "num_iterations",
          "3"
        ],
        [
          "grad_length",
          "10000"
        ],
        [
          "horizon_length",
          "1"
        ],
        [
          "window_length",
          "0"
        ],
        [
          "decay",
          "False"
        ],
        [
          "gamma",
          "1.5"
        ],
        [
          "gm_scale",
          "0.9"
        ],
        [
          "kl_scale",
          "0.01"
        ],
        [
          "repetition_penalty",
          "1.0"
        ]
      ],
      "pack": {}
    },
    {
      "name": "set_generic_model_params",
      "args": [
        "discrim_weights",
        "discrim_meta"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "run_pplm_example",
      "args": [],
      "kwargs": [
        [
          "pretrained_model",
          "\"gpt2-medium\""
        ],
        [
          "cond_text",
          "\"\""
        ],
        [
          "uncond",
          "False"
        ],
        [
          "num_samples",
          "1"
        ],
        [
          "bag_of_words",
          "None"
        ],
        [
          "discrim",
          "None"
        ],
        [
          "discrim_weights",
          "None"
        ],
        [
          "discrim_meta",
          "None"
        ],
        [
          "class_label",
          "-1"
        ],
        [
          "length",
          "100"
        ],
        [
          "stepsize",
          "0.02"
        ],
        [
          "temperature",
          "1.0"
        ],
        [
          "top_k",
          "10"
        ],
        [
          "sample",
          "False"
        ],
        [
          "num_iterations",
          "3"
        ],
        [
          "grad_length",
          "10000"
        ],
        [
          "horizon_length",
          "1"
        ],
        [
          "window_length",
          "0"
        ],
        [
          "decay",
          "False"
        ],
        [
          "gamma",
          "1.5"
        ],
        [
          "gm_scale",
          "0.9"
        ],
        [
          "kl_scale",
          "0.01"
        ],
        [
          "seed",
          "0"
        ],
        [
          "no_cuda",
          "False"
        ],
        [
          "colorama",
          "False"
        ],
        [
          "repetition_penalty",
          "1.0"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\pplm\\pplm_transformer\\pplm_classification_head.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\pplm\\pplm_transformer\\pplm_train.py": [
    {
      "name": "collate_fn",
      "args": [
        "data"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "cached_collate_fn",
      "args": [
        "data"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "train_epoch",
      "args": [
        "data_loader",
        "discriminator",
        "optimizer"
      ],
      "kwargs": [
        [
          "epoch",
          "0"
        ],
        [
          "log_interval",
          "10"
        ],
        [
          "device",
          "\"cpu\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "evaluate_performance",
      "args": [
        "data_loader",
        "discriminator"
      ],
      "kwargs": [
        [
          "device",
          "\"cpu\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "input_sentence",
        "model",
        "classes"
      ],
      "kwargs": [
        [
          "cached",
          "False"
        ],
        [
          "device",
          "\"cpu\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_cached_data_loader",
      "args": [
        "dataset",
        "batch_size",
        "discriminator"
      ],
      "kwargs": [
        [
          "shuffle",
          "False"
        ],
        [
          "device",
          "\"cpu\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "train_discriminator",
      "args": [
        "dataset"
      ],
      "kwargs": [
        [
          "dataset_fp",
          "None"
        ],
        [
          "pretrained_model",
          "\"gpt2-medium\""
        ],
        [
          "epochs",
          "10"
        ],
        [
          "batch_size",
          "64"
        ],
        [
          "log_interval",
          "10"
        ],
        [
          "save_model",
          "False"
        ],
        [
          "cached",
          "False"
        ],
        [
          "no_cuda",
          "False"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\pplm\\pplm_transformer\\run_pplm.py": [
    {
      "name": "to_var",
      "args": [
        "x"
      ],
      "kwargs": [
        [
          "requires_grad",
          "False"
        ],
        [
          "volatile",
          "False"
        ],
        [
          "device",
          "\"cuda\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "top_k_filter",
      "args": [
        "logits",
        "k"
      ],
      "kwargs": [
        [
          "probs",
          "False"
        ]
      ],
      "pack": {}
    },
    {
      "name": "perturb_past",
      "args": [
        "past",
        "model",
        "last"
      ],
      "kwargs": [
        [
          "unpert_past",
          "None"
        ],
        [
          "unpert_logits",
          "None"
        ],
        [
          "accumulated_hidden",
          "None"
        ],
        [
          "grad_norms",
          "None"
        ],
        [
          "stepsize",
          "0.01"
        ],
        [
          "one_hot_bows_vectors",
          "None"
        ],
        [
          "classifier",
          "None"
        ],
        [
          "class_label",
          "None"
        ],
        [
          "loss_type",
          "0"
        ],
        [
          "num_iterations",
          "3"
        ],
        [
          "horizon_length",
          "1"
        ],
        [
          "window_length",
          "0"
        ],
        [
          "decay",
          "False"
        ],
        [
          "gamma",
          "1.5"
        ],
        [
          "kl_scale",
          "0.01"
        ],
        [
          "device",
          "\"cuda\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_classifier",
      "args": [
        "name"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "get_bag_of_words_indices",
      "args": [
        "bag_of_words_ids_or_paths"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "full_text_generation",
      "args": [
        "model",
        "tokenizer"
      ],
      "kwargs": [
        [
          "context",
          "None"
        ],
        [
          "num_samples",
          "1"
        ],
        [
          "device",
          "\"cuda\""
        ],
        [
          "bag_of_words",
          "None"
        ],
        [
          "discrim",
          "None"
        ],
        [
          "class_label",
          "None"
        ],
        [
          "length",
          "100"
        ],
        [
          "stepsize",
          "0.02"
        ],
        [
          "temperature",
          "1.0"
        ],
        [
          "top_k",
          "10"
        ],
        [
          "sample",
          "False"
        ],
        [
          "num_iterations",
          "3"
        ],
        [
          "grad_length",
          "10000"
        ],
        [
          "horizon_length",
          "1"
        ],
        [
          "window_length",
          "0"
        ],
        [
          "decay",
          "False"
        ],
        [
          "gamma",
          "1.5"
        ],
        [
          "gm_scale",
          "0.9"
        ],
        [
          "kl_scale",
          "0.01"
        ],
        [
          "repetition_penalty",
          "1.0"
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "generate_text_pplm",
      "args": [
        "model",
        "tokenizer"
      ],
      "kwargs": [
        [
          "context",
          "None"
        ],
        [
          "past",
          "None"
        ],
        [
          "device",
          "\"cuda\""
        ],
        [
          "perturb",
          "True"
        ],
        [
          "bow_indices",
          "None"
        ],
        [
          "classifier",
          "None"
        ],
        [
          "class_label",
          "None"
        ],
        [
          "loss_type",
          "0"
        ],
        [
          "length",
          "100"
        ],
        [
          "stepsize",
          "0.02"
        ],
        [
          "temperature",
          "1.0"
        ],
        [
          "top_k",
          "10"
        ],
        [
          "sample",
          "False"
        ],
        [
          "num_iterations",
          "3"
        ],
        [
          "grad_length",
          "10000"
        ],
        [
          "horizon_length",
          "1"
        ],
        [
          "window_length",
          "0"
        ],
        [
          "decay",
          "False"
        ],
        [
          "gamma",
          "1.5"
        ],
        [
          "gm_scale",
          "0.9"
        ],
        [
          "kl_scale",
          "0.01"
        ],
        [
          "repetition_penalty",
          "1.0"
        ]
      ],
      "pack": {}
    },
    {
      "name": "set_generic_model_params",
      "args": [
        "discrim_weights",
        "discrim_meta"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "run_pplm_example",
      "args": [],
      "kwargs": [
        [
          "pretrained_model",
          "\"gpt2-medium\""
        ],
        [
          "cond_text",
          "\"\""
        ],
        [
          "uncond",
          "False"
        ],
        [
          "num_samples",
          "1"
        ],
        [
          "bag_of_words",
          "None"
        ],
        [
          "discrim",
          "None"
        ],
        [
          "discrim_weights",
          "None"
        ],
        [
          "discrim_meta",
          "None"
        ],
        [
          "class_label",
          "-1"
        ],
        [
          "length",
          "100"
        ],
        [
          "stepsize",
          "0.02"
        ],
        [
          "temperature",
          "1.0"
        ],
        [
          "top_k",
          "10"
        ],
        [
          "sample",
          "False"
        ],
        [
          "num_iterations",
          "3"
        ],
        [
          "grad_length",
          "10000"
        ],
        [
          "horizon_length",
          "1"
        ],
        [
          "window_length",
          "0"
        ],
        [
          "decay",
          "False"
        ],
        [
          "gamma",
          "1.5"
        ],
        [
          "gm_scale",
          "0.9"
        ],
        [
          "kl_scale",
          "0.01"
        ],
        [
          "seed",
          "0"
        ],
        [
          "no_cuda",
          "False"
        ],
        [
          "colorama",
          "False"
        ],
        [
          "repetition_penalty",
          "1.0"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\pplm\\pplm_transformer\\run_pplm_discrim_train.py": [
    {
      "name": "collate_fn",
      "args": [
        "data"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "cached_collate_fn",
      "args": [
        "data"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "train_epoch",
      "args": [
        "data_loader",
        "discriminator",
        "optimizer"
      ],
      "kwargs": [
        [
          "epoch",
          "0"
        ],
        [
          "log_interval",
          "10"
        ],
        [
          "device",
          "\"cpu\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "evaluate_performance",
      "args": [
        "data_loader",
        "discriminator"
      ],
      "kwargs": [
        [
          "device",
          "\"cpu\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "input_sentence",
        "model",
        "classes"
      ],
      "kwargs": [
        [
          "cached",
          "False"
        ],
        [
          "device",
          "\"cpu\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_cached_data_loader",
      "args": [
        "dataset",
        "batch_size",
        "discriminator"
      ],
      "kwargs": [
        [
          "shuffle",
          "False"
        ],
        [
          "device",
          "\"cpu\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "train_discriminator",
      "args": [
        "dataset"
      ],
      "kwargs": [
        [
          "dataset_fp",
          "None"
        ],
        [
          "pretrained_model",
          "\"gpt2-medium\""
        ],
        [
          "epochs",
          "10"
        ],
        [
          "batch_size",
          "64"
        ],
        [
          "log_interval",
          "10"
        ],
        [
          "save_model",
          "False"
        ],
        [
          "cached",
          "False"
        ],
        [
          "no_cuda",
          "False"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\pplm\\pplm_transformer\\__init__.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\cli_generate_data.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\network_test.py": [
    {
      "name": "reparametrize",
      "args": [
        "mu",
        "logvar"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "kaiming_init",
      "args": [
        "m"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "normal_init",
      "args": [
        "m",
        "mean",
        "std"
      ],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\util.py": [
    {
      "name": "set_resolution",
      "args": [],
      "kwargs": [
        [
          "resolution",
          "64"
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_resolution",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "generate_random_sin",
      "args": [],
      "kwargs": [
        [
          "n_rand_starts",
          "100"
        ],
        [
          "amplitude",
          "1"
        ],
        [
          "n_pis",
          "4"
        ],
        [
          "omega",
          "1"
        ],
        [
          "step",
          "0.2"
        ]
      ],
      "pack": {}
    },
    {
      "name": "generate_random_cos",
      "args": [],
      "kwargs": [
        [
          "n_rand_starts",
          "1"
        ],
        [
          "a",
          "1"
        ],
        [
          "w",
          "1"
        ],
        [
          "b",
          "0"
        ],
        [
          "c",
          "0"
        ],
        [
          "x_upbound",
          "1"
        ],
        [
          "x_downbound",
          "-1"
        ],
        [
          "step",
          "0.2"
        ]
      ],
      "pack": {}
    },
    {
      "name": "create_sin_2d_array_cv",
      "args": [
        "x",
        "y"
      ],
      "kwargs": [
        [
          "resoltuion",
          "data['resolution']"
        ],
        [
          "amp",
          "data['amplitude']"
        ]
      ],
      "pack": {}
    },
    {
      "name": "plot_save_disk_cv",
      "args": [
        "x",
        "y",
        "filename"
      ],
      "kwargs": [
        [
          "xmax",
          "data['resolution']"
        ],
        [
          "ymax",
          "data['resolution']"
        ],
        [
          "amp",
          "data['amplitude']"
        ]
      ],
      "pack": {}
    },
    {
      "name": "create_sin_2d_array_plt",
      "args": [
        "x",
        "y"
      ],
      "kwargs": [
        [
          "xmax",
          "data['resolution']"
        ],
        [
          "ymax",
          "data['resolution']"
        ],
        [
          "amp",
          "data['amplitude']"
        ]
      ],
      "pack": {}
    },
    {
      "name": "plot_save_disk",
      "args": [
        "x",
        "y",
        "filename"
      ],
      "kwargs": [
        [
          "xmax",
          "data['resolution']"
        ],
        [
          "ymax",
          "data['resolution']"
        ],
        [
          "amp",
          "data['amplitude']"
        ]
      ],
      "pack": {}
    },
    {
      "name": "generate_train_img",
      "args": [
        "folder"
      ],
      "kwargs": [
        [
          "N_type",
          "1"
        ],
        [
          "amax",
          "5"
        ],
        [
          "wmin",
          "5"
        ],
        [
          "wmax",
          "10"
        ],
        [
          "bmin",
          "-2"
        ],
        [
          "bmax",
          "2"
        ],
        [
          "cmin",
          "-2"
        ],
        [
          "cmax",
          "2"
        ],
        [
          "step",
          "0.1"
        ],
        [
          "wfreq",
          "0.5"
        ]
      ],
      "pack": {}
    },
    {
      "name": "generate_train_npz",
      "args": [
        "folder"
      ],
      "kwargs": [
        [
          "N_type",
          "1"
        ],
        [
          "amax",
          "5"
        ],
        [
          "wmin",
          "5"
        ],
        [
          "wmax",
          "10"
        ],
        [
          "bmin",
          "-2"
        ],
        [
          "bmax",
          "2"
        ],
        [
          "cmin",
          "-2"
        ],
        [
          "cmax",
          "2"
        ],
        [
          "step",
          "0.1"
        ],
        [
          "wfreq",
          "0.5"
        ],
        [
          "resoltuion",
          "data['resolution']"
        ]
      ],
      "pack": {}
    },
    {
      "name": "generate_train_npz_cv",
      "args": [
        "folder"
      ],
      "kwargs": [
        [
          "N_type",
          "1"
        ],
        [
          "amax",
          "5"
        ],
        [
          "wmin",
          "5"
        ],
        [
          "wmax",
          "10"
        ],
        [
          "bmin",
          "-2"
        ],
        [
          "bmax",
          "2"
        ],
        [
          "cmin",
          "-2"
        ],
        [
          "cmax",
          "2"
        ],
        [
          "step",
          "0.1"
        ],
        [
          "wfreq",
          "0.5"
        ],
        [
          "resoltuion",
          "data['resolution']"
        ]
      ],
      "pack": {}
    },
    {
      "name": "generate_train_img_cv",
      "args": [
        "folder"
      ],
      "kwargs": [
        [
          "N_type",
          "1"
        ],
        [
          "amax",
          "5"
        ],
        [
          "wmin",
          "5"
        ],
        [
          "wmax",
          "10"
        ],
        [
          "bmin",
          "-2"
        ],
        [
          "bmax",
          "2"
        ],
        [
          "cmin",
          "-2"
        ],
        [
          "cmax",
          "2"
        ],
        [
          "step",
          "0.1"
        ],
        [
          "wfreq",
          "0.5"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\__init__.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\models\\cli.py": [
    {
      "name": "load_argument",
      "args": [],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\models\\__init__.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\models\\Beta_VAE\\dataset.py": [
    {
      "name": "is_power_of_2",
      "args": [
        "num"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "return_data",
      "args": [
        "args"
      ],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\models\\Beta_VAE\\main.py": [
    {
      "name": "main",
      "args": [
        "args"
      ],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\models\\Beta_VAE\\model.py": [
    {
      "name": "reparametrize",
      "args": [
        "mu",
        "logvar"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "kaiming_init",
      "args": [
        "m"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "normal_init",
      "args": [
        "m",
        "mean",
        "std"
      ],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\models\\Beta_VAE\\solver.py": [
    {
      "name": "reconstruction_loss",
      "args": [
        "x",
        "x_recon",
        "distribution"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "kl_divergence",
      "args": [
        "mu",
        "logvar"
      ],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\models\\Beta_VAE\\utils.py": [
    {
      "name": "cuda",
      "args": [
        "tensor",
        "uses_cuda"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "str2bool",
      "args": [
        "v"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "where",
      "args": [
        "cond",
        "x",
        "y"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "grid2gif",
      "args": [
        "image_str",
        "output_gif"
      ],
      "kwargs": [
        [
          "delay",
          "100"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\models\\Beta_VAE\\__init__.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\models\\Beta_VAE_fft\\dataset.py": [
    {
      "name": "is_power_of_2",
      "args": [
        "num"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "return_data",
      "args": [
        "args"
      ],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\models\\Beta_VAE_fft\\main.py": [
    {
      "name": "main",
      "args": [
        "args"
      ],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\models\\Beta_VAE_fft\\model.py": [
    {
      "name": "reparametrize",
      "args": [
        "mu",
        "logvar"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "kaiming_init",
      "args": [
        "m"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "normal_init",
      "args": [
        "m",
        "mean",
        "std"
      ],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\models\\Beta_VAE_fft\\solver.py": [
    {
      "name": "reconstruction_loss",
      "args": [
        "x",
        "x_recon",
        "distribution"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "kl_divergence",
      "args": [
        "mu",
        "logvar"
      ],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\models\\Beta_VAE_fft\\utils.py": [
    {
      "name": "cuda",
      "args": [
        "tensor",
        "uses_cuda"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "str2bool",
      "args": [
        "v"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "where",
      "args": [
        "cond",
        "x",
        "y"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "grid2gif",
      "args": [
        "image_str",
        "output_gif"
      ],
      "kwargs": [
        [
          "delay",
          "100"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tch\\vae\\models\\Beta_VAE_fft\\__init__.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\10_encoder_vanilla.py": [
    {
      "name": "reducedimension",
      "args": [
        "input_"
      ],
      "kwargs": [
        [
          "dimension",
          "2"
        ],
        [
          "learning_rate",
          "0.01"
        ],
        [
          "hidden_layer",
          "256"
        ],
        [
          "epoch",
          "20"
        ]
      ],
      "pack": {}
    },
    {
      "name": "fit",
      "args": [
        "model",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "filename",
          "\"dataset/GOOG-year.csv\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\11_bidirectional_vanilla.py": [
    {
      "name": "fit",
      "args": [
        "model",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "data_frame"
      ],
      "kwargs": [
        [
          "get_hidden_state",
          "False"
        ],
        [
          "init_value_forward",
          "None"
        ],
        [
          "init_value_backward",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "filename",
          "\"dataset/GOOG-year.csv\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\12_vanilla_2path.py": [
    {
      "name": "fit",
      "args": [
        "model",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "data_frame"
      ],
      "kwargs": [
        [
          "get_hidden_state",
          "False"
        ],
        [
          "init_value_forward",
          "None"
        ],
        [
          "init_value_backward",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "filename",
          "\"dataset/GOOG-year.csv\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\13_lstm_seq2seq.py": [
    {
      "name": "fit",
      "args": [
        "model",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "data_frame"
      ],
      "kwargs": [
        [
          "get_hidden_state",
          "False"
        ],
        [
          "init_value",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "filename",
          "\"dataset/GOOG-year.csv\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\14_lstm_attention.py": [
    {
      "name": "fit",
      "args": [
        "model",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "data_frame"
      ],
      "kwargs": [
        [
          "get_hidden_state",
          "False"
        ],
        [
          "init_value",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "filename",
          "\"dataset/GOOG-year.csv\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\15_lstm_seq2seq_attention.py": [
    {
      "name": "fit",
      "args": [
        "model",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "data_frame"
      ],
      "kwargs": [
        [
          "get_hidden_state",
          "False"
        ],
        [
          "init_value",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "filename",
          "\"dataset/GOOG-year.csv\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\16_lstm_seq2seq_bidirectional.py": [
    {
      "name": "fit",
      "args": [
        "model",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "data_frame"
      ],
      "kwargs": [
        [
          "get_hidden_state",
          "False"
        ],
        [
          "init_value_forward",
          "None"
        ],
        [
          "init_value_backward",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "filename",
          "\"dataset/GOOG-year.csv\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\17_lstm_seq2seq_bidirectional_attention.py": [
    {
      "name": "fit",
      "args": [
        "model",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "data_frame"
      ],
      "kwargs": [
        [
          "get_hidden_state",
          "False"
        ],
        [
          "init_value_forward",
          "None"
        ],
        [
          "init_value_backward",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "filename",
          "\"dataset/GOOG-year.csv\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\18_lstm_attention_scaleddot.py": [
    {
      "name": "fit",
      "args": [
        "model",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "data_frame"
      ],
      "kwargs": [
        [
          "get_hidden_state",
          "False"
        ],
        [
          "init_value",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "filename",
          "\"dataset/GOOG-year.csv\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\19_lstm_dilated.py": [
    {
      "name": "contruct_cells",
      "args": [
        "hidden_structs"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "rnn_reformat",
      "args": [
        "x",
        "input_dims",
        "n_steps"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "dilated_rnn",
      "args": [
        "cell",
        "inputs",
        "rate",
        "states"
      ],
      "kwargs": [
        [
          "scope",
          "\"default\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "multi_dilated_rnn",
      "args": [
        "cells",
        "inputs",
        "dilations",
        "states"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "fit",
      "args": [
        "model",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "data_frame"
      ],
      "kwargs": [
        [
          "get_hidden_state",
          "False"
        ],
        [
          "init_value",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "filename",
          "\"dataset/GOOG-year.csv\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\1_lstm.py": [
    {
      "name": "fit",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwarg"
      }
    },
    {
      "name": "fit_metrics",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "sess",
          "None"
        ],
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "metrics",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "sess",
          "None"
        ],
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "sess",
          "None"
        ],
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ],
        [
          "get_hidden_state",
          "False"
        ],
        [
          "init_value",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "reset_model",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "save",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "session",
          "None"
        ],
        [
          "save_pars",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "load",
      "args": [],
      "kwargs": [
        [
          "load_pars",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_dataset",
      "args": [],
      "kwargs": [
        [
          "data_pars",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_params",
      "args": [],
      "kwargs": [
        [
          "param_pars",
          "{}"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/\""
        ],
        [
          "pars_choice",
          "\"test01\""
        ],
        [
          "config_mode",
          "\"test\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\20_only_attention.py": [
    {
      "name": "sinusoidal_positional_encoding",
      "args": [
        "inputs",
        "num_units"
      ],
      "kwargs": [
        [
          "zero_pad",
          "False"
        ],
        [
          "scale",
          "False"
        ]
      ],
      "pack": {}
    },
    {
      "name": "fit",
      "args": [
        "model",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "filename",
          "\"dataset/GOOG-year.csv\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\21_multihead_attention.py": [
    {
      "name": "embed_seq",
      "args": [
        "inputs"
      ],
      "kwargs": [
        [
          "vocab_size",
          "None"
        ],
        [
          "embed_dim",
          "None"
        ],
        [
          "zero_pad",
          "False"
        ],
        [
          "scale",
          "False"
        ]
      ],
      "pack": {}
    },
    {
      "name": "learned_positional_encoding",
      "args": [
        "inputs",
        "embed_dim"
      ],
      "kwargs": [
        [
          "zero_pad",
          "False"
        ],
        [
          "scale",
          "False"
        ]
      ],
      "pack": {}
    },
    {
      "name": "layer_norm",
      "args": [
        "inputs"
      ],
      "kwargs": [
        [
          "epsilon",
          "1e-8"
        ]
      ],
      "pack": {}
    },
    {
      "name": "pointwise_feedforward",
      "args": [
        "inputs"
      ],
      "kwargs": [
        [
          "num_units",
          "[None, None]"
        ],
        [
          "activation",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "fit",
      "args": [
        "model",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "filename",
          "\"dataset/GOOG-year.csv\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\22_lstm_bahdanau.py": [
    {
      "name": "fit",
      "args": [
        "model",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "data_frame"
      ],
      "kwargs": [
        [
          "get_hidden_state",
          "False"
        ],
        [
          "init_value",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "filename",
          "\"dataset/GOOG-year.csv\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\23_lstm_luong.py": [
    {
      "name": "fit",
      "args": [
        "model",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "data_frame"
      ],
      "kwargs": [
        [
          "get_hidden_state",
          "False"
        ],
        [
          "init_value",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "filename",
          "\"dataset/GOOG-year.csv\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\24_lstm_luong_bahdanau.py": [
    {
      "name": "fit",
      "args": [
        "model",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "data_frame"
      ],
      "kwargs": [
        [
          "get_hidden_state",
          "False"
        ],
        [
          "init_value",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "filename",
          "\"dataset/GOOG-year.csv\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\25_dnc.py": [
    {
      "name": "fit",
      "args": [
        "model",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "data_frame"
      ],
      "kwargs": [
        [
          "get_hidden_state",
          "False"
        ],
        [
          "init_value",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "filename",
          "\"dataset/GOOG-year.csv\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\26_lstm_residual.py": [
    {
      "name": "fit",
      "args": [
        "model",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "data_frame"
      ],
      "kwargs": [
        [
          "get_hidden_state",
          "False"
        ],
        [
          "init_value",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "filename",
          "\"dataset/GOOG-year.csv\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\27_byte_net.py": [
    {
      "name": "layer_normalization",
      "args": [
        "x"
      ],
      "kwargs": [
        [
          "epsilon",
          "1e-8"
        ]
      ],
      "pack": {}
    },
    {
      "name": "conv1d",
      "args": [
        "input_",
        "output_channels"
      ],
      "kwargs": [
        [
          "dilation",
          "1"
        ],
        [
          "filter_width",
          "1"
        ],
        [
          "causal",
          "False"
        ]
      ],
      "pack": {}
    },
    {
      "name": "bytenet_residual_block",
      "args": [
        "input_",
        "dilation",
        "layer_no",
        "residual_channels",
        "filter_width"
      ],
      "kwargs": [
        [
          "causal",
          "True"
        ]
      ],
      "pack": {}
    },
    {
      "name": "fit",
      "args": [
        "model",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "filename",
          "\"dataset/GOOG-year.csv\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\28_attention_is_all_you_need.py": [
    {
      "name": "layer_norm",
      "args": [
        "inputs"
      ],
      "kwargs": [
        [
          "epsilon",
          "1e-8"
        ]
      ],
      "pack": {}
    },
    {
      "name": "multihead_attn",
      "args": [
        "queries",
        "keys",
        "q_masks",
        "k_masks",
        "future_binding",
        "num_units",
        "num_heads"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "pointwise_feedforward",
      "args": [
        "inputs",
        "hidden_units"
      ],
      "kwargs": [
        [
          "activation",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "learned_position_encoding",
      "args": [
        "inputs",
        "mask",
        "embed_dim"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "sinusoidal_position_encoding",
      "args": [
        "inputs",
        "mask",
        "repr_dim"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "label_smoothing",
      "args": [
        "inputs"
      ],
      "kwargs": [
        [
          "epsilon",
          "0.1"
        ]
      ],
      "pack": {}
    },
    {
      "name": "fit",
      "args": [
        "model",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "filename",
          "\"dataset/GOOG-year.csv\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\29_fairseq.py": [
    {
      "name": "encoder_block",
      "args": [
        "inp",
        "n_hidden",
        "filter_size"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "decoder_block",
      "args": [
        "inp",
        "n_hidden",
        "filter_size"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "glu",
      "args": [
        "x"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "layer",
      "args": [
        "inp",
        "conv_block",
        "kernel_width",
        "n_hidden"
      ],
      "kwargs": [
        [
          "residual",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "fit",
      "args": [
        "model",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "filename",
          "\"dataset/GOOG-year.csv\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\2_encoder_lstm.py": [
    {
      "name": "reducedimension",
      "args": [
        "input_"
      ],
      "kwargs": [
        [
          "dimension",
          "2"
        ],
        [
          "learning_rate",
          "0.01"
        ],
        [
          "hidden_layer",
          "256"
        ],
        [
          "epoch",
          "20"
        ],
        [
          "sess",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "fit",
      "args": [
        "model",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "filename",
          "\"dataset/GOOG-year.csv\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\3_bidirectional_lstm.py": [
    {
      "name": "fit",
      "args": [
        "model",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "data_frame"
      ],
      "kwargs": [
        [
          "get_hidden_state",
          "False"
        ],
        [
          "init_value_forward",
          "None"
        ],
        [
          "init_value_backward",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "filename",
          "\"dataset/GOOG-year.csv\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\4_lstm_2path.py": [
    {
      "name": "fit",
      "args": [
        "model",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "data_frame"
      ],
      "kwargs": [
        [
          "get_hidden_state",
          "False"
        ],
        [
          "init_value_forward",
          "None"
        ],
        [
          "init_value_backward",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "filename",
          "\"dataset/GOOG-year.csv\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\50lstm attention.py": [
    {
      "name": "softmax_activation",
      "args": [
        "x"
      ],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\5_gru.py": [
    {
      "name": "fit",
      "args": [
        "model",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "data_frame"
      ],
      "kwargs": [
        [
          "get_hidden_state",
          "False"
        ],
        [
          "init_value",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "filename",
          "\"dataset/GOOG-year.csv\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\6_encoder_gru.py": [
    {
      "name": "reducedimension",
      "args": [
        "input_"
      ],
      "kwargs": [
        [
          "dimension",
          "2"
        ],
        [
          "learning_rate",
          "0.01"
        ],
        [
          "hidden_layer",
          "256"
        ],
        [
          "epoch",
          "20"
        ]
      ],
      "pack": {}
    },
    {
      "name": "fit",
      "args": [
        "model",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "filename",
          "\"dataset/GOOG-year.csv\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\7_bidirectional_gru.py": [
    {
      "name": "fit",
      "args": [
        "model",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "data_frame"
      ],
      "kwargs": [
        [
          "get_hidden_state",
          "False"
        ],
        [
          "init_value_forward",
          "None"
        ],
        [
          "init_value_backward",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "filename",
          "\"dataset/GOOG-year.csv\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\8_gru_2path.py": [
    {
      "name": "fit",
      "args": [
        "model",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "data_frame"
      ],
      "kwargs": [
        [
          "get_hidden_state",
          "False"
        ],
        [
          "init_value_forward",
          "None"
        ],
        [
          "init_value_backward",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "filename",
          "\"dataset/GOOG-year.csv\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\9_vanilla.py": [
    {
      "name": "fit",
      "args": [
        "model",
        "data_frame"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "data_frame"
      ],
      "kwargs": [
        [
          "get_hidden_state",
          "False"
        ],
        [
          "init_value",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "filename",
          "\"dataset/GOOG-year.csv\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\access.py": [
    {
      "name": "_erase_and_write",
      "args": [
        "memory",
        "address",
        "reset_weights",
        "values"
      ],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\addressing.py": [
    {
      "name": "_vector_norms",
      "args": [
        "m"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "weighted_softmax",
      "args": [
        "activations",
        "strengths",
        "strengths_op"
      ],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\autoencoder.py": [
    {
      "name": "reducedimension",
      "args": [
        "input_"
      ],
      "kwargs": [
        [
          "dimension",
          "2"
        ],
        [
          "learning_rate",
          "0.01"
        ],
        [
          "hidden_layer",
          "256"
        ],
        [
          "epoch",
          "20"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\dnc.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\util.py": [
    {
      "name": "os_module_path",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "os_file_path",
      "args": [
        "data_path"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "os_package_root_path",
      "args": [
        "filepath"
      ],
      "kwargs": [
        [
          "sublevel",
          "0"
        ],
        [
          "path_add",
          "\"\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "batch_invert_permutation",
      "args": [
        "permutations"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "batch_gather",
      "args": [
        "values",
        "indices"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "one_hot",
      "args": [
        "length",
        "index"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "set_root_dir",
      "args": [],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\__init__.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\deepar\\settings.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\deepar\\__init__.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\deepar\\dataset\\time_series.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\deepar\\dataset\\__init__.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\deepar\\model\\layers.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\deepar\\model\\loss.py": [
    {
      "name": "gaussian_likelihood",
      "args": [
        "sigma"
      ],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\deepar\\model\\lstm.py": [
    {
      "name": "ts_generator",
      "args": [
        "ts_obj",
        "n_steps"
      ],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\deepar\\model\\__init__.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\deepar\\utils\\__init__.py": [
    {
      "name": "set_seed_and_reset_graph",
      "args": [],
      "kwargs": [
        [
          "seed",
          "42"
        ]
      ],
      "pack": {}
    },
    {
      "name": "clear_keras_session",
      "args": [],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\0_template_rl.py": [
    {
      "name": "val",
      "args": [
        "x",
        "y"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "fit",
      "args": [
        "model",
        "df",
        "do_action"
      ],
      "kwargs": [
        [
          "state_initial",
          "None"
        ],
        [
          "reward_initial",
          "None"
        ],
        [
          "params",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "df"
      ],
      "kwargs": [
        [
          "do_action",
          "None"
        ],
        [
          "params",
          "params"
        ]
      ],
      "pack": {}
    },
    {
      "name": "do_action_example",
      "args": [
        "action_dict"
      ],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\1.turtle-agent.py": [
    {
      "name": "buy_stock",
      "args": [
        "real_movement",
        "signal"
      ],
      "kwargs": [
        [
          "initial_money",
          "10000"
        ],
        [
          "max_buy",
          "20"
        ],
        [
          "max_sell",
          "20"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\10.duel-q-learning-agent.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\11.double-duel-q-learning-agent.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\12.duel-recurrent-q-learning-agent.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\13.double-duel-recurrent-q-learning-agent.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\14.actor-critic-agent.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\15.actor-critic-duel-agent.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\16.actor-critic-recurrent-agent.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\17.actor-critic-duel-recurrent-agent.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\18.curiosity-q-learning-agent.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\19.recurrent-curiosity-q-learning-agent.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\2.moving-average-agent.py": [
    {
      "name": "buy_stock",
      "args": [
        "real_movement",
        "signal"
      ],
      "kwargs": [
        [
          "initial_money",
          "10000"
        ],
        [
          "max_buy",
          "20"
        ],
        [
          "max_sell",
          "20"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\20.duel-curiosity-q-learning-agent.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\21.neuro-evolution-agent.py": [
    {
      "name": "relu",
      "args": [
        "X"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "softmax",
      "args": [
        "X"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "feed_forward",
      "args": [
        "X",
        "nets"
      ],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\22.neuro-evolution-novelty-search-agent.py": [
    {
      "name": "relu",
      "args": [
        "X"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "softmax",
      "args": [
        "X"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "feed_forward",
      "args": [
        "X",
        "nets"
      ],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\3.signal-rolling-agent.py": [
    {
      "name": "buy_stock",
      "args": [
        "real_movement"
      ],
      "kwargs": [
        [
          "delay",
          "5"
        ],
        [
          "initial_state",
          "1"
        ],
        [
          "initial_money",
          "10000"
        ],
        [
          "max_buy",
          "20"
        ],
        [
          "max_sell",
          "20"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\4.policy-gradient-agent_old.py": [
    {
      "name": "fit",
      "args": [
        "model",
        "df",
        "do_action"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "df",
        "do_action"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "do_action_example",
      "args": [
        "action_dict"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "filename",
          "'dataset/GOOG-year.csv'"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\4_policy-gradient-agent.py": [
    {
      "name": "fit",
      "args": [
        "model",
        "dftrain"
      ],
      "kwargs": [
        [
          "params",
          "{}"
        ]
      ],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "dftest"
      ],
      "kwargs": [
        [
          "params",
          "{}"
        ]
      ],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "filename",
          "'dataset/GOOG-year.csv'"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\5_q-learning-agent.py": [
    {
      "name": "fit",
      "args": [
        "model",
        "dftrain"
      ],
      "kwargs": [
        [
          "params",
          "{}"
        ]
      ],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "dftest"
      ],
      "kwargs": [
        [
          "params",
          "{}"
        ]
      ],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "filename",
          "'../dataset/GOOG-year.csv'"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\6_evolution-strategy-agent.py": [
    {
      "name": "get_imports",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "fit",
      "args": [
        "model",
        "dftrain"
      ],
      "kwargs": [
        [
          "params",
          "{}"
        ]
      ],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "dftest"
      ],
      "kwargs": [
        [
          "params",
          "{}"
        ]
      ],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "filename",
          "'../dataset/GOOG-year.csv'"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\7.double-q-learning-agent.py": [
    {
      "name": "fit",
      "args": [
        "model",
        "dftrain"
      ],
      "kwargs": [
        [
          "params",
          "{}"
        ]
      ],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess",
        "dftest"
      ],
      "kwargs": [
        [
          "params",
          "{}"
        ]
      ],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "filename",
          "'../dataset/GOOG-year.csv'"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\8.recurrent-q-learning-agent.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\9.double-recurrent-q-learning-agent.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\updated-NES-google.py": [
    {
      "name": "f",
      "args": [
        "w"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "get_state",
      "args": [
        "data",
        "t",
        "n"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "act",
      "args": [
        "model",
        "sequence"
      ],
      "kwargs": [],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\model_tf\\rl\\__init__.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\preprocess\\__init__.py": [],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\template\\00_template_keras.py": [
    {
      "name": "os_package_root_path",
      "args": [
        "filepath"
      ],
      "kwargs": [
        [
          "sublevel",
          "0"
        ],
        [
          "path_add",
          "\"\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "log",
      "args": [],
      "kwargs": [
        [
          "n",
          "0"
        ],
        [
          "m",
          "1"
        ]
      ],
      "pack": {
        "args": "s"
      }
    },
    {
      "name": "_preprocess_XXXX",
      "args": [
        "df"
      ],
      "kwargs": [],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "get_dataset",
      "args": [],
      "kwargs": [],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "fit",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "session",
          "None"
        ],
        [
          "data_pars",
          "None"
        ],
        [
          "model_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "predict",
      "args": [
        "model",
        "data_pars"
      ],
      "kwargs": [
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "metrics",
      "args": [
        "ypred",
        "data_pars"
      ],
      "kwargs": [
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "reset_model",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "save",
      "args": [
        "model",
        "path"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "load",
      "args": [
        "path"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "path_setup",
      "args": [],
      "kwargs": [
        [
          "out_folder",
          "\"\""
        ],
        [
          "sublevel",
          "0"
        ],
        [
          "data_path",
          "\"dataset/\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_params",
      "args": [],
      "kwargs": [
        [
          "choice",
          "0"
        ],
        [
          "data_path",
          "\"dataset/\""
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/\""
        ],
        [
          "pars_choice",
          "0"
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\template\\model_xxx.py": [
    {
      "name": "fit",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "fit_metrics",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "predict",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "sess",
          "None"
        ],
        [
          "data_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "reset_model",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "save",
      "args": [],
      "kwargs": [
        [
          "model",
          "None"
        ],
        [
          "session",
          "None"
        ],
        [
          "save_pars",
          "{}"
        ]
      ],
      "pack": {}
    },
    {
      "name": "load",
      "args": [],
      "kwargs": [
        [
          "load_pars",
          "{}"
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_dataset",
      "args": [],
      "kwargs": [
        [
          "data_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "get_params",
      "args": [],
      "kwargs": [
        [
          "param_pars",
          "{}"
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/\""
        ],
        [
          "pars_choice",
          "\"json\""
        ],
        [
          "config_mode",
          "\"test\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\template\\zarchive\\gluonts_model.py": [
    {
      "name": "get_params",
      "args": [],
      "kwargs": [
        [
          "choice",
          "0"
        ],
        [
          "data_path",
          "\"dataset/\""
        ]
      ],
      "pack": {
        "kwargs": "kw"
      }
    },
    {
      "name": "test2",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/\""
        ],
        [
          "out_path",
          "\"GLUON/gluon.png\""
        ],
        [
          "reset",
          "True"
        ]
      ],
      "pack": {}
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/\""
        ]
      ],
      "pack": {}
    }
  ],
  "D:\\_devs\\Python01\\gitdev\\mlmodels\\build\\lib\\mlmodels\\template\\zarchive\\model_tf_sequential.py": [
    {
      "name": "os_module_path",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "os_file_path",
      "args": [
        "data_path"
      ],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "os_package_root_path",
      "args": [
        "filepath"
      ],
      "kwargs": [
        [
          "sublevel",
          "0"
        ],
        [
          "path_add",
          "\"\""
        ]
      ],
      "pack": {}
    },
    {
      "name": "log",
      "args": [],
      "kwargs": [
        [
          "n",
          "0"
        ],
        [
          "m",
          "1"
        ]
      ],
      "pack": {
        "args": "s"
      }
    },
    {
      "name": "fit",
      "args": [
        "model",
        "data_pars"
      ],
      "kwargs": [
        [
          "out_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "metrics",
      "args": [
        "model"
      ],
      "kwargs": [
        [
          "sess",
          "None"
        ],
        [
          "data_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "predict",
      "args": [
        "model",
        "sess"
      ],
      "kwargs": [
        [
          "data_pars",
          "None"
        ],
        [
          "out_pars",
          "None"
        ],
        [
          "compute_pars",
          "None"
        ],
        [
          "get_hidden_state",
          "False"
        ],
        [
          "init_value",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "reset_model",
      "args": [],
      "kwargs": [],
      "pack": {}
    },
    {
      "name": "get_dataset",
      "args": [],
      "kwargs": [
        [
          "data_pars",
          "None"
        ]
      ],
      "pack": {}
    },
    {
      "name": "get_pars",
      "args": [],
      "kwargs": [
        [
          "choice",
          "\"test\""
        ]
      ],
      "pack": {
        "kwargs": "kwargs"
      }
    },
    {
      "name": "test",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/GOOG-year.csv\""
        ],
        [
          "out_path",
          "\"\""
        ],
        [
          "reset",
          "True"
        ]
      ],
      "pack": {}
    },
    {
      "name": "test2",
      "args": [],
      "kwargs": [
        [
          "data_path",
          "\"dataset/GOOG-year.csv\""
        ]
      ],
      "pack": {}
    }
  ]
}